import os
import os.path # for getting environmental variables on the system
import subprocess


# Importing OclBuilder, this is not required for ocl=0
# If you want to build just the Fortran code without OpenCL support, use SConstruct.F95_only
import OclBuilder
from OclBuilder import initOcl

# Adding path to includes for kernels
CWD= os.environ['PWD']
OclBuilder.kopts='-cl-mad-enable -cl-fast-relaxed-math -I'+CWD+'/../OpenCL/Kernels/'

from OclBuilder import getOpt
OclBuilder.opts=Variables()
envF=Environment(useF=1)
envF=Environment(ENV={'PATH' : os.environ['PATH']})


# Basically, it's Linux unless it's OS X
if os.uname()[0] == "Darwin":
        OSX=1
        OSFLAG='-DOSX'
else:
        OSX=0
        OSFLAG='-D__LINUX__'

print "MACROS are read from ./macros.h"
macro_source_str = getOpt('m','Macros','./macros.h')
macro_sources = macro_source_str.split(",")
MACROS = []
for macro_source in macro_sources:
    macros_str =  subprocess.check_output( ['perl', '-e', '@ls=<>;$macros_str=join(\" \",map {$_=~s/\n//;s/^\s*//;s/\s*$//;s/.define\s*/-D/;s/.undef\s*/-U/;s/\s+/=/;$_} @ls);print $macros_str',macro_source])
    MACROS += macros_str.split()

# Then build the rest of the code
verbose = getOpt('v','Verbose','1')
VERBOSE = '-DVERBOSE'
if verbose == '0':
        VERBOSE = ''
envF['F95']=os.environ['FC']
envF['LINK']=os.environ['FC']

defs=getOpt('D','Defines',None)
defflags=[]
if defs!=None:
        deflist=defs.split(',')
        defflags=map (lambda s: '-D'+s, deflist)  
OTHER_MACROS = defflags

# MPI specific build config
WITH_MPI=''
PROC_PER_ROW=''
PROC_PER_COL=''
USE_NETCDF_OUTPUT=''
if '-DUSE_NETCDF_OUTPUT' in MACROS:
    USE_NETCDF_OUTPUT = '-DUSE_NETCDF_OUTPUT' 
    
with_mpi = getOpt('mpi','Use MPI','0')
with_nesting = getOpt('nested','Nested Grid','0')

# WV: I observe that the SOR is never actually converging anyway, so no point in computing the global error
#NO_GLOBAL_SOR='-DNO_GLOBAL_SOR'

if with_mpi == '1':
    procPerRow= getOpt('procPerRow', 'Processes Per Row', '2')
    procPerCol= getOpt('procPerCol', 'Processes Per Col', '2')
    PROC_PER_ROW = '-DPROC_PER_ROW=' + procPerRow
    PROC_PER_COL = '-DPROC_PER_COL=' + procPerCol
    WITH_MPI = '-DMPI'
    if OSX==0:    
        envF['LINK']=envF['F95']
        if USE_NETCDF_OUTPUT != '':
            envF.Append(LIBS=['netcdf']) # for version less than 4.2.0
    else:
        envF['F95']=os.environ['FC']
        envF['LINK']=os.environ['FC']
        if USE_NETCDF_OUTPUT != '':
            envF.Append(LIBS=['mpi_mpifh','netcdff']) # for version more than and equal to 4.2.0 
else:
    if OSX==1:    
        envF['F95']=os.environ['FC']
        envF['LINK']=os.environ['FC']
        if USE_NETCDF_OUTPUT != '':
            envF.Append(LIBS=['netcdff']) # for version more than and equal to 4.2.0 

NESTED_LES=''
if with_nesting=='1':
	NESTED_LES='-DNESTED_LES'
		
GR_DEBUG=''
gr_debug = getOpt('gr_debug', 'GR Debug', '0')
if gr_debug == '1':
    GR_DEBUG='-DGR_DEBUG'

WV_DEBUG=''
wv_debug = getOpt('wv_debug', 'WV Debug', '0')
if wv_debug =='1':
    WV_DEBUG='-DWV_DEBUG'

MPI_NEW_WV=''
mpi_new_wv = getOpt('mpi_new_wv', 'New MPI code (WV)', '0')
if mpi_new_wv =='1':
    MPI_NEW_WV='-DMPI_NEW_WV'

#WV_TEST = '-DWV_TEST'
#WV_DEBUG_MPI = '' #'-DWV_DEBUG_MPI'
#NO_FILE_IO='-DNO_FILE_IO'
#ICAL = '-DICAL=0'
#IFBF='-DIFBF=1'
#IANIME='-DIANIME=1'
#IADAM='-DIADAM=0'
#FFLAGS  = [USE_NETCDF_OUTPUT, WITH_MPI, NESTED_LES,NO_GLOBAL_SOR, GR_DEBUG, WV_DEBUG,MPI_NEW_WV,WV_TEST,WV_DEBUG_MPI, PROC_PER_ROW, PROC_PER_COL, WITH_OCL, NO_FILE_IO, ICAL, IFBF,IANIME, IADAM,VERBOSE,TIMINGS,OTHER_MACROS]
FFLAGS  = [WITH_MPI, NESTED_LES, GR_DEBUG, PROC_PER_ROW, PROC_PER_COL, VERBOSE, OTHER_MACROS] + MACROS


#    FFLAGS += ['-cpp', '-O', '-Wall','-ffree-form', '-ffree-line-length-none','-fconvert=big-endian', '-mcmodel=medium' ]
#     FFLAGS += ['-cpp', '-O', '-Wall','-ffree-form', '-ffree-line-length-none','-fconvert=big-endian', '-mcmodel=medium', '-fno-range-check','-fbounds-check','-Wuninitialized','-ffpe-trap=invalid,zero,overflow' ]
#    FFLAGS += ['-cpp','-Ofast', '-m64', '-Wall','-ffree-form', '-ffree-line-length-none','-fconvert=big-endian' ]
FFLAGS += ['-cpp', '-O','-Wall','-Wno-unused','-ffree-form', '-ffree-line-length-none','-fconvert=big-endian','-fbounds-check' ,'-mcmodel=medium','-mlarge-data-threshold=0']

#-- intel compiler ifort
#     FFLAGS += [ '-O', '-convert', 'big_endian', '-shared-intel','-fpp', '-free','-Tf' ] # Order matters, -Tf must come last!
#-- PGI compiler pgfort
#     FFLAGS += ['-cpp','-Mipa=fast','-fast','-m64','-Mfree','-mcmodel=medium'])


fsources = []

if with_mpi == '1':
    fsources += ['./communication_common.f95', './communication_helper.f95',  './communication_helper_mpi.f95', './communication_helper_real.f95']
    #'./communication_helper_integer.f95',
    
if with_nesting == '1' and with_mpi == '1':
	fsources += ['./nesting_support.f95']
	
if USE_NETCDF_OUTPUT != '':
    fsources += ['./module_LES_write_netcdf.f95']

fsources+= ['./fortran_helper.f95', './anime.f95','./aveflow.f95','./bondFG.f95','./bondv1.f95','./boundp.f95','./boundsm.f95','./vel2.f95','./velFG.f95','./feedbf.f95','./feedbfm.f95','./les.f95','./grid.f95','./ifdata.f95','./init.f95','./main.f95','./set.f95','./timdata.f95','./common_sn.f95','./params_common_sn.f95']

ffsources = fsources + ['./adam.f95','./press.f95','./velnw.f95']


if OSX == 1:
# Assuming MacPorts
    INCLPATH = ['/opt/local/include']
    LIBPATH = ['/opt/local/lib']
    if with_mpi == '1':
#        INCLPATH += ['/opt/local/include/openmpi-gcc49/','/opt/local/lib/openmpi-gcc49/']
#        LIBPATH += ['/opt/local/lib/openmpi-gcc49/']
        INCLPATH += ['/opt/local/include/mpich-gcc7/','/opt/local/lib/mpich-gcc7/']
        LIBPATH += ['/opt/local/lib/mpich-gcc7/']
        
else:
# test for devtoolset-2 ... so better use a var $DEVTOOLSETROOT?
    if os.path.exists('/opt/rh/devtoolset-2'):
        INCLPATH = ['/opt/rh/devtoolset-2/root/usr/include' ]
        LIBPATH = '/opt/rh/devtoolset-2/root/usr/lib'
    else:
# reasonable default ...
  	NETCDF = os.environ.get('NETCDF_DIR')
	INCLPATH = [NETCDF + '/include']
	LIBPATH  = [NETCDF + '/lib']
#MPICH = os.environ.get('MPICH')
#INCLPATH = [NETCDF + '/include', MPICH + '/include']
#LIBPATH = [NETCDF + '/lib', MPICH + '/lib']
#        INCLPATH = [NETCDF + '/include', '/usr/include']
#        LIBPATH  = [NETCDF + '/lib', '/usr/local/lib']
#        INCLPATH = ['/usr/local/include', '/usr/include' ]
#        LIBPATH = '/usr/local/lib'
#INCLPATH += ['../OpenCL','../OpenCL/Wrappers']

#if OSX==1:
#    envF['LINKFLAGS']=['-Wl,-stack_size,0x40000000'] # Give OS X 1G stack
envF.Append(F95FLAGS=FFLAGS)
envF.Append(F95PATH=['.',INCLPATH])
envF.Append(LIBPATH=['.',LIBPATH])
if OSX != 1:
    envF.Append(LIBS=['m'])

mpi_ext=''
if with_mpi == '1':
    mpi_ext='_mpi'

prog = envF.Program('les_main'+mpi_ext,ffsources)
