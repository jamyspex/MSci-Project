
================================================================================
F4: Finite-element Fortran for FPGAs
This compiler allows Fortran finite element codes to be compiled
for execution on FPGA devices via OpenCL
================================================================================

The following command line values were parsed:

Files with subroutines to be parallelised:
	adam
	bondv1
	feedbf
	les
	press
	velfg
	velnw
File containing main subroutine: 
	main.f95
Source directory:
	./src
Fixed form: False
Loop fusion bound: Nothing
CPP Defines: WV_OPENCL, WV_NEW, WV_NEW_VELFG, NO_GLOBAL_SOR, INLINE_BOUND_CALCS, WV_TEST, SOR, TWINNED_BUFFER, NO_IO, IFBF=1, IADAM=0, 
CPP Excludes:

"Executing compiler main..."
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/main_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/init_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbfm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/grid_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/set_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/aveflow_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/ifdata_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondv1_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundsm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundp_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbfm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/velnw_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondv1_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundsm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/press_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondFG_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundp_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/adam_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
Parsing ./src/main.f95
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/adam_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundsm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/press_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondFG_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundp_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/velnw_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
Parsing ./src/adam.f95
Parsing ./src/feedbf.f95
Parsing ./src/les.f95
Parsing ./src/press.f95
Parsing ./src/velnw.f95
Writing to consts/adam.f95
Writing to consts/feedbf.f95
Writing to consts/les.f95
Writing to consts/main.f95
Writing to consts/press.f95
Writing to consts/velnw.f95
Writing to scratch/adam.f95
Writing to scratch/feedbf.f95
Writing to scratch/les.f95
Writing to scratch/main.f95
Writing to scratch/press.f95
Writing to scratch/velnw.f95
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/main_tmp.f95 | grep -v -E '^\s*$' 
Parsing scratch/main.f95
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/adam_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/press_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DSOR -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/velnw_tmp.f95 | grep -v -E '^\s*$' 
Parsing scratch/adam.f95
Parsing scratch/feedbf.f95
Parsing scratch/les.f95
Parsing scratch/press.f95
Parsing scratch/velnw.f95

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines not for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: scratch/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character(70) :: data10
      character(70) :: data11
      character(70) :: data12
      character(70) :: data13
      character(70) :: data14
      character(70) :: data15
      character(70) :: data20
      character(70) :: data21
      character(70) :: data22
      character(70) :: data23
      character(70) :: data24
      character(70) :: data25
      character(70) :: data26
      character(70) :: data27
      character(70) :: data30
      character(70) :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(kp) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax&
&, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, d&
&iu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dm&
&ask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys&
&, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main

AST not shown.
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: adam
Filename: scratch/adam.f95
Source:
subroutine adam(n,nmax,data21,fold,gold,hold,f,g,h)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      character(70), intent(In) :: data21
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      integer :: i,j,k
      real(4) :: fd,gd,hd
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                fd = f(i,j,k)
                gd = g(i,j,k)
                hd = h(i,j,k)
                f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
                g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
                h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
                fold(i,j,k) = fd
                gold(i,j,k) = gd
                hold(i,j,k) = hd
            end do
        end do
    end do
end subroutine adam

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: feedbf
Filename: scratch/feedbf.f95
Source:
subroutine feedbf(usum,u,bmask1,vsum,v,cmask1,wsum,w,dmask1,alpha,dt,beta,fx,fy,fz,f,g,h,n)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      integer, intent(In) :: n
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(In) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
      integer :: i,j,k
      real(4) :: f1x,f1y,f1z,f2x,f2y,f2z
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
                vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
                wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
                f1x = alpha*usum(i,j,k)*dt
                f1y = alpha*vsum(i,j,k)*dt
                f1z = alpha*wsum(i,j,k)*dt
                f2x = beta*u(i,j,k)*bmask1(i,j,k)
                f2y = beta*v(i,j,k)*cmask1(i,j,k)
                f2z = beta*w(i,j,k)*dmask1(i,j,k)
                fx(i,j,k) = f1x+f2x
                fy(i,j,k) = f1y+f2y
                fz(i,j,k) = f1z+f2z
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                f(i,j,k) = f(i,j,k)+fx(i,j,k)
                g(i,j,k) = g(i,j,k)+fy(i,j,k)
                h(i,j,k) = h(i,j,k)+fz(i,j,k)
            end do
        end do
    end do
end subroutine feedbf

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: les
Filename: scratch/les.f95
Source:
subroutine les(delx1,dx1,dy1,dzn,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm,f,g,h,u,v,uspd,vspd,dxs,dys,n)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      integer, intent(In) :: n
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: v
      real(4), dimension(0:301,0:301), intent(In) :: uspd
      real(4), dimension(0:301,0:301), intent(In) :: vspd
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      integer :: i,j,k
      real(4) :: csx1
      real(4) :: dudxx1,dudyx1,dudzx1,dvdxx1,dvdyx1,dvdzx1,dwdxx1,dwdyx1,dwdzx1
      real(4) :: visux2,visux1,visuy2,visuy1,visuz2,visuz1
      real(4) :: visvx2,visvx1,visvy2,visvy1,visvz2,visvz1
      real(4) :: viswx2,viswx1,viswy2,viswy1,viswz2,viswz1
      real(4) :: evsx2,evsx1,evsy2,evsy1,evsz2,evsz1
      real(4) :: vfu,vfv,vfw
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                dudxx1 = diu1(i,j,k)
                dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
                dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
                dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
                dvdyx1 = diu5(i,j,k)
                dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
                dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
                dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
                dwdzx1 = diu9(i,j,k)
                csx1 = 0.14
                sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1&
&+dwdxx1)**2)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsx2 = sm(i+1,j,k)
                evsx1 = sm(i,j,k)
                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visux2 = (evsx2)*2.*diu1(i+1,j,k)
                visux1 = (evsx1)*2.*diu1(i,j,k)
                visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
                visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
                f(i,j,k) = (f(i,j,k)+vfu)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsy2 = sm(i,j+1,k)
                evsy1 = sm(i,j,k)
                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)&
&*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
                visvy2 = (evsy2)*2.*diu5(i,j+1,k)
                visvy1 = (evsy1)*2.*diu5(i,j,k)
                visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
                g(i,j,k) = (g(i,j,k)+vfv)
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsz2 = sm(i,j,k+1)
                evsz1 = sm(i,j,k)
                evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)&
&*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
                evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*s&
&m(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
                evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)&
&*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
                viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
                viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
                viswz2 = (evsz2)*2.*diu9(i,j,k+1)
                viswz1 = (evsz1)*2.*diu9(i,j,k)
                vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
                h(i,j,k) = (h(i,j,k)+vfw)
            end do
        end do
    end do
    return 
end subroutine les

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: press
Filename: scratch/press.f95
Source:
subroutine press(u,v,w,p,rhs,f,g,h,dx1,dy1,dzn,dxs,dys,dzs,dt,n,nmax)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: cn1,cn2l,cn2s,cn3l,cn3s,cn4l,cn4s,dz1,dz2
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(In) :: w
      integer :: nn
      integer :: i,j,k,l,nrd
      real(4) :: rhsav,pav,area,pco,sor,reltmp
      real, parameter :: pjuge = 0.0001 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
                rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
            end do
        end do
    end do
    rhsav = 0.0
    area = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
                area = area+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
    rhsav = rhsav/area
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = rhs(i,j,k)-rhsav
            end do
        end do
    end do
    do l = 1, 50, 1
        do nrd = 0, 1, 1
            do k = 1, 80, 1
                do j = 1, 300, 1
                    do i = 1, 300, 1
                        dz1 = dzs(k-1)
                        dz2 = dzs(k)
                        cn4s = 2./(dz1*(dz1+dz2))
                        cn4l = 2./(dz2*(dz1+dz2))
                        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                        if (nrd==0) then
                            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+&
&cn4s*p0(i,j,k-1)-rhs(i,j,k))-p0(i,j,k))
                            p1(i,j,k) = p0(i,j,k)+reltmp
                        else
                            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+&
&cn4s*p1(i,j,k-1)-rhs(i,j,k))-p1(i,j,k))
                            p0(i,j,k) = p1(i,j,k)+reltmp
                        end if
                    end do
                end do
            end do
        end do
    end do
    pav = 0.0
    pco = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
                pco = pco+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
    pav = pav/pco
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                p0(i,j,k) = p0(i,j,k)-pav
            end do
        end do
    end do
    do k = 0, 81, 1
        do j = 0, 301, 1
            do synthIdx2 = 0, 302, 1
                if (synthIdx2==0) then
                    p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
                end if
                if (synthIdx2==301) then
                    p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
                end if
            end do
        end do
    end do
    do k = 0, 81, 1
        do synthIdx1 = 0, 302, 1
            do i = 0, 301, 1
                if (synthIdx1==0) then
                    p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
                end if
                if (synthIdx1==301) then
                    p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
                end if
            end do
        end do
    end do
    do synthIdx0 = 0, 81, 1
        do j = 0, 301, 1
            do i = 0, 301, 1
                if (synthIdx0==0) then
                    p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
                end if
                if (synthIdx0==81) then
                    p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
                end if
            end do
        end do
    end do
end subroutine press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw
Filename: scratch/velnw.f95
Source:
subroutine velnw(p,ro,dxs,u,dt,f,dys,v,g,dzs,w,h)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(In) :: f
      real(4), dimension(0:300,0:300,0:80), intent(In) :: g
      real(4), dimension(0:300,0:300,0:80), intent(In) :: h
      real(4), dimension(0:302,0:302,0:81), intent(In) :: p0
      real(4), dimension(0:302,0:302,0:81), intent(In) :: p1
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      integer :: i,j,k
      real(4) :: pz
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
                v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
            end do
        end do
    end do
    do k = 1, 79, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
                w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
            end do
        end do
    end do
    return 
end subroutine velnw

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines for offload merged 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: scratch/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character(70) :: data10
      character(70) :: data11
      character(70) :: data12
      character(70) :: data13
      character(70) :: data14
      character(70) :: data15
      character(70) :: data20
      character(70) :: data21
      character(70) :: data22
      character(70) :: data23
      character(70) :: data24
      character(70) :: data25
      character(70) :: data26
      character(70) :: data27
      character(70) :: data30
      character(70) :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(kp) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax&
&, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, d&
&iu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dm&
&ask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys&
&, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main

AST not shown.
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw_feedbf_les_adam_press_merged
Filename: 
Source:
subroutine velnw_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,data21,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dma&
&sk1,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,n,nmax,p,rhs,ro,sm,u,uspd,usum,v,vspd,vsum,w,wsum)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = 300 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4) :: csx1
      character(70), intent(In) :: data21
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: pav
      real(4) :: area
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,0:301), intent(In) :: uspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:301,0:301), intent(In) :: vspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
                v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
            end do
        end do
    end do
    do k = 1, 79, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
                w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
            end do
        end do
    end do
!}
! Original Subroutine Name: feedbf {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
                vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
                wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
                f1x = alpha*usum(i,j,k)*dt
                f1y = alpha*vsum(i,j,k)*dt
                f1z = alpha*wsum(i,j,k)*dt
                f2x = beta*u(i,j,k)*bmask1(i,j,k)
                f2y = beta*v(i,j,k)*cmask1(i,j,k)
                f2z = beta*w(i,j,k)*dmask1(i,j,k)
                fx(i,j,k) = f1x+f2x
                fy(i,j,k) = f1y+f2y
                fz(i,j,k) = f1z+f2z
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                f(i,j,k) = f(i,j,k)+fx(i,j,k)
                g(i,j,k) = g(i,j,k)+fy(i,j,k)
                h(i,j,k) = h(i,j,k)+fz(i,j,k)
            end do
        end do
    end do
!}
! Original Subroutine Name: les {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                dudxx1 = diu1(i,j,k)
                dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
                dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
                dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
                dvdyx1 = diu5(i,j,k)
                dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
                dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
                dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
                dwdzx1 = diu9(i,j,k)
                csx1 = 0.14
                sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1&
&+dwdxx1)**2)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsx2 = sm(i+1,j,k)
                evsx1 = sm(i,j,k)
                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visux2 = (evsx2)*2.*diu1(i+1,j,k)
                visux1 = (evsx1)*2.*diu1(i,j,k)
                visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
                visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
                f(i,j,k) = (f(i,j,k)+vfu)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsy2 = sm(i,j+1,k)
                evsy1 = sm(i,j,k)
                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)&
&*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
                visvy2 = (evsy2)*2.*diu5(i,j+1,k)
                visvy1 = (evsy1)*2.*diu5(i,j,k)
                visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
                g(i,j,k) = (g(i,j,k)+vfv)
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsz2 = sm(i,j,k+1)
                evsz1 = sm(i,j,k)
                evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)&
&*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
                evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*s&
&m(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
                evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)&
&*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
                viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
                viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
                viswz2 = (evsz2)*2.*diu9(i,j,k+1)
                viswz1 = (evsz1)*2.*diu9(i,j,k)
                vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
                h(i,j,k) = (h(i,j,k)+vfw)
            end do
        end do
    end do
!}
! Original Subroutine Name: adam {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                fd = f(i,j,k)
                gd = g(i,j,k)
                hd = h(i,j,k)
                f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
                g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
                h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
                fold(i,j,k) = fd
                gold(i,j,k) = gd
                hold(i,j,k) = hd
            end do
        end do
    end do
!}
! Original Subroutine Name: press {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
                rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
            end do
        end do
    end do
    rhsav = 0.0
    area = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
                area = area+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
    rhsav = rhsav/area
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = rhs(i,j,k)-rhsav
            end do
        end do
    end do
    do l = 1, 50, 1
        do nrd = 0, 1, 1
            do k = 1, 80, 1
                do j = 1, 300, 1
                    do i = 1, 300, 1
                        dz1 = dzs(k-1)
                        dz2 = dzs(k)
                        cn4s = 2./(dz1*(dz1+dz2))
                        cn4l = 2./(dz2*(dz1+dz2))
                        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                        if (nrd==0) then
                            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+&
&cn4s*p0(i,j,k-1)-rhs(i,j,k))-p0(i,j,k))
                            p1(i,j,k) = p0(i,j,k)+reltmp
                        else
                            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+&
&cn4s*p1(i,j,k-1)-rhs(i,j,k))-p1(i,j,k))
                            p0(i,j,k) = p1(i,j,k)+reltmp
                        end if
                    end do
                end do
            end do
        end do
    end do
    pav = 0.0
    pco = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
                pco = pco+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
    pav = pav/pco
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                p0(i,j,k) = p0(i,j,k)-pav
            end do
        end do
    end do
    do k = 0, 81, 1
        do j = 0, 301, 1
            do synthIdx2 = 0, 302, 1
                if (synthIdx2==0) then
                    p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
                end if
                if (synthIdx2==301) then
                    p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
                end if
            end do
        end do
    end do
    do k = 0, 81, 1
        do synthIdx1 = 0, 302, 1
            do i = 0, 301, 1
                if (synthIdx1==0) then
                    p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
                end if
                if (synthIdx1==301) then
                    p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
                end if
            end do
        end do
    end do
    do synthIdx0 = 0, 81, 1
        do j = 0, 301, 1
            do i = 0, 301, 1
                if (synthIdx0==0) then
                    p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
                end if
                if (synthIdx0==81) then
                    p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
                end if
            end do
        end do
    end do
!}
end subroutine velnw_feedbf_les_adam_press_merged

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Pipeline Detection 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

! Original Subroutine Name: velnw {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end do
        end do
    end do
!}
("velnw",3,7200000)

----------------------------------------

! Original Subroutine Name: velnw {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
                v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
            end do
        end do
    end do
!}
("velnw",3,7200000)

----------------------------------------

! Original Subroutine Name: velnw {
    do k = 1, 79, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
                w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
            end do
        end do
    end do
!}
("velnw",3,7110000)

----------------------------------------

! Original Subroutine Name: feedbf {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
                vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
                wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
                f1x = alpha*usum(i,j,k)*dt
                f1y = alpha*vsum(i,j,k)*dt
                f1z = alpha*wsum(i,j,k)*dt
                f2x = beta*u(i,j,k)*bmask1(i,j,k)
                f2y = beta*v(i,j,k)*cmask1(i,j,k)
                f2z = beta*w(i,j,k)*dmask1(i,j,k)
                fx(i,j,k) = f1x+f2x
                fy(i,j,k) = f1y+f2y
                fz(i,j,k) = f1z+f2z
            end do
        end do
    end do
!}
("feedbf",3,7200000)

----------------------------------------

! Original Subroutine Name: feedbf {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                f(i,j,k) = f(i,j,k)+fx(i,j,k)
                g(i,j,k) = g(i,j,k)+fy(i,j,k)
                h(i,j,k) = h(i,j,k)+fz(i,j,k)
            end do
        end do
    end do
!}
("feedbf",3,7200000)

----------------------------------------

! Original Subroutine Name: les {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                dudxx1 = diu1(i,j,k)
                dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
                dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
                dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
                dvdyx1 = diu5(i,j,k)
                dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
                dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
                dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
                dwdzx1 = diu9(i,j,k)
                csx1 = 0.14
                sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
            end do
        end do
    end do
!}
("les",3,7200000)

----------------------------------------

! Original Subroutine Name: les {
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsx2 = sm(i+1,j,k)
                evsx1 = sm(i,j,k)
                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visux2 = (evsx2)*2.*diu1(i+1,j,k)
                visux1 = (evsx1)*2.*diu1(i,j,k)
                visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
                visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
                f(i,j,k) = (f(i,j,k)+vfu)
            end do
        end do
    end do
!}
("les",3,7110000)

----------------------------------------

! Original Subroutine Name: les {
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsy2 = sm(i,j+1,k)
                evsy1 = sm(i,j,k)
                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
                visvy2 = (evsy2)*2.*diu5(i,j+1,k)
                visvy1 = (evsy1)*2.*diu5(i,j,k)
                visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
                g(i,j,k) = (g(i,j,k)+vfv)
            end do
        end do
    end do
!}
("les",3,7110000)

----------------------------------------

! Original Subroutine Name: les {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsz2 = sm(i,j,k+1)
                evsz1 = sm(i,j,k)
                evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
                evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
                evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
                viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
                viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
                viswz2 = (evsz2)*2.*diu9(i,j,k+1)
                viswz1 = (evsz1)*2.*diu9(i,j,k)
                vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
                h(i,j,k) = (h(i,j,k)+vfw)
            end do
        end do
    end do
!}
("les",3,7200000)

----------------------------------------

! Original Subroutine Name: adam {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                fd = f(i,j,k)
                gd = g(i,j,k)
                hd = h(i,j,k)
                f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
                g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
                h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
                fold(i,j,k) = fd
                gold(i,j,k) = gd
                hold(i,j,k) = hd
            end do
        end do
    end do
!}
("adam",3,7200000)

----------------------------------------

! Original Subroutine Name: press {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
                rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
            end do
        end do
    end do
!}
("press",3,7200000)

----------------------------------------

! Original Subroutine Name: press {
    rhsav = 0.0
    area = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
                area = area+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
!}
("press",3,7200000)

----------------------------------------

! Original Subroutine Name: press {
    rhsav = rhsav/area
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = rhs(i,j,k)-rhsav
            end do
        end do
    end do
!}
("press",3,7200000)

----------------------------------------

! Original Subroutine Name: press {
    do l = 1, 50, 1
        do nrd = 0, 1, 1
            do k = 1, 80, 1
                do j = 1, 300, 1
                    do i = 1, 300, 1
                        dz1 = dzs(k-1)
                        dz2 = dzs(k)
                        cn4s = 2./(dz1*(dz1+dz2))
                        cn4l = 2./(dz2*(dz1+dz2))
                        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                        if (nrd==0) then
                            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)-rhs(i,j,k))-p0(i,j,k))
                            p1(i,j,k) = p0(i,j,k)+reltmp
                        else
                            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)-rhs(i,j,k))-p1(i,j,k))
                            p0(i,j,k) = p1(i,j,k)+reltmp
                        end if
                    end do
                end do
            end do
        end do
    end do
!}
("press",5,720000000)

----------------------------------------

! Original Subroutine Name: press {
    pav = 0.0
    pco = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
                pco = pco+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
!}
("press",3,7200000)

----------------------------------------

! Original Subroutine Name: press {
    pav = pav/pco
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                p0(i,j,k) = p0(i,j,k)-pav
            end do
        end do
    end do
!}
("press",3,7200000)

----------------------------------------

! Original Subroutine Name: press {
    do k = 0, 81, 1
        do j = 0, 301, 1
            do synthIdx2 = 0, 302, 1
                if (synthIdx2==0) then
                    p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
                end if
                if (synthIdx2==301) then
                    p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
                end if
            end do
        end do
    end do
!}
("press",3,7503492)

----------------------------------------

! Original Subroutine Name: press {
    do k = 0, 81, 1
        do synthIdx1 = 0, 302, 1
            do i = 0, 301, 1
                if (synthIdx1==0) then
                    p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
                end if
                if (synthIdx1==301) then
                    p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
                end if
            end do
        end do
    end do
!}
("press",3,7503492)

----------------------------------------

! Original Subroutine Name: press {
    do synthIdx0 = 0, 81, 1
        do j = 0, 301, 1
            do i = 0, 301, 1
                if (synthIdx0==0) then
                    p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
                end if
                if (synthIdx0==81) then
                    p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
                end if
            end do
        end do
    end do
!}
("press",3,7478728)

----------------------------------------


================================================================================
 Pipelines 
--------------------------------------------------------------------------------

pipeline_0_velnw_feedbf_les_adam_press
subroutine pipeline_0_velnw_feedbf_les_adam_press(alpha,beta,bmask1,cmask1,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dmask1&
&,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,rhs,ro,sm,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
                v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
            end do
        end do
    end do
    do k = 1, 79, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
                w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
            end do
        end do
    end do
!}
! Original Subroutine Name: feedbf {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
                vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
                wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
                f1x = alpha*usum(i,j,k)*dt
                f1y = alpha*vsum(i,j,k)*dt
                f1z = alpha*wsum(i,j,k)*dt
                f2x = beta*u(i,j,k)*bmask1(i,j,k)
                f2y = beta*v(i,j,k)*cmask1(i,j,k)
                f2z = beta*w(i,j,k)*dmask1(i,j,k)
                fx(i,j,k) = f1x+f2x
                fy(i,j,k) = f1y+f2y
                fz(i,j,k) = f1z+f2z
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                f(i,j,k) = f(i,j,k)+fx(i,j,k)
                g(i,j,k) = g(i,j,k)+fy(i,j,k)
                h(i,j,k) = h(i,j,k)+fz(i,j,k)
            end do
        end do
    end do
!}
! Original Subroutine Name: les {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                dudxx1 = diu1(i,j,k)
                dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
                dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
                dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
                dvdyx1 = diu5(i,j,k)
                dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
                dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
                dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
                dwdzx1 = diu9(i,j,k)
                csx1 = 0.14
                sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1&
&+dwdxx1)**2)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsx2 = sm(i+1,j,k)
                evsx1 = sm(i,j,k)
                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visux2 = (evsx2)*2.*diu1(i+1,j,k)
                visux1 = (evsx1)*2.*diu1(i,j,k)
                visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
                visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
                f(i,j,k) = (f(i,j,k)+vfu)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsy2 = sm(i,j+1,k)
                evsy1 = sm(i,j,k)
                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)&
&*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
                visvy2 = (evsy2)*2.*diu5(i,j+1,k)
                visvy1 = (evsy1)*2.*diu5(i,j,k)
                visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
                g(i,j,k) = (g(i,j,k)+vfv)
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsz2 = sm(i,j,k+1)
                evsz1 = sm(i,j,k)
                evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)&
&*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
                evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*s&
&m(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
                evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)&
&*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
                viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
                viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
                viswz2 = (evsz2)*2.*diu9(i,j,k+1)
                viswz1 = (evsz1)*2.*diu9(i,j,k)
                vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
                h(i,j,k) = (h(i,j,k)+vfw)
            end do
        end do
    end do
!}
! Original Subroutine Name: adam {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                fd = f(i,j,k)
                gd = g(i,j,k)
                hd = h(i,j,k)
                f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
                g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
                h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
                fold(i,j,k) = fd
                gold(i,j,k) = gd
                hold(i,j,k) = hd
            end do
        end do
    end do
!}
! Original Subroutine Name: press {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
                rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
            end do
        end do
    end do
    rhsav = 0.0
    area = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
                area = area+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
    rhsav = rhsav/area
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = rhs(i,j,k)-rhsav
            end do
        end do
    end do
!}
end subroutine pipeline_0_velnw_feedbf_les_adam_press

pipeline_1_press
subroutine pipeline_1_press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! Original Subroutine Name: press {
    do l = 1, 50, 1
        do nrd = 0, 1, 1
            do k = 1, 80, 1
                do j = 1, 300, 1
                    do i = 1, 300, 1
                        dz1 = dzs(k-1)
                        dz2 = dzs(k)
                        cn4s = 2./(dz1*(dz1+dz2))
                        cn4l = 2./(dz2*(dz1+dz2))
                        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                        if (nrd==0) then
                            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+&
&cn4s*p0(i,j,k-1)-rhs(i,j,k))-p0(i,j,k))
                            p1(i,j,k) = p0(i,j,k)+reltmp
                        else
                            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+&
&cn4s*p1(i,j,k-1)-rhs(i,j,k))-p1(i,j,k))
                            p0(i,j,k) = p1(i,j,k)+reltmp
                        end if
                    end do
                end do
            end do
        end do
    end do
!}
end subroutine pipeline_1_press

pipeline_2_press
subroutine pipeline_2_press(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
! Original Subroutine Name: press {
    pav = 0.0
    pco = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
                pco = pco+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
    pav = pav/pco
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                p0(i,j,k) = p0(i,j,k)-pav
            end do
        end do
    end do
    do k = 0, 81, 1
        do j = 0, 301, 1
            do synthIdx2 = 0, 302, 1
                if (synthIdx2==0) then
                    p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
                end if
                if (synthIdx2==301) then
                    p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
                end if
            end do
        end do
    end do
    do k = 0, 81, 1
        do synthIdx1 = 0, 302, 1
            do i = 0, 301, 1
                if (synthIdx1==0) then
                    p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
                end if
                if (synthIdx1==301) then
                    p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
                end if
            end do
        end do
    end do
    do synthIdx0 = 0, 81, 1
        do j = 0, 301, 1
            do i = 0, 301, 1
                if (synthIdx0==0) then
                    p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
                end if
                if (synthIdx0==81) then
                    p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
                end if
            end do
        end do
    end do
!}
end subroutine pipeline_2_press


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Map + Fold Detection 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: pipeline_0_velnw_feedbf_les_adam_press
Filename: 
Source:
subroutine pipeline_0_velnw_feedbf_les_adam_press(alpha,beta,bmask1,cmask1,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dmask1&
&,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,rhs,ro,sm,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
    u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
!}
!}
!}
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dys","dt"],["v"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dys","dt"],["v"],["(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
    v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
!}
!}
!}
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dzs","dt"],[],["(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
    w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
!}
!}
!}
!}
! Original Subroutine Name: feedbf {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w"],["fx","fy","fz"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w"],["fx","fy","fz"],["(i,1,300,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
!}
!}
!}
! OpenCLMap ( ["fx","fy","fz"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],[],["(i,1,300,1)"],[]) {
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
!}
!}
!}
! Original Subroutine Name: les {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(i,1,300,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}
!}
!}
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(i,1,300,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}
!}
!}
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(i,1,300,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k)&
&)/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}
!}
!}
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(i,1,300,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1)&
&)/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1)&
&)/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1)&
&)/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}
!}
!}
!}
! Original Subroutine Name: adam {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(i,1,300,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
!}
!}
!}
! Original Subroutine Name: press {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(i,1,300,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}
!}
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(i,1,300,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
!}
!}
!}
end subroutine pipeline_0_velnw_feedbf_les_adam_press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: pipeline_1_press
Filename: 
Source:
subroutine pipeline_1_press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! Original Subroutine Name: press {
! OpenCLMap ( ["dzs","p0"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dzs","p0"],[],["(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dzs","nrd","p0"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dzs","nrd","p0"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dzs","nrd","p0"],[],["(i,1,300,1)"],[]) {
    dz1 = dzs(k-1)
    dz2 = dzs(k)
    cn4s = 2./(dz1*(dz1+dz2))
    cn4l = 2./(dz2*(dz1+dz2))
    cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
    cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
    cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
    cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
    cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
    if (nrd==0) then
        reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)-rhs&
&(i,j,k))-p0(i,j,k))
        p1(i,j,k) = p0(i,j,k)+reltmp
    else
        reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)-rhs&
&(i,j,k))-p1(i,j,k))
        p0(i,j,k) = p1(i,j,k)+reltmp
    end if
!}
!}
!}
!}
!}
!}
end subroutine pipeline_1_press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: pipeline_2_press
Filename: 
Source:
subroutine pipeline_2_press(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
! Original Subroutine Name: press {
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
    pco = pco+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["pav"],["p0"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["pav"],["p0"],["(i,1,300,1)"],[]) {
    p0(i,j,k) = p0(i,j,k)-pav
!}
!}
!}
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx2,0,302,1)"],[]) {
! OpenCLMap ( [],["p0"],["(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
! OpenCLMap ( [],["p0"],["(synthIdx2,0,302,1)"],[]) {
    if (synthIdx2==0) then
        p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
    end if
    if (synthIdx2==301) then
        p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
    end if
!}
!}
!}
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["p0"],["(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( ["synthIdx1"],["p0"],["(i,0,301,1)"],[]) {
    if (synthIdx1==0) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
    end if
    if (synthIdx1==301) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
    end if
!}
!}
!}
! OpenCLMap ( [],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(i,0,301,1)"],[]) {
    if (synthIdx0==0) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
    end if
    if (synthIdx0==81) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
    end if
!}
!}
!}
!}
end subroutine pipeline_2_press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Stencil Detection 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: scratch/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character(70) :: data10
      character(70) :: data11
      character(70) :: data12
      character(70) :: data13
      character(70) :: data14
      character(70) :: data15
      character(70) :: data20
      character(70) :: data21
      character(70) :: data22
      character(70) :: data23
      character(70) :: data24
      character(70) :: data25
      character(70) :: data26
      character(70) :: data27
      character(70) :: data30
      character(70) :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(kp) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax&
&, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, d&
&iu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dm&
&ask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys&
&, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main

AST not shown.
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: pipeline_0_velnw_feedbf_les_adam_press
Filename: 
Source:
subroutine pipeline_0_velnw_feedbf_les_adam_press(alpha,beta,bmask1,cmask1,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dmask1&
&,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,rhs,ro,sm,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
    u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dys","dt"],["v"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dys","dt"],["v"],["(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
    v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["ro","dzs","dt"],[],["(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
    w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
!}
!}
!}    
!}
!}
! Original Subroutine Name: feedbf {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w"],["fx","fy","fz"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w"],["fx","fy","fz"],["(i,1,300,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
!}
!}
!}
! OpenCLMap ( ["fx","fy","fz"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],[],["(i,1,300,1)"],[]) {
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
!}
!}
!}
! Original Subroutine Name: les {
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(i,1,300,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(i,1,300,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(i,1,300,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k)&
&)/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(i,1,300,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1)&
&)/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1)&
&)/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1)&
&)/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}
!}
!}    
!}
!}
! Original Subroutine Name: adam {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(i,1,300,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
!}
!}
!}
! Original Subroutine Name: press {
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(i,1,300,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}
!}
!}    
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(i,1,300,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
!}
!}
!}
end subroutine pipeline_0_velnw_feedbf_les_adam_press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: pipeline_1_press
Filename: 
Source:
subroutine pipeline_1_press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! Original Subroutine Name: press {
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dzs","p0"],[],["(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dzs","nrd","p0"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dzs","nrd","p0"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dzs","nrd","p0"],[],["(i,1,300,1)"],[]) {
    dz1 = dzs(k-1)
    dz2 = dzs(k)
    cn4s = 2./(dz1*(dz1+dz2))
    cn4l = 2./(dz2*(dz1+dz2))
    cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
    cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
    cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
    cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
    cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
    if (nrd==0) then
        reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)-rhs&
&(i,j,k))-p0(i,j,k))
        p1(i,j,k) = p0(i,j,k)+reltmp
    else
        reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)-rhs&
&(i,j,k))-p1(i,j,k))
        p0(i,j,k) = p1(i,j,k)+reltmp
    end if
!}
!}
!}
!}
!}    
!}
!}
end subroutine pipeline_1_press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: pipeline_2_press
Filename: 
Source:
subroutine pipeline_2_press(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
! Original Subroutine Name: press {
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
    pco = pco+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["pav"],["p0"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["pav"],["p0"],["(i,1,300,1)"],[]) {
    p0(i,j,k) = p0(i,j,k)-pav
!}
!}
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx2,0,302,1)"],[]) {
! OpenCLMap ( [],["p0"],["(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
! OpenCLMap ( [],["p0"],["(synthIdx2,0,302,1)"],[]) {
    if (synthIdx2==0) then
        p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
    end if
    if (synthIdx2==301) then
        p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
    end if
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["p0"],["(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( ["synthIdx1"],["p0"],["(i,0,301,1)"],[]) {
    if (synthIdx1==0) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
    end if
    if (synthIdx1==301) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
    end if
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( [],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(i,0,301,1)"],[]) {
    if (synthIdx0==0) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
    end if
    if (synthIdx0==81) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
    end if
!}
!}
!}    
!}
!}
end subroutine pipeline_2_press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Combined 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: scratch/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character(70) :: data10
      character(70) :: data11
      character(70) :: data12
      character(70) :: data13
      character(70) :: data14
      character(70) :: data15
      character(70) :: data20
      character(70) :: data21
      character(70) :: data22
      character(70) :: data23
      character(70) :: data24
      character(70) :: data25
      character(70) :: data26
      character(70) :: data27
      character(70) :: data30
      character(70) :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(kp) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax&
&, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, d&
&iu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dm&
&ask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys&
&, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main

AST not shown.
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: pipeline_0_velnw_feedbf_les_adam_press
Filename: 
Source:
subroutine pipeline_0_velnw_feedbf_les_adam_press(alpha,beta,bmask1,cmask1,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dmask1&
&,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,rhs,ro,sm,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
    u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
    v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
    w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
!}    
!}
!}
! Original Subroutine Name: feedbf {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
!}
! Original Subroutine Name: les {
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k)&
&)/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1)&
&)/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1)&
&)/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1)&
&)/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}    
!}
!}
! Original Subroutine Name: adam {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
!}
! Original Subroutine Name: press {
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}    
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
!}
end subroutine pipeline_0_velnw_feedbf_les_adam_press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: pipeline_1_press
Filename: 
Source:
subroutine pipeline_1_press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! Original Subroutine Name: press {
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    dz1 = dzs(k-1)
    dz2 = dzs(k)
    cn4s = 2./(dz1*(dz1+dz2))
    cn4l = 2./(dz2*(dz1+dz2))
    cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
    cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
    cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
    cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
    cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
    if (nrd==0) then
        reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)-rhs&
&(i,j,k))-p0(i,j,k))
        p1(i,j,k) = p0(i,j,k)+reltmp
    else
        reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)-rhs&
&(i,j,k))-p1(i,j,k))
        p0(i,j,k) = p1(i,j,k)+reltmp
    end if
!}    
!}
!}
end subroutine pipeline_1_press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: pipeline_2_press
Filename: 
Source:
subroutine pipeline_2_press(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
! Original Subroutine Name: press {
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
    pco = pco+dx1(i)*dy1(j)*dzn(k)
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    p0(i,j,k) = p0(i,j,k)-pav
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    if (synthIdx2==0) then
        p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
    end if
    if (synthIdx2==301) then
        p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    if (synthIdx1==0) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
    end if
    if (synthIdx1==301) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    if (synthIdx0==0) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
    end if
    if (synthIdx0==81) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
    end if
!}    
!}
!}
end subroutine pipeline_2_press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Kernels 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


--------------------
velnw
--------------------
subroutine velnw_0(dt,dxs,f,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
    u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
!}    
!}
end subroutine velnw_0

======================


--------------------
velnw
--------------------
subroutine velnw_1(dt,dys,g,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
    v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
!}    
!}
end subroutine velnw_1

======================


--------------------
velnw
--------------------
subroutine velnw_2(dt,dzs,h,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
    w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
!}    
!}
end subroutine velnw_2

======================


--------------------
feedbf
--------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
end subroutine feedbf

======================


--------------------
les
--------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}    
!}
end subroutine les_0

======================


--------------------
les
--------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}    
!}
end subroutine les_1

======================


--------------------
les
--------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k)&
&)/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}    
!}
end subroutine les_2

======================


--------------------
les
--------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1)&
&)/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1)&
&)/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1)&
&)/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}    
!}
end subroutine les_3

======================


--------------------
adam
--------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
end subroutine adam

======================


--------------------
press
--------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}    
!}
end subroutine press_0

======================


--------------------
press
--------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
end subroutine press_1

======================


--------------------
press
--------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
end subroutine press_2

======================

no. of kernels: 12
 ! ==============================================
 ! Name: velnw_0 Order: 0
 ! Input streams:
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
    u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
!}    
!}
end subroutine velnw_0
 ! ==============================================

 ! ==============================================
 ! Name: velnw_1 Order: 1
 ! Input streams:
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
    v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
!}    
!}
end subroutine velnw_1
 ! ==============================================

 ! ==============================================
 ! Name: velnw_2 Order: 2
 ! Input streams:
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
    w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
!}    
!}
end subroutine velnw_2
 ! ==============================================

 ! ==============================================
 ! Name: feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
end subroutine feedbf
 ! ==============================================

 ! ==============================================
 ! Name: les_0 Order: 4
 ! Input streams:
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 ! Output streams:
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}    
!}
end subroutine les_0
 ! ==============================================

 ! ==============================================
 ! Name: les_1 Order: 5
 ! Input streams:
 !	StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}    
!}
end subroutine les_1
 ! ==============================================

 ! ==============================================
 ! Name: les_2 Order: 6
 ! Input streams:
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
 !	StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k)&
&)/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}    
!}
end subroutine les_2
 ! ==============================================

 ! ==============================================
 ! Name: les_3 Order: 7
 ! Input streams:
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
 !	StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1)&
&)/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1)&
&)/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1)&
&)/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}    
!}
end subroutine les_3
 ! ==============================================

 ! ==============================================
 ! Name: adam Order: 8
 ! Input streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
end subroutine adam
 ! ==============================================

 ! ==============================================
 ! Name: press_0 Order: 9
 ! Input streams:
 !	StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
 !	StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
 !	StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
 !	StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
 !	StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
 !	StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}    
!}
end subroutine press_0
 ! ==============================================

 ! ==============================================
 ! Name: press_1 Order: 10
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
end subroutine press_1
 ! ==============================================

 ! ==============================================
 ! Name: press_2 Order: 11
 ! Input streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
end subroutine press_2
 ! ==============================================



--------------------
press
--------------------
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    dz1 = dzs(k-1)
    dz2 = dzs(k)
    cn4s = 2./(dz1*(dz1+dz2))
    cn4l = 2./(dz2*(dz1+dz2))
    cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
    cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
    cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
    cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
    cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
    if (nrd==0) then
        reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)-rhs&
&(i,j,k))-p0(i,j,k))
        p1(i,j,k) = p0(i,j,k)+reltmp
    else
        reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)-rhs&
&(i,j,k))-p1(i,j,k))
        p0(i,j,k) = p1(i,j,k)+reltmp
    end if
!}    
!}
end subroutine press

======================

no. of kernels: 1
 ! ==============================================
 ! Name: press Order: 0
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	StencilStream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    dz1 = dzs(k-1)
    dz2 = dzs(k)
    cn4s = 2./(dz1*(dz1+dz2))
    cn4l = 2./(dz2*(dz1+dz2))
    cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
    cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
    cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
    cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
    cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
    if (nrd==0) then
        reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)-rhs&
&(i,j,k))-p0(i,j,k))
        p1(i,j,k) = p0(i,j,k)+reltmp
    else
        reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)-rhs&
&(i,j,k))-p1(i,j,k))
        p0(i,j,k) = p1(i,j,k)+reltmp
    end if
!}    
!}
end subroutine press
 ! ==============================================



--------------------
press
--------------------
subroutine press_0(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
    pco = pco+dx1(i)*dy1(j)*dzn(k)
!}
end subroutine press_0

======================


--------------------
press
--------------------
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    p0(i,j,k) = p0(i,j,k)-pav
!}
end subroutine press_1

======================


--------------------
press
--------------------
subroutine press_2
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    if (synthIdx2==0) then
        p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
    end if
    if (synthIdx2==301) then
        p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
    end if
!}    
!}
end subroutine press_2

======================


--------------------
press
--------------------
subroutine press_3
      integer :: i
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    if (synthIdx1==0) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
    end if
    if (synthIdx1==301) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
    end if
!}    
!}
end subroutine press_3

======================


--------------------
press
--------------------
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    if (synthIdx0==0) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
    end if
    if (synthIdx0==81) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
    end if
!}    
!}
end subroutine press_4

======================

no. of kernels: 5
 ! ==============================================
 ! Name: press_0 Order: 0
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_0(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
    pco = pco+dx1(i)*dy1(j)*dzn(k)
!}
end subroutine press_0
 ! ==============================================

 ! ==============================================
 ! Name: press_1 Order: 1
 ! Input streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    p0(i,j,k) = p0(i,j,k)-pav
!}
end subroutine press_1
 ! ==============================================

 ! ==============================================
 ! Name: press_2 Order: 2
 ! Input streams:
 !	StencilStream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
 ! Output streams:
 !	Stream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    if (synthIdx2==0) then
        p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
    end if
    if (synthIdx2==301) then
        p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
    end if
!}    
!}
end subroutine press_2
 ! ==============================================

 ! ==============================================
 ! Name: press_3 Order: 3
 ! Input streams:
 !	StencilStream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
 ! Output streams:
 !	Stream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_3
      integer :: i
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    if (synthIdx1==0) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
    end if
    if (synthIdx1==301) then
        p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
    end if
!}    
!}
end subroutine press_3
 ! ==============================================

 ! ==============================================
 ! Name: press_4 Order: 4
 ! Input streams:
 !	StencilStream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
 ! Output streams:
 !	Stream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    if (synthIdx0==0) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
    end if
    if (synthIdx0==81) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
    end if
!}    
!}
end subroutine press_4
 ! ==============================================


diu5_i_j_k is largest stream size = 7645296 dims used to calculate this = [(-1,302),(0,302),(0,82)]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Add Write Back Streams 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Streams to write back:
	Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)]
	Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)]
	Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)]
	Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)]
	Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)]
	Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)]
	Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)]
	Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)]
	Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)]
	Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)]
	Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)]
	Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)]
	Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)]
	Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)]
	Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)]
	Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)]
	Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)]
	Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)]
	Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)]
	Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)]
	Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)]
	Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)]
	Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)]

Last kernel updated = 
 ! ==============================================
 ! Name: p0_press_2 Order: 11
 ! Input streams:
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
end subroutine press_2
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Loop Guards 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: p0_velnw_0 Order: 0
 ! Input streams:
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)]]
availableFromMem = [Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)]]
currentInputNames = fromList ["dxs_i","f_i_j_k","p0_i_j_k","u_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_velnw_1 Order: 1
 ! Input streams:
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)]]
availableFromMem = [Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)]]
currentInputNames = fromList ["dys_j","g_i_j_k","p0_i_j_k","v_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_velnw_2 Order: 2
 ! Input streams:
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79)) then
        pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_2
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)]]
availableFromMem = [Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)]]
currentInputNames = fromList ["dzs_k","h_i_j_k","p0_i_j_k","w_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)],Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)],Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)],Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)],Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)],Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)],Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)],Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)],Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)]]
availableFromMem = [Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)],Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)],Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)],Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)],Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)],Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)],Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)],Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)],Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)]]
currentInputNames = fromList ["bmask1_i_j_k","cmask1_i_j_k","dmask1_i_j_k","f_i_j_k","fx_i_j_k","fy_i_j_k","fz_i_j_k","g_i_j_k","h_i_j_k","u_i_j_k","usum_i_j_k","v_i_j_k","vsum_i_j_k","w_i_j_k","wsum_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_les_0 Order: 4
 ! Input streams:
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 ! Output streams:
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)]]
availableFromMem = [Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)]]
currentInputNames = fromList ["delx1_k","diu1_i_j_k","diu2_i_j_k","diu3_i_j_k","diu4_i_j_k","diu5_i_j_k","diu6_i_j_k","diu7_i_j_k","diu8_i_j_k","diu9_i_j_k"]
notCurrentlyAnInput = [Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)]]
Inputs to add = 
	Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)]

 ! ==============================================
 ! Name: p0_les_1 Order: 5
 ! Input streams:
 !	StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)]]
availableFromMem = [Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)]]
currentInputNames = fromList ["diu1_i_j_k","diu2_i_j_k","diu3_i_j_k","diu4_i_j_k","diu7_i_j_k","dx1_i","dxs_i","dy1_j","dzn_k","f_i_j_k","sm_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_les_2 Order: 6
 ! Input streams:
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
 !	StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)]]
availableFromMem = [Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)]]
currentInputNames = fromList ["diu2_i_j_k","diu4_i_j_k","diu5_i_j_k","diu6_i_j_k","diu8_i_j_k","dx1_i","dy1_j","dys_j","dzn_k","g_i_j_k","sm_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_les_3 Order: 7
 ! Input streams:
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
 !	StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)]]
availableFromMem = [Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)]]
currentInputNames = fromList ["diu3_i_j_k","diu6_i_j_k","diu7_i_j_k","diu8_i_j_k","diu9_i_j_k","dx1_i","dy1_j","dzn_k","h_i_j_k","sm_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_adam Order: 8
 ! Input streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)],Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)],Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)],Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)],Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)],Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)]]
availableFromMem = [Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)],Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)],Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)],Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)],Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)],Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)]]
currentInputNames = fromList ["f_i_j_k","fold_i_j_k","g_i_j_k","gold_i_j_k","h_i_j_k","hold_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_press_0 Order: 9
 ! Input streams:
 !	StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
 !	StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
 !	StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
 !	StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
 !	StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
 !	StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)]]
availableFromMem = [Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)]]
currentInputNames = fromList ["dx1_i","dy1_j","dzn_k","f_i_j_k","g_i_j_k","h_i_j_k","rhs_i_j_k","u_i_j_k","v_i_j_k","w_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_press_1 Order: 10
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1
 ! ==============================================


Adding memory input for output
kernel outputs = []
availableFromMem = []
currentInputNames = fromList ["dx1_i","dy1_j","dzn_k","rhs_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p0_press_2 Order: 11
 ! Input streams:
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)],Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)],Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)],Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)],Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)],Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)],Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)],Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)],Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)],Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)],Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)],Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)],Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)],Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)],Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)],Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)]]
availableFromMem = [Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)]]
currentInputNames = fromList ["f_i_j_k","fold_i_j_k","fx_i_j_k","fy_i_j_k","fz_i_j_k","g_i_j_k","gold_i_j_k","h_i_j_k","hold_i_j_k","rhs_i_j_k","u_i_j_k","usum_i_j_k","v_i_j_k","vsum_i_j_k","w_i_j_k","wsum_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Transit Streams 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

p0_velnw_1 requires:
StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
p0_velnw_1 requires:
Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
p0_velnw_1 requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_velnw_1 requires:
Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
p0_velnw_2 requires:
StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
p0_velnw_2 requires:
Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
p0_velnw_2 requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_velnw_2 requires:
Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
p0_feedbf requires:
Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
p0_feedbf requires:
Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
p0_feedbf requires:
Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
p0_feedbf requires:
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_feedbf requires:
Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_feedbf requires:
Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_feedbf requires:
Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_feedbf requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_feedbf requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_feedbf requires:
Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
p0_feedbf requires:
Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_feedbf requires:
Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
p0_feedbf requires:
Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_feedbf requires:
Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
p0_feedbf requires:
Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_les_0 requires:
StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
p0_les_0 requires:
StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
p0_les_0 requires:
StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
p0_les_0 requires:
StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
p0_les_0 requires:
StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
p0_les_0 requires:
StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
p0_les_0 requires:
Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
p0_les_0 requires:
Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
p0_les_0 requires:
Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
p0_les_0 requires:
Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
p0_les_0 requires:
Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
p0_les_1 requires:
StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
p0_les_1 requires:
StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
p0_les_1 requires:
StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
p0_les_1 requires:
StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
p0_les_1 requires:
StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
p0_les_1 requires:
StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
p0_les_1 requires:
StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
p0_les_1 requires:
StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
p0_les_1 requires:
StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
p0_les_1 requires:
Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
p0_les_1 requires:
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_les_2 requires:
StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
p0_les_2 requires:
StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
p0_les_2 requires:
StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
p0_les_2 requires:
StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
p0_les_2 requires:
StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
p0_les_2 requires:
StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
p0_les_2 requires:
StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
p0_les_2 requires:
StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
p0_les_2 requires:
StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
p0_les_2 requires:
Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
p0_les_2 requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_les_3 requires:
StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
p0_les_3 requires:
StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
p0_les_3 requires:
StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
p0_les_3 requires:
StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
p0_les_3 requires:
StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
p0_les_3 requires:
StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
p0_les_3 requires:
StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
p0_les_3 requires:
StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
p0_les_3 requires:
StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
p0_les_3 requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_adam requires:
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_adam requires:
Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
p0_adam requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_adam requires:
Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
p0_adam requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_adam requires:
Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
p0_press_0 requires:
StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
p0_press_0 requires:
StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
p0_press_0 requires:
StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
p0_press_0 requires:
StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
p0_press_0 requires:
StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
p0_press_0 requires:
StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
p0_press_0 requires:
Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
p0_press_0 requires:
Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
p0_press_0 requires:
Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
p0_press_0 requires:
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
p0_press_1 requires:
Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
p0_press_1 requires:
Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
p0_press_1 requires:
Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
p0_press_1 requires:
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
p0_press_2 requires:
Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
p0_press_2 requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
p0_press_2 requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
p0_press_2 requires:
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
p0_press_2 requires:
Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
p0_press_2 requires:
Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
p0_press_2 requires:
Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
p0_press_2 requires:
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]


--------------------------------------------------------------------------------

Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: p0_velnw_0
Consumed at: p0_feedbf
Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: p0_velnw_1
Consumed at: p0_feedbf
Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
Produced at: p0_velnw_2
Consumed at: p0_feedbf
TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
Produced at: p0_les_0
Consumed at: p0_les_1
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_feedbf
Consumed at: p0_les_1
TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
Produced at: p0_les_0
Consumed at: p0_les_2
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_feedbf
Consumed at: p0_les_2
TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
Produced at: p0_les_0
Consumed at: p0_les_3
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_feedbf
Consumed at: p0_les_3
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_les_1
Consumed at: p0_adam
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_les_2
Consumed at: p0_adam
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_les_3
Consumed at: p0_adam
TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_0
TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_0
TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_0
TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: p0_velnw_0
Consumed at: p0_press_0
TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: p0_velnw_1
Consumed at: p0_press_0
TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
Produced at: p0_velnw_2
Consumed at: p0_press_0
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
Produced at: p0_press_0
Consumed at: p0_press_1
Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_feedbf
Consumed at: p0_press_2
Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_feedbf
Consumed at: p0_press_2
Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_feedbf
Consumed at: p0_press_2
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_feedbf
Consumed at: p0_press_2
Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_feedbf
Consumed at: p0_press_2
Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_feedbf
Consumed at: p0_press_2
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: p0_adam
Consumed at: p0_press_2
Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
Produced at: p0_velnw_2
Consumed at: p0_press_2
Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: p0_velnw_1
Consumed at: p0_press_2
Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: p0_velnw_0
Consumed at: p0_press_2
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
Produced at: p0_press_0
Consumed at: p0_press_2

Transit Streams Added
 ! ==============================================
 ! Name: p0_velnw_0 Order: 0
 ! Input streams:
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================


 ! ==============================================
 ! Name: p0_velnw_1 Order: 1
 ! Input streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================


 ! ==============================================
 ! Name: p0_velnw_2 Order: 2
 ! Input streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79)) then
        pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_2
 ! ==============================================


 ! ==============================================
 ! Name: p0_feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_0 Order: 4
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_1 Order: 5
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_2 Order: 6
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
 !	StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_3 Order: 7
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
 !	StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3
 ! ==============================================


 ! ==============================================
 ! Name: p0_adam Order: 8
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam
 ! ==============================================


 ! ==============================================
 ! Name: p0_press_0 Order: 9
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
 !	StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
 !	StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
 !	StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
 !	StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
 !	StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0
 ! ==============================================


 ! ==============================================
 ! Name: p0_press_1 Order: 10
 ! Input streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1
 ! ==============================================


 ! ==============================================
 ! Name: p0_press_2 Order: 11
 ! Input streams:
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Reduction Vars Linked 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: p0_velnw_0 Order: 0
 ! Input streams:
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================


 ! ==============================================
 ! Name: p0_velnw_1 Order: 1
 ! Input streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================


 ! ==============================================
 ! Name: p0_velnw_2 Order: 2
 ! Input streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79)) then
        pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_2
 ! ==============================================


 ! ==============================================
 ! Name: p0_feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_0 Order: 4
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_1 Order: 5
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_2 Order: 6
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
 !	StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_3 Order: 7
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
 !	StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3
 ! ==============================================


 ! ==============================================
 ! Name: p0_adam Order: 8
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam
 ! ==============================================


 ! ==============================================
 ! Name: p0_press_0 Order: 9
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
 !	StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
 !	StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
 !	StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
 !	StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
 !	StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0
 ! ==============================================


 ! ==============================================
 ! Name: p0_press_1 Order: 10
 ! Input streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1
 ! ==============================================


 ! ==============================================
 ! Name: p0_press_2 Order: 11
 ! Input streams:
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
! 	"area"
! 	"rhsav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Synthesised Loop Vars 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: p0_velnw_0 Order: 0
 ! Input streams:
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================


 ! ==============================================
 ! Name: p0_velnw_1 Order: 1
 ! Input streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================


 ! ==============================================
 ! Name: p0_velnw_2 Order: 2
 ! Input streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79)) then
        pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_2
 ! ==============================================


 ! ==============================================
 ! Name: p0_feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_0 Order: 4
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_1 Order: 5
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_2 Order: 6
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
 !	StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2
 ! ==============================================


 ! ==============================================
 ! Name: p0_les_3 Order: 7
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
 !	StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3
 ! ==============================================


 ! ==============================================
 ! Name: p0_adam Order: 8
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam
 ! ==============================================


 ! ==============================================
 ! Name: p0_press_0 Order: 9
 ! Input streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
 !	StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
 !	StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
 !	StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
 !	StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
 !	StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0
 ! ==============================================


 ! ==============================================
 ! Name: p0_press_1 Order: 10
 ! Input streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1
 ! ==============================================


 ! ==============================================
 ! Name: p0_press_2 Order: 11
 ! Input streams:
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
! 	"area"
! 	"rhsav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Smart Caches 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

"------------------------------------------"
 ! ==============================================
 ! Name: p0_velnw_0 Order: 0
 ! Input streams:
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: p0_ip1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_velnw_1 Order: 1
 ! Input streams:
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: p0_i_jp1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_velnw_2 Order: 2
 ! Input streams:
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: p0_i_j_kp1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79)) then
        pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_2
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_les_0 Order: 4
 ! Input streams:
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: diu2_im1_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu2_i_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu2_im1_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu3_im1_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu3_i_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu3_im1_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu4_ip1_jm1_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu4_ip1_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu4_i_jm1_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu6_i_jm1_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu6_i_j_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu6_i_jm1_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu7_ip1_j_km1 array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu7_ip1_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu7_i_j_km1 array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu8_i_jp1_km1 array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu8_i_jp1_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu8_i_j_km1 array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_les_1 Order: 5
 ! Input streams:
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: diu1_ip1_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu2_i_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu3_i_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu4_ip1_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu4_ip1_jm1_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu7_ip1_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu7_ip1_j_km1 array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: dx1_ip1 array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_jp1 array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_kp1 array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: dzn_km1 array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: sm_i_jm1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_jm1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_les_2 Order: 6
 ! Input streams:
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: diu2_im1_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu2_i_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu4_ip1_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu5_i_jp1_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu6_i_j_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu8_i_jp1_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu8_i_jp1_km1 array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: dx1_ip1 array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dx1_im1 array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_jp1 array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_kp1 array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: dzn_km1 array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: sm_im1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_im1_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_les_3 Order: 7
 ! Input streams:
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: diu3_im1_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu3_i_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu6_i_jm1_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu6_i_j_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu7_ip1_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu8_i_jp1_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_kp1 array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 !	Stream: dx1_ip1 array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dx1_im1 array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_jp1 array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dy1_jm1 array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_kp1 array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: sm_im1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_im1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_jm1_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_jp1_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_ip1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: sm_i_jm1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_adam Order: 8
 ! Input streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_press_0 Order: 9
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_im1_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_jm1_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_km1 array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_im1_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_jm1_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: w_i_j_km1 array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_press_1 Order: 10
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p0_press_2 Order: 11
 ! Input streams:
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
! 	"area"
! 	"rhsav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2
 ! ==============================================


"------------------------------------------"

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Memory Readers 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_velnw_0
--------------------------------------------------------------------------------
Input Streams:
	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: p0_ip1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
OutputStreams:
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine velnw_0(dt,dxs,f,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_0

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p0_velnw_0_smart_cache
Size: 2
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: p0_i_j_k
	Buffer size: 2
	Max positive offset = 1
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,81)]
	Output Streams:
		p0_ip1_j_k from buffer index = 2
		p0_i_j_k from buffer index = 1 - Real origin
	-------------------------------


Input Streams:
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Output Streams:
	Stream: p0_ip1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_0_p0_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	p0_i_j_k --> Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_0_dxs_i_reader
--------------------------------------------------------------------------------
Memory to streams:
	dxs_i --> Stream "dxs_i" "dxs" Float [(0,300)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_0_f_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	f_i_j_k --> Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_0_u_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	u_i_j_k --> Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_velnw_1
--------------------------------------------------------------------------------
Input Streams:
	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: p0_i_jp1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
OutputStreams:
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine velnw_1(dt,dys,g,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_1

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p0_velnw_1_smart_cache
Size: 304
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: u_i_j_k
	Buffer size: 304
	Max positive offset = 303
	Max negative offset = 0
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		u_i_j_k from buffer index = 1 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: p0_i_j_k
	Buffer size: 304
	Max positive offset = 303
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,81)]
	Output Streams:
		p0_i_jp1_k from buffer index = 304
		p0_i_j_k from buffer index = 1 - Real origin
	-------------------------------


Input Streams:
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Output Streams:
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: p0_i_jp1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_1_p0_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	p0_i_j_k --> Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_1_dys_j_reader
--------------------------------------------------------------------------------
Memory to streams:
	dys_j --> Stream "dys_j" "dys" Float [(0,300)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_1_g_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	g_i_j_k --> Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_1_v_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	v_i_j_k --> Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_velnw_2
--------------------------------------------------------------------------------
Input Streams:
	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: p0_i_j_kp1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
OutputStreams:
	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine velnw_2(dt,dzs,h,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79)) then
        pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_2

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p0_velnw_2_smart_cache
Size: 91810
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: v_i_j_k
	Buffer size: 91810
	Max positive offset = 91809
	Max negative offset = 0
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		v_i_j_k from buffer index = 1 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: u_i_j_k
	Buffer size: 91810
	Max positive offset = 91809
	Max negative offset = 0
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		u_i_j_k from buffer index = 1 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: p0_i_j_k
	Buffer size: 91810
	Max positive offset = 91809
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,81)]
	Output Streams:
		p0_i_j_kp1 from buffer index = 91810
		p0_i_j_k from buffer index = 1 - Real origin
	-------------------------------


Input Streams:
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Output Streams:
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: p0_i_j_kp1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_2_p0_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	p0_i_j_k --> Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_2_dzs_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	dzs_k --> Stream "dzs_k" "dzs" Float [(-1,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_2_h_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	h_i_j_k --> Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_velnw_2_w_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	w_i_j_k --> Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_feedbf
--------------------------------------------------------------------------------
Input Streams:
	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
OutputStreams:
	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Nothing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_bmask1_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	bmask1_i_j_k --> Stream "bmask1_i_j_k" "bmask1" Float [(-1,301),(0,301),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_cmask1_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	cmask1_i_j_k --> Stream "cmask1_i_j_k" "cmask1" Float [(0,301),(-1,301),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_dmask1_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	dmask1_i_j_k --> Stream "dmask1_i_j_k" "dmask1" Float [(0,301),(0,301),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_f_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	f_i_j_k --> Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_fx_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	fx_i_j_k --> Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_fy_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	fy_i_j_k --> Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_fz_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	fz_i_j_k --> Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_g_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	g_i_j_k --> Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_h_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	h_i_j_k --> Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_usum_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	usum_i_j_k --> Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_vsum_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	vsum_i_j_k --> Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_feedbf_wsum_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	wsum_i_j_k --> Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_les_0
--------------------------------------------------------------------------------
Input Streams:
	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu2_im1_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_i_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_im1_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_im1_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_im1_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_jm1_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_i_jm1_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_jm1_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_jm1_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_km1 array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_i_j_km1 array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_km1 array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_j_km1 array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
OutputStreams:
	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p0_les_0_smart_cache
Size: 92113
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: fx_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fx_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fy_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fy_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fz_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fz_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: usum_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		usum_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: vsum_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		vsum_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: wsum_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		wsum_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: w_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,301),(-1,301),(-1,81)]
	Output Streams:
		w_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: v_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		v_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: u_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		u_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: h_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		h_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: g_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		g_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: f_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		f_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu2_i_j_k
	Buffer size: 92113
	Max positive offset = 303
	Max negative offset = 1
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu2_im1_jp1_k from buffer index = 92112
		diu2_i_j_k from buffer index = 91810 - Real origin
		diu2_i_jp1_k from buffer index = 92113
		diu2_im1_j_k from buffer index = 91809
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu3_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 1
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu3_im1_j_kp1 from buffer index = 183618
		diu3_i_j_kp1 from buffer index = 183619
		diu3_i_j_k from buffer index = 91810 - Real origin
		diu3_im1_j_k from buffer index = 91809
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu4_i_j_k
	Buffer size: 92113
	Max positive offset = 1
	Max negative offset = 303
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu4_i_j_k from buffer index = 91810 - Real origin
		diu4_ip1_jm1_k from buffer index = 91508
		diu4_ip1_j_k from buffer index = 91811
		diu4_i_jm1_k from buffer index = 91507
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu6_i_j_k
	Buffer size: 92113
	Max positive offset = 91809
	Max negative offset = 303
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu6_i_jm1_kp1 from buffer index = 183316
		diu6_i_j_kp1 from buffer index = 183619
		diu6_i_j_k from buffer index = 91810 - Real origin
		diu6_i_jm1_k from buffer index = 91507
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu7_i_j_k
	Buffer size: 92113
	Max positive offset = 1
	Max negative offset = 91809
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu7_i_j_k from buffer index = 91810 - Real origin
		diu7_ip1_j_km1 from buffer index = 2
		diu7_ip1_j_k from buffer index = 91811
		diu7_i_j_km1 from buffer index = 1
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu8_i_j_k
	Buffer size: 92113
	Max positive offset = 303
	Max negative offset = 91809
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu8_i_j_k from buffer index = 91810 - Real origin
		diu8_i_jp1_km1 from buffer index = 304
		diu8_i_jp1_k from buffer index = 92113
		diu8_i_j_km1 from buffer index = 1
	-------------------------------


Input Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
Output Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu2_im1_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_i_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_im1_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_im1_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_im1_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_jm1_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_i_jm1_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_jm1_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_jm1_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_km1 array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_i_j_km1 array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_km1 array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_j_km1 array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_diu2_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu2_i_j_k --> Stream "diu2_i_j_k" "diu2" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_diu3_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu3_i_j_k --> Stream "diu3_i_j_k" "diu3" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_diu4_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu4_i_j_k --> Stream "diu4_i_j_k" "diu4" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_diu6_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu6_i_j_k --> Stream "diu6_i_j_k" "diu6" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_diu7_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu7_i_j_k --> Stream "diu7_i_j_k" "diu7" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_diu8_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu8_i_j_k --> Stream "diu8_i_j_k" "diu8" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_delx1_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	delx1_k --> Stream "delx1_k" "delx1" Float [(1,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_diu1_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu1_i_j_k --> Stream "diu1_i_j_k" "diu1" Float [(-1,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_diu5_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu5_i_j_k --> Stream "diu5_i_j_k" "diu5" Float [(-1,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_diu9_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu9_i_j_k --> Stream "diu9_i_j_k" "diu9" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_0_sm_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	sm_i_j_k --> Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_les_1
--------------------------------------------------------------------------------
Input Streams:
	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu1_ip1_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu2_i_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_jm1_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_km1 array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: dx1_ip1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_jp1 array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_kp1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_km1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: sm_i_jm1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_jm1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
OutputStreams:
	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p0_les_1_smart_cache
Size: 183620
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: fx_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fx_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fy_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fy_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fz_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fz_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: usum_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		usum_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: vsum_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		vsum_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: wsum_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		wsum_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: w_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,301),(-1,301),(-1,81)]
	Output Streams:
		w_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: v_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		v_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: u_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		u_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: h_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		h_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: g_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		g_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu1_i_j_k
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 0
	Stream Dimensions: [(-1,302),(0,302),(0,82)]
	Output Streams:
		diu1_ip1_j_k from buffer index = 91811
		diu1_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu2_i_j_k
	Buffer size: 183620
	Max positive offset = 303
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu2_i_jp1_k from buffer index = 92113
		diu2_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu3_i_j_k
	Buffer size: 183620
	Max positive offset = 91809
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu3_i_j_kp1 from buffer index = 183619
		diu3_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu4_i_j_k
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 302
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu4_ip1_j_k from buffer index = 91811
		diu4_ip1_jm1_k from buffer index = 91508
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu7_i_j_k
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 91808
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu7_ip1_j_k from buffer index = 91811
		diu7_ip1_j_km1 from buffer index = 2
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dx1_i
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 0
	Stream Dimensions: [(-1,301)]
	Output Streams:
		dx1_ip1 from buffer index = 91811
		dx1_i from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dy1_j
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 0
	Stream Dimensions: [(0,301)]
	Output Streams:
		dy1_jp1 from buffer index = 91811
		dy1_j from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dzn_k
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 1
	Stream Dimensions: [(-1,82)]
	Output Streams:
		dzn_kp1 from buffer index = 91811
		dzn_k from buffer index = 91810 - Real origin
		dzn_km1 from buffer index = 91809
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: sm_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(-1,301),(-1,301),(0,81)]
	Output Streams:
		sm_i_jm1_k from buffer index = 91810
		sm_i_j_kp1 from buffer index = 183619
		sm_i_j_k from buffer index = 91810 - Real origin
		sm_i_jp1_k from buffer index = 92113
		sm_ip1_jm1_k from buffer index = 91811
		sm_ip1_j_km1 from buffer index = 2
		sm_ip1_j_kp1 from buffer index = 183620
		sm_ip1_j_k from buffer index = 91811
		sm_ip1_jp1_k from buffer index = 92114
		sm_i_j_km1 from buffer index = 1
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: f_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		f_i_j_k from buffer index = 91810 - Real origin
	-------------------------------


Input Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Output Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu1_ip1_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu2_i_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_jm1_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_km1 array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: dx1_ip1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_jp1 array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_kp1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_km1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: sm_i_jm1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_jm1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_1_diu1_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu1_i_j_k --> Stream "diu1_i_j_k" "diu1" Float [(-1,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_1_diu2_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu2_i_j_k --> Stream "diu2_i_j_k" "diu2" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_1_diu3_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu3_i_j_k --> Stream "diu3_i_j_k" "diu3" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_1_diu4_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu4_i_j_k --> Stream "diu4_i_j_k" "diu4" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_1_diu7_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu7_i_j_k --> Stream "diu7_i_j_k" "diu7" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_1_dx1_i_reader
--------------------------------------------------------------------------------
Memory to streams:
	dx1_i --> Stream "dx1_i" "dx1" Float [(-1,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_1_dy1_j_reader
--------------------------------------------------------------------------------
Memory to streams:
	dy1_j --> Stream "dy1_j" "dy1" Float [(0,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_1_dzn_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	dzn_k --> Stream "dzn_k" "dzn" Float [(-1,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_1_dxs_i_reader
--------------------------------------------------------------------------------
Memory to streams:
	dxs_i --> Stream "dxs_i" "dxs" Float [(0,300)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_les_2
--------------------------------------------------------------------------------
Input Streams:
	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu2_im1_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_i_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu5_i_jp1_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu6_i_j_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_km1 array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: dx1_ip1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_im1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_jp1 array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_kp1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_km1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: sm_im1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_im1_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
OutputStreams:
	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p0_les_2_smart_cache
Size: 183620
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: fx_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fx_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fy_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fy_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fz_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fz_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: usum_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		usum_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: vsum_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		vsum_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: wsum_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		wsum_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: w_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,301),(-1,301),(-1,81)]
	Output Streams:
		w_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: v_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		v_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: u_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		u_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: f_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		f_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: h_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		h_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu2_i_j_k
	Buffer size: 183620
	Max positive offset = 303
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu2_im1_jp1_k from buffer index = 92112
		diu2_i_jp1_k from buffer index = 92113
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu4_i_j_k
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu4_ip1_j_k from buffer index = 91811
		diu4_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu5_i_j_k
	Buffer size: 183620
	Max positive offset = 304
	Max negative offset = 0
	Stream Dimensions: [(-1,302),(0,302),(0,82)]
	Output Streams:
		diu5_i_jp1_k from buffer index = 92114
		diu5_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu6_i_j_k
	Buffer size: 183620
	Max positive offset = 91809
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu6_i_j_kp1 from buffer index = 183619
		diu6_i_j_k from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu8_i_j_k
	Buffer size: 183620
	Max positive offset = 303
	Max negative offset = 91809
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu8_i_jp1_k from buffer index = 91810
		diu8_i_jp1_km1 from buffer index = 1
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dx1_i
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 1
	Stream Dimensions: [(-1,301)]
	Output Streams:
		dx1_ip1 from buffer index = 91811
		dx1_i from buffer index = 91810 - Real origin
		dx1_im1 from buffer index = 91809
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dy1_j
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 0
	Stream Dimensions: [(0,301)]
	Output Streams:
		dy1_jp1 from buffer index = 91811
		dy1_j from buffer index = 91810 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dzn_k
	Buffer size: 183620
	Max positive offset = 1
	Max negative offset = 1
	Stream Dimensions: [(-1,82)]
	Output Streams:
		dzn_kp1 from buffer index = 91811
		dzn_k from buffer index = 91810 - Real origin
		dzn_km1 from buffer index = 91809
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: sm_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(-1,301),(-1,301),(0,81)]
	Output Streams:
		sm_im1_j_k from buffer index = 91809
		sm_im1_jp1_k from buffer index = 92112
		sm_i_j_kp1 from buffer index = 183619
		sm_i_j_k from buffer index = 91810 - Real origin
		sm_i_jp1_k from buffer index = 92113
		sm_ip1_j_km1 from buffer index = 2
		sm_ip1_j_kp1 from buffer index = 183620
		sm_ip1_j_k from buffer index = 91811
		sm_ip1_jp1_k from buffer index = 92114
		sm_i_j_km1 from buffer index = 1
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: g_i_j_k
	Buffer size: 183620
	Max positive offset = 91810
	Max negative offset = 91809
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		g_i_j_k from buffer index = 91810 - Real origin
	-------------------------------


Input Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Output Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu2_im1_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu2_i_jp1_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_ip1_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu5_i_jp1_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
	Stream: diu6_i_j_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_km1 array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: dx1_ip1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_im1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_jp1 array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_kp1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_km1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: sm_im1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_im1_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_km1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_2_diu2_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu2_i_j_k --> Stream "diu2_i_j_k" "diu2" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_2_diu4_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu4_i_j_k --> Stream "diu4_i_j_k" "diu4" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_2_diu5_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu5_i_j_k --> Stream "diu5_i_j_k" "diu5" Float [(-1,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_2_diu6_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu6_i_j_k --> Stream "diu6_i_j_k" "diu6" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_2_diu8_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu8_i_j_k --> Stream "diu8_i_j_k" "diu8" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_2_dx1_i_reader
--------------------------------------------------------------------------------
Memory to streams:
	dx1_i --> Stream "dx1_i" "dx1" Float [(-1,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_2_dy1_j_reader
--------------------------------------------------------------------------------
Memory to streams:
	dy1_j --> Stream "dy1_j" "dy1" Float [(0,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_2_dzn_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	dzn_k --> Stream "dzn_k" "dzn" Float [(-1,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_2_dys_j_reader
--------------------------------------------------------------------------------
Memory to streams:
	dys_j --> Stream "dys_j" "dys" Float [(0,300)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_les_3
--------------------------------------------------------------------------------
Input Streams:
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu3_im1_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_jm1_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu9_i_j_kp1 array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: dx1_ip1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_im1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_jp1 array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dy1_jm1 array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_kp1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: sm_im1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_im1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jm1_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jp1_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jm1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
OutputStreams:
	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p0_les_3_smart_cache
Size: 92416
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: fx_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fx_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fy_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fy_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fz_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fz_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: usum_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		usum_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: vsum_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		vsum_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: wsum_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		wsum_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: w_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,301),(-1,301),(-1,81)]
	Output Streams:
		w_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: v_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		v_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: u_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		u_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: g_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		g_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: f_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		f_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu3_i_j_k
	Buffer size: 92416
	Max positive offset = 91809
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu3_im1_j_kp1 from buffer index = 92112
		diu3_i_j_kp1 from buffer index = 92113
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu6_i_j_k
	Buffer size: 92416
	Max positive offset = 91809
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu6_i_jm1_kp1 from buffer index = 92113
		diu6_i_j_kp1 from buffer index = 92113
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu7_i_j_k
	Buffer size: 92416
	Max positive offset = 1
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu7_ip1_j_k from buffer index = 305
		diu7_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu8_i_j_k
	Buffer size: 92416
	Max positive offset = 303
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu8_i_jp1_k from buffer index = 607
		diu8_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: diu9_i_j_k
	Buffer size: 92416
	Max positive offset = 91809
	Max negative offset = 0
	Stream Dimensions: [(0,302),(0,302),(0,82)]
	Output Streams:
		diu9_i_j_kp1 from buffer index = 92113
		diu9_i_j_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dx1_i
	Buffer size: 92416
	Max positive offset = 1
	Max negative offset = 1
	Stream Dimensions: [(-1,301)]
	Output Streams:
		dx1_ip1 from buffer index = 305
		dx1_i from buffer index = 304 - Real origin
		dx1_im1 from buffer index = 303
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dy1_j
	Buffer size: 92416
	Max positive offset = 1
	Max negative offset = 1
	Stream Dimensions: [(0,301)]
	Output Streams:
		dy1_jp1 from buffer index = 305
		dy1_j from buffer index = 304 - Real origin
		dy1_jm1 from buffer index = 303
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dzn_k
	Buffer size: 92416
	Max positive offset = 1
	Max negative offset = 0
	Stream Dimensions: [(-1,82)]
	Output Streams:
		dzn_kp1 from buffer index = 305
		dzn_k from buffer index = 304 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: sm_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(-1,301),(-1,301),(0,81)]
	Output Streams:
		sm_im1_j_kp1 from buffer index = 92112
		sm_im1_j_k from buffer index = 303
		sm_i_jm1_kp1 from buffer index = 91810
		sm_i_j_kp1 from buffer index = 92113
		sm_i_j_k from buffer index = 304 - Real origin
		sm_i_jp1_kp1 from buffer index = 92416
		sm_i_jp1_k from buffer index = 607
		sm_ip1_j_kp1 from buffer index = 92114
		sm_ip1_j_k from buffer index = 305
		sm_i_jm1_k from buffer index = 1
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: h_i_j_k
	Buffer size: 92416
	Max positive offset = 92112
	Max negative offset = 303
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		h_i_j_k from buffer index = 304 - Real origin
	-------------------------------


Input Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Output Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: diu3_im1_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu3_i_j_kp1 array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_jm1_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu6_i_j_kp1 array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_ip1_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_jp1_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu9_i_j_kp1 array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
	Stream: dx1_ip1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dx1_im1 array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_jp1 array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dy1_jm1 array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_kp1 array name: dzn type: Float dimensions: [(-1,82)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: sm_im1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_im1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jm1_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jp1_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jp1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_kp1 array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_ip1_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: sm_i_jm1_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_3_diu3_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu3_i_j_k --> Stream "diu3_i_j_k" "diu3" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_3_diu6_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu6_i_j_k --> Stream "diu6_i_j_k" "diu6" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_3_diu7_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu7_i_j_k --> Stream "diu7_i_j_k" "diu7" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_3_diu8_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu8_i_j_k --> Stream "diu8_i_j_k" "diu8" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_3_diu9_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	diu9_i_j_k --> Stream "diu9_i_j_k" "diu9" Float [(0,302),(0,302),(0,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_3_dx1_i_reader
--------------------------------------------------------------------------------
Memory to streams:
	dx1_i --> Stream "dx1_i" "dx1" Float [(-1,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_3_dy1_j_reader
--------------------------------------------------------------------------------
Memory to streams:
	dy1_j --> Stream "dy1_j" "dy1" Float [(0,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_les_3_dzn_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	dzn_k --> Stream "dzn_k" "dzn" Float [(-1,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_adam
--------------------------------------------------------------------------------
Input Streams:
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
OutputStreams:
	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Nothing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_adam_fold_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	fold_i_j_k --> Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_adam_gold_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	gold_i_j_k --> Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_adam_hold_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	hold_i_j_k --> Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_press_0
--------------------------------------------------------------------------------
Input Streams:
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_im1_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_jm1_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_km1 array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_im1_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: v_i_jm1_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: w_i_j_km1 array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
OutputStreams:
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p0_press_0_smart_cache
Size: 91507
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: fx_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fx_i_j_k from buffer index = 91507 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fy_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fy_i_j_k from buffer index = 91507 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fz_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		fz_i_j_k from buffer index = 91507 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: usum_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		usum_i_j_k from buffer index = 91507 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: vsum_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		vsum_i_j_k from buffer index = 91507 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: wsum_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		wsum_i_j_k from buffer index = 91507 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: fold_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(1,300),(1,300),(1,80)]
	Output Streams:
		fold_i_j_k from buffer index = 91507 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: gold_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(1,300),(1,300),(1,80)]
	Output Streams:
		gold_i_j_k from buffer index = 91507 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: hold_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(1,300),(1,300),(1,80)]
	Output Streams:
		hold_i_j_k from buffer index = 91507 - Real origin
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: f_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 1
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		f_i_j_k from buffer index = 91507 - Real origin
		f_im1_j_k from buffer index = 91506
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: g_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 301
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		g_i_j_k from buffer index = 91507 - Real origin
		g_i_jm1_k from buffer index = 91206
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: h_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 90601
	Stream Dimensions: [(0,300),(0,300),(0,80)]
	Output Streams:
		h_i_j_k from buffer index = 91507 - Real origin
		h_i_j_km1 from buffer index = 906
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: u_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 1
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		u_i_j_k from buffer index = 91507 - Real origin
		u_im1_j_k from buffer index = 91506
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: v_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 302
	Stream Dimensions: [(0,301),(-1,301),(0,81)]
	Output Streams:
		v_i_j_k from buffer index = 91507 - Real origin
		v_i_jm1_k from buffer index = 91205
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: w_i_j_k
	Buffer size: 91507
	Max positive offset = 0
	Max negative offset = 91506
	Stream Dimensions: [(0,301),(-1,301),(-1,81)]
	Output Streams:
		w_i_j_k from buffer index = 91507 - Real origin
		w_i_j_km1 from buffer index = 1
	-------------------------------


Input Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
Output Streams:
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_im1_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_jm1_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_km1 array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_im1_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: v_i_jm1_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: w_i_j_km1 array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_press_0_dx1_i_reader
--------------------------------------------------------------------------------
Memory to streams:
	dx1_i --> Stream "dx1_i" "dx1" Float [(-1,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_press_0_dy1_j_reader
--------------------------------------------------------------------------------
Memory to streams:
	dy1_j --> Stream "dy1_j" "dy1" Float [(0,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_press_0_dzn_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	dzn_k --> Stream "dzn_k" "dzn" Float [(-1,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_press_0_rhs_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	rhs_i_j_k --> Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a reduce kernel.
Name:p0_press_1
--------------------------------------------------------------------------------
Input Streams:
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
Output Streams:
	TransitStream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	TransitStream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	TransitStream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
Input reduction vars: 
Output reduction vars: 
	rhsav
	area
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Nothing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_press_1_dx1_i_reader
--------------------------------------------------------------------------------
Memory to streams:
	dx1_i --> Stream "dx1_i" "dx1" Float [(-1,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_press_1_dy1_j_reader
--------------------------------------------------------------------------------
Memory to streams:
	dy1_j --> Stream "dy1_j" "dy1" Float [(0,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p0_press_1_dzn_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	dzn_k --> Stream "dzn_k" "dzn" Float [(-1,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p0_press_2
--------------------------------------------------------------------------------
Input Streams:
	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
OutputStreams:
	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
Input reduction vars: 
	area
	rhsav
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Nothing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory writer kernel.
Name: p0_press_2_output_writer
--------------------------------------------------------------------------------
Streams to memory:
	Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)] --> rhs_i_j_k
	Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)] --> u_i_j_k
	Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)] --> v_i_j_k
	Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)] --> w_i_j_k
	Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)] --> f_i_j_k
	Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)] --> fx_i_j_k
	Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)] --> fy_i_j_k
	Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)] --> fz_i_j_k
	Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)] --> g_i_j_k
	Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)] --> h_i_j_k
	Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)] --> usum_i_j_k
	Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)] --> vsum_i_j_k
	Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)] --> wsum_i_j_k
	Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)] --> fold_i_j_k
	Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)] --> gold_i_j_k
	Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)] --> hold_i_j_k

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Routing Pipes 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Pipe "p0_velnw_0" "p0_velnw_1_smart_cache" "p0_velnw_0_p0_velnw_1_smart_cache_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_0_smart_cache" "p0_velnw_0" "p0_velnw_0_smart_cache_p0_velnw_0_p0_ip1_j_k_pipe" Float (Stream "p0_ip1_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p0_velnw_0_smart_cache" "p0_velnw_0" "p0_velnw_0_smart_cache_p0_velnw_0_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p0_velnw_0_p0_i_j_k_reader" "p0_velnw_0_smart_cache" "p0_velnw_0_p0_i_j_k_reader_p0_velnw_0_smart_cache_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p0_velnw_0_dxs_i_reader" "p0_velnw_0" "p0_velnw_0_dxs_i_reader_p0_velnw_0_dxs_i_pipe" Float (Stream "dxs_i" "dxs" Float [(0,300)])

Pipe "p0_velnw_0_f_i_j_k_reader" "p0_velnw_0" "p0_velnw_0_f_i_j_k_reader_p0_velnw_0_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_velnw_0_u_i_j_k_reader" "p0_velnw_0" "p0_velnw_0_u_i_j_k_reader_p0_velnw_0_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_1" "p0_velnw_2_smart_cache" "p0_velnw_1_p0_velnw_2_smart_cache_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_1" "p0_velnw_2_smart_cache" "p0_velnw_1_p0_velnw_2_smart_cache_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_1_smart_cache" "p0_velnw_1" "p0_velnw_1_smart_cache_p0_velnw_1_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_1_smart_cache" "p0_velnw_1" "p0_velnw_1_smart_cache_p0_velnw_1_p0_i_jp1_k_pipe" Float (Stream "p0_i_jp1_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p0_velnw_1_smart_cache" "p0_velnw_1" "p0_velnw_1_smart_cache_p0_velnw_1_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p0_velnw_1_p0_i_j_k_reader" "p0_velnw_1_smart_cache" "p0_velnw_1_p0_i_j_k_reader_p0_velnw_1_smart_cache_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p0_velnw_1_dys_j_reader" "p0_velnw_1" "p0_velnw_1_dys_j_reader_p0_velnw_1_dys_j_pipe" Float (Stream "dys_j" "dys" Float [(0,300)])

Pipe "p0_velnw_1_g_i_j_k_reader" "p0_velnw_1" "p0_velnw_1_g_i_j_k_reader_p0_velnw_1_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_velnw_1_v_i_j_k_reader" "p0_velnw_1" "p0_velnw_1_v_i_j_k_reader_p0_velnw_1_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_2" "p0_feedbf" "p0_velnw_2_p0_feedbf_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_2" "p0_feedbf" "p0_velnw_2_p0_feedbf_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_2" "p0_feedbf" "p0_velnw_2_p0_feedbf_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_velnw_2_smart_cache" "p0_velnw_2" "p0_velnw_2_smart_cache_p0_velnw_2_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_2_smart_cache" "p0_velnw_2" "p0_velnw_2_smart_cache_p0_velnw_2_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_velnw_2_smart_cache" "p0_velnw_2" "p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_kp1_pipe" Float (Stream "p0_i_j_kp1" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p0_velnw_2_smart_cache" "p0_velnw_2" "p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p0_velnw_2_p0_i_j_k_reader" "p0_velnw_2_smart_cache" "p0_velnw_2_p0_i_j_k_reader_p0_velnw_2_smart_cache_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p0_velnw_2_dzs_k_reader" "p0_velnw_2" "p0_velnw_2_dzs_k_reader_p0_velnw_2_dzs_k_pipe" Float (Stream "dzs_k" "dzs" Float [(-1,82)])

Pipe "p0_velnw_2_h_i_j_k_reader" "p0_velnw_2" "p0_velnw_2_h_i_j_k_reader_p0_velnw_2_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_velnw_2_w_i_j_k_reader" "p0_velnw_2" "p0_velnw_2_w_i_j_k_reader_p0_velnw_2_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf" "p0_les_0_smart_cache" "p0_feedbf_p0_les_0_smart_cache_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf_bmask1_i_j_k_reader" "p0_feedbf" "p0_feedbf_bmask1_i_j_k_reader_p0_feedbf_bmask1_i_j_k_pipe" Float (Stream "bmask1_i_j_k" "bmask1" Float [(-1,301),(0,301),(0,81)])

Pipe "p0_feedbf_cmask1_i_j_k_reader" "p0_feedbf" "p0_feedbf_cmask1_i_j_k_reader_p0_feedbf_cmask1_i_j_k_pipe" Float (Stream "cmask1_i_j_k" "cmask1" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_feedbf_dmask1_i_j_k_reader" "p0_feedbf" "p0_feedbf_dmask1_i_j_k_reader_p0_feedbf_dmask1_i_j_k_pipe" Float (Stream "dmask1_i_j_k" "dmask1" Float [(0,301),(0,301),(0,81)])

Pipe "p0_feedbf_f_i_j_k_reader" "p0_feedbf" "p0_feedbf_f_i_j_k_reader_p0_feedbf_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf_fx_i_j_k_reader" "p0_feedbf" "p0_feedbf_fx_i_j_k_reader_p0_feedbf_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf_fy_i_j_k_reader" "p0_feedbf" "p0_feedbf_fy_i_j_k_reader_p0_feedbf_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf_fz_i_j_k_reader" "p0_feedbf" "p0_feedbf_fz_i_j_k_reader_p0_feedbf_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf_g_i_j_k_reader" "p0_feedbf" "p0_feedbf_g_i_j_k_reader_p0_feedbf_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf_h_i_j_k_reader" "p0_feedbf" "p0_feedbf_h_i_j_k_reader_p0_feedbf_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf_usum_i_j_k_reader" "p0_feedbf" "p0_feedbf_usum_i_j_k_reader_p0_feedbf_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf_vsum_i_j_k_reader" "p0_feedbf" "p0_feedbf_vsum_i_j_k_reader_p0_feedbf_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_feedbf_wsum_i_j_k_reader" "p0_feedbf" "p0_feedbf_wsum_i_j_k_reader_p0_feedbf_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_sm_i_j_k_pipe" Float (Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_0" "p0_les_1_smart_cache" "p0_les_0_p0_les_1_smart_cache_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu2_im1_jp1_k_pipe" Float (Stream "diu2_im1_jp1_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu2_i_j_k_pipe" Float (Stream "diu2_i_j_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu2_i_jp1_k_pipe" Float (Stream "diu2_i_jp1_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu2_im1_j_k_pipe" Float (Stream "diu2_im1_j_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu3_im1_j_kp1_pipe" Float (Stream "diu3_im1_j_kp1" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu3_i_j_kp1_pipe" Float (Stream "diu3_i_j_kp1" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu3_i_j_k_pipe" Float (Stream "diu3_i_j_k" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu3_im1_j_k_pipe" Float (Stream "diu3_im1_j_k" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu4_i_j_k_pipe" Float (Stream "diu4_i_j_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu4_ip1_jm1_k_pipe" Float (Stream "diu4_ip1_jm1_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu4_ip1_j_k_pipe" Float (Stream "diu4_ip1_j_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu4_i_jm1_k_pipe" Float (Stream "diu4_i_jm1_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_kp1_pipe" Float (Stream "diu6_i_jm1_kp1" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu6_i_j_kp1_pipe" Float (Stream "diu6_i_j_kp1" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu6_i_j_k_pipe" Float (Stream "diu6_i_j_k" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_k_pipe" Float (Stream "diu6_i_jm1_k" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu7_i_j_k_pipe" Float (Stream "diu7_i_j_k" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_km1_pipe" Float (Stream "diu7_ip1_j_km1" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_k_pipe" Float (Stream "diu7_ip1_j_k" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu7_i_j_km1_pipe" Float (Stream "diu7_i_j_km1" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu8_i_j_k_pipe" Float (Stream "diu8_i_j_k" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_km1_pipe" Float (Stream "diu8_i_jp1_km1" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_k_pipe" Float (Stream "diu8_i_jp1_k" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_smart_cache" "p0_les_0" "p0_les_0_smart_cache_p0_les_0_diu8_i_j_km1_pipe" Float (Stream "diu8_i_j_km1" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_diu2_i_j_k_reader" "p0_les_0_smart_cache" "p0_les_0_diu2_i_j_k_reader_p0_les_0_smart_cache_diu2_i_j_k_pipe" Float (Stream "diu2_i_j_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_diu3_i_j_k_reader" "p0_les_0_smart_cache" "p0_les_0_diu3_i_j_k_reader_p0_les_0_smart_cache_diu3_i_j_k_pipe" Float (Stream "diu3_i_j_k" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_diu4_i_j_k_reader" "p0_les_0_smart_cache" "p0_les_0_diu4_i_j_k_reader_p0_les_0_smart_cache_diu4_i_j_k_pipe" Float (Stream "diu4_i_j_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_diu6_i_j_k_reader" "p0_les_0_smart_cache" "p0_les_0_diu6_i_j_k_reader_p0_les_0_smart_cache_diu6_i_j_k_pipe" Float (Stream "diu6_i_j_k" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_diu7_i_j_k_reader" "p0_les_0_smart_cache" "p0_les_0_diu7_i_j_k_reader_p0_les_0_smart_cache_diu7_i_j_k_pipe" Float (Stream "diu7_i_j_k" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_diu8_i_j_k_reader" "p0_les_0_smart_cache" "p0_les_0_diu8_i_j_k_reader_p0_les_0_smart_cache_diu8_i_j_k_pipe" Float (Stream "diu8_i_j_k" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_delx1_k_reader" "p0_les_0" "p0_les_0_delx1_k_reader_p0_les_0_delx1_k_pipe" Float (Stream "delx1_k" "delx1" Float [(1,80)])

Pipe "p0_les_0_diu1_i_j_k_reader" "p0_les_0" "p0_les_0_diu1_i_j_k_reader_p0_les_0_diu1_i_j_k_pipe" Float (Stream "diu1_i_j_k" "diu1" Float [(-1,302),(0,302),(0,82)])

Pipe "p0_les_0_diu5_i_j_k_reader" "p0_les_0" "p0_les_0_diu5_i_j_k_reader_p0_les_0_diu5_i_j_k_pipe" Float (Stream "diu5_i_j_k" "diu5" Float [(-1,302),(0,302),(0,82)])

Pipe "p0_les_0_diu9_i_j_k_reader" "p0_les_0" "p0_les_0_diu9_i_j_k_reader_p0_les_0_diu9_i_j_k_pipe" Float (Stream "diu9_i_j_k" "diu9" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_0_sm_i_j_k_reader" "p0_les_0" "p0_les_0_sm_i_j_k_reader_p0_les_0_sm_i_j_k_pipe" Float (Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_sm_i_j_k_pipe" Float (Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1" "p0_les_2_smart_cache" "p0_les_1_p0_les_2_smart_cache_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu1_ip1_j_k_pipe" Float (Stream "diu1_ip1_j_k" "diu1" Float [(-1,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu1_i_j_k_pipe" Float (Stream "diu1_i_j_k" "diu1" Float [(-1,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu2_i_jp1_k_pipe" Float (Stream "diu2_i_jp1_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu2_i_j_k_pipe" Float (Stream "diu2_i_j_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu3_i_j_kp1_pipe" Float (Stream "diu3_i_j_kp1" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu3_i_j_k_pipe" Float (Stream "diu3_i_j_k" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu4_ip1_j_k_pipe" Float (Stream "diu4_ip1_j_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu4_ip1_jm1_k_pipe" Float (Stream "diu4_ip1_jm1_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_k_pipe" Float (Stream "diu7_ip1_j_k" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_km1_pipe" Float (Stream "diu7_ip1_j_km1" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_dx1_ip1_pipe" Float (Stream "dx1_ip1" "dx1" Float [(-1,301)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_dx1_i_pipe" Float (Stream "dx1_i" "dx1" Float [(-1,301)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_dy1_jp1_pipe" Float (Stream "dy1_jp1" "dy1" Float [(0,301)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_dy1_j_pipe" Float (Stream "dy1_j" "dy1" Float [(0,301)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_dzn_kp1_pipe" Float (Stream "dzn_kp1" "dzn" Float [(-1,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_dzn_k_pipe" Float (Stream "dzn_k" "dzn" Float [(-1,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_dzn_km1_pipe" Float (Stream "dzn_km1" "dzn" Float [(-1,82)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_i_jm1_k_pipe" Float (Stream "sm_i_jm1_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_i_j_kp1_pipe" Float (Stream "sm_i_j_kp1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_i_j_k_pipe" Float (Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_i_jp1_k_pipe" Float (Stream "sm_i_jp1_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_ip1_jm1_k_pipe" Float (Stream "sm_ip1_jm1_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_ip1_j_km1_pipe" Float (Stream "sm_ip1_j_km1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_ip1_j_kp1_pipe" Float (Stream "sm_ip1_j_kp1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_ip1_j_k_pipe" Float (Stream "sm_ip1_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_ip1_jp1_k_pipe" Float (Stream "sm_ip1_jp1_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_smart_cache" "p0_les_1" "p0_les_1_smart_cache_p0_les_1_sm_i_j_km1_pipe" Float (Stream "sm_i_j_km1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_1_diu1_i_j_k_reader" "p0_les_1_smart_cache" "p0_les_1_diu1_i_j_k_reader_p0_les_1_smart_cache_diu1_i_j_k_pipe" Float (Stream "diu1_i_j_k" "diu1" Float [(-1,302),(0,302),(0,82)])

Pipe "p0_les_1_diu2_i_j_k_reader" "p0_les_1_smart_cache" "p0_les_1_diu2_i_j_k_reader_p0_les_1_smart_cache_diu2_i_j_k_pipe" Float (Stream "diu2_i_j_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_diu3_i_j_k_reader" "p0_les_1_smart_cache" "p0_les_1_diu3_i_j_k_reader_p0_les_1_smart_cache_diu3_i_j_k_pipe" Float (Stream "diu3_i_j_k" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_diu4_i_j_k_reader" "p0_les_1_smart_cache" "p0_les_1_diu4_i_j_k_reader_p0_les_1_smart_cache_diu4_i_j_k_pipe" Float (Stream "diu4_i_j_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_diu7_i_j_k_reader" "p0_les_1_smart_cache" "p0_les_1_diu7_i_j_k_reader_p0_les_1_smart_cache_diu7_i_j_k_pipe" Float (Stream "diu7_i_j_k" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_1_dx1_i_reader" "p0_les_1_smart_cache" "p0_les_1_dx1_i_reader_p0_les_1_smart_cache_dx1_i_pipe" Float (Stream "dx1_i" "dx1" Float [(-1,301)])

Pipe "p0_les_1_dy1_j_reader" "p0_les_1_smart_cache" "p0_les_1_dy1_j_reader_p0_les_1_smart_cache_dy1_j_pipe" Float (Stream "dy1_j" "dy1" Float [(0,301)])

Pipe "p0_les_1_dzn_k_reader" "p0_les_1_smart_cache" "p0_les_1_dzn_k_reader_p0_les_1_smart_cache_dzn_k_pipe" Float (Stream "dzn_k" "dzn" Float [(-1,82)])

Pipe "p0_les_1_dxs_i_reader" "p0_les_1" "p0_les_1_dxs_i_reader_p0_les_1_dxs_i_pipe" Float (Stream "dxs_i" "dxs" Float [(0,300)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_sm_i_j_k_pipe" Float (Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2" "p0_les_3_smart_cache" "p0_les_2_p0_les_3_smart_cache_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu2_im1_jp1_k_pipe" Float (Stream "diu2_im1_jp1_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu2_i_jp1_k_pipe" Float (Stream "diu2_i_jp1_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu4_ip1_j_k_pipe" Float (Stream "diu4_ip1_j_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu4_i_j_k_pipe" Float (Stream "diu4_i_j_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu5_i_jp1_k_pipe" Float (Stream "diu5_i_jp1_k" "diu5" Float [(-1,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu5_i_j_k_pipe" Float (Stream "diu5_i_j_k" "diu5" Float [(-1,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu6_i_j_kp1_pipe" Float (Stream "diu6_i_j_kp1" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu6_i_j_k_pipe" Float (Stream "diu6_i_j_k" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_k_pipe" Float (Stream "diu8_i_jp1_k" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_km1_pipe" Float (Stream "diu8_i_jp1_km1" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_dx1_ip1_pipe" Float (Stream "dx1_ip1" "dx1" Float [(-1,301)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_dx1_i_pipe" Float (Stream "dx1_i" "dx1" Float [(-1,301)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_dx1_im1_pipe" Float (Stream "dx1_im1" "dx1" Float [(-1,301)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_dy1_jp1_pipe" Float (Stream "dy1_jp1" "dy1" Float [(0,301)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_dy1_j_pipe" Float (Stream "dy1_j" "dy1" Float [(0,301)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_dzn_kp1_pipe" Float (Stream "dzn_kp1" "dzn" Float [(-1,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_dzn_k_pipe" Float (Stream "dzn_k" "dzn" Float [(-1,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_dzn_km1_pipe" Float (Stream "dzn_km1" "dzn" Float [(-1,82)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_im1_j_k_pipe" Float (Stream "sm_im1_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_im1_jp1_k_pipe" Float (Stream "sm_im1_jp1_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_i_j_kp1_pipe" Float (Stream "sm_i_j_kp1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_i_j_k_pipe" Float (Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_i_jp1_k_pipe" Float (Stream "sm_i_jp1_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_ip1_j_km1_pipe" Float (Stream "sm_ip1_j_km1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_ip1_j_kp1_pipe" Float (Stream "sm_ip1_j_kp1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_ip1_j_k_pipe" Float (Stream "sm_ip1_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_ip1_jp1_k_pipe" Float (Stream "sm_ip1_jp1_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_smart_cache" "p0_les_2" "p0_les_2_smart_cache_p0_les_2_sm_i_j_km1_pipe" Float (Stream "sm_i_j_km1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_2_diu2_i_j_k_reader" "p0_les_2_smart_cache" "p0_les_2_diu2_i_j_k_reader_p0_les_2_smart_cache_diu2_i_j_k_pipe" Float (Stream "diu2_i_j_k" "diu2" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_diu4_i_j_k_reader" "p0_les_2_smart_cache" "p0_les_2_diu4_i_j_k_reader_p0_les_2_smart_cache_diu4_i_j_k_pipe" Float (Stream "diu4_i_j_k" "diu4" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_diu5_i_j_k_reader" "p0_les_2_smart_cache" "p0_les_2_diu5_i_j_k_reader_p0_les_2_smart_cache_diu5_i_j_k_pipe" Float (Stream "diu5_i_j_k" "diu5" Float [(-1,302),(0,302),(0,82)])

Pipe "p0_les_2_diu6_i_j_k_reader" "p0_les_2_smart_cache" "p0_les_2_diu6_i_j_k_reader_p0_les_2_smart_cache_diu6_i_j_k_pipe" Float (Stream "diu6_i_j_k" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_diu8_i_j_k_reader" "p0_les_2_smart_cache" "p0_les_2_diu8_i_j_k_reader_p0_les_2_smart_cache_diu8_i_j_k_pipe" Float (Stream "diu8_i_j_k" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_2_dx1_i_reader" "p0_les_2_smart_cache" "p0_les_2_dx1_i_reader_p0_les_2_smart_cache_dx1_i_pipe" Float (Stream "dx1_i" "dx1" Float [(-1,301)])

Pipe "p0_les_2_dy1_j_reader" "p0_les_2_smart_cache" "p0_les_2_dy1_j_reader_p0_les_2_smart_cache_dy1_j_pipe" Float (Stream "dy1_j" "dy1" Float [(0,301)])

Pipe "p0_les_2_dzn_k_reader" "p0_les_2_smart_cache" "p0_les_2_dzn_k_reader_p0_les_2_smart_cache_dzn_k_pipe" Float (Stream "dzn_k" "dzn" Float [(-1,82)])

Pipe "p0_les_2_dys_j_reader" "p0_les_2" "p0_les_2_dys_j_reader_p0_les_2_dys_j_pipe" Float (Stream "dys_j" "dys" Float [(0,300)])

Pipe "p0_les_3" "p0_adam" "p0_les_3_p0_adam_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3" "p0_adam" "p0_les_3_p0_adam_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3" "p0_adam" "p0_les_3_p0_adam_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu3_im1_j_kp1_pipe" Float (Stream "diu3_im1_j_kp1" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu3_i_j_kp1_pipe" Float (Stream "diu3_i_j_kp1" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu6_i_jm1_kp1_pipe" Float (Stream "diu6_i_jm1_kp1" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu6_i_j_kp1_pipe" Float (Stream "diu6_i_j_kp1" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu7_ip1_j_k_pipe" Float (Stream "diu7_ip1_j_k" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu7_i_j_k_pipe" Float (Stream "diu7_i_j_k" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu8_i_jp1_k_pipe" Float (Stream "diu8_i_jp1_k" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu8_i_j_k_pipe" Float (Stream "diu8_i_j_k" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu9_i_j_kp1_pipe" Float (Stream "diu9_i_j_kp1" "diu9" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_diu9_i_j_k_pipe" Float (Stream "diu9_i_j_k" "diu9" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_dx1_ip1_pipe" Float (Stream "dx1_ip1" "dx1" Float [(-1,301)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_dx1_i_pipe" Float (Stream "dx1_i" "dx1" Float [(-1,301)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_dx1_im1_pipe" Float (Stream "dx1_im1" "dx1" Float [(-1,301)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_dy1_jp1_pipe" Float (Stream "dy1_jp1" "dy1" Float [(0,301)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_dy1_j_pipe" Float (Stream "dy1_j" "dy1" Float [(0,301)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_dy1_jm1_pipe" Float (Stream "dy1_jm1" "dy1" Float [(0,301)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_dzn_kp1_pipe" Float (Stream "dzn_kp1" "dzn" Float [(-1,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_dzn_k_pipe" Float (Stream "dzn_k" "dzn" Float [(-1,82)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_im1_j_kp1_pipe" Float (Stream "sm_im1_j_kp1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_im1_j_k_pipe" Float (Stream "sm_im1_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_i_jm1_kp1_pipe" Float (Stream "sm_i_jm1_kp1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_i_j_kp1_pipe" Float (Stream "sm_i_j_kp1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_i_j_k_pipe" Float (Stream "sm_i_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_i_jp1_kp1_pipe" Float (Stream "sm_i_jp1_kp1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_i_jp1_k_pipe" Float (Stream "sm_i_jp1_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_ip1_j_kp1_pipe" Float (Stream "sm_ip1_j_kp1" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_ip1_j_k_pipe" Float (Stream "sm_ip1_j_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_smart_cache" "p0_les_3" "p0_les_3_smart_cache_p0_les_3_sm_i_jm1_k_pipe" Float (Stream "sm_i_jm1_k" "sm" Float [(-1,301),(-1,301),(0,81)])

Pipe "p0_les_3_diu3_i_j_k_reader" "p0_les_3_smart_cache" "p0_les_3_diu3_i_j_k_reader_p0_les_3_smart_cache_diu3_i_j_k_pipe" Float (Stream "diu3_i_j_k" "diu3" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_diu6_i_j_k_reader" "p0_les_3_smart_cache" "p0_les_3_diu6_i_j_k_reader_p0_les_3_smart_cache_diu6_i_j_k_pipe" Float (Stream "diu6_i_j_k" "diu6" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_diu7_i_j_k_reader" "p0_les_3_smart_cache" "p0_les_3_diu7_i_j_k_reader_p0_les_3_smart_cache_diu7_i_j_k_pipe" Float (Stream "diu7_i_j_k" "diu7" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_diu8_i_j_k_reader" "p0_les_3_smart_cache" "p0_les_3_diu8_i_j_k_reader_p0_les_3_smart_cache_diu8_i_j_k_pipe" Float (Stream "diu8_i_j_k" "diu8" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_diu9_i_j_k_reader" "p0_les_3_smart_cache" "p0_les_3_diu9_i_j_k_reader_p0_les_3_smart_cache_diu9_i_j_k_pipe" Float (Stream "diu9_i_j_k" "diu9" Float [(0,302),(0,302),(0,82)])

Pipe "p0_les_3_dx1_i_reader" "p0_les_3_smart_cache" "p0_les_3_dx1_i_reader_p0_les_3_smart_cache_dx1_i_pipe" Float (Stream "dx1_i" "dx1" Float [(-1,301)])

Pipe "p0_les_3_dy1_j_reader" "p0_les_3_smart_cache" "p0_les_3_dy1_j_reader_p0_les_3_smart_cache_dy1_j_pipe" Float (Stream "dy1_j" "dy1" Float [(0,301)])

Pipe "p0_les_3_dzn_k_reader" "p0_les_3_smart_cache" "p0_les_3_dzn_k_reader_p0_les_3_smart_cache_dzn_k_pipe" Float (Stream "dzn_k" "dzn" Float [(-1,82)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_fold_i_j_k_pipe" Float (Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_gold_i_j_k_pipe" Float (Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_hold_i_j_k_pipe" Float (Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_adam" "p0_press_0_smart_cache" "p0_adam_p0_press_0_smart_cache_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_adam_fold_i_j_k_reader" "p0_adam" "p0_adam_fold_i_j_k_reader_p0_adam_fold_i_j_k_pipe" Float (Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_adam_gold_i_j_k_reader" "p0_adam" "p0_adam_gold_i_j_k_reader_p0_adam_gold_i_j_k_pipe" Float (Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_adam_hold_i_j_k_reader" "p0_adam" "p0_adam_hold_i_j_k_reader_p0_adam_hold_i_j_k_pipe" Float (Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_press_0" "p0_press_1" "p0_press_0_p0_press_1_rhs_i_j_k_pipe" Float (Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_fold_i_j_k_pipe" Float (Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_gold_i_j_k_pipe" Float (Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_hold_i_j_k_pipe" Float (Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_f_im1_j_k_pipe" Float (Stream "f_im1_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_g_i_jm1_k_pipe" Float (Stream "g_i_jm1_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_h_i_j_km1_pipe" Float (Stream "h_i_j_km1" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_u_im1_j_k_pipe" Float (Stream "u_im1_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_v_i_jm1_k_pipe" Float (Stream "v_i_jm1_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_press_0_smart_cache" "p0_press_0" "p0_press_0_smart_cache_p0_press_0_w_i_j_km1_pipe" Float (Stream "w_i_j_km1" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_press_0_dx1_i_reader" "p0_press_0" "p0_press_0_dx1_i_reader_p0_press_0_dx1_i_pipe" Float (Stream "dx1_i" "dx1" Float [(-1,301)])

Pipe "p0_press_0_dy1_j_reader" "p0_press_0" "p0_press_0_dy1_j_reader_p0_press_0_dy1_j_pipe" Float (Stream "dy1_j" "dy1" Float [(0,301)])

Pipe "p0_press_0_dzn_k_reader" "p0_press_0" "p0_press_0_dzn_k_reader_p0_press_0_dzn_k_pipe" Float (Stream "dzn_k" "dzn" Float [(-1,82)])

Pipe "p0_press_0_rhs_i_j_k_reader" "p0_press_0" "p0_press_0_rhs_i_j_k_reader_p0_press_0_rhs_i_j_k_pipe" Float (Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_hold_i_j_k_pipe" Float (Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_gold_i_j_k_pipe" Float (Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_fold_i_j_k_pipe" Float (Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_rhs_i_j_k_pipe" Float (Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_area_pipe" Float (Stream "area" "" Float [])

Pipe "p0_press_1" "p0_press_2" "p0_press_1_p0_press_2_rhsav_pipe" Float (Stream "rhsav" "" Float [])

Pipe "p0_press_1_dx1_i_reader" "p0_press_1" "p0_press_1_dx1_i_reader_p0_press_1_dx1_i_pipe" Float (Stream "dx1_i" "dx1" Float [(-1,301)])

Pipe "p0_press_1_dy1_j_reader" "p0_press_1" "p0_press_1_dy1_j_reader_p0_press_1_dy1_j_pipe" Float (Stream "dy1_j" "dy1" Float [(0,301)])

Pipe "p0_press_1_dzn_k_reader" "p0_press_1" "p0_press_1_dzn_k_reader_p0_press_1_dzn_k_pipe" Float (Stream "dzn_k" "dzn" Float [(-1,82)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_rhs_i_j_k_pipe" Float (Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_u_i_j_k_pipe" Float (Stream "u_i_j_k" "u" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_v_i_j_k_pipe" Float (Stream "v_i_j_k" "v" Float [(0,301),(-1,301),(0,81)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_w_i_j_k_pipe" Float (Stream "w_i_j_k" "w" Float [(0,301),(-1,301),(-1,81)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_f_i_j_k_pipe" Float (Stream "f_i_j_k" "f" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_fx_i_j_k_pipe" Float (Stream "fx_i_j_k" "fx" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_fy_i_j_k_pipe" Float (Stream "fy_i_j_k" "fy" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_fz_i_j_k_pipe" Float (Stream "fz_i_j_k" "fz" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_g_i_j_k_pipe" Float (Stream "g_i_j_k" "g" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_h_i_j_k_pipe" Float (Stream "h_i_j_k" "h" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_usum_i_j_k_pipe" Float (Stream "usum_i_j_k" "usum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_vsum_i_j_k_pipe" Float (Stream "vsum_i_j_k" "vsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_wsum_i_j_k_pipe" Float (Stream "wsum_i_j_k" "wsum" Float [(0,300),(0,300),(0,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_fold_i_j_k_pipe" Float (Stream "fold_i_j_k" "fold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_gold_i_j_k_pipe" Float (Stream "gold_i_j_k" "gold" Float [(1,300),(1,300),(1,80)])

Pipe "p0_press_2" "p0_press_2_output_writer" "p0_press_2_p0_press_2_output_writer_hold_i_j_k_pipe" Float (Stream "hold_i_j_k" "hold" Float [(1,300),(1,300),(1,80)])

Graph Viz data:

digraph G {

	p0_velnw_0 -> p0_velnw_1_smart_cache [ label="u_i_j_k" ]
	p0_velnw_0_smart_cache -> p0_velnw_0 [ label="p0_ip1_j_k" ]
	p0_velnw_0_smart_cache -> p0_velnw_0 [ label="p0_i_j_k" ]
	p0_velnw_0_p0_i_j_k_reader -> p0_velnw_0_smart_cache [ label="p0_i_j_k" ]
	p0_velnw_0_dxs_i_reader -> p0_velnw_0 [ label="dxs_i" ]
	p0_velnw_0_f_i_j_k_reader -> p0_velnw_0 [ label="f_i_j_k" ]
	p0_velnw_0_u_i_j_k_reader -> p0_velnw_0 [ label="u_i_j_k" ]
	p0_velnw_1 -> p0_velnw_2_smart_cache [ label="v_i_j_k" ]
	p0_velnw_1 -> p0_velnw_2_smart_cache [ label="u_i_j_k" ]
	p0_velnw_1_smart_cache -> p0_velnw_1 [ label="u_i_j_k" ]
	p0_velnw_1_smart_cache -> p0_velnw_1 [ label="p0_i_jp1_k" ]
	p0_velnw_1_smart_cache -> p0_velnw_1 [ label="p0_i_j_k" ]
	p0_velnw_1_p0_i_j_k_reader -> p0_velnw_1_smart_cache [ label="p0_i_j_k" ]
	p0_velnw_1_dys_j_reader -> p0_velnw_1 [ label="dys_j" ]
	p0_velnw_1_g_i_j_k_reader -> p0_velnw_1 [ label="g_i_j_k" ]
	p0_velnw_1_v_i_j_k_reader -> p0_velnw_1 [ label="v_i_j_k" ]
	p0_velnw_2 -> p0_feedbf [ label="u_i_j_k" ]
	p0_velnw_2 -> p0_feedbf [ label="v_i_j_k" ]
	p0_velnw_2 -> p0_feedbf [ label="w_i_j_k" ]
	p0_velnw_2_smart_cache -> p0_velnw_2 [ label="v_i_j_k" ]
	p0_velnw_2_smart_cache -> p0_velnw_2 [ label="u_i_j_k" ]
	p0_velnw_2_smart_cache -> p0_velnw_2 [ label="p0_i_j_kp1" ]
	p0_velnw_2_smart_cache -> p0_velnw_2 [ label="p0_i_j_k" ]
	p0_velnw_2_p0_i_j_k_reader -> p0_velnw_2_smart_cache [ label="p0_i_j_k" ]
	p0_velnw_2_dzs_k_reader -> p0_velnw_2 [ label="dzs_k" ]
	p0_velnw_2_h_i_j_k_reader -> p0_velnw_2 [ label="h_i_j_k" ]
	p0_velnw_2_w_i_j_k_reader -> p0_velnw_2 [ label="w_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="fx_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="fy_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="fz_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="usum_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="vsum_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="wsum_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="w_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="v_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="u_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="h_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="g_i_j_k" ]
	p0_feedbf -> p0_les_0_smart_cache [ label="f_i_j_k" ]
	p0_feedbf_bmask1_i_j_k_reader -> p0_feedbf [ label="bmask1_i_j_k" ]
	p0_feedbf_cmask1_i_j_k_reader -> p0_feedbf [ label="cmask1_i_j_k" ]
	p0_feedbf_dmask1_i_j_k_reader -> p0_feedbf [ label="dmask1_i_j_k" ]
	p0_feedbf_f_i_j_k_reader -> p0_feedbf [ label="f_i_j_k" ]
	p0_feedbf_fx_i_j_k_reader -> p0_feedbf [ label="fx_i_j_k" ]
	p0_feedbf_fy_i_j_k_reader -> p0_feedbf [ label="fy_i_j_k" ]
	p0_feedbf_fz_i_j_k_reader -> p0_feedbf [ label="fz_i_j_k" ]
	p0_feedbf_g_i_j_k_reader -> p0_feedbf [ label="g_i_j_k" ]
	p0_feedbf_h_i_j_k_reader -> p0_feedbf [ label="h_i_j_k" ]
	p0_feedbf_usum_i_j_k_reader -> p0_feedbf [ label="usum_i_j_k" ]
	p0_feedbf_vsum_i_j_k_reader -> p0_feedbf [ label="vsum_i_j_k" ]
	p0_feedbf_wsum_i_j_k_reader -> p0_feedbf [ label="wsum_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="fx_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="fy_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="fz_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="usum_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="vsum_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="wsum_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="w_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="v_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="u_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="h_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="g_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="sm_i_j_k" ]
	p0_les_0 -> p0_les_1_smart_cache [ label="f_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="fx_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="fy_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="fz_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="usum_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="vsum_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="wsum_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="w_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="v_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="u_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="h_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="g_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="f_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu2_im1_jp1_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu2_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu2_i_jp1_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu2_im1_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu3_im1_j_kp1" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu3_i_j_kp1" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu3_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu3_im1_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu4_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu4_ip1_jm1_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu4_ip1_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu4_i_jm1_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu6_i_jm1_kp1" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu6_i_j_kp1" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu6_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu6_i_jm1_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu7_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu7_ip1_j_km1" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu7_ip1_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu7_i_j_km1" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu8_i_j_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu8_i_jp1_km1" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu8_i_jp1_k" ]
	p0_les_0_smart_cache -> p0_les_0 [ label="diu8_i_j_km1" ]
	p0_les_0_diu2_i_j_k_reader -> p0_les_0_smart_cache [ label="diu2_i_j_k" ]
	p0_les_0_diu3_i_j_k_reader -> p0_les_0_smart_cache [ label="diu3_i_j_k" ]
	p0_les_0_diu4_i_j_k_reader -> p0_les_0_smart_cache [ label="diu4_i_j_k" ]
	p0_les_0_diu6_i_j_k_reader -> p0_les_0_smart_cache [ label="diu6_i_j_k" ]
	p0_les_0_diu7_i_j_k_reader -> p0_les_0_smart_cache [ label="diu7_i_j_k" ]
	p0_les_0_diu8_i_j_k_reader -> p0_les_0_smart_cache [ label="diu8_i_j_k" ]
	p0_les_0_delx1_k_reader -> p0_les_0 [ label="delx1_k" ]
	p0_les_0_diu1_i_j_k_reader -> p0_les_0 [ label="diu1_i_j_k" ]
	p0_les_0_diu5_i_j_k_reader -> p0_les_0 [ label="diu5_i_j_k" ]
	p0_les_0_diu9_i_j_k_reader -> p0_les_0 [ label="diu9_i_j_k" ]
	p0_les_0_sm_i_j_k_reader -> p0_les_0 [ label="sm_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="fx_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="fy_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="fz_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="usum_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="vsum_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="wsum_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="w_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="v_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="u_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="f_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="h_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="sm_i_j_k" ]
	p0_les_1 -> p0_les_2_smart_cache [ label="g_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="f_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="fx_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="fy_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="fz_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="usum_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="vsum_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="wsum_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="w_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="v_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="u_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="h_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="g_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu1_ip1_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu1_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu2_i_jp1_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu2_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu3_i_j_kp1" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu3_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu4_ip1_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu4_ip1_jm1_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu7_ip1_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="diu7_ip1_j_km1" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="dx1_ip1" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="dx1_i" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="dy1_jp1" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="dy1_j" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="dzn_kp1" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="dzn_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="dzn_km1" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_i_jm1_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_i_j_kp1" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_i_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_i_jp1_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_ip1_jm1_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_ip1_j_km1" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_ip1_j_kp1" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_ip1_j_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_ip1_jp1_k" ]
	p0_les_1_smart_cache -> p0_les_1 [ label="sm_i_j_km1" ]
	p0_les_1_diu1_i_j_k_reader -> p0_les_1_smart_cache [ label="diu1_i_j_k" ]
	p0_les_1_diu2_i_j_k_reader -> p0_les_1_smart_cache [ label="diu2_i_j_k" ]
	p0_les_1_diu3_i_j_k_reader -> p0_les_1_smart_cache [ label="diu3_i_j_k" ]
	p0_les_1_diu4_i_j_k_reader -> p0_les_1_smart_cache [ label="diu4_i_j_k" ]
	p0_les_1_diu7_i_j_k_reader -> p0_les_1_smart_cache [ label="diu7_i_j_k" ]
	p0_les_1_dx1_i_reader -> p0_les_1_smart_cache [ label="dx1_i" ]
	p0_les_1_dy1_j_reader -> p0_les_1_smart_cache [ label="dy1_j" ]
	p0_les_1_dzn_k_reader -> p0_les_1_smart_cache [ label="dzn_k" ]
	p0_les_1_dxs_i_reader -> p0_les_1 [ label="dxs_i" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="fx_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="fy_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="fz_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="usum_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="vsum_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="wsum_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="w_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="v_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="u_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="g_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="f_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="sm_i_j_k" ]
	p0_les_2 -> p0_les_3_smart_cache [ label="h_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="g_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="fx_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="fy_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="fz_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="usum_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="vsum_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="wsum_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="w_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="v_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="u_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="f_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="h_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu2_im1_jp1_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu2_i_jp1_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu4_ip1_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu4_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu5_i_jp1_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu5_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu6_i_j_kp1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu6_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu8_i_jp1_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="diu8_i_jp1_km1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="dx1_ip1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="dx1_i" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="dx1_im1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="dy1_jp1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="dy1_j" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="dzn_kp1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="dzn_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="dzn_km1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_im1_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_im1_jp1_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_i_j_kp1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_i_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_i_jp1_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_ip1_j_km1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_ip1_j_kp1" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_ip1_j_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_ip1_jp1_k" ]
	p0_les_2_smart_cache -> p0_les_2 [ label="sm_i_j_km1" ]
	p0_les_2_diu2_i_j_k_reader -> p0_les_2_smart_cache [ label="diu2_i_j_k" ]
	p0_les_2_diu4_i_j_k_reader -> p0_les_2_smart_cache [ label="diu4_i_j_k" ]
	p0_les_2_diu5_i_j_k_reader -> p0_les_2_smart_cache [ label="diu5_i_j_k" ]
	p0_les_2_diu6_i_j_k_reader -> p0_les_2_smart_cache [ label="diu6_i_j_k" ]
	p0_les_2_diu8_i_j_k_reader -> p0_les_2_smart_cache [ label="diu8_i_j_k" ]
	p0_les_2_dx1_i_reader -> p0_les_2_smart_cache [ label="dx1_i" ]
	p0_les_2_dy1_j_reader -> p0_les_2_smart_cache [ label="dy1_j" ]
	p0_les_2_dzn_k_reader -> p0_les_2_smart_cache [ label="dzn_k" ]
	p0_les_2_dys_j_reader -> p0_les_2 [ label="dys_j" ]
	p0_les_3 -> p0_adam [ label="f_i_j_k" ]
	p0_les_3 -> p0_adam [ label="g_i_j_k" ]
	p0_les_3 -> p0_adam [ label="h_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="h_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="fx_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="fy_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="fz_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="usum_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="vsum_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="wsum_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="w_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="v_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="u_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="g_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="f_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu3_im1_j_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu3_i_j_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu6_i_jm1_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu6_i_j_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu7_ip1_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu7_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu8_i_jp1_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu8_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu9_i_j_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="diu9_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="dx1_ip1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="dx1_i" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="dx1_im1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="dy1_jp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="dy1_j" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="dy1_jm1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="dzn_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="dzn_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_im1_j_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_im1_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_i_jm1_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_i_j_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_i_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_i_jp1_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_i_jp1_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_ip1_j_kp1" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_ip1_j_k" ]
	p0_les_3_smart_cache -> p0_les_3 [ label="sm_i_jm1_k" ]
	p0_les_3_diu3_i_j_k_reader -> p0_les_3_smart_cache [ label="diu3_i_j_k" ]
	p0_les_3_diu6_i_j_k_reader -> p0_les_3_smart_cache [ label="diu6_i_j_k" ]
	p0_les_3_diu7_i_j_k_reader -> p0_les_3_smart_cache [ label="diu7_i_j_k" ]
	p0_les_3_diu8_i_j_k_reader -> p0_les_3_smart_cache [ label="diu8_i_j_k" ]
	p0_les_3_diu9_i_j_k_reader -> p0_les_3_smart_cache [ label="diu9_i_j_k" ]
	p0_les_3_dx1_i_reader -> p0_les_3_smart_cache [ label="dx1_i" ]
	p0_les_3_dy1_j_reader -> p0_les_3_smart_cache [ label="dy1_j" ]
	p0_les_3_dzn_k_reader -> p0_les_3_smart_cache [ label="dzn_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="fx_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="fy_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="fz_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="usum_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="vsum_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="wsum_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="fold_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="gold_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="hold_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="f_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="g_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="h_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="u_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="v_i_j_k" ]
	p0_adam -> p0_press_0_smart_cache [ label="w_i_j_k" ]
	p0_adam_fold_i_j_k_reader -> p0_adam [ label="fold_i_j_k" ]
	p0_adam_gold_i_j_k_reader -> p0_adam [ label="gold_i_j_k" ]
	p0_adam_hold_i_j_k_reader -> p0_adam [ label="hold_i_j_k" ]
	p0_press_0 -> p0_press_1 [ label="rhs_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="fx_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="fy_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="fz_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="usum_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="vsum_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="wsum_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="fold_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="gold_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="hold_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="f_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="f_im1_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="g_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="g_i_jm1_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="h_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="h_i_j_km1" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="u_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="u_im1_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="v_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="v_i_jm1_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="w_i_j_k" ]
	p0_press_0_smart_cache -> p0_press_0 [ label="w_i_j_km1" ]
	p0_press_0_dx1_i_reader -> p0_press_0 [ label="dx1_i" ]
	p0_press_0_dy1_j_reader -> p0_press_0 [ label="dy1_j" ]
	p0_press_0_dzn_k_reader -> p0_press_0 [ label="dzn_k" ]
	p0_press_0_rhs_i_j_k_reader -> p0_press_0 [ label="rhs_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="hold_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="h_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="gold_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="g_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="fold_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="f_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="wsum_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="vsum_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="usum_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="fz_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="fy_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="fx_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="w_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="v_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="u_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="rhs_i_j_k" ]
	p0_press_1 -> p0_press_2 [ label="area" ]
	p0_press_1 -> p0_press_2 [ label="rhsav" ]
	p0_press_1_dx1_i_reader -> p0_press_1 [ label="dx1_i" ]
	p0_press_1_dy1_j_reader -> p0_press_1 [ label="dy1_j" ]
	p0_press_1_dzn_k_reader -> p0_press_1 [ label="dzn_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="rhs_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="u_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="v_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="w_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="f_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="fx_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="fy_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="fz_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="g_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="h_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="usum_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="vsum_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="wsum_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="fold_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="gold_i_j_k" ]
	p0_press_2 -> p0_press_2_output_writer [ label="hold_i_j_k" ]
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Scalarizing Kernels 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Kernel = 
subroutine velnw_0(dt,dxs,f,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_0

Streams = 
subroutine velnw_0(dt,ro)
      real(4), intent(In) :: dt
      real(4) :: dxs_i
      real(4) :: f_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_ip1_j_k
      real(4) :: p0_i_j_k
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4) :: u_i_j_k
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0_i_j_k+p0_ip1_j_k)/ro/dxs_i
        u_i_j_k = u_i_j_k+dt*(f_i_j_k-pz)
    end if
!}    
!}
end subroutine velnw_0

Kernel = 
subroutine velnw_1(dt,dys,g,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0(i,j,k)+p0(i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_1

Streams = 
subroutine velnw_1(dt,ro)
      real(4), intent(In) :: dt
      real(4) :: dys_j
      real(4) :: g_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_i_jp1_k
      real(4) :: p0_i_j_k
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4) :: v_i_j_k
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,1,0],[0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pz = (-p0_i_j_k+p0_i_jp1_k)/ro/dys_j
        v_i_j_k = v_i_j_k+dt*(g_i_j_k-pz)
    end if
!}    
!}
end subroutine velnw_1

Kernel = 
subroutine velnw_2(dt,dzs,h,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79)) then
        pz = (-p0(i,j,k)+p0(i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}    
!}
end subroutine velnw_2

Streams = 
subroutine velnw_2(dt,ro)
      real(4), intent(In) :: dt
      real(4) :: dzs_k
      real(4) :: h_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_i_j_kp1
      real(4) :: p0_i_j_k
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4) :: w_i_j_k
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,0],[0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","w","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79)) then
        pz = (-p0_i_j_k+p0_i_j_kp1)/ro/dzs_k
        w_i_j_k = w_i_j_k+dt*(h_i_j_k-pz)
    end if
!}    
!}
end subroutine velnw_2

Kernel = 
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf

Streams = 
subroutine feedbf(alpha,beta,dt)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4) :: bmask1_i_j_k
      real(4) :: cmask1_i_j_k
      real(4) :: dmask1_i_j_k
      real(4), intent(In) :: dt
      real(4) :: f_i_j_k
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fx_i_j_k
      real(4) :: fy_i_j_k
      real(4) :: fz_i_j_k
      real(4) :: g_i_j_k
      real(4) :: h_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: u_i_j_k
      real(4) :: usum_i_j_k
      real(4) :: v_i_j_k
      real(4) :: vsum_i_j_k
      real(4) :: w_i_j_k
      real(4) :: wsum_i_j_k
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","w","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum_i_j_k = (usum_i_j_k+u_i_j_k)*bmask1_i_j_k
        vsum_i_j_k = (vsum_i_j_k+v_i_j_k)*cmask1_i_j_k
        wsum_i_j_k = (wsum_i_j_k+w_i_j_k)*dmask1_i_j_k
        f1x = alpha*usum_i_j_k*dt
        f1y = alpha*vsum_i_j_k*dt
        f1z = alpha*wsum_i_j_k*dt
        f2x = beta*u_i_j_k*bmask1_i_j_k
        f2y = beta*v_i_j_k*cmask1_i_j_k
        f2z = beta*w_i_j_k*dmask1_i_j_k
        fx_i_j_k = f1x+f2x
        fy_i_j_k = f1y+f2y
        fz_i_j_k = f1z+f2z
        f_i_j_k = f_i_j_k+fx_i_j_k
        g_i_j_k = g_i_j_k+fy_i_j_k
        h_i_j_k = h_i_j_k+fz_i_j_k
    end if
!}
end subroutine feedbf

Kernel = 
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0

Streams = 
subroutine les_0
      real(4) :: csx1
      real(4) :: delx1_k
      real(4) :: diu1_i_j_k
      real(4) :: diu2_im1_jp1_k
      real(4) :: diu2_i_j_k
      real(4) :: diu2_i_jp1_k
      real(4) :: diu2_im1_j_k
      real(4) :: diu3_im1_j_kp1
      real(4) :: diu3_i_j_kp1
      real(4) :: diu3_i_j_k
      real(4) :: diu3_im1_j_k
      real(4) :: diu4_i_j_k
      real(4) :: diu4_ip1_jm1_k
      real(4) :: diu4_ip1_j_k
      real(4) :: diu4_i_jm1_k
      real(4) :: diu5_i_j_k
      real(4) :: diu6_i_jm1_kp1
      real(4) :: diu6_i_j_kp1
      real(4) :: diu6_i_j_k
      real(4) :: diu6_i_jm1_k
      real(4) :: diu7_i_j_k
      real(4) :: diu7_ip1_j_km1
      real(4) :: diu7_ip1_j_k
      real(4) :: diu7_i_j_km1
      real(4) :: diu8_i_j_k
      real(4) :: diu8_i_jp1_km1
      real(4) :: diu8_i_jp1_k
      real(4) :: diu8_i_j_km1
      real(4) :: diu9_i_j_k
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4) :: sm_i_j_k
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1_i_j_k
        dudyx1 = (diu2_im1_j_k+diu2_im1_jp1_k+diu2_i_j_k+diu2_i_jp1_k)*.25
        dudzx1 = (diu3_im1_j_k+diu3_im1_j_kp1+diu3_i_j_k+diu3_i_j_kp1)*.25
        dvdxx1 = (diu4_i_j_k+diu4_i_jm1_k+diu4_ip1_j_k+diu4_ip1_jm1_k)*.25
        dvdyx1 = diu5_i_j_k
        dvdzx1 = (diu6_i_jm1_k+diu6_i_jm1_kp1+diu6_i_j_k+diu6_i_j_kp1)*.25
        dwdxx1 = (diu7_i_j_k+diu7_i_j_km1+diu7_ip1_j_k+diu7_ip1_j_km1)*.25
        dwdyx1 = (diu8_i_j_k+diu8_i_j_km1+diu8_i_jp1_k+diu8_i_jp1_km1)*.25
        dwdzx1 = diu9_i_j_k
        csx1 = 0.14
        sm_i_j_k = (csx1*delx1_k)**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**&
&2)
    end if
!}    
!}
end subroutine les_0

Kernel = 
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1

Streams = 
subroutine les_1
      real(4) :: diu1_ip1_j_k
      real(4) :: diu1_i_j_k
      real(4) :: diu2_i_jp1_k
      real(4) :: diu2_i_j_k
      real(4) :: diu3_i_j_kp1
      real(4) :: diu3_i_j_k
      real(4) :: diu4_ip1_j_k
      real(4) :: diu4_ip1_jm1_k
      real(4) :: diu7_ip1_j_k
      real(4) :: diu7_ip1_j_km1
      real(4) :: dx1_ip1
      real(4) :: dx1_i
      real(4) :: dxs_i
      real(4) :: dy1_jp1
      real(4) :: dy1_j
      real(4) :: dzn_kp1
      real(4) :: dzn_k
      real(4) :: dzn_km1
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4) :: f_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: sm_i_jm1_k
      real(4) :: sm_i_j_kp1
      real(4) :: sm_i_j_k
      real(4) :: sm_i_jp1_k
      real(4) :: sm_ip1_jm1_k
      real(4) :: sm_ip1_j_km1
      real(4) :: sm_ip1_j_kp1
      real(4) :: sm_ip1_j_k
      real(4) :: sm_ip1_jp1_k
      real(4) :: sm_i_j_km1
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm_ip1_j_k
        evsx1 = sm_i_j_k
        evsy2 = (dy1_jp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dy1_j*((dx1_ip1*sm_i_jp1_k+dx1_i*sm_ip1_jp1_k)/(dx1_i&
&+dx1_ip1)))/(dy1_j+dy1_jp1)
        evsy1 = (dy1_jp1*((dx1_ip1*sm_i_jm1_k+dx1_i*sm_ip1_jm1_k)/(dx1_i+dx1_ip1))+dy1_j*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i&
&+dx1_ip1)))/(dy1_j+dy1_jp1)
        evsz2 = (dzn_kp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dzn_k*((dx1_ip1*sm_i_j_kp1+dx1_i*sm_ip1_j_kp1)/(dx1_i&
&+dx1_ip1)))/(dzn_k+dzn_kp1)
        evsz1 = (dzn_k*((dx1_ip1*sm_i_j_km1+dx1_i*sm_ip1_j_km1)/(dx1_i+dx1_ip1))+dzn_km1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i&
&+dx1_ip1)))/(dzn_km1+dzn_k)
        visux2 = (evsx2)*2.*diu1_ip1_j_k
        visux1 = (evsx1)*2.*diu1_i_j_k
        visuy2 = (evsy2)*(diu2_i_jp1_k+diu4_ip1_j_k)
        visuy1 = (evsy1)*(diu2_i_j_k+diu4_ip1_jm1_k)
        visuz2 = (evsz2)*(diu3_i_j_kp1+diu7_ip1_j_k)
        visuz1 = (evsz1)*(diu3_i_j_k+diu7_ip1_j_km1)
        vfu = (visux2-visux1)/dxs_i+(visuy2-visuy1)/dy1_j+(visuz2-visuz1)/dzn_k
        f_i_j_k = (f_i_j_k+vfu)
    end if
!}    
!}
end subroutine les_1

Kernel = 
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2

Streams = 
subroutine les_2
      real(4) :: diu2_im1_jp1_k
      real(4) :: diu2_i_jp1_k
      real(4) :: diu4_ip1_j_k
      real(4) :: diu4_i_j_k
      real(4) :: diu5_i_jp1_k
      real(4) :: diu5_i_j_k
      real(4) :: diu6_i_j_kp1
      real(4) :: diu6_i_j_k
      real(4) :: diu8_i_jp1_k
      real(4) :: diu8_i_jp1_km1
      real(4) :: dx1_ip1
      real(4) :: dx1_i
      real(4) :: dx1_im1
      real(4) :: dy1_jp1
      real(4) :: dy1_j
      real(4) :: dys_j
      real(4) :: dzn_kp1
      real(4) :: dzn_k
      real(4) :: dzn_km1
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4) :: g_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: sm_im1_j_k
      real(4) :: sm_im1_jp1_k
      real(4) :: sm_i_j_kp1
      real(4) :: sm_i_j_k
      real(4) :: sm_i_jp1_k
      real(4) :: sm_ip1_j_km1
      real(4) :: sm_ip1_j_kp1
      real(4) :: sm_ip1_j_k
      real(4) :: sm_ip1_jp1_k
      real(4) :: sm_i_j_km1
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm_i_jp1_k
        evsy1 = sm_i_j_k
        evsx2 = (dy1_jp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dy1_j*((dx1_ip1*sm_i_jp1_k+dx1_i*sm_ip1_jp1_k)/(dx1_i&
&+dx1_ip1)))/(dy1_j+dy1_jp1)
        evsx1 = (dy1_jp1*((dx1_i*sm_im1_j_k+dx1_im1*sm_i_j_k)/(dx1_im1+dx1_i))+dy1_j*((dx1_i*sm_im1_jp1_k+dx1_im1*sm_i_jp1_k)/(dx1_i&
&m1+dx1_i)))/(dy1_j+dy1_jp1)
        evsz2 = (dzn_kp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dzn_k*((dx1_ip1*sm_i_j_kp1+dx1_i*sm_ip1_j_kp1)/(dx1_i&
&+dx1_ip1)))/(dzn_k+dzn_kp1)
        evsz1 = (dzn_k*((dx1_ip1*sm_i_j_km1+dx1_i*sm_ip1_j_km1)/(dx1_i+dx1_ip1))+dzn_km1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i&
&+dx1_ip1)))/(dzn_km1+dzn_k)
        visvx2 = (evsx2)*(diu2_i_jp1_k+diu4_ip1_j_k)
        visvx1 = (evsx1)*(diu2_im1_jp1_k+diu4_i_j_k)
        visvy2 = (evsy2)*2.*diu5_i_jp1_k
        visvy1 = (evsy1)*2.*diu5_i_j_k
        visvz2 = (evsz2)*(diu6_i_j_kp1+diu8_i_jp1_k)
        visvz1 = (evsz1)*(diu6_i_j_k+diu8_i_jp1_km1)
        vfv = (visvx2-visvx1)/dx1_i+(visvy2-visvy1)/dys_j+(visvz2-visvz1)/dzn_k
        g_i_j_k = (g_i_j_k+vfv)
    end if
!}    
!}
end subroutine les_2

Kernel = 
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3

Streams = 
subroutine les_3
      real(4) :: diu3_im1_j_kp1
      real(4) :: diu3_i_j_kp1
      real(4) :: diu6_i_jm1_kp1
      real(4) :: diu6_i_j_kp1
      real(4) :: diu7_ip1_j_k
      real(4) :: diu7_i_j_k
      real(4) :: diu8_i_jp1_k
      real(4) :: diu8_i_j_k
      real(4) :: diu9_i_j_kp1
      real(4) :: diu9_i_j_k
      real(4) :: dx1_ip1
      real(4) :: dx1_i
      real(4) :: dx1_im1
      real(4) :: dy1_jp1
      real(4) :: dy1_j
      real(4) :: dy1_jm1
      real(4) :: dzn_kp1
      real(4) :: dzn_k
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4) :: h_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: sm_im1_j_kp1
      real(4) :: sm_im1_j_k
      real(4) :: sm_i_jm1_kp1
      real(4) :: sm_i_j_kp1
      real(4) :: sm_i_j_k
      real(4) :: sm_i_jp1_kp1
      real(4) :: sm_i_jp1_k
      real(4) :: sm_ip1_j_kp1
      real(4) :: sm_ip1_j_k
      real(4) :: sm_i_jm1_k
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm_i_j_kp1
        evsz1 = sm_i_j_k
        evsx2 = (dzn_kp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dzn_k*((dx1_ip1*sm_i_j_kp1+dx1_i*sm_ip1_j_kp1)/(dx1_i&
&+dx1_ip1)))/(dzn_k+dzn_kp1)
        evsx1 = (dzn_kp1*((dx1_i*sm_im1_j_k+dx1_im1*sm_i_j_k)/(dx1_im1+dx1_i))+dzn_k*((dx1_i*sm_im1_j_kp1+dx1_im1*sm_i_j_kp1)/(dx1_i&
&m1+dx1_i)))/(dzn_k+dzn_kp1)
        evsy2 = (dzn_kp1*((dy1_jp1*sm_i_j_k+dy1_j*sm_i_jp1_k)/(dy1_j+dy1_jp1))+dzn_k*((dy1_jp1*sm_i_j_kp1+dy1_j*sm_i_jp1_kp1)/(dy1_j&
&+dy1_jp1)))/(dzn_k+dzn_kp1)
        evsy1 = (dzn_kp1*((dy1_j*sm_i_jm1_k+dy1_jm1*sm_i_j_k)/(dy1_jm1+dy1_j))+dzn_k*((dy1_j*sm_i_jm1_kp1+dy1_jm1*sm_i_j_kp1)/(dy1_j&
&m1+dy1_j)))/(dzn_k+dzn_kp1)
        viswx2 = (evsx2)*(diu3_i_j_kp1+diu7_ip1_j_k)
        viswx1 = (evsx1)*(diu3_im1_j_kp1+diu7_i_j_k)
        viswy2 = (evsy2)*(diu6_i_j_kp1+diu8_i_jp1_k)
        viswy1 = (evsy1)*(diu6_i_jm1_kp1+diu8_i_j_k)
        viswz2 = (evsz2)*2.*diu9_i_j_kp1
        viswz1 = (evsz1)*2.*diu9_i_j_k
        vfw = (viswx2-viswx1)/dx1_i+(viswy2-viswy1)/dy1_j+(viswz2-viswz1)/dzn_k
        h_i_j_k = (h_i_j_k+vfw)
    end if
!}    
!}
end subroutine les_3

Kernel = 
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam

Streams = 
subroutine adam
      real(4) :: f_i_j_k
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4) :: fold_i_j_k
      real(4) :: g_i_j_k
      real(4) :: gold_i_j_k
      real(4) :: h_i_j_k
      real(4) :: hold_i_j_k
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f_i_j_k
        gd = g_i_j_k
        hd = h_i_j_k
        f_i_j_k = 1.5*f_i_j_k-0.5*fold_i_j_k
        g_i_j_k = 1.5*g_i_j_k-0.5*gold_i_j_k
        h_i_j_k = 1.5*h_i_j_k-0.5*hold_i_j_k
        fold_i_j_k = fd
        gold_i_j_k = gd
        hold_i_j_k = hd
    end if
!}
end subroutine adam

Kernel = 
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0

Streams = 
subroutine press_0(dt)
      real(4), intent(In) :: dt
      real(4) :: dx1_i
      real(4) :: dy1_j
      real(4) :: dzn_k
      real(4) :: f_i_j_k
      real(4) :: f_im1_j_k
      real(4) :: g_i_j_k
      real(4) :: g_i_jm1_k
      real(4) :: h_i_j_k
      real(4) :: h_i_j_km1
      integer :: i
      integer :: j
      integer :: k
      real(4) :: rhs_i_j_k
      real(4) :: u_i_j_k
      real(4) :: u_im1_j_k
      real(4) :: v_i_j_k
      real(4) :: v_i_jm1_k
      real(4) :: w_i_j_k
      real(4) :: w_i_j_km1
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs_i_j_k = (-u_im1_j_k+u_i_j_k)/dx1_i+(-v_i_jm1_k+v_i_j_k)/dy1_j+(-w_i_j_km1+w_i_j_k)/dzn_k
        rhs_i_j_k = (f_i_j_k-f_im1_j_k)/dx1_i+(g_i_j_k-g_i_jm1_k)/dy1_j+(h_i_j_k-h_i_j_km1)/dzn_k+rhs_i_j_k/dt
    end if
!}    
!}
end subroutine press_0

Kernel = 
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1

Streams = 
subroutine press_1
      real(4) :: dx1_i
      real(4) :: dy1_j
      real(4) :: dzn_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: rhs_i_j_k
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1_i*dy1_j*dzn_k*rhs_i_j_k
        area = area+dx1_i*dy1_j*dzn_k
    end if
!}
end subroutine press_1

Kernel = 
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2

Streams = 
subroutine press_2
      integer :: i
      integer :: j
      integer :: k
      real(4) :: rhs_i_j_k
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/304, 303)
    k = count/92112
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs_i_j_k = rhs_i_j_k-rhsav
    end if
!}
end subroutine press_2


--------------------------------------------------------------------------------

Pipeline Statistics
Pipeline ID: 0
Number of Compute Kernels: 12
Compute Kernel Names: p0_velnw_0, p0_velnw_1, p0_velnw_2, p0_feedbf, p0_les_0, p0_les_1, p0_les_2, p0_les_3, p0_adam, p0_press_0, p0_press_1, p0_press_2
Number of Smart Caches: 8
Number of Memory Readers: 71
Number of Memory Writers: 1
Number of Pipes: 366
CSV: 
0,12,8,71,1,366

--------------------------------------------------------------------------------

p1_i_j_k is largest stream size = 7528338 dims used to calculate this = [(0,302),(0,302),(0,81)]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Add Write Back Streams 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Streams to write back:
	Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)]
	Stream "p1_i_j_k" "p1" Float [(0,302),(0,302),(0,81)]

Last kernel updated = 
 ! ==============================================
 ! Name: p1_press Order: 0
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	StencilStream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    dz1 = dzs(k-1)
    dz2 = dzs(k)
    cn4s = 2./(dz1*(dz1+dz2))
    cn4l = 2./(dz2*(dz1+dz2))
    cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
    cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
    cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
    cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
    cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
    if (nrd==0) then
        reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)-rhs&
&(i,j,k))-p0(i,j,k))
        p1(i,j,k) = p0(i,j,k)+reltmp
    else
        reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)-rhs&
&(i,j,k))-p1(i,j,k))
        p0(i,j,k) = p1(i,j,k)+reltmp
    end if
!}    
!}
end subroutine press
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Loop Guards 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: p1_press Order: 0
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	StencilStream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dz1 = dzs(k-1)
        dz2 = dzs(k)
        cn4s = 2./(dz1*(dz1+dz2))
        cn4l = 2./(dz2*(dz1+dz2))
        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
        if (nrd==0) then
            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)&
&-rhs(i,j,k))-p0(i,j,k))
            p1(i,j,k) = p0(i,j,k)+reltmp
        else
            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)&
&-rhs(i,j,k))-p1(i,j,k))
            p0(i,j,k) = p1(i,j,k)+reltmp
        end if
    end if
!}    
!}
end subroutine press
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)],Stream "p1_i_j_k" "p1" Float [(0,302),(0,302),(0,81)]]
availableFromMem = []
currentInputNames = fromList ["dxs_i","dys_j","dzs_k","p0_i_j_k","p1_i_j_k","rhs_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Transit Streams 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



--------------------------------------------------------------------------------


Transit Streams Added
 ! ==============================================
 ! Name: p1_press Order: 0
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	StencilStream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dz1 = dzs(k-1)
        dz2 = dzs(k)
        cn4s = 2./(dz1*(dz1+dz2))
        cn4l = 2./(dz2*(dz1+dz2))
        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
        if (nrd==0) then
            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)&
&-rhs(i,j,k))-p0(i,j,k))
            p1(i,j,k) = p0(i,j,k)+reltmp
        else
            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)&
&-rhs(i,j,k))-p1(i,j,k))
            p0(i,j,k) = p1(i,j,k)+reltmp
        end if
    end if
!}    
!}
end subroutine press
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Reduction Vars Linked 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: p1_press Order: 0
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	StencilStream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dz1 = dzs(k-1)
        dz2 = dzs(k)
        cn4s = 2./(dz1*(dz1+dz2))
        cn4l = 2./(dz2*(dz1+dz2))
        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
        if (nrd==0) then
            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)&
&-rhs(i,j,k))-p0(i,j,k))
            p1(i,j,k) = p0(i,j,k)+reltmp
        else
            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)&
&-rhs(i,j,k))-p1(i,j,k))
            p0(i,j,k) = p1(i,j,k)+reltmp
        end if
    end if
!}    
!}
end subroutine press
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Synthesised Loop Vars 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: p1_press Order: 0
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	StencilStream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dz1 = dzs(k-1)
        dz2 = dzs(k)
        cn4s = 2./(dz1*(dz1+dz2))
        cn4l = 2./(dz2*(dz1+dz2))
        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
        if (nrd==0) then
            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)&
&-rhs(i,j,k))-p0(i,j,k))
            p1(i,j,k) = p0(i,j,k)+reltmp
        else
            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)&
&-rhs(i,j,k))-p1(i,j,k))
            p0(i,j,k) = p1(i,j,k)+reltmp
        end if
    end if
!}    
!}
end subroutine press
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Smart Caches 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

"------------------------------------------"
 ! ==============================================
 ! Name: p1_press Order: 0
 ! Input streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: dxs_im1 array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: dys_jm1 array name: dys type: Float dimensions: [(0,300)]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: dzs_km1 array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: p0_im1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_jm1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_j_kp1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_jp1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_ip1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_j_km1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_im1_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_jm1_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_kp1 array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_jp1_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_ip1_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_km1 array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dz1 = dzs(k-1)
        dz2 = dzs(k)
        cn4s = 2./(dz1*(dz1+dz2))
        cn4l = 2./(dz2*(dz1+dz2))
        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
        if (nrd==0) then
            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)&
&-rhs(i,j,k))-p0(i,j,k))
            p1(i,j,k) = p0(i,j,k)+reltmp
        else
            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)&
&-rhs(i,j,k))-p1(i,j,k))
            p0(i,j,k) = p1(i,j,k)+reltmp
        end if
    end if
!}    
!}
end subroutine press
 ! ==============================================


"------------------------------------------"

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Memory Readers 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p1_press
--------------------------------------------------------------------------------
Input Streams:
	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
	Stream: dxs_im1 array name: dxs type: Float dimensions: [(0,300)]
	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
	Stream: dys_jm1 array name: dys type: Float dimensions: [(0,300)]
	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
	Stream: dzs_km1 array name: dzs type: Float dimensions: [(-1,82)]
	Stream: p0_im1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_jm1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_kp1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_jp1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_ip1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_km1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_im1_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_jm1_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_j_kp1 array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_jp1_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_ip1_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_j_km1 array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
OutputStreams:
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dz1 = dzs(k-1)
        dz2 = dzs(k)
        cn4s = 2./(dz1*(dz1+dz2))
        cn4l = 2./(dz2*(dz1+dz2))
        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
        if (nrd==0) then
            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)&
&-rhs(i,j,k))-p0(i,j,k))
            p1(i,j,k) = p0(i,j,k)+reltmp
        else
            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)&
&-rhs(i,j,k))-p1(i,j,k))
            p0(i,j,k) = p1(i,j,k)+reltmp
        end if
    end if
!}    
!}
end subroutine press

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p1_press_smart_cache
Size: 183619
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: dxs_i
	Buffer size: 183619
	Max positive offset = 0
	Max negative offset = 1
	Stream Dimensions: [(0,300)]
	Output Streams:
		dxs_i from buffer index = 91810 - Real origin
		dxs_im1 from buffer index = 91809
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dys_j
	Buffer size: 183619
	Max positive offset = 0
	Max negative offset = 1
	Stream Dimensions: [(0,300)]
	Output Streams:
		dys_j from buffer index = 91810 - Real origin
		dys_jm1 from buffer index = 91809
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: dzs_k
	Buffer size: 183619
	Max positive offset = 0
	Max negative offset = 1
	Stream Dimensions: [(-1,82)]
	Output Streams:
		dzs_k from buffer index = 91810 - Real origin
		dzs_km1 from buffer index = 91809
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: p0_i_j_k
	Buffer size: 183619
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,302),(0,302),(0,81)]
	Output Streams:
		p0_im1_j_k from buffer index = 91809
		p0_i_jm1_k from buffer index = 91810
		p0_i_j_kp1 from buffer index = 183619
		p0_i_j_k from buffer index = 91810 - Real origin
		p0_i_jp1_k from buffer index = 92113
		p0_ip1_j_k from buffer index = 91811
		p0_i_j_km1 from buffer index = 1
	-------------------------------

	-------------------------------
	Smart cache item
	Input stream: p1_i_j_k
	Buffer size: 183619
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,302),(0,302),(0,81)]
	Output Streams:
		p1_im1_j_k from buffer index = 91809
		p1_i_jm1_k from buffer index = 91810
		p1_i_j_kp1 from buffer index = 183619
		p1_i_j_k from buffer index = 91810 - Real origin
		p1_i_jp1_k from buffer index = 92113
		p1_ip1_j_k from buffer index = 91811
		p1_i_j_km1 from buffer index = 1
	-------------------------------


Input Streams:
	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
Output Streams:
	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
	Stream: dxs_im1 array name: dxs type: Float dimensions: [(0,300)]
	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
	Stream: dys_jm1 array name: dys type: Float dimensions: [(0,300)]
	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
	Stream: dzs_km1 array name: dzs type: Float dimensions: [(-1,82)]
	Stream: p0_im1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_jm1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_kp1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_jp1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_ip1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_km1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_im1_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_jm1_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_j_kp1 array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_jp1_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_ip1_j_k array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p1_i_j_km1 array name: p1 type: Float dimensions: [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory writer kernel.
Name: p1_press_output_writer
--------------------------------------------------------------------------------
Streams to memory:
	Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)] --> p0_i_j_k
	Stream "p1_i_j_k" "p1" Float [(0,302),(0,302),(0,81)] --> p1_i_j_k

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p1_press_dxs_i_reader
--------------------------------------------------------------------------------
Memory to streams:
	dxs_i --> Stream "dxs_i" "dxs" Float [(0,300)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p1_press_dys_j_reader
--------------------------------------------------------------------------------
Memory to streams:
	dys_j --> Stream "dys_j" "dys" Float [(0,300)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p1_press_dzs_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	dzs_k --> Stream "dzs_k" "dzs" Float [(-1,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p1_press_p0_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	p0_i_j_k --> Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p1_press_p1_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	p1_i_j_k --> Stream "p1_i_j_k" "p1" Float [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p1_press_rhs_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	rhs_i_j_k --> Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Routing Pipes 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Pipe "p1_press" "p1_press_output_writer" "p1_press_p1_press_output_writer_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press" "p1_press_output_writer" "p1_press_p1_press_output_writer_p1_i_j_k_pipe" Float (Stream "p1_i_j_k" "p1" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_dxs_i_pipe" Float (Stream "dxs_i" "dxs" Float [(0,300)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_dxs_im1_pipe" Float (Stream "dxs_im1" "dxs" Float [(0,300)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_dys_j_pipe" Float (Stream "dys_j" "dys" Float [(0,300)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_dys_jm1_pipe" Float (Stream "dys_jm1" "dys" Float [(0,300)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_dzs_k_pipe" Float (Stream "dzs_k" "dzs" Float [(-1,82)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_dzs_km1_pipe" Float (Stream "dzs_km1" "dzs" Float [(-1,82)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p0_im1_j_k_pipe" Float (Stream "p0_im1_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p0_i_jm1_k_pipe" Float (Stream "p0_i_jm1_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p0_i_j_kp1_pipe" Float (Stream "p0_i_j_kp1" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p0_i_jp1_k_pipe" Float (Stream "p0_i_jp1_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p0_ip1_j_k_pipe" Float (Stream "p0_ip1_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p0_i_j_km1_pipe" Float (Stream "p0_i_j_km1" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p1_im1_j_k_pipe" Float (Stream "p1_im1_j_k" "p1" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p1_i_jm1_k_pipe" Float (Stream "p1_i_jm1_k" "p1" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p1_i_j_kp1_pipe" Float (Stream "p1_i_j_kp1" "p1" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p1_i_j_k_pipe" Float (Stream "p1_i_j_k" "p1" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p1_i_jp1_k_pipe" Float (Stream "p1_i_jp1_k" "p1" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p1_ip1_j_k_pipe" Float (Stream "p1_ip1_j_k" "p1" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_smart_cache" "p1_press" "p1_press_smart_cache_p1_press_p1_i_j_km1_pipe" Float (Stream "p1_i_j_km1" "p1" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_dxs_i_reader" "p1_press_smart_cache" "p1_press_dxs_i_reader_p1_press_smart_cache_dxs_i_pipe" Float (Stream "dxs_i" "dxs" Float [(0,300)])

Pipe "p1_press_dys_j_reader" "p1_press_smart_cache" "p1_press_dys_j_reader_p1_press_smart_cache_dys_j_pipe" Float (Stream "dys_j" "dys" Float [(0,300)])

Pipe "p1_press_dzs_k_reader" "p1_press_smart_cache" "p1_press_dzs_k_reader_p1_press_smart_cache_dzs_k_pipe" Float (Stream "dzs_k" "dzs" Float [(-1,82)])

Pipe "p1_press_p0_i_j_k_reader" "p1_press_smart_cache" "p1_press_p0_i_j_k_reader_p1_press_smart_cache_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_p1_i_j_k_reader" "p1_press_smart_cache" "p1_press_p1_i_j_k_reader_p1_press_smart_cache_p1_i_j_k_pipe" Float (Stream "p1_i_j_k" "p1" Float [(0,302),(0,302),(0,81)])

Pipe "p1_press_rhs_i_j_k_reader" "p1_press" "p1_press_rhs_i_j_k_reader_p1_press_rhs_i_j_k_pipe" Float (Stream "rhs_i_j_k" "rhs" Float [(0,301),(0,301),(0,81)])

Graph Viz data:

digraph G {

	p1_press -> p1_press_output_writer [ label="p0_i_j_k" ]
	p1_press -> p1_press_output_writer [ label="p1_i_j_k" ]
	p1_press_smart_cache -> p1_press [ label="dxs_i" ]
	p1_press_smart_cache -> p1_press [ label="dxs_im1" ]
	p1_press_smart_cache -> p1_press [ label="dys_j" ]
	p1_press_smart_cache -> p1_press [ label="dys_jm1" ]
	p1_press_smart_cache -> p1_press [ label="dzs_k" ]
	p1_press_smart_cache -> p1_press [ label="dzs_km1" ]
	p1_press_smart_cache -> p1_press [ label="p0_im1_j_k" ]
	p1_press_smart_cache -> p1_press [ label="p0_i_jm1_k" ]
	p1_press_smart_cache -> p1_press [ label="p0_i_j_kp1" ]
	p1_press_smart_cache -> p1_press [ label="p0_i_j_k" ]
	p1_press_smart_cache -> p1_press [ label="p0_i_jp1_k" ]
	p1_press_smart_cache -> p1_press [ label="p0_ip1_j_k" ]
	p1_press_smart_cache -> p1_press [ label="p0_i_j_km1" ]
	p1_press_smart_cache -> p1_press [ label="p1_im1_j_k" ]
	p1_press_smart_cache -> p1_press [ label="p1_i_jm1_k" ]
	p1_press_smart_cache -> p1_press [ label="p1_i_j_kp1" ]
	p1_press_smart_cache -> p1_press [ label="p1_i_j_k" ]
	p1_press_smart_cache -> p1_press [ label="p1_i_jp1_k" ]
	p1_press_smart_cache -> p1_press [ label="p1_ip1_j_k" ]
	p1_press_smart_cache -> p1_press [ label="p1_i_j_km1" ]
	p1_press_dxs_i_reader -> p1_press_smart_cache [ label="dxs_i" ]
	p1_press_dys_j_reader -> p1_press_smart_cache [ label="dys_j" ]
	p1_press_dzs_k_reader -> p1_press_smart_cache [ label="dzs_k" ]
	p1_press_p0_i_j_k_reader -> p1_press_smart_cache [ label="p0_i_j_k" ]
	p1_press_p1_i_j_k_reader -> p1_press_smart_cache [ label="p1_i_j_k" ]
	p1_press_rhs_i_j_k_reader -> p1_press [ label="rhs_i_j_k" ]
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Scalarizing Kernels 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Kernel = 
subroutine press(dxs,dys,dzs,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4), dimension(0:302,0:302,0:81) :: p1
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dz1 = dzs(k-1)
        dz2 = dzs(k)
        cn4s = 2./(dz1*(dz1+dz2))
        cn4l = 2./(dz2*(dz1+dz2))
        cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
        cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
        cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
        cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
        cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
        if (nrd==0) then
            reltmp = 1.0*(cn1*(cn2l*p0(i+1,j,k)+cn2s*p0(i-1,j,k)+cn3l*p0(i,j+1,k)+cn3s*p0(i,j-1,k)+cn4l*p0(i,j,k+1)+cn4s*p0(i,j,k-1)&
&-rhs(i,j,k))-p0(i,j,k))
            p1(i,j,k) = p0(i,j,k)+reltmp
        else
            reltmp = 1.0*(cn1*(cn2l*p1(i+1,j,k)+cn2s*p1(i-1,j,k)+cn3l*p1(i,j+1,k)+cn3s*p1(i,j-1,k)+cn4l*p1(i,j,k+1)+cn4s*p1(i,j,k-1)&
&-rhs(i,j,k))-p1(i,j,k))
            p0(i,j,k) = p1(i,j,k)+reltmp
        end if
    end if
!}    
!}
end subroutine press

Streams = 
subroutine press
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4) :: dxs_i
      real(4) :: dxs_im1
      real(4) :: dys_j
      real(4) :: dys_jm1
      real(4) :: dzs_k
      real(4) :: dzs_km1
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_im1_j_k
      real(4) :: p0_i_jm1_k
      real(4) :: p0_i_j_kp1
      real(4) :: p0_i_j_k
      real(4) :: p0_i_jp1_k
      real(4) :: p0_ip1_j_k
      real(4) :: p0_i_j_km1
      real(4) :: p1_im1_j_k
      real(4) :: p1_i_jm1_k
      real(4) :: p1_i_j_kp1
      real(4) :: p1_i_j_k
      real(4) :: p1_i_jp1_k
      real(4) :: p1_ip1_j_k
      real(4) :: p1_i_j_km1
      real(4) :: rhs_i_j_k
      real(4) :: reltmp
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	7 point stencil on 3D array p0: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!	7 point stencil on 3D array p1: [[1,0,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["dzs","p0","nrd"],[],["(l,1,50,1)","(nrd,0,1,1)","(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dz1 = dzs_km1
        dz2 = dzs_k
        cn4s = 2./(dz1*(dz1+dz2))
        cn4l = 2./(dz2*(dz1+dz2))
        cn3s = 2./(dys_jm1*(dys_jm1+dys_j))
        cn3l = 2./(dys_j*(dys_jm1+dys_j))
        cn2s = 2./(dxs_im1*(dxs_im1+dxs_i))
        cn2l = 2./(dxs_i*(dxs_im1+dxs_i))
        cn1 = 1./(2./(dxs_im1*dxs_i)+2./(dys_jm1*dys_j)+2./(dz1*dz2))
        if (nrd==0) then
            reltmp = 1.0*(cn1*(cn2l*p0_ip1_j_k+cn2s*p0_im1_j_k+cn3l*p0_i_jp1_k+cn3s*p0_i_jm1_k+cn4l*p0_i_j_kp1+cn4s*p0_i_j_km1-rhs_i&
&_j_k)-p0_i_j_k)
            p1_i_j_k = p0_i_j_k+reltmp
        else
            reltmp = 1.0*(cn1*(cn2l*p1_ip1_j_k+cn2s*p1_im1_j_k+cn3l*p1_i_jp1_k+cn3s*p1_i_jm1_k+cn4l*p1_i_j_kp1+cn4s*p1_i_j_km1-rhs_i&
&_j_k)-p1_i_j_k)
            p0_i_j_k = p1_i_j_k+reltmp
        end if
    end if
!}    
!}
end subroutine press


--------------------------------------------------------------------------------

Pipeline Statistics
Pipeline ID: 1
Number of Compute Kernels: 1
Compute Kernel Names: p1_press
Number of Smart Caches: 1
Number of Memory Readers: 6
Number of Memory Writers: 1
Number of Pipes: 28
CSV: 
1,1,1,6,1,28

--------------------------------------------------------------------------------

p0_i_j_synthIdx0 is largest stream size = 7528338 dims used to calculate this = [(0,302),(0,302),(0,81)]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Add Write Back Streams 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Streams to write back:
	Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)]
	Stream "p0_synthIdx2_j_k" "p0" Float [(0,302),(0,302),(0,81)]
	Stream "p0_i_synthIdx1_k" "p0" Float [(0,302),(0,302),(0,81)]
	Stream "p0_i_j_synthIdx0" "p0" Float [(0,302),(0,302),(0,81)]

Last kernel updated = 
 ! ==============================================
 ! Name: p2_press_4 Order: 4
 ! Input streams:
 !	StencilStream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
 ! Output streams:
 !	Stream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    if (synthIdx0==0) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
    end if
    if (synthIdx0==81) then
        p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
    end if
!}    
!}
end subroutine press_4
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Loop Guards 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: p2_press_0 Order: 0
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_0(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_0
 ! ==============================================


Adding memory input for output
kernel outputs = []
availableFromMem = []
currentInputNames = fromList ["dx1_i","dy1_j","dzn_k","p0_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p2_press_1 Order: 1
 ! Input streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        p0(i,j,k) = p0(i,j,k)-pav
    end if
!}
end subroutine press_1
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)]]
availableFromMem = []
currentInputNames = fromList ["p0_i_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p2_press_2 Order: 2
 ! Input streams:
 !	StencilStream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
 ! Output streams:
 !	Stream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302)) then
        if (synthIdx2==0) then
            p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
        end if
        if (synthIdx2==301) then
            p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_2
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "p0_synthIdx2_j_k" "p0" Float [(0,302),(0,302),(0,81)]]
availableFromMem = []
currentInputNames = fromList ["p0_synthIdx2_j_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p2_press_3 Order: 3
 ! Input streams:
 !	StencilStream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
 ! Output streams:
 !	Stream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_3
      integer :: i
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302)) then
        if (synthIdx1==0) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
        end if
        if (synthIdx1==301) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_3
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "p0_i_synthIdx1_k" "p0" Float [(0,302),(0,302),(0,81)]]
availableFromMem = []
currentInputNames = fromList ["p0_i_synthIdx1_k"]
notCurrentlyAnInput = []
Inputs to add = 

 ! ==============================================
 ! Name: p2_press_4 Order: 4
 ! Input streams:
 !	StencilStream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
 ! Output streams:
 !	Stream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81)) then
        if (synthIdx0==0) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
        end if
        if (synthIdx0==81) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_4
 ! ==============================================


Adding memory input for output
kernel outputs = [Stream "p0_i_j_synthIdx0" "p0" Float [(0,302),(0,302),(0,81)]]
availableFromMem = []
currentInputNames = fromList ["p0_i_j_synthIdx0"]
notCurrentlyAnInput = []
Inputs to add = 


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Transit Streams 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

p2_press_1 requires:
Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
p2_press_2 requires:
StencilStream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
p2_press_3 requires:
StencilStream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
p2_press_4 requires:
StencilStream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]


--------------------------------------------------------------------------------

TransitStream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Produced at: p2_press_1
Consumed at: p2_press_2
TransitStream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Produced at: p2_press_2
Consumed at: p2_press_3
TransitStream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Produced at: p2_press_3
Consumed at: p2_press_4

Transit Streams Added
 ! ==============================================
 ! Name: p2_press_0 Order: 0
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_0(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_0
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_1 Order: 1
 ! Input streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        p0(i,j,k) = p0(i,j,k)-pav
    end if
!}
end subroutine press_1
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_2 Order: 2
 ! Input streams:
 !	StencilStream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
 ! Output streams:
 !	Stream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302)) then
        if (synthIdx2==0) then
            p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
        end if
        if (synthIdx2==301) then
            p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_2
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_3 Order: 3
 ! Input streams:
 !	StencilStream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
 ! Output streams:
 !	Stream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_3
      integer :: i
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302)) then
        if (synthIdx1==0) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
        end if
        if (synthIdx1==301) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_3
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_4 Order: 4
 ! Input streams:
 !	StencilStream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
 ! Output streams:
 !	Stream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81)) then
        if (synthIdx0==0) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
        end if
        if (synthIdx0==81) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_4
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Reduction Vars Linked 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: p2_press_0 Order: 0
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_0(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_0
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_1 Order: 1
 ! Input streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
! 	"pco"
! 	"pav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        p0(i,j,k) = p0(i,j,k)-pav
    end if
!}
end subroutine press_1
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_2 Order: 2
 ! Input streams:
 !	StencilStream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
 ! Output streams:
 !	Stream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302)) then
        if (synthIdx2==0) then
            p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
        end if
        if (synthIdx2==301) then
            p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_2
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_3 Order: 3
 ! Input streams:
 !	StencilStream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
 ! Output streams:
 !	Stream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_3
      integer :: i
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302)) then
        if (synthIdx1==0) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
        end if
        if (synthIdx1==301) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_3
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_4 Order: 4
 ! Input streams:
 !	StencilStream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
 ! Output streams:
 !	Stream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81)) then
        if (synthIdx0==0) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
        end if
        if (synthIdx0==81) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_4
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Synthesised Loop Vars 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: p2_press_0 Order: 0
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_0(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_0
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_1 Order: 1
 ! Input streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
! 	"pco"
! 	"pav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        p0(i,j,k) = p0(i,j,k)-pav
    end if
!}
end subroutine press_1
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_2 Order: 2
 ! Input streams:
 !	StencilStream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
 ! Output streams:
 !	Stream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    synthIdx2 = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302)) then
        if (synthIdx2==0) then
            p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
        end if
        if (synthIdx2==301) then
            p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_2
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_3 Order: 3
 ! Input streams:
 !	StencilStream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
 ! Output streams:
 !	Stream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_3
      integer :: i
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    synthIdx1 = mod(count/303, 303)
    k = count/91809
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302)) then
        if (synthIdx1==0) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
        end if
        if (synthIdx1==301) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_3
 ! ==============================================


 ! ==============================================
 ! Name: p2_press_4 Order: 4
 ! Input streams:
 !	StencilStream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
 ! Output streams:
 !	Stream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    synthIdx0 = count/91809
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81)) then
        if (synthIdx0==0) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
        end if
        if (synthIdx0==81) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_4
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Smart Caches 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

"------------------------------------------"
 ! ==============================================
 ! Name: p2_press_0 Order: 0
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_0(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_0
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p2_press_1 Order: 1
 ! Input streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
! 	"pco"
! 	"pav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        p0(i,j,k) = p0(i,j,k)-pav
    end if
!}
end subroutine press_1
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p2_press_2 Order: 2
 ! Input streams:
 !	Stream: p0_synthIdx2p1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_synthIdx2m1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    synthIdx2 = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302)) then
        if (synthIdx2==0) then
            p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
        end if
        if (synthIdx2==301) then
            p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_2
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p2_press_3 Order: 3
 ! Input streams:
 !	Stream: p0_i_synthIdx1p300_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_synthIdx1m300_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_3
      integer :: i
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    synthIdx1 = mod(count/303, 303)
    k = count/91809
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302)) then
        if (synthIdx1==0) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
        end if
        if (synthIdx1==301) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_3
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: p2_press_4 Order: 4
 ! Input streams:
 !	Stream: p0_i_j_synthIdx0p1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 !	Stream: p0_i_j_synthIdx0m1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    synthIdx0 = count/91809
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81)) then
        if (synthIdx0==0) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
        end if
        if (synthIdx0==81) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_4
 ! ==============================================


"------------------------------------------"

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Memory Readers 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a reduce kernel.
Name:p2_press_0
--------------------------------------------------------------------------------
Input Streams:
	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Output Streams:
Input reduction vars: 
Output reduction vars: 
	pav
	pco
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine press_0(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_0

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Nothing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p2_press_0_dx1_i_reader
--------------------------------------------------------------------------------
Memory to streams:
	dx1_i --> Stream "dx1_i" "dx1" Float [(-1,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p2_press_0_dy1_j_reader
--------------------------------------------------------------------------------
Memory to streams:
	dy1_j --> Stream "dy1_j" "dy1" Float [(0,301)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p2_press_0_dzn_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	dzn_k --> Stream "dzn_k" "dzn" Float [(-1,82)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p2_press_0_p0_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	p0_i_j_k --> Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p2_press_1
--------------------------------------------------------------------------------
Input Streams:
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
OutputStreams:
	Stream: p0_i_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Input reduction vars: 
	pco
	pav
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        p0(i,j,k) = p0(i,j,k)-pav
    end if
!}
end subroutine press_1

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Nothing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory reader kernel.
Name: p2_press_1_p0_i_j_k_reader
--------------------------------------------------------------------------------
Memory to streams:
	p0_i_j_k --> Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p2_press_2
--------------------------------------------------------------------------------
Input Streams:
	Stream: p0_synthIdx2p1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_synthIdx2m1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
OutputStreams:
	Stream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine press_2
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    synthIdx2 = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302)) then
        if (synthIdx2==0) then
            p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
        end if
        if (synthIdx2==301) then
            p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_2

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p2_press_2_smart_cache
Size: 3
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: p0_synthIdx2_j_k
	Buffer size: 3
	Max positive offset = 1
	Max negative offset = 1
	Stream Dimensions: [(0,302),(0,302),(0,81)]
	Output Streams:
		p0_synthIdx2p1_j_k from buffer index = 3
		p0_synthIdx2m1_j_k from buffer index = 1
	-------------------------------


Input Streams:
	Stream: p0_synthIdx2_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Output Streams:
	Stream: p0_synthIdx2p1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_synthIdx2m1_j_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p2_press_3
--------------------------------------------------------------------------------
Input Streams:
	Stream: p0_i_synthIdx1p300_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_synthIdx1m300_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
OutputStreams:
	Stream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine press_3
      integer :: i
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    synthIdx1 = mod(count/303, 303)
    k = count/91809
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302)) then
        if (synthIdx1==0) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
        end if
        if (synthIdx1==301) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_3

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p2_press_3_smart_cache
Size: 181801
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: p0_i_synthIdx1_k
	Buffer size: 181801
	Max positive offset = 90900
	Max negative offset = 90900
	Stream Dimensions: [(0,302),(0,302),(0,81)]
	Output Streams:
		p0_i_synthIdx1p300_k from buffer index = 181801
		p0_i_synthIdx1m300_k from buffer index = 1
	-------------------------------


Input Streams:
	Stream: p0_i_synthIdx1_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Output Streams:
	Stream: p0_i_synthIdx1p300_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_synthIdx1m300_k array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------

--------------  PIPELINE STAGE  ---------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a map kernel.
Name:p2_press_4
--------------------------------------------------------------------------------
Input Streams:
	Stream: p0_i_j_synthIdx0p1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_synthIdx0m1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
OutputStreams:
	Stream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Input reduction vars: 
readPipes:
writtenPipes:

--------------------------------------------------------------------------------
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    synthIdx0 = count/91809
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81)) then
        if (synthIdx0==0) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
        end if
        if (synthIdx0==81) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_4

--------------------------------------------------------------------------------
SPD {driverLoopLowerBound = 0, driverLoopUpperBound = 0, driverLoopIndexName = "count", largestStreamDimensions = [], largestStreamName = ""}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Just 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a smart cache kernel.
Name: p2_press_4_smart_cache
Size: 183619
Cache Lines:
	-------------------------------
	Smart cache item
	Input stream: p0_i_j_synthIdx0
	Buffer size: 183619
	Max positive offset = 91809
	Max negative offset = 91809
	Stream Dimensions: [(0,302),(0,302),(0,81)]
	Output Streams:
		p0_i_j_synthIdx0p1 from buffer index = 183619
		p0_i_j_synthIdx0m1 from buffer index = 1
	-------------------------------


Input Streams:
	Stream: p0_i_j_synthIdx0 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
Output Streams:
	Stream: p0_i_j_synthIdx0p1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]
	Stream: p0_i_j_synthIdx0m1 array name: p0 type: Float dimensions: [(0,302),(0,302),(0,81)]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a memory writer kernel.
Name: p2_press_4_output_writer
--------------------------------------------------------------------------------
Streams to memory:
	Stream "p0_i_j_synthIdx0" "p0" Float [(0,302),(0,302),(0,81)] --> p0_i_j_synthIdx0

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Routing Pipes 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Pipe "p2_press_0" "p2_press_1" "p2_press_0_p2_press_1_pco_pipe" Float (Stream "pco" "" Float [])

Pipe "p2_press_0" "p2_press_1" "p2_press_0_p2_press_1_pav_pipe" Float (Stream "pav" "" Float [])

Pipe "p2_press_0_dx1_i_reader" "p2_press_0" "p2_press_0_dx1_i_reader_p2_press_0_dx1_i_pipe" Float (Stream "dx1_i" "dx1" Float [(-1,301)])

Pipe "p2_press_0_dy1_j_reader" "p2_press_0" "p2_press_0_dy1_j_reader_p2_press_0_dy1_j_pipe" Float (Stream "dy1_j" "dy1" Float [(0,301)])

Pipe "p2_press_0_dzn_k_reader" "p2_press_0" "p2_press_0_dzn_k_reader_p2_press_0_dzn_k_pipe" Float (Stream "dzn_k" "dzn" Float [(-1,82)])

Pipe "p2_press_0_p0_i_j_k_reader" "p2_press_0" "p2_press_0_p0_i_j_k_reader_p2_press_0_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_1" "p2_press_2_smart_cache" "p2_press_1_p2_press_2_smart_cache_p0_synthIdx2_j_k_pipe" Float (Stream "p0_synthIdx2_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_1_p0_i_j_k_reader" "p2_press_1" "p2_press_1_p0_i_j_k_reader_p2_press_1_p0_i_j_k_pipe" Float (Stream "p0_i_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_2" "p2_press_3_smart_cache" "p2_press_2_p2_press_3_smart_cache_p0_i_synthIdx1_k_pipe" Float (Stream "p0_i_synthIdx1_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_2_smart_cache" "p2_press_2" "p2_press_2_smart_cache_p2_press_2_p0_synthIdx2p1_j_k_pipe" Float (Stream "p0_synthIdx2p1_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_2_smart_cache" "p2_press_2" "p2_press_2_smart_cache_p2_press_2_p0_synthIdx2m1_j_k_pipe" Float (Stream "p0_synthIdx2m1_j_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_3" "p2_press_4_smart_cache" "p2_press_3_p2_press_4_smart_cache_p0_i_j_synthIdx0_pipe" Float (Stream "p0_i_j_synthIdx0" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_3_smart_cache" "p2_press_3" "p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1p300_k_pipe" Float (Stream "p0_i_synthIdx1p300_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_3_smart_cache" "p2_press_3" "p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1m300_k_pipe" Float (Stream "p0_i_synthIdx1m300_k" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_4" "p2_press_4_output_writer" "p2_press_4_p2_press_4_output_writer_p0_i_j_synthIdx0_pipe" Float (Stream "p0_i_j_synthIdx0" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_4_smart_cache" "p2_press_4" "p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0p1_pipe" Float (Stream "p0_i_j_synthIdx0p1" "p0" Float [(0,302),(0,302),(0,81)])

Pipe "p2_press_4_smart_cache" "p2_press_4" "p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0m1_pipe" Float (Stream "p0_i_j_synthIdx0m1" "p0" Float [(0,302),(0,302),(0,81)])

Graph Viz data:

digraph G {

	p2_press_0 -> p2_press_1 [ label="pco" ]
	p2_press_0 -> p2_press_1 [ label="pav" ]
	p2_press_0_dx1_i_reader -> p2_press_0 [ label="dx1_i" ]
	p2_press_0_dy1_j_reader -> p2_press_0 [ label="dy1_j" ]
	p2_press_0_dzn_k_reader -> p2_press_0 [ label="dzn_k" ]
	p2_press_0_p0_i_j_k_reader -> p2_press_0 [ label="p0_i_j_k" ]
	p2_press_1 -> p2_press_2_smart_cache [ label="p0_synthIdx2_j_k" ]
	p2_press_1_p0_i_j_k_reader -> p2_press_1 [ label="p0_i_j_k" ]
	p2_press_2 -> p2_press_3_smart_cache [ label="p0_i_synthIdx1_k" ]
	p2_press_2_smart_cache -> p2_press_2 [ label="p0_synthIdx2p1_j_k" ]
	p2_press_2_smart_cache -> p2_press_2 [ label="p0_synthIdx2m1_j_k" ]
	p2_press_3 -> p2_press_4_smart_cache [ label="p0_i_j_synthIdx0" ]
	p2_press_3_smart_cache -> p2_press_3 [ label="p0_i_synthIdx1p300_k" ]
	p2_press_3_smart_cache -> p2_press_3 [ label="p0_i_synthIdx1m300_k" ]
	p2_press_4 -> p2_press_4_output_writer [ label="p0_i_j_synthIdx0" ]
	p2_press_4_smart_cache -> p2_press_4 [ label="p0_i_j_synthIdx0p1" ]
	p2_press_4_smart_cache -> p2_press_4 [ label="p0_i_j_synthIdx0m1" ]
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Scalarizing Kernels 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Kernel = 
subroutine press_0(dx1,dy1,dzn)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pav = pav+p0(i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_0

Streams = 
subroutine press_0
      real(4) :: dx1_i
      real(4) :: dy1_j
      real(4) :: dzn_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_i_j_k
      real(4) :: pav
      real(4) :: pco
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p0","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        pav = pav+p0_i_j_k*dx1_i*dy1_j*dzn_k
        pco = pco+dx1_i*dy1_j*dzn_k
    end if
!}
end subroutine press_0

Kernel = 
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        p0(i,j,k) = p0(i,j,k)-pav
    end if
!}
end subroutine press_1

Streams = 
subroutine press_1
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_i_j_k
      real(4) :: pav
      real(4) :: pco
    pav = pav/pco
! OpenCLMap ( ["pav"],["p0"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        p0_i_j_k = p0_i_j_k-pav
    end if
!}
end subroutine press_1

Kernel = 
subroutine press_2
      integer :: j
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    synthIdx2 = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302)) then
        if (synthIdx2==0) then
            p0(synthIdx2,j,k) = p0(synthIdx2+1,j,k)
        end if
        if (synthIdx2==301) then
            p0(synthIdx2,j,k) = p0(synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_2

Streams = 
subroutine press_2
      integer :: j
      integer :: k
      real(4) :: p0_synthIdx2p1_j_k
      real(4) :: p0_synthIdx2m1_j_k
      real(4) :: p0_synthIdx2_j_k
      integer :: synthIdx2
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[1,0,0],[-1,0,0]]
!    ){
! OpenCLMap ( [],["p0"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)"],[]) {
    synthIdx2 = mod(count, 303)
    j = mod(count/303, 303)
    k = count/91809
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302)) then
        if (synthIdx2==0) then
            p0_synthIdx2_j_k = p0_synthIdx2p1_j_k
        end if
        if (synthIdx2==301) then
            p0_synthIdx2_j_k = p0_synthIdx2m1_j_k
        end if
    end if
!}    
!}
end subroutine press_2

Kernel = 
subroutine press_3
      integer :: i
      integer :: k
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    synthIdx1 = mod(count/303, 303)
    k = count/91809
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302)) then
        if (synthIdx1==0) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1+300,k)
        end if
        if (synthIdx1==301) then
            p0(i,synthIdx1,k) = p0(i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_3

Streams = 
subroutine press_3
      integer :: i
      integer :: k
      real(4) :: p0_i_synthIdx1p300_k
      real(4) :: p0_i_synthIdx1m300_k
      real(4) :: p0_i_synthIdx1_k
      integer :: synthIdx1
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,300,0],[0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p0"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    synthIdx1 = mod(count/303, 303)
    k = count/91809
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302)) then
        if (synthIdx1==0) then
            p0_i_synthIdx1_k = p0_i_synthIdx1p300_k
        end if
        if (synthIdx1==301) then
            p0_i_synthIdx1_k = p0_i_synthIdx1m300_k
        end if
    end if
!}    
!}
end subroutine press_3

Kernel = 
subroutine press_4
      integer :: i
      integer :: j
      real(4), dimension(0:302,0:302,0:81) :: p0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    synthIdx0 = count/91809
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81)) then
        if (synthIdx0==0) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0+1)
        end if
        if (synthIdx0==81) then
            p0(i,j,synthIdx0) = p0(i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_4

Streams = 
subroutine press_4
      integer :: i
      integer :: j
      real(4) :: p0_i_j_synthIdx0p1
      real(4) :: p0_i_j_synthIdx0m1
      real(4) :: p0_i_j_synthIdx0
      integer :: synthIdx0
! OpenCLStencil (
!	2 point stencil on 3D array p0: [[0,0,1],[0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/303, 303)
    synthIdx0 = count/91809
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81)) then
        if (synthIdx0==0) then
            p0_i_j_synthIdx0 = p0_i_j_synthIdx0p1
        end if
        if (synthIdx0==81) then
            p0_i_j_synthIdx0 = p0_i_j_synthIdx0m1
        end if
    end if
!}    
!}
end subroutine press_4


--------------------------------------------------------------------------------

Pipeline Statistics
Pipeline ID: 2
Number of Compute Kernels: 5
Compute Kernel Names: p2_press_0, p2_press_1, p2_press_2, p2_press_3, p2_press_4
Number of Smart Caches: 3
Number of Memory Readers: 5
Number of Memory Writers: 1
Number of Pipes: 17
CSV: 
2,5,3,5,1,17

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
 Pipe Init Sub 
--------------------------------------------------------------------------------

module velnw_feedbf_les_adam_press_device_code
      integer :: p0_velnw_0_p0_velnw_1_smart_cache_u_i_j_k_pipe
      integer :: p0_velnw_0_smart_cache_p0_velnw_0_p0_ip1_j_k_pipe
      integer :: p0_velnw_0_smart_cache_p0_velnw_0_p0_i_j_k_pipe
      integer :: p0_velnw_0_p0_i_j_k_reader_p0_velnw_0_smart_cache_p0_i_j_k_pipe
      integer :: p0_velnw_0_dxs_i_reader_p0_velnw_0_dxs_i_pipe
      integer :: p0_velnw_0_f_i_j_k_reader_p0_velnw_0_f_i_j_k_pipe
      integer :: p0_velnw_0_u_i_j_k_reader_p0_velnw_0_u_i_j_k_pipe
      integer :: p0_velnw_1_p0_velnw_2_smart_cache_v_i_j_k_pipe
      integer :: p0_velnw_1_p0_velnw_2_smart_cache_u_i_j_k_pipe
      integer :: p0_velnw_1_smart_cache_p0_velnw_1_u_i_j_k_pipe
      integer :: p0_velnw_1_smart_cache_p0_velnw_1_p0_i_jp1_k_pipe
      integer :: p0_velnw_1_smart_cache_p0_velnw_1_p0_i_j_k_pipe
      integer :: p0_velnw_1_p0_i_j_k_reader_p0_velnw_1_smart_cache_p0_i_j_k_pipe
      integer :: p0_velnw_1_dys_j_reader_p0_velnw_1_dys_j_pipe
      integer :: p0_velnw_1_g_i_j_k_reader_p0_velnw_1_g_i_j_k_pipe
      integer :: p0_velnw_1_v_i_j_k_reader_p0_velnw_1_v_i_j_k_pipe
      integer :: p0_velnw_2_p0_feedbf_u_i_j_k_pipe
      integer :: p0_velnw_2_p0_feedbf_v_i_j_k_pipe
      integer :: p0_velnw_2_p0_feedbf_w_i_j_k_pipe
      integer :: p0_velnw_2_smart_cache_p0_velnw_2_v_i_j_k_pipe
      integer :: p0_velnw_2_smart_cache_p0_velnw_2_u_i_j_k_pipe
      integer :: p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_kp1_pipe
      integer :: p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_k_pipe
      integer :: p0_velnw_2_p0_i_j_k_reader_p0_velnw_2_smart_cache_p0_i_j_k_pipe
      integer :: p0_velnw_2_dzs_k_reader_p0_velnw_2_dzs_k_pipe
      integer :: p0_velnw_2_h_i_j_k_reader_p0_velnw_2_h_i_j_k_pipe
      integer :: p0_velnw_2_w_i_j_k_reader_p0_velnw_2_w_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_fx_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_fy_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_fz_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_usum_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_vsum_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_wsum_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_w_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_v_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_u_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_h_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_g_i_j_k_pipe
      integer :: p0_feedbf_p0_les_0_smart_cache_f_i_j_k_pipe
      integer :: p0_feedbf_bmask1_i_j_k_reader_p0_feedbf_bmask1_i_j_k_pipe
      integer :: p0_feedbf_cmask1_i_j_k_reader_p0_feedbf_cmask1_i_j_k_pipe
      integer :: p0_feedbf_dmask1_i_j_k_reader_p0_feedbf_dmask1_i_j_k_pipe
      integer :: p0_feedbf_f_i_j_k_reader_p0_feedbf_f_i_j_k_pipe
      integer :: p0_feedbf_fx_i_j_k_reader_p0_feedbf_fx_i_j_k_pipe
      integer :: p0_feedbf_fy_i_j_k_reader_p0_feedbf_fy_i_j_k_pipe
      integer :: p0_feedbf_fz_i_j_k_reader_p0_feedbf_fz_i_j_k_pipe
      integer :: p0_feedbf_g_i_j_k_reader_p0_feedbf_g_i_j_k_pipe
      integer :: p0_feedbf_h_i_j_k_reader_p0_feedbf_h_i_j_k_pipe
      integer :: p0_feedbf_usum_i_j_k_reader_p0_feedbf_usum_i_j_k_pipe
      integer :: p0_feedbf_vsum_i_j_k_reader_p0_feedbf_vsum_i_j_k_pipe
      integer :: p0_feedbf_wsum_i_j_k_reader_p0_feedbf_wsum_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_fx_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_fy_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_fz_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_usum_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_vsum_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_wsum_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_w_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_v_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_u_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_h_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_g_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_sm_i_j_k_pipe
      integer :: p0_les_0_p0_les_1_smart_cache_f_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_fx_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_fy_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_fz_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_usum_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_vsum_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_wsum_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_w_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_v_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_u_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_h_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_g_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_f_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu2_im1_jp1_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu2_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu2_i_jp1_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu2_im1_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu3_im1_j_kp1_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu3_i_j_kp1_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu3_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu3_im1_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu4_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu4_ip1_jm1_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu4_ip1_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu4_i_jm1_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_kp1_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu6_i_j_kp1_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu6_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu7_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_km1_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu7_i_j_km1_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu8_i_j_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_km1_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_k_pipe
      integer :: p0_les_0_smart_cache_p0_les_0_diu8_i_j_km1_pipe
      integer :: p0_les_0_diu2_i_j_k_reader_p0_les_0_smart_cache_diu2_i_j_k_pipe
      integer :: p0_les_0_diu3_i_j_k_reader_p0_les_0_smart_cache_diu3_i_j_k_pipe
      integer :: p0_les_0_diu4_i_j_k_reader_p0_les_0_smart_cache_diu4_i_j_k_pipe
      integer :: p0_les_0_diu6_i_j_k_reader_p0_les_0_smart_cache_diu6_i_j_k_pipe
      integer :: p0_les_0_diu7_i_j_k_reader_p0_les_0_smart_cache_diu7_i_j_k_pipe
      integer :: p0_les_0_diu8_i_j_k_reader_p0_les_0_smart_cache_diu8_i_j_k_pipe
      integer :: p0_les_0_delx1_k_reader_p0_les_0_delx1_k_pipe
      integer :: p0_les_0_diu1_i_j_k_reader_p0_les_0_diu1_i_j_k_pipe
      integer :: p0_les_0_diu5_i_j_k_reader_p0_les_0_diu5_i_j_k_pipe
      integer :: p0_les_0_diu9_i_j_k_reader_p0_les_0_diu9_i_j_k_pipe
      integer :: p0_les_0_sm_i_j_k_reader_p0_les_0_sm_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_fx_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_fy_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_fz_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_usum_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_vsum_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_wsum_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_w_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_v_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_u_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_f_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_h_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_sm_i_j_k_pipe
      integer :: p0_les_1_p0_les_2_smart_cache_g_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_f_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_fx_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_fy_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_fz_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_usum_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_vsum_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_wsum_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_w_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_v_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_u_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_h_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_g_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu1_ip1_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu1_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu2_i_jp1_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu2_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu3_i_j_kp1_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu3_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu4_ip1_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu4_ip1_jm1_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_km1_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_dx1_ip1_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_dx1_i_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_dy1_jp1_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_dy1_j_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_dzn_kp1_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_dzn_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_dzn_km1_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_i_jm1_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_i_j_kp1_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_i_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_i_jp1_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_ip1_jm1_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_ip1_j_km1_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_ip1_j_kp1_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_ip1_j_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_ip1_jp1_k_pipe
      integer :: p0_les_1_smart_cache_p0_les_1_sm_i_j_km1_pipe
      integer :: p0_les_1_diu1_i_j_k_reader_p0_les_1_smart_cache_diu1_i_j_k_pipe
      integer :: p0_les_1_diu2_i_j_k_reader_p0_les_1_smart_cache_diu2_i_j_k_pipe
      integer :: p0_les_1_diu3_i_j_k_reader_p0_les_1_smart_cache_diu3_i_j_k_pipe
      integer :: p0_les_1_diu4_i_j_k_reader_p0_les_1_smart_cache_diu4_i_j_k_pipe
      integer :: p0_les_1_diu7_i_j_k_reader_p0_les_1_smart_cache_diu7_i_j_k_pipe
      integer :: p0_les_1_dx1_i_reader_p0_les_1_smart_cache_dx1_i_pipe
      integer :: p0_les_1_dy1_j_reader_p0_les_1_smart_cache_dy1_j_pipe
      integer :: p0_les_1_dzn_k_reader_p0_les_1_smart_cache_dzn_k_pipe
      integer :: p0_les_1_dxs_i_reader_p0_les_1_dxs_i_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_fx_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_fy_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_fz_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_usum_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_vsum_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_wsum_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_w_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_v_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_u_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_g_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_f_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_sm_i_j_k_pipe
      integer :: p0_les_2_p0_les_3_smart_cache_h_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_g_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_fx_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_fy_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_fz_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_usum_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_vsum_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_wsum_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_w_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_v_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_u_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_f_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_h_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu2_im1_jp1_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu2_i_jp1_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu4_ip1_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu4_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu5_i_jp1_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu5_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu6_i_j_kp1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu6_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_km1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_dx1_ip1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_dx1_i_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_dx1_im1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_dy1_jp1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_dy1_j_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_dzn_kp1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_dzn_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_dzn_km1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_im1_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_im1_jp1_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_i_j_kp1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_i_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_i_jp1_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_ip1_j_km1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_ip1_j_kp1_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_ip1_j_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_ip1_jp1_k_pipe
      integer :: p0_les_2_smart_cache_p0_les_2_sm_i_j_km1_pipe
      integer :: p0_les_2_diu2_i_j_k_reader_p0_les_2_smart_cache_diu2_i_j_k_pipe
      integer :: p0_les_2_diu4_i_j_k_reader_p0_les_2_smart_cache_diu4_i_j_k_pipe
      integer :: p0_les_2_diu5_i_j_k_reader_p0_les_2_smart_cache_diu5_i_j_k_pipe
      integer :: p0_les_2_diu6_i_j_k_reader_p0_les_2_smart_cache_diu6_i_j_k_pipe
      integer :: p0_les_2_diu8_i_j_k_reader_p0_les_2_smart_cache_diu8_i_j_k_pipe
      integer :: p0_les_2_dx1_i_reader_p0_les_2_smart_cache_dx1_i_pipe
      integer :: p0_les_2_dy1_j_reader_p0_les_2_smart_cache_dy1_j_pipe
      integer :: p0_les_2_dzn_k_reader_p0_les_2_smart_cache_dzn_k_pipe
      integer :: p0_les_2_dys_j_reader_p0_les_2_dys_j_pipe
      integer :: p0_les_3_p0_adam_f_i_j_k_pipe
      integer :: p0_les_3_p0_adam_g_i_j_k_pipe
      integer :: p0_les_3_p0_adam_h_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_h_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_fx_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_fy_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_fz_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_usum_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_vsum_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_wsum_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_w_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_v_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_u_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_g_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_f_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu3_im1_j_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu3_i_j_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu6_i_jm1_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu6_i_j_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu7_ip1_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu7_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu8_i_jp1_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu8_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu9_i_j_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_diu9_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_dx1_ip1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_dx1_i_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_dx1_im1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_dy1_jp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_dy1_j_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_dy1_jm1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_dzn_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_dzn_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_im1_j_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_im1_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_i_jm1_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_i_j_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_i_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_i_jp1_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_i_jp1_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_ip1_j_kp1_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_ip1_j_k_pipe
      integer :: p0_les_3_smart_cache_p0_les_3_sm_i_jm1_k_pipe
      integer :: p0_les_3_diu3_i_j_k_reader_p0_les_3_smart_cache_diu3_i_j_k_pipe
      integer :: p0_les_3_diu6_i_j_k_reader_p0_les_3_smart_cache_diu6_i_j_k_pipe
      integer :: p0_les_3_diu7_i_j_k_reader_p0_les_3_smart_cache_diu7_i_j_k_pipe
      integer :: p0_les_3_diu8_i_j_k_reader_p0_les_3_smart_cache_diu8_i_j_k_pipe
      integer :: p0_les_3_diu9_i_j_k_reader_p0_les_3_smart_cache_diu9_i_j_k_pipe
      integer :: p0_les_3_dx1_i_reader_p0_les_3_smart_cache_dx1_i_pipe
      integer :: p0_les_3_dy1_j_reader_p0_les_3_smart_cache_dy1_j_pipe
      integer :: p0_les_3_dzn_k_reader_p0_les_3_smart_cache_dzn_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_fx_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_fy_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_fz_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_usum_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_vsum_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_wsum_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_fold_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_gold_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_hold_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_f_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_g_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_h_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_u_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_v_i_j_k_pipe
      integer :: p0_adam_p0_press_0_smart_cache_w_i_j_k_pipe
      integer :: p0_adam_fold_i_j_k_reader_p0_adam_fold_i_j_k_pipe
      integer :: p0_adam_gold_i_j_k_reader_p0_adam_gold_i_j_k_pipe
      integer :: p0_adam_hold_i_j_k_reader_p0_adam_hold_i_j_k_pipe
      integer :: p0_press_0_p0_press_1_rhs_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_fx_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_fy_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_fz_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_usum_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_vsum_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_wsum_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_fold_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_gold_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_hold_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_f_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_f_im1_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_g_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_g_i_jm1_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_h_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_h_i_j_km1_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_u_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_u_im1_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_v_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_v_i_jm1_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_w_i_j_k_pipe
      integer :: p0_press_0_smart_cache_p0_press_0_w_i_j_km1_pipe
      integer :: p0_press_0_dx1_i_reader_p0_press_0_dx1_i_pipe
      integer :: p0_press_0_dy1_j_reader_p0_press_0_dy1_j_pipe
      integer :: p0_press_0_dzn_k_reader_p0_press_0_dzn_k_pipe
      integer :: p0_press_0_rhs_i_j_k_reader_p0_press_0_rhs_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_hold_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_h_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_gold_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_g_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_fold_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_f_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_wsum_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_vsum_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_usum_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_fz_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_fy_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_fx_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_w_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_v_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_u_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_rhs_i_j_k_pipe
      integer :: p0_press_1_p0_press_2_area_pipe
      integer :: p0_press_1_p0_press_2_rhsav_pipe
      integer :: p0_press_1_dx1_i_reader_p0_press_1_dx1_i_pipe
      integer :: p0_press_1_dy1_j_reader_p0_press_1_dy1_j_pipe
      integer :: p0_press_1_dzn_k_reader_p0_press_1_dzn_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_rhs_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_u_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_v_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_w_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_f_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_fx_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_fy_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_fz_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_g_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_h_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_usum_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_vsum_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_wsum_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_fold_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_gold_i_j_k_pipe
      integer :: p0_press_2_p0_press_2_output_writer_hold_i_j_k_pipe
      integer :: p1_press_p1_press_output_writer_p0_i_j_k_pipe
      integer :: p1_press_p1_press_output_writer_p1_i_j_k_pipe
      integer :: p1_press_smart_cache_p1_press_dxs_i_pipe
      integer :: p1_press_smart_cache_p1_press_dxs_im1_pipe
      integer :: p1_press_smart_cache_p1_press_dys_j_pipe
      integer :: p1_press_smart_cache_p1_press_dys_jm1_pipe
      integer :: p1_press_smart_cache_p1_press_dzs_k_pipe
      integer :: p1_press_smart_cache_p1_press_dzs_km1_pipe
      integer :: p1_press_smart_cache_p1_press_p0_im1_j_k_pipe
      integer :: p1_press_smart_cache_p1_press_p0_i_jm1_k_pipe
      integer :: p1_press_smart_cache_p1_press_p0_i_j_kp1_pipe
      integer :: p1_press_smart_cache_p1_press_p0_i_j_k_pipe
      integer :: p1_press_smart_cache_p1_press_p0_i_jp1_k_pipe
      integer :: p1_press_smart_cache_p1_press_p0_ip1_j_k_pipe
      integer :: p1_press_smart_cache_p1_press_p0_i_j_km1_pipe
      integer :: p1_press_smart_cache_p1_press_p1_im1_j_k_pipe
      integer :: p1_press_smart_cache_p1_press_p1_i_jm1_k_pipe
      integer :: p1_press_smart_cache_p1_press_p1_i_j_kp1_pipe
      integer :: p1_press_smart_cache_p1_press_p1_i_j_k_pipe
      integer :: p1_press_smart_cache_p1_press_p1_i_jp1_k_pipe
      integer :: p1_press_smart_cache_p1_press_p1_ip1_j_k_pipe
      integer :: p1_press_smart_cache_p1_press_p1_i_j_km1_pipe
      integer :: p1_press_dxs_i_reader_p1_press_smart_cache_dxs_i_pipe
      integer :: p1_press_dys_j_reader_p1_press_smart_cache_dys_j_pipe
      integer :: p1_press_dzs_k_reader_p1_press_smart_cache_dzs_k_pipe
      integer :: p1_press_p0_i_j_k_reader_p1_press_smart_cache_p0_i_j_k_pipe
      integer :: p1_press_p1_i_j_k_reader_p1_press_smart_cache_p1_i_j_k_pipe
      integer :: p1_press_rhs_i_j_k_reader_p1_press_rhs_i_j_k_pipe
      integer :: p2_press_0_p2_press_1_pco_pipe
      integer :: p2_press_0_p2_press_1_pav_pipe
      integer :: p2_press_0_dx1_i_reader_p2_press_0_dx1_i_pipe
      integer :: p2_press_0_dy1_j_reader_p2_press_0_dy1_j_pipe
      integer :: p2_press_0_dzn_k_reader_p2_press_0_dzn_k_pipe
      integer :: p2_press_0_p0_i_j_k_reader_p2_press_0_p0_i_j_k_pipe
      integer :: p2_press_1_p2_press_2_smart_cache_p0_synthIdx2_j_k_pipe
      integer :: p2_press_1_p0_i_j_k_reader_p2_press_1_p0_i_j_k_pipe
      integer :: p2_press_2_p2_press_3_smart_cache_p0_i_synthIdx1_k_pipe
      integer :: p2_press_2_smart_cache_p2_press_2_p0_synthIdx2p1_j_k_pipe
      integer :: p2_press_2_smart_cache_p2_press_2_p0_synthIdx2m1_j_k_pipe
      integer :: p2_press_3_p2_press_4_smart_cache_p0_i_j_synthIdx0_pipe
      integer :: p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1p300_k_pipe
      integer :: p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1m300_k_pipe
      integer :: p2_press_4_p2_press_4_output_writer_p0_i_j_synthIdx0_pipe
      integer :: p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0p1_pipe
      integer :: p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0m1_pipe
contains

subroutine pipe_initialisation

    call ocl_pipe_real(p0_velnw_0_p0_velnw_1_smart_cache_u_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_0_smart_cache_p0_velnw_0_p0_ip1_j_k_pipe)
    call ocl_pipe_real(p0_velnw_0_smart_cache_p0_velnw_0_p0_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_0_p0_i_j_k_reader_p0_velnw_0_smart_cache_p0_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_0_dxs_i_reader_p0_velnw_0_dxs_i_pipe)
    call ocl_pipe_real(p0_velnw_0_f_i_j_k_reader_p0_velnw_0_f_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_0_u_i_j_k_reader_p0_velnw_0_u_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_1_p0_velnw_2_smart_cache_v_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_1_p0_velnw_2_smart_cache_u_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_1_smart_cache_p0_velnw_1_u_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_1_smart_cache_p0_velnw_1_p0_i_jp1_k_pipe)
    call ocl_pipe_real(p0_velnw_1_smart_cache_p0_velnw_1_p0_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_1_p0_i_j_k_reader_p0_velnw_1_smart_cache_p0_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_1_dys_j_reader_p0_velnw_1_dys_j_pipe)
    call ocl_pipe_real(p0_velnw_1_g_i_j_k_reader_p0_velnw_1_g_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_1_v_i_j_k_reader_p0_velnw_1_v_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_2_p0_feedbf_u_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_2_p0_feedbf_v_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_2_p0_feedbf_w_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_2_smart_cache_p0_velnw_2_v_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_2_smart_cache_p0_velnw_2_u_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_kp1_pipe)
    call ocl_pipe_real(p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_2_p0_i_j_k_reader_p0_velnw_2_smart_cache_p0_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_2_dzs_k_reader_p0_velnw_2_dzs_k_pipe)
    call ocl_pipe_real(p0_velnw_2_h_i_j_k_reader_p0_velnw_2_h_i_j_k_pipe)
    call ocl_pipe_real(p0_velnw_2_w_i_j_k_reader_p0_velnw_2_w_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_w_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_v_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_u_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_h_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_g_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_p0_les_0_smart_cache_f_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_bmask1_i_j_k_reader_p0_feedbf_bmask1_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_cmask1_i_j_k_reader_p0_feedbf_cmask1_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_dmask1_i_j_k_reader_p0_feedbf_dmask1_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_f_i_j_k_reader_p0_feedbf_f_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_fx_i_j_k_reader_p0_feedbf_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_fy_i_j_k_reader_p0_feedbf_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_fz_i_j_k_reader_p0_feedbf_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_g_i_j_k_reader_p0_feedbf_g_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_h_i_j_k_reader_p0_feedbf_h_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_usum_i_j_k_reader_p0_feedbf_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_vsum_i_j_k_reader_p0_feedbf_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_feedbf_wsum_i_j_k_reader_p0_feedbf_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_w_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_v_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_u_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_h_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_g_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_sm_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_p0_les_1_smart_cache_f_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_w_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_v_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_u_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_h_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_g_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_f_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu2_im1_jp1_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu2_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu2_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu2_im1_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu3_im1_j_kp1_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu3_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu3_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu3_im1_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu4_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu4_ip1_jm1_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu4_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu4_i_jm1_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_kp1_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu6_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu6_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu7_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_km1_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu7_i_j_km1_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu8_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_km1_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_0_smart_cache_p0_les_0_diu8_i_j_km1_pipe)
    call ocl_pipe_real(p0_les_0_diu2_i_j_k_reader_p0_les_0_smart_cache_diu2_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_diu3_i_j_k_reader_p0_les_0_smart_cache_diu3_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_diu4_i_j_k_reader_p0_les_0_smart_cache_diu4_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_diu6_i_j_k_reader_p0_les_0_smart_cache_diu6_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_diu7_i_j_k_reader_p0_les_0_smart_cache_diu7_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_diu8_i_j_k_reader_p0_les_0_smart_cache_diu8_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_delx1_k_reader_p0_les_0_delx1_k_pipe)
    call ocl_pipe_real(p0_les_0_diu1_i_j_k_reader_p0_les_0_diu1_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_diu5_i_j_k_reader_p0_les_0_diu5_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_diu9_i_j_k_reader_p0_les_0_diu9_i_j_k_pipe)
    call ocl_pipe_real(p0_les_0_sm_i_j_k_reader_p0_les_0_sm_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_w_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_v_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_u_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_f_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_h_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_sm_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_p0_les_2_smart_cache_g_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_f_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_w_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_v_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_u_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_h_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_g_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu1_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu1_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu2_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu2_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu3_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu3_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu4_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu4_ip1_jm1_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_km1_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_dx1_ip1_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_dx1_i_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_dy1_jp1_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_dy1_j_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_dzn_kp1_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_dzn_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_dzn_km1_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_i_jm1_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_ip1_jm1_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_ip1_j_km1_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_ip1_j_kp1_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_ip1_jp1_k_pipe)
    call ocl_pipe_real(p0_les_1_smart_cache_p0_les_1_sm_i_j_km1_pipe)
    call ocl_pipe_real(p0_les_1_diu1_i_j_k_reader_p0_les_1_smart_cache_diu1_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_diu2_i_j_k_reader_p0_les_1_smart_cache_diu2_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_diu3_i_j_k_reader_p0_les_1_smart_cache_diu3_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_diu4_i_j_k_reader_p0_les_1_smart_cache_diu4_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_diu7_i_j_k_reader_p0_les_1_smart_cache_diu7_i_j_k_pipe)
    call ocl_pipe_real(p0_les_1_dx1_i_reader_p0_les_1_smart_cache_dx1_i_pipe)
    call ocl_pipe_real(p0_les_1_dy1_j_reader_p0_les_1_smart_cache_dy1_j_pipe)
    call ocl_pipe_real(p0_les_1_dzn_k_reader_p0_les_1_smart_cache_dzn_k_pipe)
    call ocl_pipe_real(p0_les_1_dxs_i_reader_p0_les_1_dxs_i_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_w_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_v_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_u_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_g_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_f_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_sm_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_p0_les_3_smart_cache_h_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_g_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_w_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_v_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_u_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_f_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_h_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu2_im1_jp1_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu2_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu4_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu4_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu5_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu5_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu6_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu6_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_km1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_dx1_ip1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_dx1_i_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_dx1_im1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_dy1_jp1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_dy1_j_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_dzn_kp1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_dzn_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_dzn_km1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_im1_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_im1_jp1_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_ip1_j_km1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_ip1_j_kp1_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_ip1_jp1_k_pipe)
    call ocl_pipe_real(p0_les_2_smart_cache_p0_les_2_sm_i_j_km1_pipe)
    call ocl_pipe_real(p0_les_2_diu2_i_j_k_reader_p0_les_2_smart_cache_diu2_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_diu4_i_j_k_reader_p0_les_2_smart_cache_diu4_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_diu5_i_j_k_reader_p0_les_2_smart_cache_diu5_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_diu6_i_j_k_reader_p0_les_2_smart_cache_diu6_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_diu8_i_j_k_reader_p0_les_2_smart_cache_diu8_i_j_k_pipe)
    call ocl_pipe_real(p0_les_2_dx1_i_reader_p0_les_2_smart_cache_dx1_i_pipe)
    call ocl_pipe_real(p0_les_2_dy1_j_reader_p0_les_2_smart_cache_dy1_j_pipe)
    call ocl_pipe_real(p0_les_2_dzn_k_reader_p0_les_2_smart_cache_dzn_k_pipe)
    call ocl_pipe_real(p0_les_2_dys_j_reader_p0_les_2_dys_j_pipe)
    call ocl_pipe_real(p0_les_3_p0_adam_f_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_p0_adam_g_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_p0_adam_h_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_h_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_w_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_v_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_u_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_g_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_f_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu3_im1_j_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu3_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu6_i_jm1_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu6_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu7_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu7_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu8_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu8_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu9_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_diu9_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_dx1_ip1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_dx1_i_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_dx1_im1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_dy1_jp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_dy1_j_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_dy1_jm1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_dzn_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_dzn_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_im1_j_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_im1_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_i_jm1_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_i_j_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_i_jp1_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_i_jp1_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_ip1_j_kp1_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_ip1_j_k_pipe)
    call ocl_pipe_real(p0_les_3_smart_cache_p0_les_3_sm_i_jm1_k_pipe)
    call ocl_pipe_real(p0_les_3_diu3_i_j_k_reader_p0_les_3_smart_cache_diu3_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_diu6_i_j_k_reader_p0_les_3_smart_cache_diu6_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_diu7_i_j_k_reader_p0_les_3_smart_cache_diu7_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_diu8_i_j_k_reader_p0_les_3_smart_cache_diu8_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_diu9_i_j_k_reader_p0_les_3_smart_cache_diu9_i_j_k_pipe)
    call ocl_pipe_real(p0_les_3_dx1_i_reader_p0_les_3_smart_cache_dx1_i_pipe)
    call ocl_pipe_real(p0_les_3_dy1_j_reader_p0_les_3_smart_cache_dy1_j_pipe)
    call ocl_pipe_real(p0_les_3_dzn_k_reader_p0_les_3_smart_cache_dzn_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_fold_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_gold_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_hold_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_f_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_g_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_h_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_u_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_v_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_p0_press_0_smart_cache_w_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_fold_i_j_k_reader_p0_adam_fold_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_gold_i_j_k_reader_p0_adam_gold_i_j_k_pipe)
    call ocl_pipe_real(p0_adam_hold_i_j_k_reader_p0_adam_hold_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_p0_press_1_rhs_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_fold_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_gold_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_hold_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_f_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_f_im1_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_g_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_g_i_jm1_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_h_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_h_i_j_km1_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_u_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_u_im1_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_v_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_v_i_jm1_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_w_i_j_k_pipe)
    call ocl_pipe_real(p0_press_0_smart_cache_p0_press_0_w_i_j_km1_pipe)
    call ocl_pipe_real(p0_press_0_dx1_i_reader_p0_press_0_dx1_i_pipe)
    call ocl_pipe_real(p0_press_0_dy1_j_reader_p0_press_0_dy1_j_pipe)
    call ocl_pipe_real(p0_press_0_dzn_k_reader_p0_press_0_dzn_k_pipe)
    call ocl_pipe_real(p0_press_0_rhs_i_j_k_reader_p0_press_0_rhs_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_hold_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_h_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_gold_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_g_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_fold_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_f_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_w_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_v_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_u_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_rhs_i_j_k_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_area_pipe)
    call ocl_pipe_real(p0_press_1_p0_press_2_rhsav_pipe)
    call ocl_pipe_real(p0_press_1_dx1_i_reader_p0_press_1_dx1_i_pipe)
    call ocl_pipe_real(p0_press_1_dy1_j_reader_p0_press_1_dy1_j_pipe)
    call ocl_pipe_real(p0_press_1_dzn_k_reader_p0_press_1_dzn_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_rhs_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_u_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_v_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_w_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_f_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_fx_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_fy_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_fz_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_g_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_h_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_usum_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_vsum_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_wsum_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_fold_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_gold_i_j_k_pipe)
    call ocl_pipe_real(p0_press_2_p0_press_2_output_writer_hold_i_j_k_pipe)
    call ocl_pipe_real(p1_press_p1_press_output_writer_p0_i_j_k_pipe)
    call ocl_pipe_real(p1_press_p1_press_output_writer_p1_i_j_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_dxs_i_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_dxs_im1_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_dys_j_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_dys_jm1_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_dzs_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_dzs_km1_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p0_im1_j_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p0_i_jm1_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p0_i_j_kp1_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p0_i_j_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p0_i_jp1_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p0_ip1_j_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p0_i_j_km1_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p1_im1_j_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p1_i_jm1_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p1_i_j_kp1_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p1_i_j_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p1_i_jp1_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p1_ip1_j_k_pipe)
    call ocl_pipe_real(p1_press_smart_cache_p1_press_p1_i_j_km1_pipe)
    call ocl_pipe_real(p1_press_dxs_i_reader_p1_press_smart_cache_dxs_i_pipe)
    call ocl_pipe_real(p1_press_dys_j_reader_p1_press_smart_cache_dys_j_pipe)
    call ocl_pipe_real(p1_press_dzs_k_reader_p1_press_smart_cache_dzs_k_pipe)
    call ocl_pipe_real(p1_press_p0_i_j_k_reader_p1_press_smart_cache_p0_i_j_k_pipe)
    call ocl_pipe_real(p1_press_p1_i_j_k_reader_p1_press_smart_cache_p1_i_j_k_pipe)
    call ocl_pipe_real(p1_press_rhs_i_j_k_reader_p1_press_rhs_i_j_k_pipe)
    call ocl_pipe_real(p2_press_0_p2_press_1_pco_pipe)
    call ocl_pipe_real(p2_press_0_p2_press_1_pav_pipe)
    call ocl_pipe_real(p2_press_0_dx1_i_reader_p2_press_0_dx1_i_pipe)
    call ocl_pipe_real(p2_press_0_dy1_j_reader_p2_press_0_dy1_j_pipe)
    call ocl_pipe_real(p2_press_0_dzn_k_reader_p2_press_0_dzn_k_pipe)
    call ocl_pipe_real(p2_press_0_p0_i_j_k_reader_p2_press_0_p0_i_j_k_pipe)
    call ocl_pipe_real(p2_press_1_p2_press_2_smart_cache_p0_synthIdx2_j_k_pipe)
    call ocl_pipe_real(p2_press_1_p0_i_j_k_reader_p2_press_1_p0_i_j_k_pipe)
    call ocl_pipe_real(p2_press_2_p2_press_3_smart_cache_p0_i_synthIdx1_k_pipe)
    call ocl_pipe_real(p2_press_2_smart_cache_p2_press_2_p0_synthIdx2p1_j_k_pipe)
    call ocl_pipe_real(p2_press_2_smart_cache_p2_press_2_p0_synthIdx2m1_j_k_pipe)
    call ocl_pipe_real(p2_press_3_p2_press_4_smart_cache_p0_i_j_synthIdx0_pipe)
    call ocl_pipe_real(p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1p300_k_pipe)
    call ocl_pipe_real(p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1m300_k_pipe)
    call ocl_pipe_real(p2_press_4_p2_press_4_output_writer_p0_i_j_synthIdx0_pipe)
    call ocl_pipe_real(p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0p1_pipe)
    call ocl_pipe_real(p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0m1_pipe)
end subroutine pipe_initialisation

subroutine p0_velnw_0_p0_i_j_k_reader(p0)
      real, dimension(0:302,0:302,0:81) :: p0
      real :: p0_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                p0_i_j_k = p0(a,b,c)
                call write_pipe(p0_velnw_0_p0_i_j_k_reader_p0_velnw_0_smart_cache_p0_i_j_k_pipe, p0_i_j_k)
            end do
        end do
    end do
end subroutine p0_velnw_0_p0_i_j_k_reader

subroutine p0_velnw_0_dxs_i_reader(dxs)
      real, dimension(0:300) :: dxs
      real :: dxs_i
      integer :: a
    do a = 0, 300, 1
        dxs_i = dxs(a)
        call write_pipe(p0_velnw_0_dxs_i_reader_p0_velnw_0_dxs_i_pipe, dxs_i)
    end do
end subroutine p0_velnw_0_dxs_i_reader

subroutine p0_velnw_0_f_i_j_k_reader(f)
      real, dimension(0:300,0:300,0:80) :: f
      real :: f_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                f_i_j_k = f(a,b,c)
                call write_pipe(p0_velnw_0_f_i_j_k_reader_p0_velnw_0_f_i_j_k_pipe, f_i_j_k)
            end do
        end do
    end do
end subroutine p0_velnw_0_f_i_j_k_reader

subroutine p0_velnw_0_u_i_j_k_reader(u)
      real, dimension(0:301,-1:301,0:81) :: u
      real :: u_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = -1, 301, 1
            do c = 0, 301, 1
                u_i_j_k = u(a,b,c)
                call write_pipe(p0_velnw_0_u_i_j_k_reader_p0_velnw_0_u_i_j_k_pipe, u_i_j_k)
            end do
        end do
    end do
end subroutine p0_velnw_0_u_i_j_k_reader

subroutine p0_velnw_0_smart_cache
      real :: p0_read_in
      real, dimension(0:1) :: p0_buffer
      real :: p0_ip1_j_k
      real :: p0_i_j_k
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7645296 
      integer, parameter :: smartCacheSize = 2 
      integer, parameter :: maxPositiveOffset = 1 
      integer, parameter :: maxNegativeOffset = 0 
      integer, parameter :: driverLoopSize = 7645296 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            p0_buffer(i) = p0_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p0_velnw_0_p0_i_j_k_reader_p0_velnw_0_smart_cache_p0_i_j_k_pipe, p0_read_in)
            p0_buffer(1) = p0_read_in
        end if
        if (compIndex>=0) then
            p0_i_j_k = p0_buffer(0)
            call write_pipe(p0_velnw_0_smart_cache_p0_velnw_0_p0_i_j_k_pipe, p0_i_j_k)
            p0_ip1_j_k = p0_buffer(1)
            call write_pipe(p0_velnw_0_smart_cache_p0_velnw_0_p0_ip1_j_k_pipe, p0_ip1_j_k)
        end if
    end do
end subroutine p0_velnw_0_smart_cache

subroutine p0_velnw_0(dt,ro)
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4), intent(In) :: dt
      real(4) :: dxs_i
      real(4) :: f_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_ip1_j_k
      real(4) :: p0_i_j_k
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4) :: u_i_j_k
    do count = 0, nloop, 1
        call read_pipe(p0_velnw_0_dxs_i_reader_p0_velnw_0_dxs_i_pipe, dxs_i)
        call read_pipe(p0_velnw_0_f_i_j_k_reader_p0_velnw_0_f_i_j_k_pipe, f_i_j_k)
        call read_pipe(p0_velnw_0_smart_cache_p0_velnw_0_p0_i_j_k_pipe, p0_i_j_k)
        call read_pipe(p0_velnw_0_smart_cache_p0_velnw_0_p0_ip1_j_k_pipe, p0_ip1_j_k)
        call read_pipe(p0_velnw_0_u_i_j_k_reader_p0_velnw_0_u_i_j_k_pipe, u_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            pz = (-p0_i_j_k+p0_ip1_j_k)/ro/dxs_i
            u_i_j_k = u_i_j_k+dt*(f_i_j_k-pz)
        end if
        call write_pipe(p0_velnw_0_p0_velnw_1_smart_cache_u_i_j_k_pipe, u_i_j_k)
    end do
end subroutine p0_velnw_0

subroutine p0_velnw_1_p0_i_j_k_reader(p0)
      real, dimension(0:302,0:302,0:81) :: p0
      real :: p0_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                p0_i_j_k = p0(a,b,c)
                call write_pipe(p0_velnw_1_p0_i_j_k_reader_p0_velnw_1_smart_cache_p0_i_j_k_pipe, p0_i_j_k)
            end do
        end do
    end do
end subroutine p0_velnw_1_p0_i_j_k_reader

subroutine p0_velnw_1_dys_j_reader(dys)
      real, dimension(0:300) :: dys
      real :: dys_j
      integer :: a
    do a = 0, 300, 1
        dys_j = dys(a)
        call write_pipe(p0_velnw_1_dys_j_reader_p0_velnw_1_dys_j_pipe, dys_j)
    end do
end subroutine p0_velnw_1_dys_j_reader

subroutine p0_velnw_1_g_i_j_k_reader(g)
      real, dimension(0:300,0:300,0:80) :: g
      real :: g_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                g_i_j_k = g(a,b,c)
                call write_pipe(p0_velnw_1_g_i_j_k_reader_p0_velnw_1_g_i_j_k_pipe, g_i_j_k)
            end do
        end do
    end do
end subroutine p0_velnw_1_g_i_j_k_reader

subroutine p0_velnw_1_v_i_j_k_reader(v)
      real, dimension(0:301,-1:301,0:81) :: v
      real :: v_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = -1, 301, 1
            do c = 0, 301, 1
                v_i_j_k = v(a,b,c)
                call write_pipe(p0_velnw_1_v_i_j_k_reader_p0_velnw_1_v_i_j_k_pipe, v_i_j_k)
            end do
        end do
    end do
end subroutine p0_velnw_1_v_i_j_k_reader

subroutine p0_velnw_1_smart_cache
      real :: u_read_in
      real :: p0_read_in
      real, dimension(0:303) :: u_buffer
      real, dimension(0:303) :: p0_buffer
      real :: u_i_j_k
      real :: p0_i_jp1_k
      real :: p0_i_j_k
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7645598 
      integer, parameter :: smartCacheSize = 304 
      integer, parameter :: maxPositiveOffset = 303 
      integer, parameter :: maxNegativeOffset = 0 
      integer, parameter :: driverLoopSize = 7645296 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            u_buffer(i) = u_buffer(i+1)
            p0_buffer(i) = p0_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p0_velnw_1_p0_i_j_k_reader_p0_velnw_1_smart_cache_p0_i_j_k_pipe, p0_read_in)
            p0_buffer(303) = p0_read_in
            call read_pipe(p0_velnw_0_p0_velnw_1_smart_cache_u_i_j_k_pipe, u_read_in)
            u_buffer(303) = u_read_in
        end if
        if (compIndex>=0) then
            p0_i_j_k = p0_buffer(0)
            call write_pipe(p0_velnw_1_smart_cache_p0_velnw_1_p0_i_j_k_pipe, p0_i_j_k)
            p0_i_jp1_k = p0_buffer(303)
            call write_pipe(p0_velnw_1_smart_cache_p0_velnw_1_p0_i_jp1_k_pipe, p0_i_jp1_k)
            u_i_j_k = u_buffer(0)
            call write_pipe(p0_velnw_1_smart_cache_p0_velnw_1_u_i_j_k_pipe, u_i_j_k)
        end if
    end do
end subroutine p0_velnw_1_smart_cache

subroutine p0_velnw_1(dt,ro)
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4), intent(In) :: dt
      real(4) :: dys_j
      real(4) :: g_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_i_jp1_k
      real(4) :: p0_i_j_k
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4) :: v_i_j_k
    do count = 0, nloop, 1
        call read_pipe(p0_velnw_1_dys_j_reader_p0_velnw_1_dys_j_pipe, dys_j)
        call read_pipe(p0_velnw_1_g_i_j_k_reader_p0_velnw_1_g_i_j_k_pipe, g_i_j_k)
        call read_pipe(p0_velnw_1_smart_cache_p0_velnw_1_p0_i_j_k_pipe, p0_i_j_k)
        call read_pipe(p0_velnw_1_smart_cache_p0_velnw_1_p0_i_jp1_k_pipe, p0_i_jp1_k)
        call read_pipe(p0_velnw_1_smart_cache_p0_velnw_1_u_i_j_k_pipe, u_i_j_k)
        call read_pipe(p0_velnw_1_v_i_j_k_reader_p0_velnw_1_v_i_j_k_pipe, v_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            pz = (-p0_i_j_k+p0_i_jp1_k)/ro/dys_j
            v_i_j_k = v_i_j_k+dt*(g_i_j_k-pz)
        end if
        call write_pipe(p0_velnw_1_p0_velnw_2_smart_cache_u_i_j_k_pipe, u_i_j_k)
        call write_pipe(p0_velnw_1_p0_velnw_2_smart_cache_v_i_j_k_pipe, v_i_j_k)
    end do
end subroutine p0_velnw_1

subroutine p0_velnw_2_p0_i_j_k_reader(p0)
      real, dimension(0:302,0:302,0:81) :: p0
      real :: p0_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                p0_i_j_k = p0(a,b,c)
                call write_pipe(p0_velnw_2_p0_i_j_k_reader_p0_velnw_2_smart_cache_p0_i_j_k_pipe, p0_i_j_k)
            end do
        end do
    end do
end subroutine p0_velnw_2_p0_i_j_k_reader

subroutine p0_velnw_2_dzs_k_reader(dzs)
      real, dimension(-1:82) :: dzs
      real :: dzs_k
      integer :: a
    do a = -1, 82, 1
        dzs_k = dzs(a)
        call write_pipe(p0_velnw_2_dzs_k_reader_p0_velnw_2_dzs_k_pipe, dzs_k)
    end do
end subroutine p0_velnw_2_dzs_k_reader

subroutine p0_velnw_2_h_i_j_k_reader(h)
      real, dimension(0:300,0:300,0:80) :: h
      real :: h_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                h_i_j_k = h(a,b,c)
                call write_pipe(p0_velnw_2_h_i_j_k_reader_p0_velnw_2_h_i_j_k_pipe, h_i_j_k)
            end do
        end do
    end do
end subroutine p0_velnw_2_h_i_j_k_reader

subroutine p0_velnw_2_w_i_j_k_reader(w)
      real, dimension(0:301,-1:301,-1:81) :: w
      real :: w_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = -1, 81, 1
        do b = -1, 301, 1
            do c = 0, 301, 1
                w_i_j_k = w(a,b,c)
                call write_pipe(p0_velnw_2_w_i_j_k_reader_p0_velnw_2_w_i_j_k_pipe, w_i_j_k)
            end do
        end do
    end do
end subroutine p0_velnw_2_w_i_j_k_reader

subroutine p0_velnw_2_smart_cache
      real :: v_read_in
      real :: u_read_in
      real :: p0_read_in
      real, dimension(0:91809) :: v_buffer
      real, dimension(0:91809) :: u_buffer
      real, dimension(0:91809) :: p0_buffer
      real :: v_i_j_k
      real :: u_i_j_k
      real :: p0_i_j_kp1
      real :: p0_i_j_k
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7737104 
      integer, parameter :: smartCacheSize = 91810 
      integer, parameter :: maxPositiveOffset = 91809 
      integer, parameter :: maxNegativeOffset = 0 
      integer, parameter :: driverLoopSize = 7645296 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            v_buffer(i) = v_buffer(i+1)
            u_buffer(i) = u_buffer(i+1)
            p0_buffer(i) = p0_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p0_velnw_2_p0_i_j_k_reader_p0_velnw_2_smart_cache_p0_i_j_k_pipe, p0_read_in)
            p0_buffer(91809) = p0_read_in
            call read_pipe(p0_velnw_1_p0_velnw_2_smart_cache_u_i_j_k_pipe, u_read_in)
            u_buffer(91809) = u_read_in
            call read_pipe(p0_velnw_1_p0_velnw_2_smart_cache_v_i_j_k_pipe, v_read_in)
            v_buffer(91809) = v_read_in
        end if
        if (compIndex>=0) then
            p0_i_j_k = p0_buffer(0)
            call write_pipe(p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_k_pipe, p0_i_j_k)
            p0_i_j_kp1 = p0_buffer(91809)
            call write_pipe(p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_kp1_pipe, p0_i_j_kp1)
            u_i_j_k = u_buffer(0)
            call write_pipe(p0_velnw_2_smart_cache_p0_velnw_2_u_i_j_k_pipe, u_i_j_k)
            v_i_j_k = v_buffer(0)
            call write_pipe(p0_velnw_2_smart_cache_p0_velnw_2_v_i_j_k_pipe, v_i_j_k)
        end if
    end do
end subroutine p0_velnw_2_smart_cache

subroutine p0_velnw_2(dt,ro)
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4), intent(In) :: dt
      real(4) :: dzs_k
      real(4) :: h_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_i_j_kp1
      real(4) :: p0_i_j_k
      real(4) :: pz
      real(4), intent(In) :: ro
      real(4) :: w_i_j_k
    do count = 0, nloop, 1
        call read_pipe(p0_velnw_2_dzs_k_reader_p0_velnw_2_dzs_k_pipe, dzs_k)
        call read_pipe(p0_velnw_2_h_i_j_k_reader_p0_velnw_2_h_i_j_k_pipe, h_i_j_k)
        call read_pipe(p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_k_pipe, p0_i_j_k)
        call read_pipe(p0_velnw_2_smart_cache_p0_velnw_2_p0_i_j_kp1_pipe, p0_i_j_kp1)
        call read_pipe(p0_velnw_2_smart_cache_p0_velnw_2_u_i_j_k_pipe, u_i_j_k)
        call read_pipe(p0_velnw_2_smart_cache_p0_velnw_2_v_i_j_k_pipe, v_i_j_k)
        call read_pipe(p0_velnw_2_w_i_j_k_reader_p0_velnw_2_w_i_j_k_pipe, w_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79)) then
            pz = (-p0_i_j_k+p0_i_j_kp1)/ro/dzs_k
            w_i_j_k = w_i_j_k+dt*(h_i_j_k-pz)
        end if
        call write_pipe(p0_velnw_2_p0_feedbf_u_i_j_k_pipe, u_i_j_k)
        call write_pipe(p0_velnw_2_p0_feedbf_v_i_j_k_pipe, v_i_j_k)
        call write_pipe(p0_velnw_2_p0_feedbf_w_i_j_k_pipe, w_i_j_k)
    end do
end subroutine p0_velnw_2

subroutine p0_feedbf_bmask1_i_j_k_reader(bmask1)
      real, dimension(-1:301,0:301,0:81) :: bmask1
      real :: bmask1_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 301, 1
            do c = -1, 301, 1
                bmask1_i_j_k = bmask1(a,b,c)
                call write_pipe(p0_feedbf_bmask1_i_j_k_reader_p0_feedbf_bmask1_i_j_k_pipe, bmask1_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_bmask1_i_j_k_reader

subroutine p0_feedbf_cmask1_i_j_k_reader(cmask1)
      real, dimension(0:301,-1:301,0:81) :: cmask1
      real :: cmask1_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = -1, 301, 1
            do c = 0, 301, 1
                cmask1_i_j_k = cmask1(a,b,c)
                call write_pipe(p0_feedbf_cmask1_i_j_k_reader_p0_feedbf_cmask1_i_j_k_pipe, cmask1_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_cmask1_i_j_k_reader

subroutine p0_feedbf_dmask1_i_j_k_reader(dmask1)
      real, dimension(0:301,0:301,0:81) :: dmask1
      real :: dmask1_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 301, 1
            do c = 0, 301, 1
                dmask1_i_j_k = dmask1(a,b,c)
                call write_pipe(p0_feedbf_dmask1_i_j_k_reader_p0_feedbf_dmask1_i_j_k_pipe, dmask1_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_dmask1_i_j_k_reader

subroutine p0_feedbf_f_i_j_k_reader(f)
      real, dimension(0:300,0:300,0:80) :: f
      real :: f_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                f_i_j_k = f(a,b,c)
                call write_pipe(p0_feedbf_f_i_j_k_reader_p0_feedbf_f_i_j_k_pipe, f_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_f_i_j_k_reader

subroutine p0_feedbf_fx_i_j_k_reader(fx)
      real, dimension(0:300,0:300,0:80) :: fx
      real :: fx_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                fx_i_j_k = fx(a,b,c)
                call write_pipe(p0_feedbf_fx_i_j_k_reader_p0_feedbf_fx_i_j_k_pipe, fx_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_fx_i_j_k_reader

subroutine p0_feedbf_fy_i_j_k_reader(fy)
      real, dimension(0:300,0:300,0:80) :: fy
      real :: fy_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                fy_i_j_k = fy(a,b,c)
                call write_pipe(p0_feedbf_fy_i_j_k_reader_p0_feedbf_fy_i_j_k_pipe, fy_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_fy_i_j_k_reader

subroutine p0_feedbf_fz_i_j_k_reader(fz)
      real, dimension(0:300,0:300,0:80) :: fz
      real :: fz_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                fz_i_j_k = fz(a,b,c)
                call write_pipe(p0_feedbf_fz_i_j_k_reader_p0_feedbf_fz_i_j_k_pipe, fz_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_fz_i_j_k_reader

subroutine p0_feedbf_g_i_j_k_reader(g)
      real, dimension(0:300,0:300,0:80) :: g
      real :: g_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                g_i_j_k = g(a,b,c)
                call write_pipe(p0_feedbf_g_i_j_k_reader_p0_feedbf_g_i_j_k_pipe, g_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_g_i_j_k_reader

subroutine p0_feedbf_h_i_j_k_reader(h)
      real, dimension(0:300,0:300,0:80) :: h
      real :: h_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                h_i_j_k = h(a,b,c)
                call write_pipe(p0_feedbf_h_i_j_k_reader_p0_feedbf_h_i_j_k_pipe, h_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_h_i_j_k_reader

subroutine p0_feedbf_usum_i_j_k_reader(usum)
      real, dimension(0:300,0:300,0:80) :: usum
      real :: usum_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                usum_i_j_k = usum(a,b,c)
                call write_pipe(p0_feedbf_usum_i_j_k_reader_p0_feedbf_usum_i_j_k_pipe, usum_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_usum_i_j_k_reader

subroutine p0_feedbf_vsum_i_j_k_reader(vsum)
      real, dimension(0:300,0:300,0:80) :: vsum
      real :: vsum_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                vsum_i_j_k = vsum(a,b,c)
                call write_pipe(p0_feedbf_vsum_i_j_k_reader_p0_feedbf_vsum_i_j_k_pipe, vsum_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_vsum_i_j_k_reader

subroutine p0_feedbf_wsum_i_j_k_reader(wsum)
      real, dimension(0:300,0:300,0:80) :: wsum
      real :: wsum_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 80, 1
        do b = 0, 300, 1
            do c = 0, 300, 1
                wsum_i_j_k = wsum(a,b,c)
                call write_pipe(p0_feedbf_wsum_i_j_k_reader_p0_feedbf_wsum_i_j_k_pipe, wsum_i_j_k)
            end do
        end do
    end do
end subroutine p0_feedbf_wsum_i_j_k_reader

subroutine p0_feedbf(alpha,beta,dt)
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4) :: bmask1_i_j_k
      real(4) :: cmask1_i_j_k
      real(4) :: dmask1_i_j_k
      real(4), intent(In) :: dt
      real(4) :: f_i_j_k
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fx_i_j_k
      real(4) :: fy_i_j_k
      real(4) :: fz_i_j_k
      real(4) :: g_i_j_k
      real(4) :: h_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: u_i_j_k
      real(4) :: usum_i_j_k
      real(4) :: v_i_j_k
      real(4) :: vsum_i_j_k
      real(4) :: w_i_j_k
      real(4) :: wsum_i_j_k
    do count = 0, nloop, 1
        call read_pipe(p0_feedbf_bmask1_i_j_k_reader_p0_feedbf_bmask1_i_j_k_pipe, bmask1_i_j_k)
        call read_pipe(p0_feedbf_cmask1_i_j_k_reader_p0_feedbf_cmask1_i_j_k_pipe, cmask1_i_j_k)
        call read_pipe(p0_feedbf_dmask1_i_j_k_reader_p0_feedbf_dmask1_i_j_k_pipe, dmask1_i_j_k)
        call read_pipe(p0_feedbf_f_i_j_k_reader_p0_feedbf_f_i_j_k_pipe, f_i_j_k)
        call read_pipe(p0_feedbf_fx_i_j_k_reader_p0_feedbf_fx_i_j_k_pipe, fx_i_j_k)
        call read_pipe(p0_feedbf_fy_i_j_k_reader_p0_feedbf_fy_i_j_k_pipe, fy_i_j_k)
        call read_pipe(p0_feedbf_fz_i_j_k_reader_p0_feedbf_fz_i_j_k_pipe, fz_i_j_k)
        call read_pipe(p0_feedbf_g_i_j_k_reader_p0_feedbf_g_i_j_k_pipe, g_i_j_k)
        call read_pipe(p0_feedbf_h_i_j_k_reader_p0_feedbf_h_i_j_k_pipe, h_i_j_k)
        call read_pipe(p0_velnw_2_p0_feedbf_u_i_j_k_pipe, u_i_j_k)
        call read_pipe(p0_feedbf_usum_i_j_k_reader_p0_feedbf_usum_i_j_k_pipe, usum_i_j_k)
        call read_pipe(p0_velnw_2_p0_feedbf_v_i_j_k_pipe, v_i_j_k)
        call read_pipe(p0_feedbf_vsum_i_j_k_reader_p0_feedbf_vsum_i_j_k_pipe, vsum_i_j_k)
        call read_pipe(p0_velnw_2_p0_feedbf_w_i_j_k_pipe, w_i_j_k)
        call read_pipe(p0_feedbf_wsum_i_j_k_reader_p0_feedbf_wsum_i_j_k_pipe, wsum_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            usum_i_j_k = (usum_i_j_k+u_i_j_k)*bmask1_i_j_k
            vsum_i_j_k = (vsum_i_j_k+v_i_j_k)*cmask1_i_j_k
            wsum_i_j_k = (wsum_i_j_k+w_i_j_k)*dmask1_i_j_k
            f1x = alpha*usum_i_j_k*dt
            f1y = alpha*vsum_i_j_k*dt
            f1z = alpha*wsum_i_j_k*dt
            f2x = beta*u_i_j_k*bmask1_i_j_k
            f2y = beta*v_i_j_k*cmask1_i_j_k
            f2z = beta*w_i_j_k*dmask1_i_j_k
            fx_i_j_k = f1x+f2x
            fy_i_j_k = f1y+f2y
            fz_i_j_k = f1z+f2z
            f_i_j_k = f_i_j_k+fx_i_j_k
            g_i_j_k = g_i_j_k+fy_i_j_k
            h_i_j_k = h_i_j_k+fz_i_j_k
        end if
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_f_i_j_k_pipe, f_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_fx_i_j_k_pipe, fx_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_fy_i_j_k_pipe, fy_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_fz_i_j_k_pipe, fz_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_g_i_j_k_pipe, g_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_h_i_j_k_pipe, h_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_u_i_j_k_pipe, u_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_usum_i_j_k_pipe, usum_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_v_i_j_k_pipe, v_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_vsum_i_j_k_pipe, vsum_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_w_i_j_k_pipe, w_i_j_k)
        call write_pipe(p0_feedbf_p0_les_0_smart_cache_wsum_i_j_k_pipe, wsum_i_j_k)
    end do
end subroutine p0_feedbf

subroutine p0_les_0_diu2_i_j_k_reader(diu2)
      real, dimension(0:302,0:302,0:82) :: diu2
      real :: diu2_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu2_i_j_k = diu2(a,b,c)
                call write_pipe(p0_les_0_diu2_i_j_k_reader_p0_les_0_smart_cache_diu2_i_j_k_pipe, diu2_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_diu2_i_j_k_reader

subroutine p0_les_0_diu3_i_j_k_reader(diu3)
      real, dimension(0:302,0:302,0:82) :: diu3
      real :: diu3_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu3_i_j_k = diu3(a,b,c)
                call write_pipe(p0_les_0_diu3_i_j_k_reader_p0_les_0_smart_cache_diu3_i_j_k_pipe, diu3_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_diu3_i_j_k_reader

subroutine p0_les_0_diu4_i_j_k_reader(diu4)
      real, dimension(0:302,0:302,0:82) :: diu4
      real :: diu4_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu4_i_j_k = diu4(a,b,c)
                call write_pipe(p0_les_0_diu4_i_j_k_reader_p0_les_0_smart_cache_diu4_i_j_k_pipe, diu4_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_diu4_i_j_k_reader

subroutine p0_les_0_diu6_i_j_k_reader(diu6)
      real, dimension(0:302,0:302,0:82) :: diu6
      real :: diu6_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu6_i_j_k = diu6(a,b,c)
                call write_pipe(p0_les_0_diu6_i_j_k_reader_p0_les_0_smart_cache_diu6_i_j_k_pipe, diu6_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_diu6_i_j_k_reader

subroutine p0_les_0_diu7_i_j_k_reader(diu7)
      real, dimension(0:302,0:302,0:82) :: diu7
      real :: diu7_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu7_i_j_k = diu7(a,b,c)
                call write_pipe(p0_les_0_diu7_i_j_k_reader_p0_les_0_smart_cache_diu7_i_j_k_pipe, diu7_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_diu7_i_j_k_reader

subroutine p0_les_0_diu8_i_j_k_reader(diu8)
      real, dimension(0:302,0:302,0:82) :: diu8
      real :: diu8_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu8_i_j_k = diu8(a,b,c)
                call write_pipe(p0_les_0_diu8_i_j_k_reader_p0_les_0_smart_cache_diu8_i_j_k_pipe, diu8_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_diu8_i_j_k_reader

subroutine p0_les_0_delx1_k_reader(delx1)
      real, dimension(1:80) :: delx1
      real :: delx1_k
      integer :: a
    do a = 1, 80, 1
        delx1_k = delx1(a)
        call write_pipe(p0_les_0_delx1_k_reader_p0_les_0_delx1_k_pipe, delx1_k)
    end do
end subroutine p0_les_0_delx1_k_reader

subroutine p0_les_0_diu1_i_j_k_reader(diu1)
      real, dimension(-1:302,0:302,0:82) :: diu1
      real :: diu1_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = -1, 302, 1
                diu1_i_j_k = diu1(a,b,c)
                call write_pipe(p0_les_0_diu1_i_j_k_reader_p0_les_0_diu1_i_j_k_pipe, diu1_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_diu1_i_j_k_reader

subroutine p0_les_0_diu5_i_j_k_reader(diu5)
      real, dimension(-1:302,0:302,0:82) :: diu5
      real :: diu5_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = -1, 302, 1
                diu5_i_j_k = diu5(a,b,c)
                call write_pipe(p0_les_0_diu5_i_j_k_reader_p0_les_0_diu5_i_j_k_pipe, diu5_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_diu5_i_j_k_reader

subroutine p0_les_0_diu9_i_j_k_reader(diu9)
      real, dimension(0:302,0:302,0:82) :: diu9
      real :: diu9_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu9_i_j_k = diu9(a,b,c)
                call write_pipe(p0_les_0_diu9_i_j_k_reader_p0_les_0_diu9_i_j_k_pipe, diu9_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_diu9_i_j_k_reader

subroutine p0_les_0_sm_i_j_k_reader(sm)
      real, dimension(-1:301,-1:301,0:81) :: sm
      real :: sm_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = -1, 301, 1
            do c = -1, 301, 1
                sm_i_j_k = sm(a,b,c)
                call write_pipe(p0_les_0_sm_i_j_k_reader_p0_les_0_sm_i_j_k_pipe, sm_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_0_sm_i_j_k_reader

subroutine p0_les_0_smart_cache
      real :: fx_read_in
      real :: fy_read_in
      real :: fz_read_in
      real :: usum_read_in
      real :: vsum_read_in
      real :: wsum_read_in
      real :: w_read_in
      real :: v_read_in
      real :: u_read_in
      real :: h_read_in
      real :: g_read_in
      real :: f_read_in
      real :: diu2_read_in
      real :: diu3_read_in
      real :: diu4_read_in
      real :: diu6_read_in
      real :: diu7_read_in
      real :: diu8_read_in
      real, dimension(0:92112) :: fx_buffer
      real, dimension(0:92112) :: fy_buffer
      real, dimension(0:92112) :: fz_buffer
      real, dimension(0:92112) :: usum_buffer
      real, dimension(0:92112) :: vsum_buffer
      real, dimension(0:92112) :: wsum_buffer
      real, dimension(0:92112) :: w_buffer
      real, dimension(0:92112) :: v_buffer
      real, dimension(0:92112) :: u_buffer
      real, dimension(0:92112) :: h_buffer
      real, dimension(0:92112) :: g_buffer
      real, dimension(0:92112) :: f_buffer
      real, dimension(0:92112) :: diu2_buffer
      real, dimension(0:92112) :: diu3_buffer
      real, dimension(0:92112) :: diu4_buffer
      real, dimension(0:92112) :: diu6_buffer
      real, dimension(0:92112) :: diu7_buffer
      real, dimension(0:92112) :: diu8_buffer
      real :: fx_i_j_k
      real :: fy_i_j_k
      real :: fz_i_j_k
      real :: usum_i_j_k
      real :: vsum_i_j_k
      real :: wsum_i_j_k
      real :: w_i_j_k
      real :: v_i_j_k
      real :: u_i_j_k
      real :: h_i_j_k
      real :: g_i_j_k
      real :: f_i_j_k
      real :: diu2_im1_jp1_k
      real :: diu2_i_j_k
      real :: diu2_i_jp1_k
      real :: diu2_im1_j_k
      real :: diu3_im1_j_kp1
      real :: diu3_i_j_kp1
      real :: diu3_i_j_k
      real :: diu3_im1_j_k
      real :: diu4_i_j_k
      real :: diu4_ip1_jm1_k
      real :: diu4_ip1_j_k
      real :: diu4_i_jm1_k
      real :: diu6_i_jm1_kp1
      real :: diu6_i_j_kp1
      real :: diu6_i_j_k
      real :: diu6_i_jm1_k
      real :: diu7_i_j_k
      real :: diu7_ip1_j_km1
      real :: diu7_ip1_j_k
      real :: diu7_i_j_km1
      real :: diu8_i_j_k
      real :: diu8_i_jp1_km1
      real :: diu8_i_jp1_k
      real :: diu8_i_j_km1
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7737104 
      integer, parameter :: smartCacheSize = 92113 
      integer, parameter :: maxPositiveOffset = 91809 
      integer, parameter :: maxNegativeOffset = 91809 
      integer, parameter :: driverLoopSize = 7645296 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            fx_buffer(i) = fx_buffer(i+1)
            fy_buffer(i) = fy_buffer(i+1)
            fz_buffer(i) = fz_buffer(i+1)
            usum_buffer(i) = usum_buffer(i+1)
            vsum_buffer(i) = vsum_buffer(i+1)
            wsum_buffer(i) = wsum_buffer(i+1)
            w_buffer(i) = w_buffer(i+1)
            v_buffer(i) = v_buffer(i+1)
            u_buffer(i) = u_buffer(i+1)
            h_buffer(i) = h_buffer(i+1)
            g_buffer(i) = g_buffer(i+1)
            f_buffer(i) = f_buffer(i+1)
            diu2_buffer(i) = diu2_buffer(i+1)
            diu3_buffer(i) = diu3_buffer(i+1)
            diu4_buffer(i) = diu4_buffer(i+1)
            diu6_buffer(i) = diu6_buffer(i+1)
            diu7_buffer(i) = diu7_buffer(i+1)
            diu8_buffer(i) = diu8_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p0_les_0_diu2_i_j_k_reader_p0_les_0_smart_cache_diu2_i_j_k_pipe, diu2_read_in)
            diu2_buffer(92112) = diu2_read_in
            call read_pipe(p0_les_0_diu3_i_j_k_reader_p0_les_0_smart_cache_diu3_i_j_k_pipe, diu3_read_in)
            diu3_buffer(92112) = diu3_read_in
            call read_pipe(p0_les_0_diu4_i_j_k_reader_p0_les_0_smart_cache_diu4_i_j_k_pipe, diu4_read_in)
            diu4_buffer(92112) = diu4_read_in
            call read_pipe(p0_les_0_diu6_i_j_k_reader_p0_les_0_smart_cache_diu6_i_j_k_pipe, diu6_read_in)
            diu6_buffer(92112) = diu6_read_in
            call read_pipe(p0_les_0_diu7_i_j_k_reader_p0_les_0_smart_cache_diu7_i_j_k_pipe, diu7_read_in)
            diu7_buffer(92112) = diu7_read_in
            call read_pipe(p0_les_0_diu8_i_j_k_reader_p0_les_0_smart_cache_diu8_i_j_k_pipe, diu8_read_in)
            diu8_buffer(92112) = diu8_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_f_i_j_k_pipe, f_read_in)
            f_buffer(92112) = f_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_fx_i_j_k_pipe, fx_read_in)
            fx_buffer(92112) = fx_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_fy_i_j_k_pipe, fy_read_in)
            fy_buffer(92112) = fy_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_fz_i_j_k_pipe, fz_read_in)
            fz_buffer(92112) = fz_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_g_i_j_k_pipe, g_read_in)
            g_buffer(92112) = g_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_h_i_j_k_pipe, h_read_in)
            h_buffer(92112) = h_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_u_i_j_k_pipe, u_read_in)
            u_buffer(92112) = u_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_usum_i_j_k_pipe, usum_read_in)
            usum_buffer(92112) = usum_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_v_i_j_k_pipe, v_read_in)
            v_buffer(92112) = v_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_vsum_i_j_k_pipe, vsum_read_in)
            vsum_buffer(92112) = vsum_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_w_i_j_k_pipe, w_read_in)
            w_buffer(92112) = w_read_in
            call read_pipe(p0_feedbf_p0_les_0_smart_cache_wsum_i_j_k_pipe, wsum_read_in)
            wsum_buffer(92112) = wsum_read_in
        end if
        if (compIndex>=0) then
            diu2_i_j_k = diu2_buffer(91809)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu2_i_j_k_pipe, diu2_i_j_k)
            diu2_i_jp1_k = diu2_buffer(92112)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu2_i_jp1_k_pipe, diu2_i_jp1_k)
            diu2_im1_j_k = diu2_buffer(91808)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu2_im1_j_k_pipe, diu2_im1_j_k)
            diu2_im1_jp1_k = diu2_buffer(92111)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu2_im1_jp1_k_pipe, diu2_im1_jp1_k)
            diu3_i_j_k = diu3_buffer(91809)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu3_i_j_k_pipe, diu3_i_j_k)
            diu3_i_j_kp1 = diu3_buffer(183618)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu3_i_j_kp1_pipe, diu3_i_j_kp1)
            diu3_im1_j_k = diu3_buffer(91808)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu3_im1_j_k_pipe, diu3_im1_j_k)
            diu3_im1_j_kp1 = diu3_buffer(183617)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu3_im1_j_kp1_pipe, diu3_im1_j_kp1)
            diu4_i_j_k = diu4_buffer(91809)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu4_i_j_k_pipe, diu4_i_j_k)
            diu4_i_jm1_k = diu4_buffer(91506)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu4_i_jm1_k_pipe, diu4_i_jm1_k)
            diu4_ip1_j_k = diu4_buffer(91810)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu4_ip1_j_k_pipe, diu4_ip1_j_k)
            diu4_ip1_jm1_k = diu4_buffer(91507)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu4_ip1_jm1_k_pipe, diu4_ip1_jm1_k)
            diu6_i_j_k = diu6_buffer(91809)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu6_i_j_k_pipe, diu6_i_j_k)
            diu6_i_j_kp1 = diu6_buffer(183618)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu6_i_j_kp1_pipe, diu6_i_j_kp1)
            diu6_i_jm1_k = diu6_buffer(91506)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_k_pipe, diu6_i_jm1_k)
            diu6_i_jm1_kp1 = diu6_buffer(183315)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_kp1_pipe, diu6_i_jm1_kp1)
            diu7_i_j_k = diu7_buffer(91809)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu7_i_j_k_pipe, diu7_i_j_k)
            diu7_i_j_km1 = diu7_buffer(0)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu7_i_j_km1_pipe, diu7_i_j_km1)
            diu7_ip1_j_k = diu7_buffer(91810)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_k_pipe, diu7_ip1_j_k)
            diu7_ip1_j_km1 = diu7_buffer(1)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_km1_pipe, diu7_ip1_j_km1)
            diu8_i_j_k = diu8_buffer(91809)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu8_i_j_k_pipe, diu8_i_j_k)
            diu8_i_j_km1 = diu8_buffer(0)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu8_i_j_km1_pipe, diu8_i_j_km1)
            diu8_i_jp1_k = diu8_buffer(92112)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_k_pipe, diu8_i_jp1_k)
            diu8_i_jp1_km1 = diu8_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_km1_pipe, diu8_i_jp1_km1)
            f_i_j_k = f_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_f_i_j_k_pipe, f_i_j_k)
            fx_i_j_k = fx_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_fx_i_j_k_pipe, fx_i_j_k)
            fy_i_j_k = fy_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_fy_i_j_k_pipe, fy_i_j_k)
            fz_i_j_k = fz_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_fz_i_j_k_pipe, fz_i_j_k)
            g_i_j_k = g_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_g_i_j_k_pipe, g_i_j_k)
            h_i_j_k = h_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_h_i_j_k_pipe, h_i_j_k)
            u_i_j_k = u_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_u_i_j_k_pipe, u_i_j_k)
            usum_i_j_k = usum_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_usum_i_j_k_pipe, usum_i_j_k)
            v_i_j_k = v_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_v_i_j_k_pipe, v_i_j_k)
            vsum_i_j_k = vsum_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_vsum_i_j_k_pipe, vsum_i_j_k)
            w_i_j_k = w_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_w_i_j_k_pipe, w_i_j_k)
            wsum_i_j_k = wsum_buffer(303)
            call write_pipe(p0_les_0_smart_cache_p0_les_0_wsum_i_j_k_pipe, wsum_i_j_k)
        end if
    end do
end subroutine p0_les_0_smart_cache

subroutine p0_les_0
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4) :: csx1
      real(4) :: delx1_k
      real(4) :: diu1_i_j_k
      real(4) :: diu2_im1_jp1_k
      real(4) :: diu2_i_j_k
      real(4) :: diu2_i_jp1_k
      real(4) :: diu2_im1_j_k
      real(4) :: diu3_im1_j_kp1
      real(4) :: diu3_i_j_kp1
      real(4) :: diu3_i_j_k
      real(4) :: diu3_im1_j_k
      real(4) :: diu4_i_j_k
      real(4) :: diu4_ip1_jm1_k
      real(4) :: diu4_ip1_j_k
      real(4) :: diu4_i_jm1_k
      real(4) :: diu5_i_j_k
      real(4) :: diu6_i_jm1_kp1
      real(4) :: diu6_i_j_kp1
      real(4) :: diu6_i_j_k
      real(4) :: diu6_i_jm1_k
      real(4) :: diu7_i_j_k
      real(4) :: diu7_ip1_j_km1
      real(4) :: diu7_ip1_j_k
      real(4) :: diu7_i_j_km1
      real(4) :: diu8_i_j_k
      real(4) :: diu8_i_jp1_km1
      real(4) :: diu8_i_jp1_k
      real(4) :: diu8_i_j_km1
      real(4) :: diu9_i_j_k
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4) :: sm_i_j_k
    do count = 0, nloop, 1
        call read_pipe(p0_les_0_delx1_k_reader_p0_les_0_delx1_k_pipe, delx1_k)
        call read_pipe(p0_les_0_diu1_i_j_k_reader_p0_les_0_diu1_i_j_k_pipe, diu1_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu2_i_j_k_pipe, diu2_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu2_i_jp1_k_pipe, diu2_i_jp1_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu2_im1_j_k_pipe, diu2_im1_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu2_im1_jp1_k_pipe, diu2_im1_jp1_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu3_i_j_k_pipe, diu3_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu3_i_j_kp1_pipe, diu3_i_j_kp1)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu3_im1_j_k_pipe, diu3_im1_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu3_im1_j_kp1_pipe, diu3_im1_j_kp1)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu4_i_j_k_pipe, diu4_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu4_i_jm1_k_pipe, diu4_i_jm1_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu4_ip1_j_k_pipe, diu4_ip1_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu4_ip1_jm1_k_pipe, diu4_ip1_jm1_k)
        call read_pipe(p0_les_0_diu5_i_j_k_reader_p0_les_0_diu5_i_j_k_pipe, diu5_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu6_i_j_k_pipe, diu6_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu6_i_j_kp1_pipe, diu6_i_j_kp1)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_k_pipe, diu6_i_jm1_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu6_i_jm1_kp1_pipe, diu6_i_jm1_kp1)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu7_i_j_k_pipe, diu7_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu7_i_j_km1_pipe, diu7_i_j_km1)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_k_pipe, diu7_ip1_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu7_ip1_j_km1_pipe, diu7_ip1_j_km1)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu8_i_j_k_pipe, diu8_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu8_i_j_km1_pipe, diu8_i_j_km1)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_k_pipe, diu8_i_jp1_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_diu8_i_jp1_km1_pipe, diu8_i_jp1_km1)
        call read_pipe(p0_les_0_diu9_i_j_k_reader_p0_les_0_diu9_i_j_k_pipe, diu9_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_f_i_j_k_pipe, f_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_fx_i_j_k_pipe, fx_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_fy_i_j_k_pipe, fy_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_fz_i_j_k_pipe, fz_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_g_i_j_k_pipe, g_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_h_i_j_k_pipe, h_i_j_k)
        call read_pipe(p0_les_0_sm_i_j_k_reader_p0_les_0_sm_i_j_k_pipe, sm_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_u_i_j_k_pipe, u_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_usum_i_j_k_pipe, usum_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_v_i_j_k_pipe, v_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_vsum_i_j_k_pipe, vsum_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_w_i_j_k_pipe, w_i_j_k)
        call read_pipe(p0_les_0_smart_cache_p0_les_0_wsum_i_j_k_pipe, wsum_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            dudxx1 = diu1_i_j_k
            dudyx1 = (diu2_im1_j_k+diu2_im1_jp1_k+diu2_i_j_k+diu2_i_jp1_k)*.25
            dudzx1 = (diu3_im1_j_k+diu3_im1_j_kp1+diu3_i_j_k+diu3_i_j_kp1)*.25
            dvdxx1 = (diu4_i_j_k+diu4_i_jm1_k+diu4_ip1_j_k+diu4_ip1_jm1_k)*.25
            dvdyx1 = diu5_i_j_k
            dvdzx1 = (diu6_i_jm1_k+diu6_i_jm1_kp1+diu6_i_j_k+diu6_i_j_kp1)*.25
            dwdxx1 = (diu7_i_j_k+diu7_i_j_km1+diu7_ip1_j_k+diu7_ip1_j_km1)*.25
            dwdyx1 = (diu8_i_j_k+diu8_i_j_km1+diu8_i_jp1_k+diu8_i_jp1_km1)*.25
            dwdzx1 = diu9_i_j_k
            csx1 = 0.14
            sm_i_j_k = (csx1*delx1_k)**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx&
&&
&1)**2)
        end if
        call write_pipe(p0_les_0_p0_les_1_smart_cache_f_i_j_k_pipe, f_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_fx_i_j_k_pipe, fx_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_fy_i_j_k_pipe, fy_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_fz_i_j_k_pipe, fz_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_g_i_j_k_pipe, g_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_h_i_j_k_pipe, h_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_sm_i_j_k_pipe, sm_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_u_i_j_k_pipe, u_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_usum_i_j_k_pipe, usum_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_v_i_j_k_pipe, v_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_vsum_i_j_k_pipe, vsum_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_w_i_j_k_pipe, w_i_j_k)
        call write_pipe(p0_les_0_p0_les_1_smart_cache_wsum_i_j_k_pipe, wsum_i_j_k)
    end do
end subroutine p0_les_0

subroutine p0_les_1_diu1_i_j_k_reader(diu1)
      real, dimension(-1:302,0:302,0:82) :: diu1
      real :: diu1_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = -1, 302, 1
                diu1_i_j_k = diu1(a,b,c)
                call write_pipe(p0_les_1_diu1_i_j_k_reader_p0_les_1_smart_cache_diu1_i_j_k_pipe, diu1_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_1_diu1_i_j_k_reader

subroutine p0_les_1_diu2_i_j_k_reader(diu2)
      real, dimension(0:302,0:302,0:82) :: diu2
      real :: diu2_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu2_i_j_k = diu2(a,b,c)
                call write_pipe(p0_les_1_diu2_i_j_k_reader_p0_les_1_smart_cache_diu2_i_j_k_pipe, diu2_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_1_diu2_i_j_k_reader

subroutine p0_les_1_diu3_i_j_k_reader(diu3)
      real, dimension(0:302,0:302,0:82) :: diu3
      real :: diu3_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu3_i_j_k = diu3(a,b,c)
                call write_pipe(p0_les_1_diu3_i_j_k_reader_p0_les_1_smart_cache_diu3_i_j_k_pipe, diu3_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_1_diu3_i_j_k_reader

subroutine p0_les_1_diu4_i_j_k_reader(diu4)
      real, dimension(0:302,0:302,0:82) :: diu4
      real :: diu4_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu4_i_j_k = diu4(a,b,c)
                call write_pipe(p0_les_1_diu4_i_j_k_reader_p0_les_1_smart_cache_diu4_i_j_k_pipe, diu4_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_1_diu4_i_j_k_reader

subroutine p0_les_1_diu7_i_j_k_reader(diu7)
      real, dimension(0:302,0:302,0:82) :: diu7
      real :: diu7_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu7_i_j_k = diu7(a,b,c)
                call write_pipe(p0_les_1_diu7_i_j_k_reader_p0_les_1_smart_cache_diu7_i_j_k_pipe, diu7_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_1_diu7_i_j_k_reader

subroutine p0_les_1_dx1_i_reader(dx1)
      real, dimension(-1:301) :: dx1
      real :: dx1_i
      integer :: a
    do a = -1, 301, 1
        dx1_i = dx1(a)
        call write_pipe(p0_les_1_dx1_i_reader_p0_les_1_smart_cache_dx1_i_pipe, dx1_i)
    end do
end subroutine p0_les_1_dx1_i_reader

subroutine p0_les_1_dy1_j_reader(dy1)
      real, dimension(0:301) :: dy1
      real :: dy1_j
      integer :: a
    do a = 0, 301, 1
        dy1_j = dy1(a)
        call write_pipe(p0_les_1_dy1_j_reader_p0_les_1_smart_cache_dy1_j_pipe, dy1_j)
    end do
end subroutine p0_les_1_dy1_j_reader

subroutine p0_les_1_dzn_k_reader(dzn)
      real, dimension(-1:82) :: dzn
      real :: dzn_k
      integer :: a
    do a = -1, 82, 1
        dzn_k = dzn(a)
        call write_pipe(p0_les_1_dzn_k_reader_p0_les_1_smart_cache_dzn_k_pipe, dzn_k)
    end do
end subroutine p0_les_1_dzn_k_reader

subroutine p0_les_1_dxs_i_reader(dxs)
      real, dimension(0:300) :: dxs
      real :: dxs_i
      integer :: a
    do a = 0, 300, 1
        dxs_i = dxs(a)
        call write_pipe(p0_les_1_dxs_i_reader_p0_les_1_dxs_i_pipe, dxs_i)
    end do
end subroutine p0_les_1_dxs_i_reader

subroutine p0_les_1_smart_cache
      real :: fx_read_in
      real :: fy_read_in
      real :: fz_read_in
      real :: usum_read_in
      real :: vsum_read_in
      real :: wsum_read_in
      real :: w_read_in
      real :: v_read_in
      real :: u_read_in
      real :: h_read_in
      real :: g_read_in
      real :: diu1_read_in
      real :: diu2_read_in
      real :: diu3_read_in
      real :: diu4_read_in
      real :: diu7_read_in
      real :: dx1_read_in
      real :: dy1_read_in
      real :: dzn_read_in
      real :: sm_read_in
      real :: f_read_in
      real, dimension(0:183619) :: fx_buffer
      real, dimension(0:183619) :: fy_buffer
      real, dimension(0:183619) :: fz_buffer
      real, dimension(0:183619) :: usum_buffer
      real, dimension(0:183619) :: vsum_buffer
      real, dimension(0:183619) :: wsum_buffer
      real, dimension(0:183619) :: w_buffer
      real, dimension(0:183619) :: v_buffer
      real, dimension(0:183619) :: u_buffer
      real, dimension(0:183619) :: h_buffer
      real, dimension(0:183619) :: g_buffer
      real, dimension(0:183619) :: diu1_buffer
      real, dimension(0:183619) :: diu2_buffer
      real, dimension(0:183619) :: diu3_buffer
      real, dimension(0:183619) :: diu4_buffer
      real, dimension(0:183619) :: diu7_buffer
      real, dimension(0:183619) :: dx1_buffer
      real, dimension(0:183619) :: dy1_buffer
      real, dimension(0:183619) :: dzn_buffer
      real, dimension(0:183619) :: sm_buffer
      real, dimension(0:183619) :: f_buffer
      real :: fx_i_j_k
      real :: fy_i_j_k
      real :: fz_i_j_k
      real :: usum_i_j_k
      real :: vsum_i_j_k
      real :: wsum_i_j_k
      real :: w_i_j_k
      real :: v_i_j_k
      real :: u_i_j_k
      real :: h_i_j_k
      real :: g_i_j_k
      real :: diu1_ip1_j_k
      real :: diu1_i_j_k
      real :: diu2_i_jp1_k
      real :: diu2_i_j_k
      real :: diu3_i_j_kp1
      real :: diu3_i_j_k
      real :: diu4_ip1_j_k
      real :: diu4_ip1_jm1_k
      real :: diu7_ip1_j_k
      real :: diu7_ip1_j_km1
      real :: dx1_ip1
      real :: dx1_i
      real :: dy1_jp1
      real :: dy1_j
      real :: dzn_kp1
      real :: dzn_k
      real :: dzn_km1
      real :: sm_i_jm1_k
      real :: sm_i_j_kp1
      real :: sm_i_j_k
      real :: sm_i_jp1_k
      real :: sm_ip1_jm1_k
      real :: sm_ip1_j_km1
      real :: sm_ip1_j_kp1
      real :: sm_ip1_j_k
      real :: sm_ip1_jp1_k
      real :: sm_i_j_km1
      real :: f_i_j_k
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7737105 
      integer, parameter :: smartCacheSize = 183620 
      integer, parameter :: maxPositiveOffset = 91810 
      integer, parameter :: maxNegativeOffset = 91809 
      integer, parameter :: driverLoopSize = 7645296 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            fx_buffer(i) = fx_buffer(i+1)
            fy_buffer(i) = fy_buffer(i+1)
            fz_buffer(i) = fz_buffer(i+1)
            usum_buffer(i) = usum_buffer(i+1)
            vsum_buffer(i) = vsum_buffer(i+1)
            wsum_buffer(i) = wsum_buffer(i+1)
            w_buffer(i) = w_buffer(i+1)
            v_buffer(i) = v_buffer(i+1)
            u_buffer(i) = u_buffer(i+1)
            h_buffer(i) = h_buffer(i+1)
            g_buffer(i) = g_buffer(i+1)
            diu1_buffer(i) = diu1_buffer(i+1)
            diu2_buffer(i) = diu2_buffer(i+1)
            diu3_buffer(i) = diu3_buffer(i+1)
            diu4_buffer(i) = diu4_buffer(i+1)
            diu7_buffer(i) = diu7_buffer(i+1)
            dx1_buffer(i) = dx1_buffer(i+1)
            dy1_buffer(i) = dy1_buffer(i+1)
            dzn_buffer(i) = dzn_buffer(i+1)
            sm_buffer(i) = sm_buffer(i+1)
            f_buffer(i) = f_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p0_les_1_diu1_i_j_k_reader_p0_les_1_smart_cache_diu1_i_j_k_pipe, diu1_read_in)
            diu1_buffer(183619) = diu1_read_in
            call read_pipe(p0_les_1_diu2_i_j_k_reader_p0_les_1_smart_cache_diu2_i_j_k_pipe, diu2_read_in)
            diu2_buffer(183619) = diu2_read_in
            call read_pipe(p0_les_1_diu3_i_j_k_reader_p0_les_1_smart_cache_diu3_i_j_k_pipe, diu3_read_in)
            diu3_buffer(183619) = diu3_read_in
            call read_pipe(p0_les_1_diu4_i_j_k_reader_p0_les_1_smart_cache_diu4_i_j_k_pipe, diu4_read_in)
            diu4_buffer(183619) = diu4_read_in
            call read_pipe(p0_les_1_diu7_i_j_k_reader_p0_les_1_smart_cache_diu7_i_j_k_pipe, diu7_read_in)
            diu7_buffer(183619) = diu7_read_in
            call read_pipe(p0_les_1_dx1_i_reader_p0_les_1_smart_cache_dx1_i_pipe, dx1_read_in)
            dx1_buffer(183619) = dx1_read_in
            call read_pipe(p0_les_1_dy1_j_reader_p0_les_1_smart_cache_dy1_j_pipe, dy1_read_in)
            dy1_buffer(183619) = dy1_read_in
            call read_pipe(p0_les_1_dzn_k_reader_p0_les_1_smart_cache_dzn_k_pipe, dzn_read_in)
            dzn_buffer(183619) = dzn_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_f_i_j_k_pipe, f_read_in)
            f_buffer(183619) = f_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_fx_i_j_k_pipe, fx_read_in)
            fx_buffer(183619) = fx_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_fy_i_j_k_pipe, fy_read_in)
            fy_buffer(183619) = fy_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_fz_i_j_k_pipe, fz_read_in)
            fz_buffer(183619) = fz_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_g_i_j_k_pipe, g_read_in)
            g_buffer(183619) = g_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_h_i_j_k_pipe, h_read_in)
            h_buffer(183619) = h_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_sm_i_j_k_pipe, sm_read_in)
            sm_buffer(183619) = sm_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_u_i_j_k_pipe, u_read_in)
            u_buffer(183619) = u_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_usum_i_j_k_pipe, usum_read_in)
            usum_buffer(183619) = usum_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_v_i_j_k_pipe, v_read_in)
            v_buffer(183619) = v_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_vsum_i_j_k_pipe, vsum_read_in)
            vsum_buffer(183619) = vsum_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_w_i_j_k_pipe, w_read_in)
            w_buffer(183619) = w_read_in
            call read_pipe(p0_les_0_p0_les_1_smart_cache_wsum_i_j_k_pipe, wsum_read_in)
            wsum_buffer(183619) = wsum_read_in
        end if
        if (compIndex>=0) then
            diu1_i_j_k = diu1_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu1_i_j_k_pipe, diu1_i_j_k)
            diu1_ip1_j_k = diu1_buffer(91810)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu1_ip1_j_k_pipe, diu1_ip1_j_k)
            diu2_i_j_k = diu2_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu2_i_j_k_pipe, diu2_i_j_k)
            diu2_i_jp1_k = diu2_buffer(92112)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu2_i_jp1_k_pipe, diu2_i_jp1_k)
            diu3_i_j_k = diu3_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu3_i_j_k_pipe, diu3_i_j_k)
            diu3_i_j_kp1 = diu3_buffer(183618)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu3_i_j_kp1_pipe, diu3_i_j_kp1)
            diu4_ip1_j_k = diu4_buffer(91810)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu4_ip1_j_k_pipe, diu4_ip1_j_k)
            diu4_ip1_jm1_k = diu4_buffer(91507)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu4_ip1_jm1_k_pipe, diu4_ip1_jm1_k)
            diu7_ip1_j_k = diu7_buffer(91810)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_k_pipe, diu7_ip1_j_k)
            diu7_ip1_j_km1 = diu7_buffer(1)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_km1_pipe, diu7_ip1_j_km1)
            dx1_i = dx1_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_dx1_i_pipe, dx1_i)
            dx1_ip1 = dx1_buffer(91810)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_dx1_ip1_pipe, dx1_ip1)
            dy1_j = dy1_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_dy1_j_pipe, dy1_j)
            dy1_jp1 = dy1_buffer(91810)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_dy1_jp1_pipe, dy1_jp1)
            dzn_k = dzn_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_dzn_k_pipe, dzn_k)
            dzn_km1 = dzn_buffer(91808)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_dzn_km1_pipe, dzn_km1)
            dzn_kp1 = dzn_buffer(91810)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_dzn_kp1_pipe, dzn_kp1)
            f_i_j_k = f_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_f_i_j_k_pipe, f_i_j_k)
            fx_i_j_k = fx_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_fx_i_j_k_pipe, fx_i_j_k)
            fy_i_j_k = fy_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_fy_i_j_k_pipe, fy_i_j_k)
            fz_i_j_k = fz_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_fz_i_j_k_pipe, fz_i_j_k)
            g_i_j_k = g_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_g_i_j_k_pipe, g_i_j_k)
            h_i_j_k = h_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_h_i_j_k_pipe, h_i_j_k)
            sm_i_j_k = sm_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_j_k_pipe, sm_i_j_k)
            sm_i_j_km1 = sm_buffer(0)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_j_km1_pipe, sm_i_j_km1)
            sm_i_j_kp1 = sm_buffer(183618)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_j_kp1_pipe, sm_i_j_kp1)
            sm_i_jm1_k = sm_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_jm1_k_pipe, sm_i_jm1_k)
            sm_i_jp1_k = sm_buffer(92112)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_jp1_k_pipe, sm_i_jp1_k)
            sm_ip1_j_k = sm_buffer(91810)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_j_k_pipe, sm_ip1_j_k)
            sm_ip1_j_km1 = sm_buffer(1)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_j_km1_pipe, sm_ip1_j_km1)
            sm_ip1_j_kp1 = sm_buffer(183619)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_j_kp1_pipe, sm_ip1_j_kp1)
            sm_ip1_jm1_k = sm_buffer(91810)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_jm1_k_pipe, sm_ip1_jm1_k)
            sm_ip1_jp1_k = sm_buffer(92113)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_jp1_k_pipe, sm_ip1_jp1_k)
            u_i_j_k = u_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_u_i_j_k_pipe, u_i_j_k)
            usum_i_j_k = usum_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_usum_i_j_k_pipe, usum_i_j_k)
            v_i_j_k = v_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_v_i_j_k_pipe, v_i_j_k)
            vsum_i_j_k = vsum_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_vsum_i_j_k_pipe, vsum_i_j_k)
            w_i_j_k = w_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_w_i_j_k_pipe, w_i_j_k)
            wsum_i_j_k = wsum_buffer(91809)
            call write_pipe(p0_les_1_smart_cache_p0_les_1_wsum_i_j_k_pipe, wsum_i_j_k)
        end if
    end do
end subroutine p0_les_1_smart_cache

subroutine p0_les_1
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4) :: diu1_ip1_j_k
      real(4) :: diu1_i_j_k
      real(4) :: diu2_i_jp1_k
      real(4) :: diu2_i_j_k
      real(4) :: diu3_i_j_kp1
      real(4) :: diu3_i_j_k
      real(4) :: diu4_ip1_j_k
      real(4) :: diu4_ip1_jm1_k
      real(4) :: diu7_ip1_j_k
      real(4) :: diu7_ip1_j_km1
      real(4) :: dx1_ip1
      real(4) :: dx1_i
      real(4) :: dxs_i
      real(4) :: dy1_jp1
      real(4) :: dy1_j
      real(4) :: dzn_kp1
      real(4) :: dzn_k
      real(4) :: dzn_km1
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4) :: f_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: sm_i_jm1_k
      real(4) :: sm_i_j_kp1
      real(4) :: sm_i_j_k
      real(4) :: sm_i_jp1_k
      real(4) :: sm_ip1_jm1_k
      real(4) :: sm_ip1_j_km1
      real(4) :: sm_ip1_j_kp1
      real(4) :: sm_ip1_j_k
      real(4) :: sm_ip1_jp1_k
      real(4) :: sm_i_j_km1
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
    do count = 0, nloop, 1
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu1_i_j_k_pipe, diu1_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu1_ip1_j_k_pipe, diu1_ip1_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu2_i_j_k_pipe, diu2_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu2_i_jp1_k_pipe, diu2_i_jp1_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu3_i_j_k_pipe, diu3_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu3_i_j_kp1_pipe, diu3_i_j_kp1)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu4_ip1_j_k_pipe, diu4_ip1_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu4_ip1_jm1_k_pipe, diu4_ip1_jm1_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_k_pipe, diu7_ip1_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_diu7_ip1_j_km1_pipe, diu7_ip1_j_km1)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_dx1_i_pipe, dx1_i)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_dx1_ip1_pipe, dx1_ip1)
        call read_pipe(p0_les_1_dxs_i_reader_p0_les_1_dxs_i_pipe, dxs_i)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_dy1_j_pipe, dy1_j)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_dy1_jp1_pipe, dy1_jp1)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_dzn_k_pipe, dzn_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_dzn_km1_pipe, dzn_km1)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_dzn_kp1_pipe, dzn_kp1)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_f_i_j_k_pipe, f_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_fx_i_j_k_pipe, fx_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_fy_i_j_k_pipe, fy_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_fz_i_j_k_pipe, fz_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_g_i_j_k_pipe, g_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_h_i_j_k_pipe, h_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_j_k_pipe, sm_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_j_km1_pipe, sm_i_j_km1)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_j_kp1_pipe, sm_i_j_kp1)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_jm1_k_pipe, sm_i_jm1_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_i_jp1_k_pipe, sm_i_jp1_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_j_k_pipe, sm_ip1_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_j_km1_pipe, sm_ip1_j_km1)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_j_kp1_pipe, sm_ip1_j_kp1)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_jm1_k_pipe, sm_ip1_jm1_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_sm_ip1_jp1_k_pipe, sm_ip1_jp1_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_u_i_j_k_pipe, u_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_usum_i_j_k_pipe, usum_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_v_i_j_k_pipe, v_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_vsum_i_j_k_pipe, vsum_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_w_i_j_k_pipe, w_i_j_k)
        call read_pipe(p0_les_1_smart_cache_p0_les_1_wsum_i_j_k_pipe, wsum_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
            evsx2 = sm_ip1_j_k
            evsx1 = sm_i_j_k
            evsy2 = (dy1_jp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dy1_j*((dx1_ip1*sm_i_jp1_k+dx1_i*sm_ip1_jp1_k)/(d&
&&
&x1_i+dx1_ip1)))/(dy1_j+dy1_jp1)
            evsy1 = (dy1_jp1*((dx1_ip1*sm_i_jm1_k+dx1_i*sm_ip1_jm1_k)/(dx1_i+dx1_ip1))+dy1_j*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(d&
&&
&x1_i+dx1_ip1)))/(dy1_j+dy1_jp1)
            evsz2 = (dzn_kp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dzn_k*((dx1_ip1*sm_i_j_kp1+dx1_i*sm_ip1_j_kp1)/(d&
&&
&x1_i+dx1_ip1)))/(dzn_k+dzn_kp1)
            evsz1 = (dzn_k*((dx1_ip1*sm_i_j_km1+dx1_i*sm_ip1_j_km1)/(dx1_i+dx1_ip1))+dzn_km1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(d&
&&
&x1_i+dx1_ip1)))/(dzn_km1+dzn_k)
            visux2 = (evsx2)*2.*diu1_ip1_j_k
            visux1 = (evsx1)*2.*diu1_i_j_k
            visuy2 = (evsy2)*(diu2_i_jp1_k+diu4_ip1_j_k)
            visuy1 = (evsy1)*(diu2_i_j_k+diu4_ip1_jm1_k)
            visuz2 = (evsz2)*(diu3_i_j_kp1+diu7_ip1_j_k)
            visuz1 = (evsz1)*(diu3_i_j_k+diu7_ip1_j_km1)
            vfu = (visux2-visux1)/dxs_i+(visuy2-visuy1)/dy1_j+(visuz2-visuz1)/dzn_k
            f_i_j_k = (f_i_j_k+vfu)
        end if
        call write_pipe(p0_les_1_p0_les_2_smart_cache_f_i_j_k_pipe, f_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_fx_i_j_k_pipe, fx_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_fy_i_j_k_pipe, fy_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_fz_i_j_k_pipe, fz_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_g_i_j_k_pipe, g_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_h_i_j_k_pipe, h_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_sm_i_j_k_pipe, sm_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_u_i_j_k_pipe, u_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_usum_i_j_k_pipe, usum_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_v_i_j_k_pipe, v_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_vsum_i_j_k_pipe, vsum_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_w_i_j_k_pipe, w_i_j_k)
        call write_pipe(p0_les_1_p0_les_2_smart_cache_wsum_i_j_k_pipe, wsum_i_j_k)
    end do
end subroutine p0_les_1

subroutine p0_les_2_diu2_i_j_k_reader(diu2)
      real, dimension(0:302,0:302,0:82) :: diu2
      real :: diu2_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu2_i_j_k = diu2(a,b,c)
                call write_pipe(p0_les_2_diu2_i_j_k_reader_p0_les_2_smart_cache_diu2_i_j_k_pipe, diu2_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_2_diu2_i_j_k_reader

subroutine p0_les_2_diu4_i_j_k_reader(diu4)
      real, dimension(0:302,0:302,0:82) :: diu4
      real :: diu4_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu4_i_j_k = diu4(a,b,c)
                call write_pipe(p0_les_2_diu4_i_j_k_reader_p0_les_2_smart_cache_diu4_i_j_k_pipe, diu4_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_2_diu4_i_j_k_reader

subroutine p0_les_2_diu5_i_j_k_reader(diu5)
      real, dimension(-1:302,0:302,0:82) :: diu5
      real :: diu5_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = -1, 302, 1
                diu5_i_j_k = diu5(a,b,c)
                call write_pipe(p0_les_2_diu5_i_j_k_reader_p0_les_2_smart_cache_diu5_i_j_k_pipe, diu5_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_2_diu5_i_j_k_reader

subroutine p0_les_2_diu6_i_j_k_reader(diu6)
      real, dimension(0:302,0:302,0:82) :: diu6
      real :: diu6_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu6_i_j_k = diu6(a,b,c)
                call write_pipe(p0_les_2_diu6_i_j_k_reader_p0_les_2_smart_cache_diu6_i_j_k_pipe, diu6_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_2_diu6_i_j_k_reader

subroutine p0_les_2_diu8_i_j_k_reader(diu8)
      real, dimension(0:302,0:302,0:82) :: diu8
      real :: diu8_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu8_i_j_k = diu8(a,b,c)
                call write_pipe(p0_les_2_diu8_i_j_k_reader_p0_les_2_smart_cache_diu8_i_j_k_pipe, diu8_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_2_diu8_i_j_k_reader

subroutine p0_les_2_dx1_i_reader(dx1)
      real, dimension(-1:301) :: dx1
      real :: dx1_i
      integer :: a
    do a = -1, 301, 1
        dx1_i = dx1(a)
        call write_pipe(p0_les_2_dx1_i_reader_p0_les_2_smart_cache_dx1_i_pipe, dx1_i)
    end do
end subroutine p0_les_2_dx1_i_reader

subroutine p0_les_2_dy1_j_reader(dy1)
      real, dimension(0:301) :: dy1
      real :: dy1_j
      integer :: a
    do a = 0, 301, 1
        dy1_j = dy1(a)
        call write_pipe(p0_les_2_dy1_j_reader_p0_les_2_smart_cache_dy1_j_pipe, dy1_j)
    end do
end subroutine p0_les_2_dy1_j_reader

subroutine p0_les_2_dzn_k_reader(dzn)
      real, dimension(-1:82) :: dzn
      real :: dzn_k
      integer :: a
    do a = -1, 82, 1
        dzn_k = dzn(a)
        call write_pipe(p0_les_2_dzn_k_reader_p0_les_2_smart_cache_dzn_k_pipe, dzn_k)
    end do
end subroutine p0_les_2_dzn_k_reader

subroutine p0_les_2_dys_j_reader(dys)
      real, dimension(0:300) :: dys
      real :: dys_j
      integer :: a
    do a = 0, 300, 1
        dys_j = dys(a)
        call write_pipe(p0_les_2_dys_j_reader_p0_les_2_dys_j_pipe, dys_j)
    end do
end subroutine p0_les_2_dys_j_reader

subroutine p0_les_2_smart_cache
      real :: fx_read_in
      real :: fy_read_in
      real :: fz_read_in
      real :: usum_read_in
      real :: vsum_read_in
      real :: wsum_read_in
      real :: w_read_in
      real :: v_read_in
      real :: u_read_in
      real :: f_read_in
      real :: h_read_in
      real :: diu2_read_in
      real :: diu4_read_in
      real :: diu5_read_in
      real :: diu6_read_in
      real :: diu8_read_in
      real :: dx1_read_in
      real :: dy1_read_in
      real :: dzn_read_in
      real :: sm_read_in
      real :: g_read_in
      real, dimension(0:183619) :: fx_buffer
      real, dimension(0:183619) :: fy_buffer
      real, dimension(0:183619) :: fz_buffer
      real, dimension(0:183619) :: usum_buffer
      real, dimension(0:183619) :: vsum_buffer
      real, dimension(0:183619) :: wsum_buffer
      real, dimension(0:183619) :: w_buffer
      real, dimension(0:183619) :: v_buffer
      real, dimension(0:183619) :: u_buffer
      real, dimension(0:183619) :: f_buffer
      real, dimension(0:183619) :: h_buffer
      real, dimension(0:183619) :: diu2_buffer
      real, dimension(0:183619) :: diu4_buffer
      real, dimension(0:183619) :: diu5_buffer
      real, dimension(0:183619) :: diu6_buffer
      real, dimension(0:183619) :: diu8_buffer
      real, dimension(0:183619) :: dx1_buffer
      real, dimension(0:183619) :: dy1_buffer
      real, dimension(0:183619) :: dzn_buffer
      real, dimension(0:183619) :: sm_buffer
      real, dimension(0:183619) :: g_buffer
      real :: fx_i_j_k
      real :: fy_i_j_k
      real :: fz_i_j_k
      real :: usum_i_j_k
      real :: vsum_i_j_k
      real :: wsum_i_j_k
      real :: w_i_j_k
      real :: v_i_j_k
      real :: u_i_j_k
      real :: f_i_j_k
      real :: h_i_j_k
      real :: diu2_im1_jp1_k
      real :: diu2_i_jp1_k
      real :: diu4_ip1_j_k
      real :: diu4_i_j_k
      real :: diu5_i_jp1_k
      real :: diu5_i_j_k
      real :: diu6_i_j_kp1
      real :: diu6_i_j_k
      real :: diu8_i_jp1_k
      real :: diu8_i_jp1_km1
      real :: dx1_ip1
      real :: dx1_i
      real :: dx1_im1
      real :: dy1_jp1
      real :: dy1_j
      real :: dzn_kp1
      real :: dzn_k
      real :: dzn_km1
      real :: sm_im1_j_k
      real :: sm_im1_jp1_k
      real :: sm_i_j_kp1
      real :: sm_i_j_k
      real :: sm_i_jp1_k
      real :: sm_ip1_j_km1
      real :: sm_ip1_j_kp1
      real :: sm_ip1_j_k
      real :: sm_ip1_jp1_k
      real :: sm_i_j_km1
      real :: g_i_j_k
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7737105 
      integer, parameter :: smartCacheSize = 183620 
      integer, parameter :: maxPositiveOffset = 91810 
      integer, parameter :: maxNegativeOffset = 91809 
      integer, parameter :: driverLoopSize = 7645296 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            fx_buffer(i) = fx_buffer(i+1)
            fy_buffer(i) = fy_buffer(i+1)
            fz_buffer(i) = fz_buffer(i+1)
            usum_buffer(i) = usum_buffer(i+1)
            vsum_buffer(i) = vsum_buffer(i+1)
            wsum_buffer(i) = wsum_buffer(i+1)
            w_buffer(i) = w_buffer(i+1)
            v_buffer(i) = v_buffer(i+1)
            u_buffer(i) = u_buffer(i+1)
            f_buffer(i) = f_buffer(i+1)
            h_buffer(i) = h_buffer(i+1)
            diu2_buffer(i) = diu2_buffer(i+1)
            diu4_buffer(i) = diu4_buffer(i+1)
            diu5_buffer(i) = diu5_buffer(i+1)
            diu6_buffer(i) = diu6_buffer(i+1)
            diu8_buffer(i) = diu8_buffer(i+1)
            dx1_buffer(i) = dx1_buffer(i+1)
            dy1_buffer(i) = dy1_buffer(i+1)
            dzn_buffer(i) = dzn_buffer(i+1)
            sm_buffer(i) = sm_buffer(i+1)
            g_buffer(i) = g_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p0_les_2_diu2_i_j_k_reader_p0_les_2_smart_cache_diu2_i_j_k_pipe, diu2_read_in)
            diu2_buffer(183619) = diu2_read_in
            call read_pipe(p0_les_2_diu4_i_j_k_reader_p0_les_2_smart_cache_diu4_i_j_k_pipe, diu4_read_in)
            diu4_buffer(183619) = diu4_read_in
            call read_pipe(p0_les_2_diu5_i_j_k_reader_p0_les_2_smart_cache_diu5_i_j_k_pipe, diu5_read_in)
            diu5_buffer(183619) = diu5_read_in
            call read_pipe(p0_les_2_diu6_i_j_k_reader_p0_les_2_smart_cache_diu6_i_j_k_pipe, diu6_read_in)
            diu6_buffer(183619) = diu6_read_in
            call read_pipe(p0_les_2_diu8_i_j_k_reader_p0_les_2_smart_cache_diu8_i_j_k_pipe, diu8_read_in)
            diu8_buffer(183619) = diu8_read_in
            call read_pipe(p0_les_2_dx1_i_reader_p0_les_2_smart_cache_dx1_i_pipe, dx1_read_in)
            dx1_buffer(183619) = dx1_read_in
            call read_pipe(p0_les_2_dy1_j_reader_p0_les_2_smart_cache_dy1_j_pipe, dy1_read_in)
            dy1_buffer(183619) = dy1_read_in
            call read_pipe(p0_les_2_dzn_k_reader_p0_les_2_smart_cache_dzn_k_pipe, dzn_read_in)
            dzn_buffer(183619) = dzn_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_f_i_j_k_pipe, f_read_in)
            f_buffer(183619) = f_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_fx_i_j_k_pipe, fx_read_in)
            fx_buffer(183619) = fx_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_fy_i_j_k_pipe, fy_read_in)
            fy_buffer(183619) = fy_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_fz_i_j_k_pipe, fz_read_in)
            fz_buffer(183619) = fz_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_g_i_j_k_pipe, g_read_in)
            g_buffer(183619) = g_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_h_i_j_k_pipe, h_read_in)
            h_buffer(183619) = h_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_sm_i_j_k_pipe, sm_read_in)
            sm_buffer(183619) = sm_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_u_i_j_k_pipe, u_read_in)
            u_buffer(183619) = u_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_usum_i_j_k_pipe, usum_read_in)
            usum_buffer(183619) = usum_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_v_i_j_k_pipe, v_read_in)
            v_buffer(183619) = v_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_vsum_i_j_k_pipe, vsum_read_in)
            vsum_buffer(183619) = vsum_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_w_i_j_k_pipe, w_read_in)
            w_buffer(183619) = w_read_in
            call read_pipe(p0_les_1_p0_les_2_smart_cache_wsum_i_j_k_pipe, wsum_read_in)
            wsum_buffer(183619) = wsum_read_in
        end if
        if (compIndex>=0) then
            diu2_i_jp1_k = diu2_buffer(92112)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu2_i_jp1_k_pipe, diu2_i_jp1_k)
            diu2_im1_jp1_k = diu2_buffer(92111)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu2_im1_jp1_k_pipe, diu2_im1_jp1_k)
            diu4_i_j_k = diu4_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu4_i_j_k_pipe, diu4_i_j_k)
            diu4_ip1_j_k = diu4_buffer(91810)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu4_ip1_j_k_pipe, diu4_ip1_j_k)
            diu5_i_j_k = diu5_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu5_i_j_k_pipe, diu5_i_j_k)
            diu5_i_jp1_k = diu5_buffer(92113)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu5_i_jp1_k_pipe, diu5_i_jp1_k)
            diu6_i_j_k = diu6_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu6_i_j_k_pipe, diu6_i_j_k)
            diu6_i_j_kp1 = diu6_buffer(183618)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu6_i_j_kp1_pipe, diu6_i_j_kp1)
            diu8_i_jp1_k = diu8_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_k_pipe, diu8_i_jp1_k)
            diu8_i_jp1_km1 = diu8_buffer(0)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_km1_pipe, diu8_i_jp1_km1)
            dx1_i = dx1_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_dx1_i_pipe, dx1_i)
            dx1_im1 = dx1_buffer(91808)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_dx1_im1_pipe, dx1_im1)
            dx1_ip1 = dx1_buffer(91810)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_dx1_ip1_pipe, dx1_ip1)
            dy1_j = dy1_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_dy1_j_pipe, dy1_j)
            dy1_jp1 = dy1_buffer(91810)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_dy1_jp1_pipe, dy1_jp1)
            dzn_k = dzn_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_dzn_k_pipe, dzn_k)
            dzn_km1 = dzn_buffer(91808)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_dzn_km1_pipe, dzn_km1)
            dzn_kp1 = dzn_buffer(91810)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_dzn_kp1_pipe, dzn_kp1)
            f_i_j_k = f_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_f_i_j_k_pipe, f_i_j_k)
            fx_i_j_k = fx_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_fx_i_j_k_pipe, fx_i_j_k)
            fy_i_j_k = fy_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_fy_i_j_k_pipe, fy_i_j_k)
            fz_i_j_k = fz_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_fz_i_j_k_pipe, fz_i_j_k)
            g_i_j_k = g_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_g_i_j_k_pipe, g_i_j_k)
            h_i_j_k = h_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_h_i_j_k_pipe, h_i_j_k)
            sm_i_j_k = sm_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_i_j_k_pipe, sm_i_j_k)
            sm_i_j_km1 = sm_buffer(0)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_i_j_km1_pipe, sm_i_j_km1)
            sm_i_j_kp1 = sm_buffer(183618)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_i_j_kp1_pipe, sm_i_j_kp1)
            sm_i_jp1_k = sm_buffer(92112)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_i_jp1_k_pipe, sm_i_jp1_k)
            sm_im1_j_k = sm_buffer(91808)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_im1_j_k_pipe, sm_im1_j_k)
            sm_im1_jp1_k = sm_buffer(92111)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_im1_jp1_k_pipe, sm_im1_jp1_k)
            sm_ip1_j_k = sm_buffer(91810)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_ip1_j_k_pipe, sm_ip1_j_k)
            sm_ip1_j_km1 = sm_buffer(1)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_ip1_j_km1_pipe, sm_ip1_j_km1)
            sm_ip1_j_kp1 = sm_buffer(183619)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_ip1_j_kp1_pipe, sm_ip1_j_kp1)
            sm_ip1_jp1_k = sm_buffer(92113)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_sm_ip1_jp1_k_pipe, sm_ip1_jp1_k)
            u_i_j_k = u_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_u_i_j_k_pipe, u_i_j_k)
            usum_i_j_k = usum_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_usum_i_j_k_pipe, usum_i_j_k)
            v_i_j_k = v_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_v_i_j_k_pipe, v_i_j_k)
            vsum_i_j_k = vsum_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_vsum_i_j_k_pipe, vsum_i_j_k)
            w_i_j_k = w_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_w_i_j_k_pipe, w_i_j_k)
            wsum_i_j_k = wsum_buffer(91809)
            call write_pipe(p0_les_2_smart_cache_p0_les_2_wsum_i_j_k_pipe, wsum_i_j_k)
        end if
    end do
end subroutine p0_les_2_smart_cache

subroutine p0_les_2
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4) :: diu2_im1_jp1_k
      real(4) :: diu2_i_jp1_k
      real(4) :: diu4_ip1_j_k
      real(4) :: diu4_i_j_k
      real(4) :: diu5_i_jp1_k
      real(4) :: diu5_i_j_k
      real(4) :: diu6_i_j_kp1
      real(4) :: diu6_i_j_k
      real(4) :: diu8_i_jp1_k
      real(4) :: diu8_i_jp1_km1
      real(4) :: dx1_ip1
      real(4) :: dx1_i
      real(4) :: dx1_im1
      real(4) :: dy1_jp1
      real(4) :: dy1_j
      real(4) :: dys_j
      real(4) :: dzn_kp1
      real(4) :: dzn_k
      real(4) :: dzn_km1
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4) :: g_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: sm_im1_j_k
      real(4) :: sm_im1_jp1_k
      real(4) :: sm_i_j_kp1
      real(4) :: sm_i_j_k
      real(4) :: sm_i_jp1_k
      real(4) :: sm_ip1_j_km1
      real(4) :: sm_ip1_j_kp1
      real(4) :: sm_ip1_j_k
      real(4) :: sm_ip1_jp1_k
      real(4) :: sm_i_j_km1
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
    do count = 0, nloop, 1
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu2_i_jp1_k_pipe, diu2_i_jp1_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu2_im1_jp1_k_pipe, diu2_im1_jp1_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu4_i_j_k_pipe, diu4_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu4_ip1_j_k_pipe, diu4_ip1_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu5_i_j_k_pipe, diu5_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu5_i_jp1_k_pipe, diu5_i_jp1_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu6_i_j_k_pipe, diu6_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu6_i_j_kp1_pipe, diu6_i_j_kp1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_k_pipe, diu8_i_jp1_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_diu8_i_jp1_km1_pipe, diu8_i_jp1_km1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_dx1_i_pipe, dx1_i)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_dx1_im1_pipe, dx1_im1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_dx1_ip1_pipe, dx1_ip1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_dy1_j_pipe, dy1_j)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_dy1_jp1_pipe, dy1_jp1)
        call read_pipe(p0_les_2_dys_j_reader_p0_les_2_dys_j_pipe, dys_j)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_dzn_k_pipe, dzn_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_dzn_km1_pipe, dzn_km1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_dzn_kp1_pipe, dzn_kp1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_f_i_j_k_pipe, f_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_fx_i_j_k_pipe, fx_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_fy_i_j_k_pipe, fy_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_fz_i_j_k_pipe, fz_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_g_i_j_k_pipe, g_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_h_i_j_k_pipe, h_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_i_j_k_pipe, sm_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_i_j_km1_pipe, sm_i_j_km1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_i_j_kp1_pipe, sm_i_j_kp1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_i_jp1_k_pipe, sm_i_jp1_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_im1_j_k_pipe, sm_im1_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_im1_jp1_k_pipe, sm_im1_jp1_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_ip1_j_k_pipe, sm_ip1_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_ip1_j_km1_pipe, sm_ip1_j_km1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_ip1_j_kp1_pipe, sm_ip1_j_kp1)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_sm_ip1_jp1_k_pipe, sm_ip1_jp1_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_u_i_j_k_pipe, u_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_usum_i_j_k_pipe, usum_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_v_i_j_k_pipe, v_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_vsum_i_j_k_pipe, vsum_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_w_i_j_k_pipe, w_i_j_k)
        call read_pipe(p0_les_2_smart_cache_p0_les_2_wsum_i_j_k_pipe, wsum_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
            evsy2 = sm_i_jp1_k
            evsy1 = sm_i_j_k
            evsx2 = (dy1_jp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dy1_j*((dx1_ip1*sm_i_jp1_k+dx1_i*sm_ip1_jp1_k)/(d&
&&
&x1_i+dx1_ip1)))/(dy1_j+dy1_jp1)
            evsx1 = (dy1_jp1*((dx1_i*sm_im1_j_k+dx1_im1*sm_i_j_k)/(dx1_im1+dx1_i))+dy1_j*((dx1_i*sm_im1_jp1_k+dx1_im1*sm_i_jp1_k)/(d&
&&
&x1_im1+dx1_i)))/(dy1_j+dy1_jp1)
            evsz2 = (dzn_kp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dzn_k*((dx1_ip1*sm_i_j_kp1+dx1_i*sm_ip1_j_kp1)/(d&
&&
&x1_i+dx1_ip1)))/(dzn_k+dzn_kp1)
            evsz1 = (dzn_k*((dx1_ip1*sm_i_j_km1+dx1_i*sm_ip1_j_km1)/(dx1_i+dx1_ip1))+dzn_km1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(d&
&&
&x1_i+dx1_ip1)))/(dzn_km1+dzn_k)
            visvx2 = (evsx2)*(diu2_i_jp1_k+diu4_ip1_j_k)
            visvx1 = (evsx1)*(diu2_im1_jp1_k+diu4_i_j_k)
            visvy2 = (evsy2)*2.*diu5_i_jp1_k
            visvy1 = (evsy1)*2.*diu5_i_j_k
            visvz2 = (evsz2)*(diu6_i_j_kp1+diu8_i_jp1_k)
            visvz1 = (evsz1)*(diu6_i_j_k+diu8_i_jp1_km1)
            vfv = (visvx2-visvx1)/dx1_i+(visvy2-visvy1)/dys_j+(visvz2-visvz1)/dzn_k
            g_i_j_k = (g_i_j_k+vfv)
        end if
        call write_pipe(p0_les_2_p0_les_3_smart_cache_f_i_j_k_pipe, f_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_fx_i_j_k_pipe, fx_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_fy_i_j_k_pipe, fy_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_fz_i_j_k_pipe, fz_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_g_i_j_k_pipe, g_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_h_i_j_k_pipe, h_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_sm_i_j_k_pipe, sm_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_u_i_j_k_pipe, u_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_usum_i_j_k_pipe, usum_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_v_i_j_k_pipe, v_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_vsum_i_j_k_pipe, vsum_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_w_i_j_k_pipe, w_i_j_k)
        call write_pipe(p0_les_2_p0_les_3_smart_cache_wsum_i_j_k_pipe, wsum_i_j_k)
    end do
end subroutine p0_les_2

subroutine p0_les_3_diu3_i_j_k_reader(diu3)
      real, dimension(0:302,0:302,0:82) :: diu3
      real :: diu3_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu3_i_j_k = diu3(a,b,c)
                call write_pipe(p0_les_3_diu3_i_j_k_reader_p0_les_3_smart_cache_diu3_i_j_k_pipe, diu3_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_3_diu3_i_j_k_reader

subroutine p0_les_3_diu6_i_j_k_reader(diu6)
      real, dimension(0:302,0:302,0:82) :: diu6
      real :: diu6_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu6_i_j_k = diu6(a,b,c)
                call write_pipe(p0_les_3_diu6_i_j_k_reader_p0_les_3_smart_cache_diu6_i_j_k_pipe, diu6_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_3_diu6_i_j_k_reader

subroutine p0_les_3_diu7_i_j_k_reader(diu7)
      real, dimension(0:302,0:302,0:82) :: diu7
      real :: diu7_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu7_i_j_k = diu7(a,b,c)
                call write_pipe(p0_les_3_diu7_i_j_k_reader_p0_les_3_smart_cache_diu7_i_j_k_pipe, diu7_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_3_diu7_i_j_k_reader

subroutine p0_les_3_diu8_i_j_k_reader(diu8)
      real, dimension(0:302,0:302,0:82) :: diu8
      real :: diu8_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu8_i_j_k = diu8(a,b,c)
                call write_pipe(p0_les_3_diu8_i_j_k_reader_p0_les_3_smart_cache_diu8_i_j_k_pipe, diu8_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_3_diu8_i_j_k_reader

subroutine p0_les_3_diu9_i_j_k_reader(diu9)
      real, dimension(0:302,0:302,0:82) :: diu9
      real :: diu9_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 82, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                diu9_i_j_k = diu9(a,b,c)
                call write_pipe(p0_les_3_diu9_i_j_k_reader_p0_les_3_smart_cache_diu9_i_j_k_pipe, diu9_i_j_k)
            end do
        end do
    end do
end subroutine p0_les_3_diu9_i_j_k_reader

subroutine p0_les_3_dx1_i_reader(dx1)
      real, dimension(-1:301) :: dx1
      real :: dx1_i
      integer :: a
    do a = -1, 301, 1
        dx1_i = dx1(a)
        call write_pipe(p0_les_3_dx1_i_reader_p0_les_3_smart_cache_dx1_i_pipe, dx1_i)
    end do
end subroutine p0_les_3_dx1_i_reader

subroutine p0_les_3_dy1_j_reader(dy1)
      real, dimension(0:301) :: dy1
      real :: dy1_j
      integer :: a
    do a = 0, 301, 1
        dy1_j = dy1(a)
        call write_pipe(p0_les_3_dy1_j_reader_p0_les_3_smart_cache_dy1_j_pipe, dy1_j)
    end do
end subroutine p0_les_3_dy1_j_reader

subroutine p0_les_3_dzn_k_reader(dzn)
      real, dimension(-1:82) :: dzn
      real :: dzn_k
      integer :: a
    do a = -1, 82, 1
        dzn_k = dzn(a)
        call write_pipe(p0_les_3_dzn_k_reader_p0_les_3_smart_cache_dzn_k_pipe, dzn_k)
    end do
end subroutine p0_les_3_dzn_k_reader

subroutine p0_les_3_smart_cache
      real :: fx_read_in
      real :: fy_read_in
      real :: fz_read_in
      real :: usum_read_in
      real :: vsum_read_in
      real :: wsum_read_in
      real :: w_read_in
      real :: v_read_in
      real :: u_read_in
      real :: g_read_in
      real :: f_read_in
      real :: diu3_read_in
      real :: diu6_read_in
      real :: diu7_read_in
      real :: diu8_read_in
      real :: diu9_read_in
      real :: dx1_read_in
      real :: dy1_read_in
      real :: dzn_read_in
      real :: sm_read_in
      real :: h_read_in
      real, dimension(0:92415) :: fx_buffer
      real, dimension(0:92415) :: fy_buffer
      real, dimension(0:92415) :: fz_buffer
      real, dimension(0:92415) :: usum_buffer
      real, dimension(0:92415) :: vsum_buffer
      real, dimension(0:92415) :: wsum_buffer
      real, dimension(0:92415) :: w_buffer
      real, dimension(0:92415) :: v_buffer
      real, dimension(0:92415) :: u_buffer
      real, dimension(0:92415) :: g_buffer
      real, dimension(0:92415) :: f_buffer
      real, dimension(0:92415) :: diu3_buffer
      real, dimension(0:92415) :: diu6_buffer
      real, dimension(0:92415) :: diu7_buffer
      real, dimension(0:92415) :: diu8_buffer
      real, dimension(0:92415) :: diu9_buffer
      real, dimension(0:92415) :: dx1_buffer
      real, dimension(0:92415) :: dy1_buffer
      real, dimension(0:92415) :: dzn_buffer
      real, dimension(0:92415) :: sm_buffer
      real, dimension(0:92415) :: h_buffer
      real :: fx_i_j_k
      real :: fy_i_j_k
      real :: fz_i_j_k
      real :: usum_i_j_k
      real :: vsum_i_j_k
      real :: wsum_i_j_k
      real :: w_i_j_k
      real :: v_i_j_k
      real :: u_i_j_k
      real :: g_i_j_k
      real :: f_i_j_k
      real :: diu3_im1_j_kp1
      real :: diu3_i_j_kp1
      real :: diu6_i_jm1_kp1
      real :: diu6_i_j_kp1
      real :: diu7_ip1_j_k
      real :: diu7_i_j_k
      real :: diu8_i_jp1_k
      real :: diu8_i_j_k
      real :: diu9_i_j_kp1
      real :: diu9_i_j_k
      real :: dx1_ip1
      real :: dx1_i
      real :: dx1_im1
      real :: dy1_jp1
      real :: dy1_j
      real :: dy1_jm1
      real :: dzn_kp1
      real :: dzn_k
      real :: sm_im1_j_kp1
      real :: sm_im1_j_k
      real :: sm_i_jm1_kp1
      real :: sm_i_j_kp1
      real :: sm_i_j_k
      real :: sm_i_jp1_kp1
      real :: sm_i_jp1_k
      real :: sm_ip1_j_kp1
      real :: sm_ip1_j_k
      real :: sm_i_jm1_k
      real :: h_i_j_k
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7737407 
      integer, parameter :: smartCacheSize = 92416 
      integer, parameter :: maxPositiveOffset = 92112 
      integer, parameter :: maxNegativeOffset = 303 
      integer, parameter :: driverLoopSize = 7645296 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            fx_buffer(i) = fx_buffer(i+1)
            fy_buffer(i) = fy_buffer(i+1)
            fz_buffer(i) = fz_buffer(i+1)
            usum_buffer(i) = usum_buffer(i+1)
            vsum_buffer(i) = vsum_buffer(i+1)
            wsum_buffer(i) = wsum_buffer(i+1)
            w_buffer(i) = w_buffer(i+1)
            v_buffer(i) = v_buffer(i+1)
            u_buffer(i) = u_buffer(i+1)
            g_buffer(i) = g_buffer(i+1)
            f_buffer(i) = f_buffer(i+1)
            diu3_buffer(i) = diu3_buffer(i+1)
            diu6_buffer(i) = diu6_buffer(i+1)
            diu7_buffer(i) = diu7_buffer(i+1)
            diu8_buffer(i) = diu8_buffer(i+1)
            diu9_buffer(i) = diu9_buffer(i+1)
            dx1_buffer(i) = dx1_buffer(i+1)
            dy1_buffer(i) = dy1_buffer(i+1)
            dzn_buffer(i) = dzn_buffer(i+1)
            sm_buffer(i) = sm_buffer(i+1)
            h_buffer(i) = h_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p0_les_3_diu3_i_j_k_reader_p0_les_3_smart_cache_diu3_i_j_k_pipe, diu3_read_in)
            diu3_buffer(92415) = diu3_read_in
            call read_pipe(p0_les_3_diu6_i_j_k_reader_p0_les_3_smart_cache_diu6_i_j_k_pipe, diu6_read_in)
            diu6_buffer(92415) = diu6_read_in
            call read_pipe(p0_les_3_diu7_i_j_k_reader_p0_les_3_smart_cache_diu7_i_j_k_pipe, diu7_read_in)
            diu7_buffer(92415) = diu7_read_in
            call read_pipe(p0_les_3_diu8_i_j_k_reader_p0_les_3_smart_cache_diu8_i_j_k_pipe, diu8_read_in)
            diu8_buffer(92415) = diu8_read_in
            call read_pipe(p0_les_3_diu9_i_j_k_reader_p0_les_3_smart_cache_diu9_i_j_k_pipe, diu9_read_in)
            diu9_buffer(92415) = diu9_read_in
            call read_pipe(p0_les_3_dx1_i_reader_p0_les_3_smart_cache_dx1_i_pipe, dx1_read_in)
            dx1_buffer(92415) = dx1_read_in
            call read_pipe(p0_les_3_dy1_j_reader_p0_les_3_smart_cache_dy1_j_pipe, dy1_read_in)
            dy1_buffer(92415) = dy1_read_in
            call read_pipe(p0_les_3_dzn_k_reader_p0_les_3_smart_cache_dzn_k_pipe, dzn_read_in)
            dzn_buffer(92415) = dzn_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_f_i_j_k_pipe, f_read_in)
            f_buffer(92415) = f_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_fx_i_j_k_pipe, fx_read_in)
            fx_buffer(92415) = fx_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_fy_i_j_k_pipe, fy_read_in)
            fy_buffer(92415) = fy_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_fz_i_j_k_pipe, fz_read_in)
            fz_buffer(92415) = fz_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_g_i_j_k_pipe, g_read_in)
            g_buffer(92415) = g_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_h_i_j_k_pipe, h_read_in)
            h_buffer(92415) = h_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_sm_i_j_k_pipe, sm_read_in)
            sm_buffer(92415) = sm_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_u_i_j_k_pipe, u_read_in)
            u_buffer(92415) = u_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_usum_i_j_k_pipe, usum_read_in)
            usum_buffer(92415) = usum_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_v_i_j_k_pipe, v_read_in)
            v_buffer(92415) = v_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_vsum_i_j_k_pipe, vsum_read_in)
            vsum_buffer(92415) = vsum_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_w_i_j_k_pipe, w_read_in)
            w_buffer(92415) = w_read_in
            call read_pipe(p0_les_2_p0_les_3_smart_cache_wsum_i_j_k_pipe, wsum_read_in)
            wsum_buffer(92415) = wsum_read_in
        end if
        if (compIndex>=0) then
            diu3_i_j_kp1 = diu3_buffer(92112)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu3_i_j_kp1_pipe, diu3_i_j_kp1)
            diu3_im1_j_kp1 = diu3_buffer(92111)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu3_im1_j_kp1_pipe, diu3_im1_j_kp1)
            diu6_i_j_kp1 = diu6_buffer(92112)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu6_i_j_kp1_pipe, diu6_i_j_kp1)
            diu6_i_jm1_kp1 = diu6_buffer(92112)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu6_i_jm1_kp1_pipe, diu6_i_jm1_kp1)
            diu7_i_j_k = diu7_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu7_i_j_k_pipe, diu7_i_j_k)
            diu7_ip1_j_k = diu7_buffer(304)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu7_ip1_j_k_pipe, diu7_ip1_j_k)
            diu8_i_j_k = diu8_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu8_i_j_k_pipe, diu8_i_j_k)
            diu8_i_jp1_k = diu8_buffer(606)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu8_i_jp1_k_pipe, diu8_i_jp1_k)
            diu9_i_j_k = diu9_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu9_i_j_k_pipe, diu9_i_j_k)
            diu9_i_j_kp1 = diu9_buffer(92112)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_diu9_i_j_kp1_pipe, diu9_i_j_kp1)
            dx1_i = dx1_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_dx1_i_pipe, dx1_i)
            dx1_im1 = dx1_buffer(302)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_dx1_im1_pipe, dx1_im1)
            dx1_ip1 = dx1_buffer(304)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_dx1_ip1_pipe, dx1_ip1)
            dy1_j = dy1_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_dy1_j_pipe, dy1_j)
            dy1_jm1 = dy1_buffer(302)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_dy1_jm1_pipe, dy1_jm1)
            dy1_jp1 = dy1_buffer(304)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_dy1_jp1_pipe, dy1_jp1)
            dzn_k = dzn_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_dzn_k_pipe, dzn_k)
            dzn_kp1 = dzn_buffer(304)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_dzn_kp1_pipe, dzn_kp1)
            f_i_j_k = f_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_f_i_j_k_pipe, f_i_j_k)
            fx_i_j_k = fx_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_fx_i_j_k_pipe, fx_i_j_k)
            fy_i_j_k = fy_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_fy_i_j_k_pipe, fy_i_j_k)
            fz_i_j_k = fz_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_fz_i_j_k_pipe, fz_i_j_k)
            g_i_j_k = g_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_g_i_j_k_pipe, g_i_j_k)
            h_i_j_k = h_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_h_i_j_k_pipe, h_i_j_k)
            sm_i_j_k = sm_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_j_k_pipe, sm_i_j_k)
            sm_i_j_kp1 = sm_buffer(92112)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_j_kp1_pipe, sm_i_j_kp1)
            sm_i_jm1_k = sm_buffer(0)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_jm1_k_pipe, sm_i_jm1_k)
            sm_i_jm1_kp1 = sm_buffer(91809)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_jm1_kp1_pipe, sm_i_jm1_kp1)
            sm_i_jp1_k = sm_buffer(606)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_jp1_k_pipe, sm_i_jp1_k)
            sm_i_jp1_kp1 = sm_buffer(92415)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_jp1_kp1_pipe, sm_i_jp1_kp1)
            sm_im1_j_k = sm_buffer(302)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_im1_j_k_pipe, sm_im1_j_k)
            sm_im1_j_kp1 = sm_buffer(92111)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_im1_j_kp1_pipe, sm_im1_j_kp1)
            sm_ip1_j_k = sm_buffer(304)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_ip1_j_k_pipe, sm_ip1_j_k)
            sm_ip1_j_kp1 = sm_buffer(92113)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_sm_ip1_j_kp1_pipe, sm_ip1_j_kp1)
            u_i_j_k = u_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_u_i_j_k_pipe, u_i_j_k)
            usum_i_j_k = usum_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_usum_i_j_k_pipe, usum_i_j_k)
            v_i_j_k = v_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_v_i_j_k_pipe, v_i_j_k)
            vsum_i_j_k = vsum_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_vsum_i_j_k_pipe, vsum_i_j_k)
            w_i_j_k = w_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_w_i_j_k_pipe, w_i_j_k)
            wsum_i_j_k = wsum_buffer(303)
            call write_pipe(p0_les_3_smart_cache_p0_les_3_wsum_i_j_k_pipe, wsum_i_j_k)
        end if
    end do
end subroutine p0_les_3_smart_cache

subroutine p0_les_3
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4) :: diu3_im1_j_kp1
      real(4) :: diu3_i_j_kp1
      real(4) :: diu6_i_jm1_kp1
      real(4) :: diu6_i_j_kp1
      real(4) :: diu7_ip1_j_k
      real(4) :: diu7_i_j_k
      real(4) :: diu8_i_jp1_k
      real(4) :: diu8_i_j_k
      real(4) :: diu9_i_j_kp1
      real(4) :: diu9_i_j_k
      real(4) :: dx1_ip1
      real(4) :: dx1_i
      real(4) :: dx1_im1
      real(4) :: dy1_jp1
      real(4) :: dy1_j
      real(4) :: dy1_jm1
      real(4) :: dzn_kp1
      real(4) :: dzn_k
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4) :: h_i_j_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: sm_im1_j_kp1
      real(4) :: sm_im1_j_k
      real(4) :: sm_i_jm1_kp1
      real(4) :: sm_i_j_kp1
      real(4) :: sm_i_j_k
      real(4) :: sm_i_jp1_kp1
      real(4) :: sm_i_jp1_k
      real(4) :: sm_ip1_j_kp1
      real(4) :: sm_ip1_j_k
      real(4) :: sm_i_jm1_k
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
    do count = 0, nloop, 1
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu3_i_j_kp1_pipe, diu3_i_j_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu3_im1_j_kp1_pipe, diu3_im1_j_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu6_i_j_kp1_pipe, diu6_i_j_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu6_i_jm1_kp1_pipe, diu6_i_jm1_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu7_i_j_k_pipe, diu7_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu7_ip1_j_k_pipe, diu7_ip1_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu8_i_j_k_pipe, diu8_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu8_i_jp1_k_pipe, diu8_i_jp1_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu9_i_j_k_pipe, diu9_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_diu9_i_j_kp1_pipe, diu9_i_j_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_dx1_i_pipe, dx1_i)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_dx1_im1_pipe, dx1_im1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_dx1_ip1_pipe, dx1_ip1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_dy1_j_pipe, dy1_j)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_dy1_jm1_pipe, dy1_jm1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_dy1_jp1_pipe, dy1_jp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_dzn_k_pipe, dzn_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_dzn_kp1_pipe, dzn_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_f_i_j_k_pipe, f_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_fx_i_j_k_pipe, fx_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_fy_i_j_k_pipe, fy_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_fz_i_j_k_pipe, fz_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_g_i_j_k_pipe, g_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_h_i_j_k_pipe, h_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_j_k_pipe, sm_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_j_kp1_pipe, sm_i_j_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_jm1_k_pipe, sm_i_jm1_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_jm1_kp1_pipe, sm_i_jm1_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_jp1_k_pipe, sm_i_jp1_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_i_jp1_kp1_pipe, sm_i_jp1_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_im1_j_k_pipe, sm_im1_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_im1_j_kp1_pipe, sm_im1_j_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_ip1_j_k_pipe, sm_ip1_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_sm_ip1_j_kp1_pipe, sm_ip1_j_kp1)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_u_i_j_k_pipe, u_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_usum_i_j_k_pipe, usum_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_v_i_j_k_pipe, v_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_vsum_i_j_k_pipe, vsum_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_w_i_j_k_pipe, w_i_j_k)
        call read_pipe(p0_les_3_smart_cache_p0_les_3_wsum_i_j_k_pipe, wsum_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            evsz2 = sm_i_j_kp1
            evsz1 = sm_i_j_k
            evsx2 = (dzn_kp1*((dx1_ip1*sm_i_j_k+dx1_i*sm_ip1_j_k)/(dx1_i+dx1_ip1))+dzn_k*((dx1_ip1*sm_i_j_kp1+dx1_i*sm_ip1_j_kp1)/(d&
&&
&x1_i+dx1_ip1)))/(dzn_k+dzn_kp1)
            evsx1 = (dzn_kp1*((dx1_i*sm_im1_j_k+dx1_im1*sm_i_j_k)/(dx1_im1+dx1_i))+dzn_k*((dx1_i*sm_im1_j_kp1+dx1_im1*sm_i_j_kp1)/(d&
&&
&x1_im1+dx1_i)))/(dzn_k+dzn_kp1)
            evsy2 = (dzn_kp1*((dy1_jp1*sm_i_j_k+dy1_j*sm_i_jp1_k)/(dy1_j+dy1_jp1))+dzn_k*((dy1_jp1*sm_i_j_kp1+dy1_j*sm_i_jp1_kp1)/(d&
&&
&y1_j+dy1_jp1)))/(dzn_k+dzn_kp1)
            evsy1 = (dzn_kp1*((dy1_j*sm_i_jm1_k+dy1_jm1*sm_i_j_k)/(dy1_jm1+dy1_j))+dzn_k*((dy1_j*sm_i_jm1_kp1+dy1_jm1*sm_i_j_kp1)/(d&
&&
&y1_jm1+dy1_j)))/(dzn_k+dzn_kp1)
            viswx2 = (evsx2)*(diu3_i_j_kp1+diu7_ip1_j_k)
            viswx1 = (evsx1)*(diu3_im1_j_kp1+diu7_i_j_k)
            viswy2 = (evsy2)*(diu6_i_j_kp1+diu8_i_jp1_k)
            viswy1 = (evsy1)*(diu6_i_jm1_kp1+diu8_i_j_k)
            viswz2 = (evsz2)*2.*diu9_i_j_kp1
            viswz1 = (evsz1)*2.*diu9_i_j_k
            vfw = (viswx2-viswx1)/dx1_i+(viswy2-viswy1)/dy1_j+(viswz2-viswz1)/dzn_k
            h_i_j_k = (h_i_j_k+vfw)
        end if
        call write_pipe(p0_les_3_p0_adam_f_i_j_k_pipe, f_i_j_k)
        call write_pipe(p0_les_3_p0_adam_g_i_j_k_pipe, g_i_j_k)
        call write_pipe(p0_les_3_p0_adam_h_i_j_k_pipe, h_i_j_k)
    end do
end subroutine p0_les_3

subroutine p0_adam_fold_i_j_k_reader(fold)
      real, dimension(1:300,1:300,1:80) :: fold
      real :: fold_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 1, 80, 1
        do b = 1, 300, 1
            do c = 1, 300, 1
                fold_i_j_k = fold(a,b,c)
                call write_pipe(p0_adam_fold_i_j_k_reader_p0_adam_fold_i_j_k_pipe, fold_i_j_k)
            end do
        end do
    end do
end subroutine p0_adam_fold_i_j_k_reader

subroutine p0_adam_gold_i_j_k_reader(gold)
      real, dimension(1:300,1:300,1:80) :: gold
      real :: gold_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 1, 80, 1
        do b = 1, 300, 1
            do c = 1, 300, 1
                gold_i_j_k = gold(a,b,c)
                call write_pipe(p0_adam_gold_i_j_k_reader_p0_adam_gold_i_j_k_pipe, gold_i_j_k)
            end do
        end do
    end do
end subroutine p0_adam_gold_i_j_k_reader

subroutine p0_adam_hold_i_j_k_reader(hold)
      real, dimension(1:300,1:300,1:80) :: hold
      real :: hold_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 1, 80, 1
        do b = 1, 300, 1
            do c = 1, 300, 1
                hold_i_j_k = hold(a,b,c)
                call write_pipe(p0_adam_hold_i_j_k_reader_p0_adam_hold_i_j_k_pipe, hold_i_j_k)
            end do
        end do
    end do
end subroutine p0_adam_hold_i_j_k_reader

subroutine p0_adam
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4) :: f_i_j_k
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4) :: fold_i_j_k
      real(4) :: g_i_j_k
      real(4) :: gold_i_j_k
      real(4) :: h_i_j_k
      real(4) :: hold_i_j_k
      integer :: i
      integer :: j
      integer :: k
    do count = 0, nloop, 1
        call read_pipe(p0_les_3_p0_adam_f_i_j_k_pipe, f_i_j_k)
        call read_pipe(p0_adam_fold_i_j_k_reader_p0_adam_fold_i_j_k_pipe, fold_i_j_k)
        call read_pipe(p0_les_3_p0_adam_g_i_j_k_pipe, g_i_j_k)
        call read_pipe(p0_adam_gold_i_j_k_reader_p0_adam_gold_i_j_k_pipe, gold_i_j_k)
        call read_pipe(p0_les_3_p0_adam_h_i_j_k_pipe, h_i_j_k)
        call read_pipe(p0_adam_hold_i_j_k_reader_p0_adam_hold_i_j_k_pipe, hold_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            fd = f_i_j_k
            gd = g_i_j_k
            hd = h_i_j_k
            f_i_j_k = 1.5*f_i_j_k-0.5*fold_i_j_k
            g_i_j_k = 1.5*g_i_j_k-0.5*gold_i_j_k
            h_i_j_k = 1.5*h_i_j_k-0.5*hold_i_j_k
            fold_i_j_k = fd
            gold_i_j_k = gd
            hold_i_j_k = hd
        end if
        call write_pipe(p0_adam_p0_press_0_smart_cache_f_i_j_k_pipe, f_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_fold_i_j_k_pipe, fold_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_fx_i_j_k_pipe, fx_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_fy_i_j_k_pipe, fy_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_fz_i_j_k_pipe, fz_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_g_i_j_k_pipe, g_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_gold_i_j_k_pipe, gold_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_h_i_j_k_pipe, h_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_hold_i_j_k_pipe, hold_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_u_i_j_k_pipe, u_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_usum_i_j_k_pipe, usum_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_v_i_j_k_pipe, v_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_vsum_i_j_k_pipe, vsum_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_w_i_j_k_pipe, w_i_j_k)
        call write_pipe(p0_adam_p0_press_0_smart_cache_wsum_i_j_k_pipe, wsum_i_j_k)
    end do
end subroutine p0_adam

subroutine p0_press_0_dx1_i_reader(dx1)
      real, dimension(-1:301) :: dx1
      real :: dx1_i
      integer :: a
    do a = -1, 301, 1
        dx1_i = dx1(a)
        call write_pipe(p0_press_0_dx1_i_reader_p0_press_0_dx1_i_pipe, dx1_i)
    end do
end subroutine p0_press_0_dx1_i_reader

subroutine p0_press_0_dy1_j_reader(dy1)
      real, dimension(0:301) :: dy1
      real :: dy1_j
      integer :: a
    do a = 0, 301, 1
        dy1_j = dy1(a)
        call write_pipe(p0_press_0_dy1_j_reader_p0_press_0_dy1_j_pipe, dy1_j)
    end do
end subroutine p0_press_0_dy1_j_reader

subroutine p0_press_0_dzn_k_reader(dzn)
      real, dimension(-1:82) :: dzn
      real :: dzn_k
      integer :: a
    do a = -1, 82, 1
        dzn_k = dzn(a)
        call write_pipe(p0_press_0_dzn_k_reader_p0_press_0_dzn_k_pipe, dzn_k)
    end do
end subroutine p0_press_0_dzn_k_reader

subroutine p0_press_0_rhs_i_j_k_reader(rhs)
      real, dimension(0:301,0:301,0:81) :: rhs
      real :: rhs_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 301, 1
            do c = 0, 301, 1
                rhs_i_j_k = rhs(a,b,c)
                call write_pipe(p0_press_0_rhs_i_j_k_reader_p0_press_0_rhs_i_j_k_pipe, rhs_i_j_k)
            end do
        end do
    end do
end subroutine p0_press_0_rhs_i_j_k_reader

subroutine p0_press_0_smart_cache
      real :: fx_read_in
      real :: fy_read_in
      real :: fz_read_in
      real :: usum_read_in
      real :: vsum_read_in
      real :: wsum_read_in
      real :: fold_read_in
      real :: gold_read_in
      real :: hold_read_in
      real :: f_read_in
      real :: g_read_in
      real :: h_read_in
      real :: u_read_in
      real :: v_read_in
      real :: w_read_in
      real, dimension(0:91506) :: fx_buffer
      real, dimension(0:91506) :: fy_buffer
      real, dimension(0:91506) :: fz_buffer
      real, dimension(0:91506) :: usum_buffer
      real, dimension(0:91506) :: vsum_buffer
      real, dimension(0:91506) :: wsum_buffer
      real, dimension(0:91506) :: fold_buffer
      real, dimension(0:91506) :: gold_buffer
      real, dimension(0:91506) :: hold_buffer
      real, dimension(0:91506) :: f_buffer
      real, dimension(0:91506) :: g_buffer
      real, dimension(0:91506) :: h_buffer
      real, dimension(0:91506) :: u_buffer
      real, dimension(0:91506) :: v_buffer
      real, dimension(0:91506) :: w_buffer
      real :: fx_i_j_k
      real :: fy_i_j_k
      real :: fz_i_j_k
      real :: usum_i_j_k
      real :: vsum_i_j_k
      real :: wsum_i_j_k
      real :: fold_i_j_k
      real :: gold_i_j_k
      real :: hold_i_j_k
      real :: f_i_j_k
      real :: f_im1_j_k
      real :: g_i_j_k
      real :: g_i_jm1_k
      real :: h_i_j_k
      real :: h_i_j_km1
      real :: u_i_j_k
      real :: u_im1_j_k
      real :: v_i_j_k
      real :: v_i_jm1_k
      real :: w_i_j_k
      real :: w_i_j_km1
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7645295 
      integer, parameter :: smartCacheSize = 91507 
      integer, parameter :: maxPositiveOffset = 0 
      integer, parameter :: maxNegativeOffset = 91506 
      integer, parameter :: driverLoopSize = 7645296 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            fx_buffer(i) = fx_buffer(i+1)
            fy_buffer(i) = fy_buffer(i+1)
            fz_buffer(i) = fz_buffer(i+1)
            usum_buffer(i) = usum_buffer(i+1)
            vsum_buffer(i) = vsum_buffer(i+1)
            wsum_buffer(i) = wsum_buffer(i+1)
            fold_buffer(i) = fold_buffer(i+1)
            gold_buffer(i) = gold_buffer(i+1)
            hold_buffer(i) = hold_buffer(i+1)
            f_buffer(i) = f_buffer(i+1)
            g_buffer(i) = g_buffer(i+1)
            h_buffer(i) = h_buffer(i+1)
            u_buffer(i) = u_buffer(i+1)
            v_buffer(i) = v_buffer(i+1)
            w_buffer(i) = w_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p0_adam_p0_press_0_smart_cache_f_i_j_k_pipe, f_read_in)
            f_buffer(91506) = f_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_fold_i_j_k_pipe, fold_read_in)
            fold_buffer(91506) = fold_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_fx_i_j_k_pipe, fx_read_in)
            fx_buffer(91506) = fx_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_fy_i_j_k_pipe, fy_read_in)
            fy_buffer(91506) = fy_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_fz_i_j_k_pipe, fz_read_in)
            fz_buffer(91506) = fz_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_g_i_j_k_pipe, g_read_in)
            g_buffer(91506) = g_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_gold_i_j_k_pipe, gold_read_in)
            gold_buffer(91506) = gold_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_h_i_j_k_pipe, h_read_in)
            h_buffer(91506) = h_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_hold_i_j_k_pipe, hold_read_in)
            hold_buffer(91506) = hold_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_u_i_j_k_pipe, u_read_in)
            u_buffer(91506) = u_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_usum_i_j_k_pipe, usum_read_in)
            usum_buffer(91506) = usum_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_v_i_j_k_pipe, v_read_in)
            v_buffer(91506) = v_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_vsum_i_j_k_pipe, vsum_read_in)
            vsum_buffer(91506) = vsum_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_w_i_j_k_pipe, w_read_in)
            w_buffer(91506) = w_read_in
            call read_pipe(p0_adam_p0_press_0_smart_cache_wsum_i_j_k_pipe, wsum_read_in)
            wsum_buffer(91506) = wsum_read_in
        end if
        if (compIndex>=0) then
            f_i_j_k = f_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_f_i_j_k_pipe, f_i_j_k)
            f_im1_j_k = f_buffer(91505)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_f_im1_j_k_pipe, f_im1_j_k)
            fold_i_j_k = fold_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_fold_i_j_k_pipe, fold_i_j_k)
            fx_i_j_k = fx_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_fx_i_j_k_pipe, fx_i_j_k)
            fy_i_j_k = fy_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_fy_i_j_k_pipe, fy_i_j_k)
            fz_i_j_k = fz_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_fz_i_j_k_pipe, fz_i_j_k)
            g_i_j_k = g_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_g_i_j_k_pipe, g_i_j_k)
            g_i_jm1_k = g_buffer(91205)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_g_i_jm1_k_pipe, g_i_jm1_k)
            gold_i_j_k = gold_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_gold_i_j_k_pipe, gold_i_j_k)
            h_i_j_k = h_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_h_i_j_k_pipe, h_i_j_k)
            h_i_j_km1 = h_buffer(905)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_h_i_j_km1_pipe, h_i_j_km1)
            hold_i_j_k = hold_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_hold_i_j_k_pipe, hold_i_j_k)
            u_i_j_k = u_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_u_i_j_k_pipe, u_i_j_k)
            u_im1_j_k = u_buffer(91505)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_u_im1_j_k_pipe, u_im1_j_k)
            usum_i_j_k = usum_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_usum_i_j_k_pipe, usum_i_j_k)
            v_i_j_k = v_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_v_i_j_k_pipe, v_i_j_k)
            v_i_jm1_k = v_buffer(91204)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_v_i_jm1_k_pipe, v_i_jm1_k)
            vsum_i_j_k = vsum_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_vsum_i_j_k_pipe, vsum_i_j_k)
            w_i_j_k = w_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_w_i_j_k_pipe, w_i_j_k)
            w_i_j_km1 = w_buffer(0)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_w_i_j_km1_pipe, w_i_j_km1)
            wsum_i_j_k = wsum_buffer(91506)
            call write_pipe(p0_press_0_smart_cache_p0_press_0_wsum_i_j_k_pipe, wsum_i_j_k)
        end if
    end do
end subroutine p0_press_0_smart_cache

subroutine p0_press_0(dt)
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4), intent(In) :: dt
      real(4) :: dx1_i
      real(4) :: dy1_j
      real(4) :: dzn_k
      real(4) :: f_i_j_k
      real(4) :: f_im1_j_k
      real(4) :: g_i_j_k
      real(4) :: g_i_jm1_k
      real(4) :: h_i_j_k
      real(4) :: h_i_j_km1
      integer :: i
      integer :: j
      integer :: k
      real(4) :: rhs_i_j_k
      real(4) :: u_i_j_k
      real(4) :: u_im1_j_k
      real(4) :: v_i_j_k
      real(4) :: v_i_jm1_k
      real(4) :: w_i_j_k
      real(4) :: w_i_j_km1
    do count = 0, nloop, 1
        call read_pipe(p0_press_0_dx1_i_reader_p0_press_0_dx1_i_pipe, dx1_i)
        call read_pipe(p0_press_0_dy1_j_reader_p0_press_0_dy1_j_pipe, dy1_j)
        call read_pipe(p0_press_0_dzn_k_reader_p0_press_0_dzn_k_pipe, dzn_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_f_i_j_k_pipe, f_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_f_im1_j_k_pipe, f_im1_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_fold_i_j_k_pipe, fold_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_fx_i_j_k_pipe, fx_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_fy_i_j_k_pipe, fy_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_fz_i_j_k_pipe, fz_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_g_i_j_k_pipe, g_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_g_i_jm1_k_pipe, g_i_jm1_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_gold_i_j_k_pipe, gold_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_h_i_j_k_pipe, h_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_h_i_j_km1_pipe, h_i_j_km1)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_hold_i_j_k_pipe, hold_i_j_k)
        call read_pipe(p0_press_0_rhs_i_j_k_reader_p0_press_0_rhs_i_j_k_pipe, rhs_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_u_i_j_k_pipe, u_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_u_im1_j_k_pipe, u_im1_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_usum_i_j_k_pipe, usum_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_v_i_j_k_pipe, v_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_v_i_jm1_k_pipe, v_i_jm1_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_vsum_i_j_k_pipe, vsum_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_w_i_j_k_pipe, w_i_j_k)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_w_i_j_km1_pipe, w_i_j_km1)
        call read_pipe(p0_press_0_smart_cache_p0_press_0_wsum_i_j_k_pipe, wsum_i_j_k)
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            rhs_i_j_k = (-u_im1_j_k+u_i_j_k)/dx1_i+(-v_i_jm1_k+v_i_j_k)/dy1_j+(-w_i_j_km1+w_i_j_k)/dzn_k
            rhs_i_j_k = (f_i_j_k-f_im1_j_k)/dx1_i+(g_i_j_k-g_i_jm1_k)/dy1_j+(h_i_j_k-h_i_j_km1)/dzn_k+rhs_i_j_k/dt
        end if
        call write_pipe(p0_press_0_p0_press_1_rhs_i_j_k_pipe, rhs_i_j_k)
    end do
end subroutine p0_press_0

subroutine p0_press_1_dx1_i_reader(dx1)
      real, dimension(-1:301) :: dx1
      real :: dx1_i
      integer :: a
    do a = -1, 301, 1
        dx1_i = dx1(a)
        call write_pipe(p0_press_1_dx1_i_reader_p0_press_1_dx1_i_pipe, dx1_i)
    end do
end subroutine p0_press_1_dx1_i_reader

subroutine p0_press_1_dy1_j_reader(dy1)
      real, dimension(0:301) :: dy1
      real :: dy1_j
      integer :: a
    do a = 0, 301, 1
        dy1_j = dy1(a)
        call write_pipe(p0_press_1_dy1_j_reader_p0_press_1_dy1_j_pipe, dy1_j)
    end do
end subroutine p0_press_1_dy1_j_reader

subroutine p0_press_1_dzn_k_reader(dzn)
      real, dimension(-1:82) :: dzn
      real :: dzn_k
      integer :: a
    do a = -1, 82, 1
        dzn_k = dzn(a)
        call write_pipe(p0_press_1_dzn_k_reader_p0_press_1_dzn_k_pipe, dzn_k)
    end do
end subroutine p0_press_1_dzn_k_reader

subroutine p0_press_1
      integer, parameter :: nloop = 7645295 
      integer :: count
      real(4) :: dx1_i
      real(4) :: dy1_j
      real(4) :: dzn_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: rhs_i_j_k
      real(4) :: rhsav
      real(4) :: area
    do count = 0, nloop, 1
        call read_pipe(p0_press_1_dx1_i_reader_p0_press_1_dx1_i_pipe, dx1_i)
        call read_pipe(p0_press_1_dy1_j_reader_p0_press_1_dy1_j_pipe, dy1_j)
        call read_pipe(p0_press_1_dzn_k_reader_p0_press_1_dzn_k_pipe, dzn_k)
        call read_pipe(p0_press_0_p0_press_1_rhs_i_j_k_pipe, rhs_i_j_k)
        rhsav = 0.0
        area = 0.0
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            rhsav = rhsav+dx1_i*dy1_j*dzn_k*rhs_i_j_k
            area = area+dx1_i*dy1_j*dzn_k
        end if
    end do
    do count = 0, nloop, 1
        call write_pipe(p0_press_1_p0_press_2_area_pipe, area)
        call write_pipe(p0_press_1_p0_press_2_f_i_j_k_pipe, f_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_fold_i_j_k_pipe, fold_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_fx_i_j_k_pipe, fx_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_fy_i_j_k_pipe, fy_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_fz_i_j_k_pipe, fz_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_g_i_j_k_pipe, g_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_gold_i_j_k_pipe, gold_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_h_i_j_k_pipe, h_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_hold_i_j_k_pipe, hold_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_rhs_i_j_k_pipe, rhs_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_rhsav_pipe, rhsav)
        call write_pipe(p0_press_1_p0_press_2_u_i_j_k_pipe, u_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_usum_i_j_k_pipe, usum_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_v_i_j_k_pipe, v_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_vsum_i_j_k_pipe, vsum_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_w_i_j_k_pipe, w_i_j_k)
        call write_pipe(p0_press_1_p0_press_2_wsum_i_j_k_pipe, wsum_i_j_k)
    end do
end subroutine p0_press_1

subroutine p0_press_2
      integer, parameter :: nloop = 7645295 
      integer :: count
      integer :: i
      integer :: j
      integer :: k
      real(4) :: rhs_i_j_k
      real(4) :: rhsav
      real(4) :: area
    do count = 0, nloop, 1
        call read_pipe(p0_press_1_p0_press_2_area_pipe, area)
        call read_pipe(p0_press_1_p0_press_2_f_i_j_k_pipe, f_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_fold_i_j_k_pipe, fold_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_fx_i_j_k_pipe, fx_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_fy_i_j_k_pipe, fy_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_fz_i_j_k_pipe, fz_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_g_i_j_k_pipe, g_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_gold_i_j_k_pipe, gold_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_h_i_j_k_pipe, h_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_hold_i_j_k_pipe, hold_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_rhs_i_j_k_pipe, rhs_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_rhsav_pipe, rhsav)
        call read_pipe(p0_press_1_p0_press_2_u_i_j_k_pipe, u_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_usum_i_j_k_pipe, usum_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_v_i_j_k_pipe, v_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_vsum_i_j_k_pipe, vsum_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_w_i_j_k_pipe, w_i_j_k)
        call read_pipe(p0_press_1_p0_press_2_wsum_i_j_k_pipe, wsum_i_j_k)
        rhsav = rhsav/area
        i = mod(count, 304)
        j = mod(count/304, 303)
        k = count/92112
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            rhs_i_j_k = rhs_i_j_k-rhsav
        end if
        call write_pipe(p0_press_2_p0_press_2_output_writer_f_i_j_k_pipe, f_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_fold_i_j_k_pipe, fold_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_fx_i_j_k_pipe, fx_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_fy_i_j_k_pipe, fy_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_fz_i_j_k_pipe, fz_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_g_i_j_k_pipe, g_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_gold_i_j_k_pipe, gold_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_h_i_j_k_pipe, h_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_hold_i_j_k_pipe, hold_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_rhs_i_j_k_pipe, rhs_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_u_i_j_k_pipe, u_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_usum_i_j_k_pipe, usum_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_v_i_j_k_pipe, v_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_vsum_i_j_k_pipe, vsum_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_w_i_j_k_pipe, w_i_j_k)
        call write_pipe(p0_press_2_p0_press_2_output_writer_wsum_i_j_k_pipe, wsum_i_j_k)
    end do
end subroutine p0_press_2

subroutine p0_press_2_output_writer(f,fold,fx,fy,fz,g,gold,h,hold,rhs,u,usum,v,vsum,w,wsum)
      real :: f_i_j_k_read_in
      real, dimension(0:300,0:300,0:80) :: f
      real :: fold_i_j_k_read_in
      real, dimension(1:300,1:300,1:80) :: fold
      real :: fx_i_j_k_read_in
      real, dimension(0:300,0:300,0:80) :: fx
      real :: fy_i_j_k_read_in
      real, dimension(0:300,0:300,0:80) :: fy
      real :: fz_i_j_k_read_in
      real, dimension(0:300,0:300,0:80) :: fz
      real :: g_i_j_k_read_in
      real, dimension(0:300,0:300,0:80) :: g
      real :: gold_i_j_k_read_in
      real, dimension(1:300,1:300,1:80) :: gold
      real :: h_i_j_k_read_in
      real, dimension(0:300,0:300,0:80) :: h
      real :: hold_i_j_k_read_in
      real, dimension(1:300,1:300,1:80) :: hold
      real :: rhs_i_j_k_read_in
      real, dimension(0:301,0:301,0:81) :: rhs
      real :: u_i_j_k_read_in
      real, dimension(0:301,-1:301,0:81) :: u
      real :: usum_i_j_k_read_in
      real, dimension(0:300,0:300,0:80) :: usum
      real :: v_i_j_k_read_in
      real, dimension(0:301,-1:301,0:81) :: v
      real :: vsum_i_j_k_read_in
      real, dimension(0:300,0:300,0:80) :: vsum
      real :: w_i_j_k_read_in
      real, dimension(0:301,-1:301,-1:81) :: w
      real :: wsum_i_j_k_read_in
      real, dimension(0:300,0:300,0:80) :: wsum
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 301, 1
            do c = 0, 301, 1
                call read_pipe(p0_press_2_p0_press_2_output_writer_f_i_j_k_pipe, f_i_j_k_read_in)
                f(a,b,c) = f_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_fold_i_j_k_pipe, fold_i_j_k_read_in)
                fold(a,b,c) = fold_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_fx_i_j_k_pipe, fx_i_j_k_read_in)
                fx(a,b,c) = fx_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_fy_i_j_k_pipe, fy_i_j_k_read_in)
                fy(a,b,c) = fy_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_fz_i_j_k_pipe, fz_i_j_k_read_in)
                fz(a,b,c) = fz_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_g_i_j_k_pipe, g_i_j_k_read_in)
                g(a,b,c) = g_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_gold_i_j_k_pipe, gold_i_j_k_read_in)
                gold(a,b,c) = gold_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_h_i_j_k_pipe, h_i_j_k_read_in)
                h(a,b,c) = h_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_hold_i_j_k_pipe, hold_i_j_k_read_in)
                hold(a,b,c) = hold_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_rhs_i_j_k_pipe, rhs_i_j_k_read_in)
                rhs(a,b,c) = rhs_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_u_i_j_k_pipe, u_i_j_k_read_in)
                u(a,b,c) = u_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_usum_i_j_k_pipe, usum_i_j_k_read_in)
                usum(a,b,c) = usum_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_v_i_j_k_pipe, v_i_j_k_read_in)
                v(a,b,c) = v_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_vsum_i_j_k_pipe, vsum_i_j_k_read_in)
                vsum(a,b,c) = vsum_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_w_i_j_k_pipe, w_i_j_k_read_in)
                w(a,b,c) = w_i_j_k_read_in
                call read_pipe(p0_press_2_p0_press_2_output_writer_wsum_i_j_k_pipe, wsum_i_j_k_read_in)
                wsum(a,b,c) = wsum_i_j_k_read_in
            end do
        end do
    end do
end subroutine p0_press_2_output_writer

subroutine p1_press_dxs_i_reader(dxs)
      real, dimension(0:300) :: dxs
      real :: dxs_i
      integer :: a
    do a = 0, 300, 1
        dxs_i = dxs(a)
        call write_pipe(p1_press_dxs_i_reader_p1_press_smart_cache_dxs_i_pipe, dxs_i)
    end do
end subroutine p1_press_dxs_i_reader

subroutine p1_press_dys_j_reader(dys)
      real, dimension(0:300) :: dys
      real :: dys_j
      integer :: a
    do a = 0, 300, 1
        dys_j = dys(a)
        call write_pipe(p1_press_dys_j_reader_p1_press_smart_cache_dys_j_pipe, dys_j)
    end do
end subroutine p1_press_dys_j_reader

subroutine p1_press_dzs_k_reader(dzs)
      real, dimension(-1:82) :: dzs
      real :: dzs_k
      integer :: a
    do a = -1, 82, 1
        dzs_k = dzs(a)
        call write_pipe(p1_press_dzs_k_reader_p1_press_smart_cache_dzs_k_pipe, dzs_k)
    end do
end subroutine p1_press_dzs_k_reader

subroutine p1_press_p0_i_j_k_reader(p0)
      real, dimension(0:302,0:302,0:81) :: p0
      real :: p0_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                p0_i_j_k = p0(a,b,c)
                call write_pipe(p1_press_p0_i_j_k_reader_p1_press_smart_cache_p0_i_j_k_pipe, p0_i_j_k)
            end do
        end do
    end do
end subroutine p1_press_p0_i_j_k_reader

subroutine p1_press_p1_i_j_k_reader(p1)
      real, dimension(0:302,0:302,0:81) :: p1
      real :: p1_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                p1_i_j_k = p1(a,b,c)
                call write_pipe(p1_press_p1_i_j_k_reader_p1_press_smart_cache_p1_i_j_k_pipe, p1_i_j_k)
            end do
        end do
    end do
end subroutine p1_press_p1_i_j_k_reader

subroutine p1_press_rhs_i_j_k_reader(rhs)
      real, dimension(0:301,0:301,0:81) :: rhs
      real :: rhs_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 301, 1
            do c = 0, 301, 1
                rhs_i_j_k = rhs(a,b,c)
                call write_pipe(p1_press_rhs_i_j_k_reader_p1_press_rhs_i_j_k_pipe, rhs_i_j_k)
            end do
        end do
    end do
end subroutine p1_press_rhs_i_j_k_reader

subroutine p1_press_smart_cache
      real :: dxs_read_in
      real :: dys_read_in
      real :: dzs_read_in
      real :: p0_read_in
      real :: p1_read_in
      real, dimension(0:183618) :: dxs_buffer
      real, dimension(0:183618) :: dys_buffer
      real, dimension(0:183618) :: dzs_buffer
      real, dimension(0:183618) :: p0_buffer
      real, dimension(0:183618) :: p1_buffer
      real :: dxs_i
      real :: dxs_im1
      real :: dys_j
      real :: dys_jm1
      real :: dzs_k
      real :: dzs_km1
      real :: p0_im1_j_k
      real :: p0_i_jm1_k
      real :: p0_i_j_kp1
      real :: p0_i_j_k
      real :: p0_i_jp1_k
      real :: p0_ip1_j_k
      real :: p0_i_j_km1
      real :: p1_im1_j_k
      real :: p1_i_jm1_k
      real :: p1_i_j_kp1
      real :: p1_i_j_k
      real :: p1_i_jp1_k
      real :: p1_ip1_j_k
      real :: p1_i_j_km1
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7620146 
      integer, parameter :: smartCacheSize = 183619 
      integer, parameter :: maxPositiveOffset = 91809 
      integer, parameter :: maxNegativeOffset = 91809 
      integer, parameter :: driverLoopSize = 7528338 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            dxs_buffer(i) = dxs_buffer(i+1)
            dys_buffer(i) = dys_buffer(i+1)
            dzs_buffer(i) = dzs_buffer(i+1)
            p0_buffer(i) = p0_buffer(i+1)
            p1_buffer(i) = p1_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p1_press_dxs_i_reader_p1_press_smart_cache_dxs_i_pipe, dxs_read_in)
            dxs_buffer(183618) = dxs_read_in
            call read_pipe(p1_press_dys_j_reader_p1_press_smart_cache_dys_j_pipe, dys_read_in)
            dys_buffer(183618) = dys_read_in
            call read_pipe(p1_press_dzs_k_reader_p1_press_smart_cache_dzs_k_pipe, dzs_read_in)
            dzs_buffer(183618) = dzs_read_in
            call read_pipe(p1_press_p0_i_j_k_reader_p1_press_smart_cache_p0_i_j_k_pipe, p0_read_in)
            p0_buffer(183618) = p0_read_in
            call read_pipe(p1_press_p1_i_j_k_reader_p1_press_smart_cache_p1_i_j_k_pipe, p1_read_in)
            p1_buffer(183618) = p1_read_in
        end if
        if (compIndex>=0) then
            dxs_i = dxs_buffer(91809)
            call write_pipe(p1_press_smart_cache_p1_press_dxs_i_pipe, dxs_i)
            dxs_im1 = dxs_buffer(91808)
            call write_pipe(p1_press_smart_cache_p1_press_dxs_im1_pipe, dxs_im1)
            dys_j = dys_buffer(91809)
            call write_pipe(p1_press_smart_cache_p1_press_dys_j_pipe, dys_j)
            dys_jm1 = dys_buffer(91808)
            call write_pipe(p1_press_smart_cache_p1_press_dys_jm1_pipe, dys_jm1)
            dzs_k = dzs_buffer(91809)
            call write_pipe(p1_press_smart_cache_p1_press_dzs_k_pipe, dzs_k)
            dzs_km1 = dzs_buffer(91808)
            call write_pipe(p1_press_smart_cache_p1_press_dzs_km1_pipe, dzs_km1)
            p0_i_j_k = p0_buffer(91809)
            call write_pipe(p1_press_smart_cache_p1_press_p0_i_j_k_pipe, p0_i_j_k)
            p0_i_j_km1 = p0_buffer(0)
            call write_pipe(p1_press_smart_cache_p1_press_p0_i_j_km1_pipe, p0_i_j_km1)
            p0_i_j_kp1 = p0_buffer(183618)
            call write_pipe(p1_press_smart_cache_p1_press_p0_i_j_kp1_pipe, p0_i_j_kp1)
            p0_i_jm1_k = p0_buffer(91809)
            call write_pipe(p1_press_smart_cache_p1_press_p0_i_jm1_k_pipe, p0_i_jm1_k)
            p0_i_jp1_k = p0_buffer(92112)
            call write_pipe(p1_press_smart_cache_p1_press_p0_i_jp1_k_pipe, p0_i_jp1_k)
            p0_im1_j_k = p0_buffer(91808)
            call write_pipe(p1_press_smart_cache_p1_press_p0_im1_j_k_pipe, p0_im1_j_k)
            p0_ip1_j_k = p0_buffer(91810)
            call write_pipe(p1_press_smart_cache_p1_press_p0_ip1_j_k_pipe, p0_ip1_j_k)
            p1_i_j_k = p1_buffer(91809)
            call write_pipe(p1_press_smart_cache_p1_press_p1_i_j_k_pipe, p1_i_j_k)
            p1_i_j_km1 = p1_buffer(0)
            call write_pipe(p1_press_smart_cache_p1_press_p1_i_j_km1_pipe, p1_i_j_km1)
            p1_i_j_kp1 = p1_buffer(183618)
            call write_pipe(p1_press_smart_cache_p1_press_p1_i_j_kp1_pipe, p1_i_j_kp1)
            p1_i_jm1_k = p1_buffer(91809)
            call write_pipe(p1_press_smart_cache_p1_press_p1_i_jm1_k_pipe, p1_i_jm1_k)
            p1_i_jp1_k = p1_buffer(92112)
            call write_pipe(p1_press_smart_cache_p1_press_p1_i_jp1_k_pipe, p1_i_jp1_k)
            p1_im1_j_k = p1_buffer(91808)
            call write_pipe(p1_press_smart_cache_p1_press_p1_im1_j_k_pipe, p1_im1_j_k)
            p1_ip1_j_k = p1_buffer(91810)
            call write_pipe(p1_press_smart_cache_p1_press_p1_ip1_j_k_pipe, p1_ip1_j_k)
        end if
    end do
end subroutine p1_press_smart_cache

subroutine p1_press
      integer, parameter :: nloop = 7528337 
      integer :: count
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4) :: dxs_i
      real(4) :: dxs_im1
      real(4) :: dys_j
      real(4) :: dys_jm1
      real(4) :: dzs_k
      real(4) :: dzs_km1
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_im1_j_k
      real(4) :: p0_i_jm1_k
      real(4) :: p0_i_j_kp1
      real(4) :: p0_i_j_k
      real(4) :: p0_i_jp1_k
      real(4) :: p0_ip1_j_k
      real(4) :: p0_i_j_km1
      real(4) :: p1_im1_j_k
      real(4) :: p1_i_jm1_k
      real(4) :: p1_i_j_kp1
      real(4) :: p1_i_j_k
      real(4) :: p1_i_jp1_k
      real(4) :: p1_ip1_j_k
      real(4) :: p1_i_j_km1
      real(4) :: rhs_i_j_k
      real(4) :: reltmp
    do count = 0, nloop, 1
        call read_pipe(p1_press_smart_cache_p1_press_dxs_i_pipe, dxs_i)
        call read_pipe(p1_press_smart_cache_p1_press_dxs_im1_pipe, dxs_im1)
        call read_pipe(p1_press_smart_cache_p1_press_dys_j_pipe, dys_j)
        call read_pipe(p1_press_smart_cache_p1_press_dys_jm1_pipe, dys_jm1)
        call read_pipe(p1_press_smart_cache_p1_press_dzs_k_pipe, dzs_k)
        call read_pipe(p1_press_smart_cache_p1_press_dzs_km1_pipe, dzs_km1)
        call read_pipe(p1_press_smart_cache_p1_press_p0_i_j_k_pipe, p0_i_j_k)
        call read_pipe(p1_press_smart_cache_p1_press_p0_i_j_km1_pipe, p0_i_j_km1)
        call read_pipe(p1_press_smart_cache_p1_press_p0_i_j_kp1_pipe, p0_i_j_kp1)
        call read_pipe(p1_press_smart_cache_p1_press_p0_i_jm1_k_pipe, p0_i_jm1_k)
        call read_pipe(p1_press_smart_cache_p1_press_p0_i_jp1_k_pipe, p0_i_jp1_k)
        call read_pipe(p1_press_smart_cache_p1_press_p0_im1_j_k_pipe, p0_im1_j_k)
        call read_pipe(p1_press_smart_cache_p1_press_p0_ip1_j_k_pipe, p0_ip1_j_k)
        call read_pipe(p1_press_smart_cache_p1_press_p1_i_j_k_pipe, p1_i_j_k)
        call read_pipe(p1_press_smart_cache_p1_press_p1_i_j_km1_pipe, p1_i_j_km1)
        call read_pipe(p1_press_smart_cache_p1_press_p1_i_j_kp1_pipe, p1_i_j_kp1)
        call read_pipe(p1_press_smart_cache_p1_press_p1_i_jm1_k_pipe, p1_i_jm1_k)
        call read_pipe(p1_press_smart_cache_p1_press_p1_i_jp1_k_pipe, p1_i_jp1_k)
        call read_pipe(p1_press_smart_cache_p1_press_p1_im1_j_k_pipe, p1_im1_j_k)
        call read_pipe(p1_press_smart_cache_p1_press_p1_ip1_j_k_pipe, p1_ip1_j_k)
        call read_pipe(p1_press_rhs_i_j_k_reader_p1_press_rhs_i_j_k_pipe, rhs_i_j_k)
        i = mod(count, 303)
        j = mod(count/303, 303)
        k = count/91809
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            dz1 = dzs_km1
            dz2 = dzs_k
            cn4s = 2./(dz1*(dz1+dz2))
            cn4l = 2./(dz2*(dz1+dz2))
            cn3s = 2./(dys_jm1*(dys_jm1+dys_j))
            cn3l = 2./(dys_j*(dys_jm1+dys_j))
            cn2s = 2./(dxs_im1*(dxs_im1+dxs_i))
            cn2l = 2./(dxs_i*(dxs_im1+dxs_i))
            cn1 = 1./(2./(dxs_im1*dxs_i)+2./(dys_jm1*dys_j)+2./(dz1*dz2))
            if (nrd==0) then
                reltmp = 1.0*(cn1*(cn2l*p0_ip1_j_k+cn2s*p0_im1_j_k+cn3l*p0_i_jp1_k+cn3s*p0_i_jm1_k+cn4l*p0_i_j_kp1+cn4s*p0_i_j_km1-r&
&&
&hs_i_j_k)-p0_i_j_k)
                p1_i_j_k = p0_i_j_k+reltmp
            else
                reltmp = 1.0*(cn1*(cn2l*p1_ip1_j_k+cn2s*p1_im1_j_k+cn3l*p1_i_jp1_k+cn3s*p1_i_jm1_k+cn4l*p1_i_j_kp1+cn4s*p1_i_j_km1-r&
&&
&hs_i_j_k)-p1_i_j_k)
                p0_i_j_k = p1_i_j_k+reltmp
            end if
        end if
        call write_pipe(p1_press_p1_press_output_writer_p0_i_j_k_pipe, p0_i_j_k)
        call write_pipe(p1_press_p1_press_output_writer_p1_i_j_k_pipe, p1_i_j_k)
    end do
end subroutine p1_press

subroutine p1_press_output_writer(p0,p1)
      real :: p0_i_j_k_read_in
      real, dimension(0:302,0:302,0:81) :: p0
      real :: p1_i_j_k_read_in
      real, dimension(0:302,0:302,0:81) :: p1
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                call read_pipe(p1_press_p1_press_output_writer_p0_i_j_k_pipe, p0_i_j_k_read_in)
                p0(a,b,c) = p0_i_j_k_read_in
                call read_pipe(p1_press_p1_press_output_writer_p1_i_j_k_pipe, p1_i_j_k_read_in)
                p1(a,b,c) = p1_i_j_k_read_in
            end do
        end do
    end do
end subroutine p1_press_output_writer

subroutine p2_press_0_dx1_i_reader(dx1)
      real, dimension(-1:301) :: dx1
      real :: dx1_i
      integer :: a
    do a = -1, 301, 1
        dx1_i = dx1(a)
        call write_pipe(p2_press_0_dx1_i_reader_p2_press_0_dx1_i_pipe, dx1_i)
    end do
end subroutine p2_press_0_dx1_i_reader

subroutine p2_press_0_dy1_j_reader(dy1)
      real, dimension(0:301) :: dy1
      real :: dy1_j
      integer :: a
    do a = 0, 301, 1
        dy1_j = dy1(a)
        call write_pipe(p2_press_0_dy1_j_reader_p2_press_0_dy1_j_pipe, dy1_j)
    end do
end subroutine p2_press_0_dy1_j_reader

subroutine p2_press_0_dzn_k_reader(dzn)
      real, dimension(-1:82) :: dzn
      real :: dzn_k
      integer :: a
    do a = -1, 82, 1
        dzn_k = dzn(a)
        call write_pipe(p2_press_0_dzn_k_reader_p2_press_0_dzn_k_pipe, dzn_k)
    end do
end subroutine p2_press_0_dzn_k_reader

subroutine p2_press_0_p0_i_j_k_reader(p0)
      real, dimension(0:302,0:302,0:81) :: p0
      real :: p0_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                p0_i_j_k = p0(a,b,c)
                call write_pipe(p2_press_0_p0_i_j_k_reader_p2_press_0_p0_i_j_k_pipe, p0_i_j_k)
            end do
        end do
    end do
end subroutine p2_press_0_p0_i_j_k_reader

subroutine p2_press_0
      integer, parameter :: nloop = 7528337 
      integer :: count
      real(4) :: dx1_i
      real(4) :: dy1_j
      real(4) :: dzn_k
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_i_j_k
      real(4) :: pav
      real(4) :: pco
    do count = 0, nloop, 1
        call read_pipe(p2_press_0_dx1_i_reader_p2_press_0_dx1_i_pipe, dx1_i)
        call read_pipe(p2_press_0_dy1_j_reader_p2_press_0_dy1_j_pipe, dy1_j)
        call read_pipe(p2_press_0_dzn_k_reader_p2_press_0_dzn_k_pipe, dzn_k)
        call read_pipe(p2_press_0_p0_i_j_k_reader_p2_press_0_p0_i_j_k_pipe, p0_i_j_k)
        pav = 0.0
        pco = 0.0
        i = mod(count, 303)
        j = mod(count/303, 303)
        k = count/91809
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            pav = pav+p0_i_j_k*dx1_i*dy1_j*dzn_k
            pco = pco+dx1_i*dy1_j*dzn_k
        end if
    end do
    do count = 0, nloop, 1
        call write_pipe(p2_press_0_p2_press_1_pav_pipe, pav)
        call write_pipe(p2_press_0_p2_press_1_pco_pipe, pco)
    end do
end subroutine p2_press_0

subroutine p2_press_1_p0_i_j_k_reader(p0)
      real, dimension(0:302,0:302,0:81) :: p0
      real :: p0_i_j_k
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                p0_i_j_k = p0(a,b,c)
                call write_pipe(p2_press_1_p0_i_j_k_reader_p2_press_1_p0_i_j_k_pipe, p0_i_j_k)
            end do
        end do
    end do
end subroutine p2_press_1_p0_i_j_k_reader

subroutine p2_press_1
      integer, parameter :: nloop = 7528337 
      integer :: count
      integer :: i
      integer :: j
      integer :: k
      real(4) :: p0_i_j_k
      real(4) :: pav
      real(4) :: pco
    do count = 0, nloop, 1
        call read_pipe(p2_press_1_p0_i_j_k_reader_p2_press_1_p0_i_j_k_pipe, p0_i_j_k)
        call read_pipe(p2_press_0_p2_press_1_pav_pipe, pav)
        call read_pipe(p2_press_0_p2_press_1_pco_pipe, pco)
        pav = pav/pco
        i = mod(count, 303)
        j = mod(count/303, 303)
        k = count/91809
        if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
            p0_i_j_k = p0_i_j_k-pav
        end if
    end do
end subroutine p2_press_1

subroutine p2_press_2_smart_cache
      real :: p0_read_in
      real, dimension(0:2) :: p0_buffer
      real :: p0_synthIdx2p1_j_k
      real :: p0_synthIdx2m1_j_k
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7528338 
      integer, parameter :: smartCacheSize = 3 
      integer, parameter :: maxPositiveOffset = 1 
      integer, parameter :: maxNegativeOffset = 1 
      integer, parameter :: driverLoopSize = 7528338 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            p0_buffer(i) = p0_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p2_press_1_p2_press_2_smart_cache_p0_synthIdx2_j_k_pipe, p0_read_in)
            p0_buffer(2) = p0_read_in
        end if
        if (compIndex>=0) then
            p0_synthIdx2m1_j_k = p0_buffer(0)
            call write_pipe(p2_press_2_smart_cache_p2_press_2_p0_synthIdx2m1_j_k_pipe, p0_synthIdx2m1_j_k)
            p0_synthIdx2p1_j_k = p0_buffer(2)
            call write_pipe(p2_press_2_smart_cache_p2_press_2_p0_synthIdx2p1_j_k_pipe, p0_synthIdx2p1_j_k)
        end if
    end do
end subroutine p2_press_2_smart_cache

subroutine p2_press_2
      integer, parameter :: nloop = 7528337 
      integer :: count
      integer :: j
      integer :: k
      real(4) :: p0_synthIdx2p1_j_k
      real(4) :: p0_synthIdx2m1_j_k
      real(4) :: p0_synthIdx2_j_k
      integer :: synthIdx2
    do count = 0, nloop, 1
        call read_pipe(p2_press_2_smart_cache_p2_press_2_p0_synthIdx2m1_j_k_pipe, p0_synthIdx2m1_j_k)
        call read_pipe(p2_press_2_smart_cache_p2_press_2_p0_synthIdx2p1_j_k_pipe, p0_synthIdx2p1_j_k)
        synthIdx2 = mod(count, 303)
        j = mod(count/303, 303)
        k = count/91809
        if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302)) then
            if (synthIdx2==0) then
                p0_synthIdx2_j_k = p0_synthIdx2p1_j_k
            end if
            if (synthIdx2==301) then
                p0_synthIdx2_j_k = p0_synthIdx2m1_j_k
            end if
        end if
    end do
end subroutine p2_press_2

subroutine p2_press_3_smart_cache
      real :: p0_read_in
      real, dimension(0:181800) :: p0_buffer
      real :: p0_i_synthIdx1p300_k
      real :: p0_i_synthIdx1m300_k
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7619237 
      integer, parameter :: smartCacheSize = 181801 
      integer, parameter :: maxPositiveOffset = 90900 
      integer, parameter :: maxNegativeOffset = 90900 
      integer, parameter :: driverLoopSize = 7528338 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            p0_buffer(i) = p0_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p2_press_2_p2_press_3_smart_cache_p0_i_synthIdx1_k_pipe, p0_read_in)
            p0_buffer(181800) = p0_read_in
        end if
        if (compIndex>=0) then
            p0_i_synthIdx1m300_k = p0_buffer(0)
            call write_pipe(p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1m300_k_pipe, p0_i_synthIdx1m300_k)
            p0_i_synthIdx1p300_k = p0_buffer(181800)
            call write_pipe(p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1p300_k_pipe, p0_i_synthIdx1p300_k)
        end if
    end do
end subroutine p2_press_3_smart_cache

subroutine p2_press_3
      integer, parameter :: nloop = 7528337 
      integer :: count
      integer :: i
      integer :: k
      real(4) :: p0_i_synthIdx1p300_k
      real(4) :: p0_i_synthIdx1m300_k
      real(4) :: p0_i_synthIdx1_k
      integer :: synthIdx1
    do count = 0, nloop, 1
        call read_pipe(p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1m300_k_pipe, p0_i_synthIdx1m300_k)
        call read_pipe(p2_press_3_smart_cache_p2_press_3_p0_i_synthIdx1p300_k_pipe, p0_i_synthIdx1p300_k)
        i = mod(count, 303)
        synthIdx1 = mod(count/303, 303)
        k = count/91809
        if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302)) then
            if (synthIdx1==0) then
                p0_i_synthIdx1_k = p0_i_synthIdx1p300_k
            end if
            if (synthIdx1==301) then
                p0_i_synthIdx1_k = p0_i_synthIdx1m300_k
            end if
        end if
    end do
end subroutine p2_press_3

subroutine p2_press_4_smart_cache
      real :: p0_read_in
      real, dimension(0:183618) :: p0_buffer
      real :: p0_i_j_synthIdx0p1
      real :: p0_i_j_synthIdx0m1
      integer :: i
      integer :: count
      integer :: compIndex
      integer, parameter :: nloop = 7620146 
      integer, parameter :: smartCacheSize = 183619 
      integer, parameter :: maxPositiveOffset = 91809 
      integer, parameter :: maxNegativeOffset = 91809 
      integer, parameter :: driverLoopSize = 7528338 
    do count = 0, nloop, 1
        compIndex = count-maxPositiveOffset
        !$PRAGMA unroll
        do i = 0, smartCacheSize-2, 1
            p0_buffer(i) = p0_buffer(i+1)
        end do
        if (count<=driverLoopSize) then
            call read_pipe(p2_press_3_p2_press_4_smart_cache_p0_i_j_synthIdx0_pipe, p0_read_in)
            p0_buffer(183618) = p0_read_in
        end if
        if (compIndex>=0) then
            p0_i_j_synthIdx0m1 = p0_buffer(0)
            call write_pipe(p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0m1_pipe, p0_i_j_synthIdx0m1)
            p0_i_j_synthIdx0p1 = p0_buffer(183618)
            call write_pipe(p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0p1_pipe, p0_i_j_synthIdx0p1)
        end if
    end do
end subroutine p2_press_4_smart_cache

subroutine p2_press_4
      integer, parameter :: nloop = 7528337 
      integer :: count
      integer :: i
      integer :: j
      real(4) :: p0_i_j_synthIdx0p1
      real(4) :: p0_i_j_synthIdx0m1
      real(4) :: p0_i_j_synthIdx0
      integer :: synthIdx0
    do count = 0, nloop, 1
        call read_pipe(p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0m1_pipe, p0_i_j_synthIdx0m1)
        call read_pipe(p2_press_4_smart_cache_p2_press_4_p0_i_j_synthIdx0p1_pipe, p0_i_j_synthIdx0p1)
        i = mod(count, 303)
        j = mod(count/303, 303)
        synthIdx0 = count/91809
        if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81)) then
            if (synthIdx0==0) then
                p0_i_j_synthIdx0 = p0_i_j_synthIdx0p1
            end if
            if (synthIdx0==81) then
                p0_i_j_synthIdx0 = p0_i_j_synthIdx0m1
            end if
        end if
        call write_pipe(p2_press_4_p2_press_4_output_writer_p0_i_j_synthIdx0_pipe, p0_i_j_synthIdx0)
    end do
end subroutine p2_press_4

subroutine p2_press_4_output_writer(p0)
      real :: p0_i_j_synthIdx0_read_in
      real, dimension(0:302,0:302,0:81) :: p0
      integer :: a
      integer :: b
      integer :: c
    do a = 0, 81, 1
        do b = 0, 302, 1
            do c = 0, 302, 1
                call read_pipe(p2_press_4_p2_press_4_output_writer_p0_i_j_synthIdx0_pipe, p0_i_j_synthIdx0_read_in)
                p0(a,b,c) = p0_i_j_synthIdx0_read_in
            end do
        end do
    end do
end subroutine p2_press_4_output_writer

end module velnw_feedbf_les_adam_press_device_code

KCD {kernelName = "p0_velnw_0_p0_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"p0")], subroutineName = ""}
KCD {kernelName = "p0_velnw_0_dxs_i_reader", pipelineNumber = 0, argPositions = [(0,"dxs")], subroutineName = ""}
KCD {kernelName = "p0_velnw_0_f_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"f")], subroutineName = ""}
KCD {kernelName = "p0_velnw_0_u_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"u")], subroutineName = ""}
KCD {kernelName = "p0_velnw_0_smart_cache", pipelineNumber = 0, argPositions = [], subroutineName = ""}
KCD {kernelName = "p0_velnw_0", pipelineNumber = 0, argPositions = [(0,"dt"),(1,"ro")], subroutineName = "velnw"}
KCD {kernelName = "p0_velnw_1_p0_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"p0")], subroutineName = ""}
KCD {kernelName = "p0_velnw_1_dys_j_reader", pipelineNumber = 0, argPositions = [(0,"dys")], subroutineName = ""}
KCD {kernelName = "p0_velnw_1_g_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"g")], subroutineName = ""}
KCD {kernelName = "p0_velnw_1_v_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"v")], subroutineName = ""}
KCD {kernelName = "p0_velnw_1_smart_cache", pipelineNumber = 0, argPositions = [], subroutineName = ""}
KCD {kernelName = "p0_velnw_1", pipelineNumber = 0, argPositions = [(0,"dt"),(1,"ro")], subroutineName = "velnw"}
KCD {kernelName = "p0_velnw_2_p0_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"p0")], subroutineName = ""}
KCD {kernelName = "p0_velnw_2_dzs_k_reader", pipelineNumber = 0, argPositions = [(0,"dzs")], subroutineName = ""}
KCD {kernelName = "p0_velnw_2_h_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"h")], subroutineName = ""}
KCD {kernelName = "p0_velnw_2_w_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"w")], subroutineName = ""}
KCD {kernelName = "p0_velnw_2_smart_cache", pipelineNumber = 0, argPositions = [], subroutineName = ""}
KCD {kernelName = "p0_velnw_2", pipelineNumber = 0, argPositions = [(0,"dt"),(1,"ro")], subroutineName = "velnw"}
KCD {kernelName = "p0_feedbf_bmask1_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"bmask1")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_cmask1_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"cmask1")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_dmask1_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"dmask1")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_f_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"f")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_fx_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"fx")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_fy_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"fy")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_fz_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"fz")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_g_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"g")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_h_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"h")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_usum_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"usum")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_vsum_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"vsum")], subroutineName = ""}
KCD {kernelName = "p0_feedbf_wsum_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"wsum")], subroutineName = ""}
KCD {kernelName = "p0_feedbf", pipelineNumber = 0, argPositions = [(0,"alpha"),(1,"beta"),(2,"dt")], subroutineName = "feedbf"}
KCD {kernelName = "p0_les_0_diu2_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu2")], subroutineName = ""}
KCD {kernelName = "p0_les_0_diu3_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu3")], subroutineName = ""}
KCD {kernelName = "p0_les_0_diu4_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu4")], subroutineName = ""}
KCD {kernelName = "p0_les_0_diu6_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu6")], subroutineName = ""}
KCD {kernelName = "p0_les_0_diu7_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu7")], subroutineName = ""}
KCD {kernelName = "p0_les_0_diu8_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu8")], subroutineName = ""}
KCD {kernelName = "p0_les_0_delx1_k_reader", pipelineNumber = 0, argPositions = [(0,"delx1")], subroutineName = ""}
KCD {kernelName = "p0_les_0_diu1_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu1")], subroutineName = ""}
KCD {kernelName = "p0_les_0_diu5_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu5")], subroutineName = ""}
KCD {kernelName = "p0_les_0_diu9_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu9")], subroutineName = ""}
KCD {kernelName = "p0_les_0_sm_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"sm")], subroutineName = ""}
KCD {kernelName = "p0_les_0_smart_cache", pipelineNumber = 0, argPositions = [], subroutineName = ""}
KCD {kernelName = "p0_les_0", pipelineNumber = 0, argPositions = [], subroutineName = "les"}
KCD {kernelName = "p0_les_1_diu1_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu1")], subroutineName = ""}
KCD {kernelName = "p0_les_1_diu2_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu2")], subroutineName = ""}
KCD {kernelName = "p0_les_1_diu3_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu3")], subroutineName = ""}
KCD {kernelName = "p0_les_1_diu4_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu4")], subroutineName = ""}
KCD {kernelName = "p0_les_1_diu7_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu7")], subroutineName = ""}
KCD {kernelName = "p0_les_1_dx1_i_reader", pipelineNumber = 0, argPositions = [(0,"dx1")], subroutineName = ""}
KCD {kernelName = "p0_les_1_dy1_j_reader", pipelineNumber = 0, argPositions = [(0,"dy1")], subroutineName = ""}
KCD {kernelName = "p0_les_1_dzn_k_reader", pipelineNumber = 0, argPositions = [(0,"dzn")], subroutineName = ""}
KCD {kernelName = "p0_les_1_dxs_i_reader", pipelineNumber = 0, argPositions = [(0,"dxs")], subroutineName = ""}
KCD {kernelName = "p0_les_1_smart_cache", pipelineNumber = 0, argPositions = [], subroutineName = ""}
KCD {kernelName = "p0_les_1", pipelineNumber = 0, argPositions = [], subroutineName = "les"}
KCD {kernelName = "p0_les_2_diu2_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu2")], subroutineName = ""}
KCD {kernelName = "p0_les_2_diu4_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu4")], subroutineName = ""}
KCD {kernelName = "p0_les_2_diu5_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu5")], subroutineName = ""}
KCD {kernelName = "p0_les_2_diu6_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu6")], subroutineName = ""}
KCD {kernelName = "p0_les_2_diu8_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu8")], subroutineName = ""}
KCD {kernelName = "p0_les_2_dx1_i_reader", pipelineNumber = 0, argPositions = [(0,"dx1")], subroutineName = ""}
KCD {kernelName = "p0_les_2_dy1_j_reader", pipelineNumber = 0, argPositions = [(0,"dy1")], subroutineName = ""}
KCD {kernelName = "p0_les_2_dzn_k_reader", pipelineNumber = 0, argPositions = [(0,"dzn")], subroutineName = ""}
KCD {kernelName = "p0_les_2_dys_j_reader", pipelineNumber = 0, argPositions = [(0,"dys")], subroutineName = ""}
KCD {kernelName = "p0_les_2_smart_cache", pipelineNumber = 0, argPositions = [], subroutineName = ""}
KCD {kernelName = "p0_les_2", pipelineNumber = 0, argPositions = [], subroutineName = "les"}
KCD {kernelName = "p0_les_3_diu3_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu3")], subroutineName = ""}
KCD {kernelName = "p0_les_3_diu6_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu6")], subroutineName = ""}
KCD {kernelName = "p0_les_3_diu7_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu7")], subroutineName = ""}
KCD {kernelName = "p0_les_3_diu8_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu8")], subroutineName = ""}
KCD {kernelName = "p0_les_3_diu9_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"diu9")], subroutineName = ""}
KCD {kernelName = "p0_les_3_dx1_i_reader", pipelineNumber = 0, argPositions = [(0,"dx1")], subroutineName = ""}
KCD {kernelName = "p0_les_3_dy1_j_reader", pipelineNumber = 0, argPositions = [(0,"dy1")], subroutineName = ""}
KCD {kernelName = "p0_les_3_dzn_k_reader", pipelineNumber = 0, argPositions = [(0,"dzn")], subroutineName = ""}
KCD {kernelName = "p0_les_3_smart_cache", pipelineNumber = 0, argPositions = [], subroutineName = ""}
KCD {kernelName = "p0_les_3", pipelineNumber = 0, argPositions = [], subroutineName = "les"}
KCD {kernelName = "p0_adam_fold_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"fold")], subroutineName = ""}
KCD {kernelName = "p0_adam_gold_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"gold")], subroutineName = ""}
KCD {kernelName = "p0_adam_hold_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"hold")], subroutineName = ""}
KCD {kernelName = "p0_adam", pipelineNumber = 0, argPositions = [], subroutineName = "adam"}
KCD {kernelName = "p0_press_0_dx1_i_reader", pipelineNumber = 0, argPositions = [(0,"dx1")], subroutineName = ""}
KCD {kernelName = "p0_press_0_dy1_j_reader", pipelineNumber = 0, argPositions = [(0,"dy1")], subroutineName = ""}
KCD {kernelName = "p0_press_0_dzn_k_reader", pipelineNumber = 0, argPositions = [(0,"dzn")], subroutineName = ""}
KCD {kernelName = "p0_press_0_rhs_i_j_k_reader", pipelineNumber = 0, argPositions = [(0,"rhs")], subroutineName = ""}
KCD {kernelName = "p0_press_0_smart_cache", pipelineNumber = 0, argPositions = [], subroutineName = ""}
KCD {kernelName = "p0_press_0", pipelineNumber = 0, argPositions = [(0,"dt")], subroutineName = "press"}
KCD {kernelName = "p0_press_1_dx1_i_reader", pipelineNumber = 0, argPositions = [(0,"dx1")], subroutineName = ""}
KCD {kernelName = "p0_press_1_dy1_j_reader", pipelineNumber = 0, argPositions = [(0,"dy1")], subroutineName = ""}
KCD {kernelName = "p0_press_1_dzn_k_reader", pipelineNumber = 0, argPositions = [(0,"dzn")], subroutineName = ""}
KCD {kernelName = "p0_press_1", pipelineNumber = 0, argPositions = [], subroutineName = "press"}
KCD {kernelName = "p0_press_2_output_writer", pipelineNumber = 0, argPositions = [(0,"f"),(1,"fold"),(2,"fx"),(3,"fy"),(4,"fz"),(5,"g"),(6,"gold"),(7,"h"),(8,"hold"),(9,"rhs"),(10,"u"),(11,"usum"),(12,"v"),(13,"vsum"),(14,"w"),(15,"wsum")], subroutineName = ""}
KCD {kernelName = "p0_press_2", pipelineNumber = 0, argPositions = [], subroutineName = "press"}
KCD {kernelName = "p1_press_output_writer", pipelineNumber = 1, argPositions = [(0,"p0"),(1,"p1")], subroutineName = ""}
KCD {kernelName = "p1_press_dxs_i_reader", pipelineNumber = 1, argPositions = [(0,"dxs")], subroutineName = ""}
KCD {kernelName = "p1_press_dys_j_reader", pipelineNumber = 1, argPositions = [(0,"dys")], subroutineName = ""}
KCD {kernelName = "p1_press_dzs_k_reader", pipelineNumber = 1, argPositions = [(0,"dzs")], subroutineName = ""}
KCD {kernelName = "p1_press_p0_i_j_k_reader", pipelineNumber = 1, argPositions = [(0,"p0")], subroutineName = ""}
KCD {kernelName = "p1_press_p1_i_j_k_reader", pipelineNumber = 1, argPositions = [(0,"p1")], subroutineName = ""}
KCD {kernelName = "p1_press_rhs_i_j_k_reader", pipelineNumber = 1, argPositions = [(0,"rhs")], subroutineName = ""}
KCD {kernelName = "p1_press_smart_cache", pipelineNumber = 1, argPositions = [], subroutineName = ""}
KCD {kernelName = "p1_press", pipelineNumber = 1, argPositions = [], subroutineName = "press"}
KCD {kernelName = "p2_press_0_dx1_i_reader", pipelineNumber = 2, argPositions = [(0,"dx1")], subroutineName = ""}
KCD {kernelName = "p2_press_0_dy1_j_reader", pipelineNumber = 2, argPositions = [(0,"dy1")], subroutineName = ""}
KCD {kernelName = "p2_press_0_dzn_k_reader", pipelineNumber = 2, argPositions = [(0,"dzn")], subroutineName = ""}
KCD {kernelName = "p2_press_0_p0_i_j_k_reader", pipelineNumber = 2, argPositions = [(0,"p0")], subroutineName = ""}
KCD {kernelName = "p2_press_0", pipelineNumber = 2, argPositions = [], subroutineName = "press"}
KCD {kernelName = "p2_press_1_p0_i_j_k_reader", pipelineNumber = 2, argPositions = [(0,"p0")], subroutineName = ""}
KCD {kernelName = "p2_press_1", pipelineNumber = 2, argPositions = [], subroutineName = "press"}
KCD {kernelName = "p2_press_2_smart_cache", pipelineNumber = 2, argPositions = [], subroutineName = ""}
KCD {kernelName = "p2_press_2", pipelineNumber = 2, argPositions = [], subroutineName = "press"}
KCD {kernelName = "p2_press_3_smart_cache", pipelineNumber = 2, argPositions = [], subroutineName = ""}
KCD {kernelName = "p2_press_3", pipelineNumber = 2, argPositions = [], subroutineName = "press"}
KCD {kernelName = "p2_press_4_output_writer", pipelineNumber = 2, argPositions = [(0,"p0")], subroutineName = ""}
KCD {kernelName = "p2_press_4_smart_cache", pipelineNumber = 2, argPositions = [], subroutineName = ""}
KCD {kernelName = "p2_press_4", pipelineNumber = 2, argPositions = [], subroutineName = "press"}
