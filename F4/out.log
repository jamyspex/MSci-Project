
================================================================================
F4: Finite-element Fortran for FPGAs
This compiler allows Fortran finite element codes to be compiled
for execution on FPGA devices via OpenCL
================================================================================

The following command line values were parsed:

Files with subroutines to be parallelised:
	dyn
	vernieuw
	shapiro
File containing main subroutine: 
	main.f95
Source directory:
	./Shallow-Water-2D
Fixed form: False
Loop fusion bound: Nothing
CPP Defines: 
CPP Excludes:

Parsing ./Shallow-Water-2D/main.f95
Parsing ./Shallow-Water-2D/dyn.f95
Parsing ./Shallow-Water-2D/init.f95
Parsing ./Shallow-Water-2D/shapiro.f95
Parsing ./Shallow-Water-2D/vernieuw.f95

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines not for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: init
Filename: ./Shallow-Water-2D/init.f95
Source:
subroutine init(hmin,dx,dy,dt,g,j,k,hzero,eta,etan,h,wet,u,un,v,vn)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real, intent(InOut) :: hmin
      real, intent(Out) :: dx
      real, intent(Out) :: dy
      real, intent(Out) :: dt
      real, intent(Out) :: g
      integer, intent(InOut) :: j
      integer, intent(InOut) :: k
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: hzero
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: eta
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: etan
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: h
      integer, dimension(0:ny+1,0:nx+1), intent(Out) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: u
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: un
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: v
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: vn
    hmin = 0.05
    dx = 10.0
    dy = 10.0
    dt = 0.1
    g = 9.81
    do j = 0, ny+1, 1
        do k = 0, nx+1, 1
                hzero(j,k) = 10.0
        end do
    end do
    do k = 0, nx+1, 1
        hzero(0,k) = -10.0
        hzero(ny+1,k) = -10.0
    end do
    do j = 0, ny+1, 1
        hzero(j,0) = -10.0
        hzero(j,nx+1) = -10.0
    end do
    do j = 0, ny+1, 1
        do k = 0, nx+1, 1
                eta(j,k) = -min(0.0,hzero(j,k))
                etan(j,k) = eta(j,k)
        end do
    end do
    do j = 0, ny+1, 1
        do k = 0, nx+1, 1
                h(j,k) = hzero(j,k)+eta(j,k)
                wet(j,k) = 1
                if (h(j,k)<hmin) then
                                wet(j,k) = 0
                end if
                u(j,k) = 0.
                un(j,k) = 0.
                v(j,k) = 0.
                vn(j,k) = 0.
        end do
    end do
end subroutine init

AST: 
Sub (fromList []) ({<unknown>, line = 3, col = 0},{<unknown>, line = 58, col = 0}) Nothing (SubName (fromList []) "init") (Arg (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ArgName (fromList []) "hmin") (ArgName (fromList []) "dx")) (ArgName (fromList []) "dy")) (ArgName (fromList []) "dt")) (ArgName (fromList []) "g")) (ArgName (fromList []) "j")) (ArgName (fromList []) "k")) (ArgName (fromList []) "hzero")) (ArgName (fromList []) "eta")) (ArgName (fromList []) "etan")) (ArgName (fromList []) "h")) (ArgName (fromList []) "wet")) (ArgName (fromList []) "u")) (ArgName (fromList []) "un")) (ArgName (fromList []) "v")) (ArgName (fromList []) "vn")) ({<unknown>, line = 3, col = 66},{<unknown>, line = 3, col = 67})) (Block (fromList []) (UseBlock (UseNil (fromList [])) {<unknown>, line = 4, col = 6}) (ImplicitNull (fromList [])) ({<unknown>, line = 4, col = 6},{<unknown>, line = 58, col = 0}) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 4, col = 6},{<unknown>, line = 4, col = 37}) [(Var (fromList []) ({<unknown>, line = 4, col = 31},{<unknown>, line = 4, col = 33}) [(VarName (fromList []) "nx",[])],Con (fromList []) ({<unknown>, line = 4, col = 34},{<unknown>, line = 4, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 4, col = 14},{<unknown>, line = 4, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 4, col = 16},{<unknown>, line = 4, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 5, col = 6},{<unknown>, line = 5, col = 37}) [(Var (fromList []) ({<unknown>, line = 5, col = 31},{<unknown>, line = 5, col = 33}) [(VarName (fromList []) "ny",[])],Con (fromList []) ({<unknown>, line = 5, col = 34},{<unknown>, line = 5, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 5, col = 14},{<unknown>, line = 5, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 5, col = 16},{<unknown>, line = 5, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 33}) [(Var (fromList []) ({<unknown>, line = 6, col = 29},{<unknown>, line = 6, col = 33}) [(VarName (fromList []) "hmin",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 33},{<unknown>, line = 6, col = 33}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 6, col = 10},{<unknown>, line = 6, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 10},{<unknown>, line = 6, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 29}) [(Var (fromList []) ({<unknown>, line = 7, col = 27},{<unknown>, line = 7, col = 29}) [(VarName (fromList []) "dx",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 29},{<unknown>, line = 7, col = 29}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 7, col = 10},{<unknown>, line = 7, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 10},{<unknown>, line = 7, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 8, col = 6},{<unknown>, line = 8, col = 29}) [(Var (fromList []) ({<unknown>, line = 8, col = 27},{<unknown>, line = 8, col = 29}) [(VarName (fromList []) "dy",[])],NullExpr (fromList []) ({<unknown>, line = 8, col = 29},{<unknown>, line = 8, col = 29}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 9, col = 6},{<unknown>, line = 9, col = 29}) [(Var (fromList []) ({<unknown>, line = 9, col = 27},{<unknown>, line = 9, col = 29}) [(VarName (fromList []) "dt",[])],NullExpr (fromList []) ({<unknown>, line = 9, col = 29},{<unknown>, line = 9, col = 29}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 10, col = 6},{<unknown>, line = 10, col = 28}) [(Var (fromList []) ({<unknown>, line = 10, col = 27},{<unknown>, line = 10, col = 28}) [(VarName (fromList []) "g",[])],NullExpr (fromList []) ({<unknown>, line = 10, col = 28},{<unknown>, line = 10, col = 28}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 11, col = 6},{<unknown>, line = 11, col = 33}) [(Var (fromList []) ({<unknown>, line = 11, col = 32},{<unknown>, line = 11, col = 33}) [(VarName (fromList []) "j",[])],NullExpr (fromList []) ({<unknown>, line = 11, col = 33},{<unknown>, line = 11, col = 33}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 11, col = 13},{<unknown>, line = 11, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 11, col = 13},{<unknown>, line = 11, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 6},{<unknown>, line = 12, col = 33}) [(Var (fromList []) ({<unknown>, line = 12, col = 32},{<unknown>, line = 12, col = 33}) [(VarName (fromList []) "k",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 33},{<unknown>, line = 12, col = 33}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 12, col = 13},{<unknown>, line = 12, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 13},{<unknown>, line = 12, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 60}) [(Var (fromList []) ({<unknown>, line = 13, col = 55},{<unknown>, line = 13, col = 60}) [(VarName (fromList []) "hzero",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 60},{<unknown>, line = 13, col = 60}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 6},{<unknown>, line = 14, col = 58}) [(Var (fromList []) ({<unknown>, line = 14, col = 55},{<unknown>, line = 14, col = 58}) [(VarName (fromList []) "eta",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 58},{<unknown>, line = 14, col = 58}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 14, col = 22},{<unknown>, line = 14, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 14, col = 24},{<unknown>, line = 14, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 14, col = 24},{<unknown>, line = 14, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 14, col = 27},{<unknown>, line = 14, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 14, col = 29},{<unknown>, line = 14, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 14, col = 31},{<unknown>, line = 14, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 14, col = 31},{<unknown>, line = 14, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 14, col = 34},{<unknown>, line = 14, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 15, col = 6},{<unknown>, line = 15, col = 57}) [(Var (fromList []) ({<unknown>, line = 15, col = 53},{<unknown>, line = 15, col = 57}) [(VarName (fromList []) "etan",[])],NullExpr (fromList []) ({<unknown>, line = 15, col = 57},{<unknown>, line = 15, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 15, col = 22},{<unknown>, line = 15, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 24},{<unknown>, line = 15, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 24},{<unknown>, line = 15, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 27},{<unknown>, line = 15, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 15, col = 29},{<unknown>, line = 15, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 31},{<unknown>, line = 15, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 31},{<unknown>, line = 15, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 34},{<unknown>, line = 15, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 15, col = 10},{<unknown>, line = 15, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 15, col = 10},{<unknown>, line = 15, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 16, col = 6},{<unknown>, line = 16, col = 56}) [(Var (fromList []) ({<unknown>, line = 16, col = 55},{<unknown>, line = 16, col = 56}) [(VarName (fromList []) "h",[])],NullExpr (fromList []) ({<unknown>, line = 16, col = 56},{<unknown>, line = 16, col = 56}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 16, col = 22},{<unknown>, line = 16, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 27},{<unknown>, line = 16, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 16, col = 29},{<unknown>, line = 16, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 34},{<unknown>, line = 16, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 17, col = 6},{<unknown>, line = 17, col = 59}) [(Var (fromList []) ({<unknown>, line = 17, col = 56},{<unknown>, line = 17, col = 59}) [(VarName (fromList []) "wet",[])],NullExpr (fromList []) ({<unknown>, line = 17, col = 59},{<unknown>, line = 17, col = 59}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 17, col = 25},{<unknown>, line = 17, col = 26}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 27},{<unknown>, line = 17, col = 31}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 27},{<unknown>, line = 17, col = 29}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 30},{<unknown>, line = 17, col = 31}) "1")),(Con (fromList []) ({<unknown>, line = 17, col = 32},{<unknown>, line = 17, col = 33}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 34},{<unknown>, line = 17, col = 38}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 34},{<unknown>, line = 17, col = 36}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 37},{<unknown>, line = 17, col = 38}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 17, col = 13},{<unknown>, line = 17, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 17, col = 13},{<unknown>, line = 17, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 18, col = 6},{<unknown>, line = 18, col = 54}) [(Var (fromList []) ({<unknown>, line = 18, col = 53},{<unknown>, line = 18, col = 54}) [(VarName (fromList []) "u",[])],NullExpr (fromList []) ({<unknown>, line = 18, col = 54},{<unknown>, line = 18, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 18, col = 22},{<unknown>, line = 18, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 27},{<unknown>, line = 18, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 34},{<unknown>, line = 18, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 19, col = 6},{<unknown>, line = 19, col = 55}) [(Var (fromList []) ({<unknown>, line = 19, col = 53},{<unknown>, line = 19, col = 55}) [(VarName (fromList []) "un",[])],NullExpr (fromList []) ({<unknown>, line = 19, col = 55},{<unknown>, line = 19, col = 55}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 19, col = 22},{<unknown>, line = 19, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 27},{<unknown>, line = 19, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 19, col = 29},{<unknown>, line = 19, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 34},{<unknown>, line = 19, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 20, col = 6},{<unknown>, line = 20, col = 54}) [(Var (fromList []) ({<unknown>, line = 20, col = 53},{<unknown>, line = 20, col = 54}) [(VarName (fromList []) "v",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 54},{<unknown>, line = 20, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 22},{<unknown>, line = 20, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 29},{<unknown>, line = 20, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 31},{<unknown>, line = 20, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 31},{<unknown>, line = 20, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 10})))) (Decl (fromList []) ({<unknown>, line = 21, col = 6},{<unknown>, line = 21, col = 55}) [(Var (fromList []) ({<unknown>, line = 21, col = 53},{<unknown>, line = 21, col = 55}) [(VarName (fromList []) "vn",[])],NullExpr (fromList []) ({<unknown>, line = 21, col = 55},{<unknown>, line = 21, col = 55}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 21, col = 22},{<unknown>, line = 21, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 21, col = 24},{<unknown>, line = 21, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 24},{<unknown>, line = 21, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 21, col = 27},{<unknown>, line = 21, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 21, col = 29},{<unknown>, line = 21, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 21, col = 31},{<unknown>, line = 21, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 31},{<unknown>, line = 21, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 21, col = 34},{<unknown>, line = 21, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 21, col = 10},{<unknown>, line = 21, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 21, col = 10},{<unknown>, line = 21, col = 10}))))))))))))))))))))) (FSeq (fromList []) ({<unknown>, line = 22, col = 0},{<unknown>, line = 56, col = 6}) (Assg (fromList []) ({<unknown>, line = 22, col = 0},{<unknown>, line = 22, col = 11}) (Var (fromList []) ({<unknown>, line = 22, col = 0},{<unknown>, line = 22, col = 5}) [(VarName (fromList []) "hmin",[])]) (Con (fromList []) ({<unknown>, line = 22, col = 7},{<unknown>, line = 22, col = 11}) "0.05")) (FSeq (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 56, col = 6}) (Assg (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 23, col = 9}) (Var (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 23, col = 3}) [(VarName (fromList []) "dx",[])]) (Con (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 9}) "10.0")) (FSeq (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 56, col = 6}) (Assg (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 24, col = 9}) (Var (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 24, col = 3}) [(VarName (fromList []) "dy",[])]) (Con (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 9}) "10.0")) (FSeq (fromList []) ({<unknown>, line = 25, col = 0},{<unknown>, line = 56, col = 6}) (Assg (fromList []) ({<unknown>, line = 25, col = 0},{<unknown>, line = 25, col = 8}) (Var (fromList []) ({<unknown>, line = 25, col = 0},{<unknown>, line = 25, col = 3}) [(VarName (fromList []) "dt",[])]) (Con (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 8}) "0.1")) (FSeq (fromList []) ({<unknown>, line = 26, col = 0},{<unknown>, line = 56, col = 6}) (Assg (fromList []) ({<unknown>, line = 26, col = 0},{<unknown>, line = 26, col = 8}) (Var (fromList []) ({<unknown>, line = 26, col = 0},{<unknown>, line = 26, col = 2}) [(VarName (fromList []) "g",[])]) (Con (fromList []) ({<unknown>, line = 26, col = 4},{<unknown>, line = 26, col = 8}) "9.81")) (FSeq (fromList []) ({<unknown>, line = 27, col = 0},{<unknown>, line = 56, col = 6}) (For (fromList []) ({<unknown>, line = 27, col = 0},{<unknown>, line = 31, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 27, col = 7},{<unknown>, line = 27, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 27, col = 9},{<unknown>, line = 27, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 27, col = 9},{<unknown>, line = 27, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 27, col = 12},{<unknown>, line = 27, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 27, col = 13},{<unknown>, line = 27, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 28, col = 0},{<unknown>, line = 31, col = 6}) (For (fromList []) ({<unknown>, line = 28, col = 0},{<unknown>, line = 30, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 28, col = 7},{<unknown>, line = 28, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 28, col = 9},{<unknown>, line = 28, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 28, col = 9},{<unknown>, line = 28, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 28, col = 12},{<unknown>, line = 28, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 28, col = 13},{<unknown>, line = 28, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 19}) (Var (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 19}) [(VarName (fromList []) "hzero",[Var (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 9}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 29, col = 10},{<unknown>, line = 29, col = 11}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 29, col = 15},{<unknown>, line = 29, col = 19}) "10.0")) (NullStmt (fromList []) ({<unknown>, line = 30, col = 6},{<unknown>, line = 30, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 31, col = 6},{<unknown>, line = 31, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 56, col = 6}) (For (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 35, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 32, col = 7},{<unknown>, line = 32, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 32, col = 9},{<unknown>, line = 32, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 32, col = 9},{<unknown>, line = 32, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 32, col = 12},{<unknown>, line = 32, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 32, col = 13},{<unknown>, line = 32, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 33, col = 1},{<unknown>, line = 35, col = 6}) (Assg (fromList []) ({<unknown>, line = 33, col = 1},{<unknown>, line = 33, col = 19}) (Var (fromList []) ({<unknown>, line = 33, col = 1},{<unknown>, line = 33, col = 19}) [(VarName (fromList []) "hzero",[Con (fromList []) ({<unknown>, line = 33, col = 7},{<unknown>, line = 33, col = 8}) "0",Var (fromList []) ({<unknown>, line = 33, col = 9},{<unknown>, line = 33, col = 10}) [(VarName (fromList []) "k",[])]])]) (Unary (fromList []) ({<unknown>, line = 33, col = 14},{<unknown>, line = 33, col = 19}) (UMinus (fromList [])) (Con (fromList []) ({<unknown>, line = 33, col = 15},{<unknown>, line = 33, col = 19}) "10.0"))) (FSeq (fromList []) ({<unknown>, line = 34, col = 1},{<unknown>, line = 35, col = 6}) (Assg (fromList []) ({<unknown>, line = 34, col = 1},{<unknown>, line = 34, col = 22}) (Var (fromList []) ({<unknown>, line = 34, col = 1},{<unknown>, line = 34, col = 22}) [(VarName (fromList []) "hzero",[Bin (fromList []) ({<unknown>, line = 34, col = 7},{<unknown>, line = 34, col = 11}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 34, col = 7},{<unknown>, line = 34, col = 9}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 34, col = 10},{<unknown>, line = 34, col = 11}) "1"),Var (fromList []) ({<unknown>, line = 34, col = 12},{<unknown>, line = 34, col = 13}) [(VarName (fromList []) "k",[])]])]) (Unary (fromList []) ({<unknown>, line = 34, col = 17},{<unknown>, line = 34, col = 22}) (UMinus (fromList [])) (Con (fromList []) ({<unknown>, line = 34, col = 18},{<unknown>, line = 34, col = 22}) "10.0"))) (NullStmt (fromList []) ({<unknown>, line = 35, col = 6},{<unknown>, line = 35, col = 6}))))) (FSeq (fromList []) ({<unknown>, line = 36, col = 0},{<unknown>, line = 56, col = 6}) (For (fromList []) ({<unknown>, line = 36, col = 0},{<unknown>, line = 39, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 36, col = 7},{<unknown>, line = 36, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 36, col = 9},{<unknown>, line = 36, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 36, col = 9},{<unknown>, line = 36, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 36, col = 12},{<unknown>, line = 36, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 36, col = 13},{<unknown>, line = 36, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 37, col = 1},{<unknown>, line = 39, col = 6}) (Assg (fromList []) ({<unknown>, line = 37, col = 1},{<unknown>, line = 37, col = 19}) (Var (fromList []) ({<unknown>, line = 37, col = 1},{<unknown>, line = 37, col = 19}) [(VarName (fromList []) "hzero",[Var (fromList []) ({<unknown>, line = 37, col = 7},{<unknown>, line = 37, col = 8}) [(VarName (fromList []) "j",[])],Con (fromList []) ({<unknown>, line = 37, col = 9},{<unknown>, line = 37, col = 10}) "0"])]) (Unary (fromList []) ({<unknown>, line = 37, col = 14},{<unknown>, line = 37, col = 19}) (UMinus (fromList [])) (Con (fromList []) ({<unknown>, line = 37, col = 15},{<unknown>, line = 37, col = 19}) "10.0"))) (FSeq (fromList []) ({<unknown>, line = 38, col = 1},{<unknown>, line = 39, col = 6}) (Assg (fromList []) ({<unknown>, line = 38, col = 1},{<unknown>, line = 38, col = 22}) (Var (fromList []) ({<unknown>, line = 38, col = 1},{<unknown>, line = 38, col = 22}) [(VarName (fromList []) "hzero",[Var (fromList []) ({<unknown>, line = 38, col = 7},{<unknown>, line = 38, col = 8}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 38, col = 9},{<unknown>, line = 38, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 38, col = 9},{<unknown>, line = 38, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 38, col = 12},{<unknown>, line = 38, col = 13}) "1")])]) (Unary (fromList []) ({<unknown>, line = 38, col = 17},{<unknown>, line = 38, col = 22}) (UMinus (fromList [])) (Con (fromList []) ({<unknown>, line = 38, col = 18},{<unknown>, line = 38, col = 22}) "10.0"))) (NullStmt (fromList []) ({<unknown>, line = 39, col = 6},{<unknown>, line = 39, col = 6}))))) (FSeq (fromList []) ({<unknown>, line = 40, col = 0},{<unknown>, line = 56, col = 6}) (For (fromList []) ({<unknown>, line = 40, col = 0},{<unknown>, line = 45, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 40, col = 7},{<unknown>, line = 40, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 40, col = 9},{<unknown>, line = 40, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 9},{<unknown>, line = 40, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 40, col = 13},{<unknown>, line = 40, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 41, col = 0},{<unknown>, line = 45, col = 6}) (For (fromList []) ({<unknown>, line = 41, col = 0},{<unknown>, line = 44, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 41, col = 7},{<unknown>, line = 41, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 41, col = 9},{<unknown>, line = 41, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 9},{<unknown>, line = 41, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 41, col = 13},{<unknown>, line = 41, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 42, col = 2},{<unknown>, line = 44, col = 6}) (Assg (fromList []) ({<unknown>, line = 42, col = 2},{<unknown>, line = 42, col = 33}) (Var (fromList []) ({<unknown>, line = 42, col = 2},{<unknown>, line = 42, col = 33}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 42, col = 6},{<unknown>, line = 42, col = 7}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 42, col = 8},{<unknown>, line = 42, col = 9}) [(VarName (fromList []) "k",[])]])]) (Unary (fromList []) ({<unknown>, line = 42, col = 13},{<unknown>, line = 42, col = 33}) (UMinus (fromList [])) (Var (fromList []) ({<unknown>, line = 42, col = 14},{<unknown>, line = 42, col = 33}) [(VarName (fromList []) "min",[Con (fromList []) ({<unknown>, line = 42, col = 18},{<unknown>, line = 42, col = 21}) "0.0",Var (fromList []) ({<unknown>, line = 42, col = 22},{<unknown>, line = 42, col = 32}) [(VarName (fromList []) "hzero",[Var (fromList []) ({<unknown>, line = 42, col = 28},{<unknown>, line = 42, col = 29}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 42, col = 30},{<unknown>, line = 42, col = 31}) [(VarName (fromList []) "k",[])]])]])]))) (FSeq (fromList []) ({<unknown>, line = 43, col = 2},{<unknown>, line = 44, col = 6}) (Assg (fromList []) ({<unknown>, line = 43, col = 2},{<unknown>, line = 43, col = 22}) (Var (fromList []) ({<unknown>, line = 43, col = 2},{<unknown>, line = 43, col = 22}) [(VarName (fromList []) "etan",[Var (fromList []) ({<unknown>, line = 43, col = 7},{<unknown>, line = 43, col = 8}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 43, col = 9},{<unknown>, line = 43, col = 10}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 43, col = 14},{<unknown>, line = 43, col = 22}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 43, col = 18},{<unknown>, line = 43, col = 19}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 43, col = 20},{<unknown>, line = 43, col = 21}) [(VarName (fromList []) "k",[])]])])) (NullStmt (fromList []) ({<unknown>, line = 44, col = 6},{<unknown>, line = 44, col = 6}))))) (NullStmt (fromList []) ({<unknown>, line = 45, col = 6},{<unknown>, line = 45, col = 6})))) (For (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 56, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 46, col = 7},{<unknown>, line = 46, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 46, col = 9},{<unknown>, line = 46, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 46, col = 9},{<unknown>, line = 46, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 46, col = 12},{<unknown>, line = 46, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 46, col = 13},{<unknown>, line = 46, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 56, col = 6}) (For (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 55, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 47, col = 7},{<unknown>, line = 47, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 47, col = 9},{<unknown>, line = 47, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 47, col = 9},{<unknown>, line = 47, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 47, col = 12},{<unknown>, line = 47, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 47, col = 13},{<unknown>, line = 47, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 48, col = 2},{<unknown>, line = 55, col = 6}) (Assg (fromList []) ({<unknown>, line = 48, col = 2},{<unknown>, line = 48, col = 30}) (Var (fromList []) ({<unknown>, line = 48, col = 2},{<unknown>, line = 48, col = 30}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 48, col = 4},{<unknown>, line = 48, col = 5}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 48, col = 6},{<unknown>, line = 48, col = 7}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 48, col = 11},{<unknown>, line = 48, col = 30}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 48, col = 11},{<unknown>, line = 48, col = 21}) [(VarName (fromList []) "hzero",[Var (fromList []) ({<unknown>, line = 48, col = 17},{<unknown>, line = 48, col = 18}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 48, col = 19},{<unknown>, line = 48, col = 20}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 48, col = 22},{<unknown>, line = 48, col = 30}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 48, col = 26},{<unknown>, line = 48, col = 27}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 48, col = 28},{<unknown>, line = 48, col = 29}) [(VarName (fromList []) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 49, col = 2},{<unknown>, line = 55, col = 6}) (Assg (fromList []) ({<unknown>, line = 49, col = 2},{<unknown>, line = 49, col = 14}) (Var (fromList []) ({<unknown>, line = 49, col = 2},{<unknown>, line = 49, col = 14}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 49, col = 6},{<unknown>, line = 49, col = 7}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 49, col = 8},{<unknown>, line = 49, col = 9}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 49, col = 13},{<unknown>, line = 49, col = 14}) "1")) (FSeq (fromList []) ({<unknown>, line = 50, col = 2},{<unknown>, line = 55, col = 6}) (If (fromList []) ({<unknown>, line = 50, col = 2},{<unknown>, line = 50, col = 31}) (Bin (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 18}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 12}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 50, col = 7},{<unknown>, line = 50, col = 8}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 50, col = 9},{<unknown>, line = 50, col = 10}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 50, col = 14},{<unknown>, line = 50, col = 18}) [(VarName (fromList []) "hmin",[])])) (Assg (fromList []) ({<unknown>, line = 50, col = 19},{<unknown>, line = 50, col = 31}) (Var (fromList []) ({<unknown>, line = 50, col = 19},{<unknown>, line = 50, col = 31}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 50, col = 23},{<unknown>, line = 50, col = 24}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 50, col = 25},{<unknown>, line = 50, col = 26}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 50, col = 30},{<unknown>, line = 50, col = 31}) "0")) [] Nothing) (FSeq (fromList []) ({<unknown>, line = 51, col = 2},{<unknown>, line = 55, col = 6}) (Assg (fromList []) ({<unknown>, line = 51, col = 2},{<unknown>, line = 51, col = 13}) (Var (fromList []) ({<unknown>, line = 51, col = 2},{<unknown>, line = 51, col = 13}) [(VarName (fromList []) "u",[Var (fromList []) ({<unknown>, line = 51, col = 4},{<unknown>, line = 51, col = 5}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 51, col = 6},{<unknown>, line = 51, col = 7}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 51, col = 11},{<unknown>, line = 51, col = 13}) "0.")) (FSeq (fromList []) ({<unknown>, line = 52, col = 2},{<unknown>, line = 55, col = 6}) (Assg (fromList []) ({<unknown>, line = 52, col = 2},{<unknown>, line = 52, col = 14}) (Var (fromList []) ({<unknown>, line = 52, col = 2},{<unknown>, line = 52, col = 14}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 52, col = 5},{<unknown>, line = 52, col = 6}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 52, col = 7},{<unknown>, line = 52, col = 8}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 52, col = 12},{<unknown>, line = 52, col = 14}) "0.")) (FSeq (fromList []) ({<unknown>, line = 53, col = 2},{<unknown>, line = 55, col = 6}) (Assg (fromList []) ({<unknown>, line = 53, col = 2},{<unknown>, line = 53, col = 13}) (Var (fromList []) ({<unknown>, line = 53, col = 2},{<unknown>, line = 53, col = 13}) [(VarName (fromList []) "v",[Var (fromList []) ({<unknown>, line = 53, col = 4},{<unknown>, line = 53, col = 5}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 53, col = 6},{<unknown>, line = 53, col = 7}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 53, col = 11},{<unknown>, line = 53, col = 13}) "0.")) (FSeq (fromList []) ({<unknown>, line = 54, col = 2},{<unknown>, line = 55, col = 6}) (Assg (fromList []) ({<unknown>, line = 54, col = 2},{<unknown>, line = 54, col = 14}) (Var (fromList []) ({<unknown>, line = 54, col = 2},{<unknown>, line = 54, col = 14}) [(VarName (fromList []) "vn",[Var (fromList []) ({<unknown>, line = 54, col = 5},{<unknown>, line = 54, col = 6}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 54, col = 7},{<unknown>, line = 54, col = 8}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 54, col = 12},{<unknown>, line = 54, col = 14}) "0.")) (NullStmt (fromList []) ({<unknown>, line = 55, col = 6},{<unknown>, line = 55, col = 6})))))))))) (NullStmt (fromList []) ({<unknown>, line = 56, col = 6},{<unknown>, line = 56, col = 6}))))))))))))))
Argument translations:

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: wave2d
Filename: ./Shallow-Water-2D/main.f95
Source:
program wave2d
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1) :: h
      real :: hmin
      real, dimension(0:ny+1,0:nx+1) :: hzero
      integer :: j
      integer :: k
      real, dimension(0:ny+1,0:nx+1) :: u
      real, dimension(0:ny+1,0:nx+1) :: un
      real, dimension(0:ny+1,0:nx+1) :: v
      real, dimension(0:ny+1,0:nx+1) :: vn
      integer, dimension(0:ny+1,0:nx+1) :: wet
      real :: hmax
      real :: time
      real :: dtmax
      real :: c
      real :: lambda
      integer :: n
      integer :: ntot
      integer :: nout
      integer :: dummy
    ntot = 10000
    eps = 0.05
    call init(hmin, dx, dy, dt, g, j, k, hzero, eta, etan, h, wet, u, un, v, vn)
    open(90, file='debug.dat', form='formatted')
    open(10, file='eta0.dat', form='formatted')
    do j = 0, ny+1, 1
        write(10, '(101F12.6)')(eta(j,k), k = 0, nx+1)
    end do
    close(10)
    open(10, file='h0.dat', form='formatted')
    do j = 0, ny+1, 1
        write(10, '(101F12.6)')(hzero(j,k), k = 0, nx+1)
    end do
    close(10)
    hmax = 0.
    do j = 1, ny, 1
        do k = 1, nx, 1
                hmax = max(hmax,h(j,k))
        end do
    end do
    dummy = 0
    c = sqrt(2*g*hmax)
    write(6, *)("c = ", c)
    lambda = dt*sqrt(g*hmax)/min(dx,dy)
    write(6, *)("lambda = ", lambda)
    if (lambda>1) then
        write(6, *)("This will not work. Do you know why?")
        stop 
    end if
    open(10, file='eta.dat', form='formatted')
    open(20, file='h.dat', form='formatted')
    open(30, file='u.dat', form='formatted')
    open(40, file='v.dat', form='formatted')
    do j = 26, 26, 1
        do k = 26, 26, 1
                eta(j,k) = 1.0
        end do
    end do
    do n = 1, ntot, 1
        time = REAL(n)*dt
        call dyn(j, k, dx, g, eta, dt, dy, un, u, wet, v, vn, h, etan)
        call shapiro(j, k, wet, etan, eps, eta)
        call vernieuw(dt, dx, dy, eps, eta, etan, g, h, hmin, hzero, j, k, u, un, v, vn, wet)
    end do
    do j = 0, ny+1, 1
        write(10, '(101F12.6)')(eta(j,k), k = 0, nx+1)
        write(20, '(101F12.6)')(h(j,k), k = 0, nx+1)
        write(30, '(101F12.6)')(u(j,k), k = 0, nx+1)
        write(40, '(101F12.6)')(v(j,k), k = 0, nx+1)
    end do
    write(6, *)("Data output at time = ", time/60.0, " min")

end program wave2d
AST: 
Main (fromList []) ({<unknown>, line = 1, col = 5},{<unknown>, line = 82, col = 0}) (SubName (fromList []) "wave2d") (Arg (fromList []) (NullArg (fromList [])) ({<unknown>, line = 1, col = 19},{<unknown>, line = 1, col = 19})) (Block (fromList []) (UseBlock (UseNil (fromList [])) {<unknown>, line = 2, col = 0}) (ImplicitNull (fromList [])) ({<unknown>, line = 2, col = 0},{<unknown>, line = 82, col = 0}) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 2, col = 0},{<unknown>, line = 2, col = 31}) [(Var (fromList []) ({<unknown>, line = 2, col = 25},{<unknown>, line = 2, col = 27}) [(VarName (fromList []) "nx",[])],Con (fromList []) ({<unknown>, line = 2, col = 28},{<unknown>, line = 2, col = 31}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 2, col = 8},{<unknown>, line = 2, col = 9}) "4") (NullExpr (fromList []) ({<unknown>, line = 2, col = 10},{<unknown>, line = 2, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 3, col = 0},{<unknown>, line = 3, col = 31}) [(Var (fromList []) ({<unknown>, line = 3, col = 25},{<unknown>, line = 3, col = 27}) [(VarName (fromList []) "ny",[])],Con (fromList []) ({<unknown>, line = 3, col = 28},{<unknown>, line = 3, col = 31}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 3, col = 8},{<unknown>, line = 3, col = 9}) "4") (NullExpr (fromList []) ({<unknown>, line = 3, col = 10},{<unknown>, line = 3, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 4, col = 6},{<unknown>, line = 4, col = 16}) [(Var (fromList []) ({<unknown>, line = 4, col = 14},{<unknown>, line = 4, col = 16}) [(VarName (fromList []) "dt",[])],NullExpr (fromList []) ({<unknown>, line = 4, col = 16},{<unknown>, line = 4, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 4, col = 11},{<unknown>, line = 4, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 4, col = 11},{<unknown>, line = 4, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 5, col = 6},{<unknown>, line = 5, col = 16}) [(Var (fromList []) ({<unknown>, line = 5, col = 14},{<unknown>, line = 5, col = 16}) [(VarName (fromList []) "dx",[])],NullExpr (fromList []) ({<unknown>, line = 5, col = 16},{<unknown>, line = 5, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 5, col = 11},{<unknown>, line = 5, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 5, col = 11},{<unknown>, line = 5, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 16}) [(Var (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 16}) [(VarName (fromList []) "dy",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 16},{<unknown>, line = 6, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 17}) [(Var (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 17}) [(VarName (fromList []) "eps",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 17},{<unknown>, line = 7, col = 17}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 8, col = 6},{<unknown>, line = 8, col = 43}) [(Var (fromList []) ({<unknown>, line = 8, col = 40},{<unknown>, line = 8, col = 43}) [(VarName (fromList []) "eta",[])],NullExpr (fromList []) ({<unknown>, line = 8, col = 43},{<unknown>, line = 8, col = 43}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 8, col = 22},{<unknown>, line = 8, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 8, col = 24},{<unknown>, line = 8, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 8, col = 24},{<unknown>, line = 8, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 8, col = 27},{<unknown>, line = 8, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 8, col = 29},{<unknown>, line = 8, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 8, col = 31},{<unknown>, line = 8, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 8, col = 31},{<unknown>, line = 8, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 8, col = 34},{<unknown>, line = 8, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 9, col = 6},{<unknown>, line = 9, col = 44}) [(Var (fromList []) ({<unknown>, line = 9, col = 40},{<unknown>, line = 9, col = 44}) [(VarName (fromList []) "etan",[])],NullExpr (fromList []) ({<unknown>, line = 9, col = 44},{<unknown>, line = 9, col = 44}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 9, col = 22},{<unknown>, line = 9, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 9, col = 24},{<unknown>, line = 9, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 9, col = 24},{<unknown>, line = 9, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 9, col = 27},{<unknown>, line = 9, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 9, col = 29},{<unknown>, line = 9, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 9, col = 31},{<unknown>, line = 9, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 9, col = 31},{<unknown>, line = 9, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 9, col = 34},{<unknown>, line = 9, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 10, col = 6},{<unknown>, line = 10, col = 15}) [(Var (fromList []) ({<unknown>, line = 10, col = 14},{<unknown>, line = 10, col = 15}) [(VarName (fromList []) "g",[])],NullExpr (fromList []) ({<unknown>, line = 10, col = 15},{<unknown>, line = 10, col = 15}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 10, col = 11},{<unknown>, line = 10, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 10, col = 11},{<unknown>, line = 10, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 11, col = 6},{<unknown>, line = 11, col = 41}) [(Var (fromList []) ({<unknown>, line = 11, col = 40},{<unknown>, line = 11, col = 41}) [(VarName (fromList []) "h",[])],NullExpr (fromList []) ({<unknown>, line = 11, col = 41},{<unknown>, line = 11, col = 41}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 11, col = 22},{<unknown>, line = 11, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 27},{<unknown>, line = 11, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 11, col = 29},{<unknown>, line = 11, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 34},{<unknown>, line = 11, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 6},{<unknown>, line = 12, col = 18}) [(Var (fromList []) ({<unknown>, line = 12, col = 14},{<unknown>, line = 12, col = 18}) [(VarName (fromList []) "hmin",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 18},{<unknown>, line = 12, col = 18}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 45}) [(Var (fromList []) ({<unknown>, line = 13, col = 40},{<unknown>, line = 13, col = 45}) [(VarName (fromList []) "hzero",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 45},{<unknown>, line = 13, col = 45}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 6},{<unknown>, line = 14, col = 18}) [(Var (fromList []) ({<unknown>, line = 14, col = 17},{<unknown>, line = 14, col = 18}) [(VarName (fromList []) "j",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 18},{<unknown>, line = 14, col = 18}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 14, col = 14},{<unknown>, line = 14, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 14},{<unknown>, line = 14, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 15, col = 6},{<unknown>, line = 15, col = 18}) [(Var (fromList []) ({<unknown>, line = 15, col = 17},{<unknown>, line = 15, col = 18}) [(VarName (fromList []) "k",[])],NullExpr (fromList []) ({<unknown>, line = 15, col = 18},{<unknown>, line = 15, col = 18}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 15, col = 14},{<unknown>, line = 15, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 15, col = 14},{<unknown>, line = 15, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 16, col = 6},{<unknown>, line = 16, col = 41}) [(Var (fromList []) ({<unknown>, line = 16, col = 40},{<unknown>, line = 16, col = 41}) [(VarName (fromList []) "u",[])],NullExpr (fromList []) ({<unknown>, line = 16, col = 41},{<unknown>, line = 16, col = 41}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 16, col = 22},{<unknown>, line = 16, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 27},{<unknown>, line = 16, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 16, col = 29},{<unknown>, line = 16, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 34},{<unknown>, line = 16, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 17, col = 6},{<unknown>, line = 17, col = 42}) [(Var (fromList []) ({<unknown>, line = 17, col = 40},{<unknown>, line = 17, col = 42}) [(VarName (fromList []) "un",[])],NullExpr (fromList []) ({<unknown>, line = 17, col = 42},{<unknown>, line = 17, col = 42}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 17, col = 22},{<unknown>, line = 17, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 27},{<unknown>, line = 17, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 17, col = 29},{<unknown>, line = 17, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 34},{<unknown>, line = 17, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 18, col = 6},{<unknown>, line = 18, col = 41}) [(Var (fromList []) ({<unknown>, line = 18, col = 40},{<unknown>, line = 18, col = 41}) [(VarName (fromList []) "v",[])],NullExpr (fromList []) ({<unknown>, line = 18, col = 41},{<unknown>, line = 18, col = 41}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 18, col = 22},{<unknown>, line = 18, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 27},{<unknown>, line = 18, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 34},{<unknown>, line = 18, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 19, col = 6},{<unknown>, line = 19, col = 42}) [(Var (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 42}) [(VarName (fromList []) "vn",[])],NullExpr (fromList []) ({<unknown>, line = 19, col = 42},{<unknown>, line = 19, col = 42}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 19, col = 22},{<unknown>, line = 19, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 27},{<unknown>, line = 19, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 19, col = 29},{<unknown>, line = 19, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 34},{<unknown>, line = 19, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 20, col = 6},{<unknown>, line = 20, col = 46}) [(Var (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 46}) [(VarName (fromList []) "wet",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 46},{<unknown>, line = 20, col = 46}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 26}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 31}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 29}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 30},{<unknown>, line = 20, col = 31}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 32},{<unknown>, line = 20, col = 33}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 38}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 36}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 37},{<unknown>, line = 20, col = 38}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 21, col = 0},{<unknown>, line = 21, col = 12}) [(Var (fromList []) ({<unknown>, line = 21, col = 8},{<unknown>, line = 21, col = 12}) [(VarName (fromList []) "hmax",[])],NullExpr (fromList []) ({<unknown>, line = 21, col = 12},{<unknown>, line = 21, col = 12}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 21, col = 5},{<unknown>, line = 21, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 21, col = 5},{<unknown>, line = 21, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 22, col = 0},{<unknown>, line = 22, col = 12}) [(Var (fromList []) ({<unknown>, line = 22, col = 8},{<unknown>, line = 22, col = 12}) [(VarName (fromList []) "time",[])],NullExpr (fromList []) ({<unknown>, line = 22, col = 12},{<unknown>, line = 22, col = 12}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 23, col = 13}) [(Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 13}) [(VarName (fromList []) "dtmax",[])],NullExpr (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 24, col = 9}) [(Var (fromList []) ({<unknown>, line = 24, col = 8},{<unknown>, line = 24, col = 9}) [(VarName (fromList []) "c",[])],NullExpr (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 9}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 25, col = 0},{<unknown>, line = 25, col = 14}) [(Var (fromList []) ({<unknown>, line = 25, col = 8},{<unknown>, line = 25, col = 14}) [(VarName (fromList []) "lambda",[])],NullExpr (fromList []) ({<unknown>, line = 25, col = 14},{<unknown>, line = 25, col = 14}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 26, col = 0},{<unknown>, line = 26, col = 12}) [(Var (fromList []) ({<unknown>, line = 26, col = 11},{<unknown>, line = 26, col = 12}) [(VarName (fromList []) "n",[])],NullExpr (fromList []) ({<unknown>, line = 26, col = 12},{<unknown>, line = 26, col = 12}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 8})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 27, col = 0},{<unknown>, line = 27, col = 15}) [(Var (fromList []) ({<unknown>, line = 27, col = 11},{<unknown>, line = 27, col = 15}) [(VarName (fromList []) "ntot",[])],NullExpr (fromList []) ({<unknown>, line = 27, col = 15},{<unknown>, line = 27, col = 15}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 8})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 28, col = 0},{<unknown>, line = 28, col = 15}) [(Var (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 15}) [(VarName (fromList []) "nout",[])],NullExpr (fromList []) ({<unknown>, line = 28, col = 15},{<unknown>, line = 28, col = 15}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 28, col = 8},{<unknown>, line = 28, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 28, col = 8},{<unknown>, line = 28, col = 8})))) (Decl (fromList []) ({<unknown>, line = 29, col = 0},{<unknown>, line = 29, col = 16}) [(Var (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 16}) [(VarName (fromList []) "dummy",[])],NullExpr (fromList []) ({<unknown>, line = 29, col = 16},{<unknown>, line = 29, col = 16}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 8}))))))))))))))))))))))))))))))) (FSeq (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 30, col = 12}) (Var (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 30, col = 5}) [(VarName (fromList []) "ntot",[])]) (Con (fromList []) ({<unknown>, line = 30, col = 7},{<unknown>, line = 30, col = 12}) "10000")) (FSeq (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 31, col = 10}) (Var (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 31, col = 4}) [(VarName (fromList []) "eps",[])]) (Con (fromList []) ({<unknown>, line = 31, col = 6},{<unknown>, line = 31, col = 10}) "0.05")) (FSeq (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 80, col = 51}) (Call (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 32, col = 61}) (Var (fromList []) ({<unknown>, line = 32, col = 5},{<unknown>, line = 32, col = 9}) [(VarName (fromList []) "init",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 60}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 57}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 55}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 52}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 50}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 46}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 44}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 39}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 35}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 29}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 27}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 25}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 23}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 20}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 17}) (Var (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 14}) [(VarName (fromList []) "hmin",[])]) (Var (fromList []) ({<unknown>, line = 32, col = 15},{<unknown>, line = 32, col = 17}) [(VarName (fromList []) "dx",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 18},{<unknown>, line = 32, col = 20}) [(VarName (fromList []) "dy",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 21},{<unknown>, line = 32, col = 23}) [(VarName (fromList []) "dt",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 24},{<unknown>, line = 32, col = 25}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 26},{<unknown>, line = 32, col = 27}) [(VarName (fromList []) "j",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 28},{<unknown>, line = 32, col = 29}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 30},{<unknown>, line = 32, col = 35}) [(VarName (fromList []) "hzero",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 36},{<unknown>, line = 32, col = 39}) [(VarName (fromList []) "eta",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 40},{<unknown>, line = 32, col = 44}) [(VarName (fromList []) "etan",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 45},{<unknown>, line = 32, col = 46}) [(VarName (fromList []) "h",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 47},{<unknown>, line = 32, col = 50}) [(VarName (fromList []) "wet",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 51},{<unknown>, line = 32, col = 52}) [(VarName (fromList []) "u",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 53},{<unknown>, line = 32, col = 55}) [(VarName (fromList []) "un",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 56},{<unknown>, line = 32, col = 57}) [(VarName (fromList []) "v",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 58},{<unknown>, line = 32, col = 60}) [(VarName (fromList []) "vn",[])])))) (FSeq (fromList []) ({<unknown>, line = 33, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 33, col = 0},{<unknown>, line = 33, col = 43}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 33, col = 5},{<unknown>, line = 33, col = 7}) "90"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 33, col = 14},{<unknown>, line = 33, col = 25}) "'debug.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 33, col = 31},{<unknown>, line = 33, col = 42}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 34, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 34, col = 0},{<unknown>, line = 34, col = 42}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 34, col = 5},{<unknown>, line = 34, col = 7}) "10"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 34, col = 14},{<unknown>, line = 34, col = 24}) "'eta0.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 34, col = 30},{<unknown>, line = 34, col = 41}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 35, col = 2},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 35, col = 2},{<unknown>, line = 37, col = 8}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 35, col = 9},{<unknown>, line = 35, col = 10}) "0") (Bin (fromList []) ({<unknown>, line = 35, col = 11},{<unknown>, line = 35, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 35, col = 11},{<unknown>, line = 35, col = 13}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 35, col = 14},{<unknown>, line = 35, col = 15}) "1")) (Con (fromList []) ({<unknown>, line = 35, col = 15},{<unknown>, line = 35, col = 15}) "1") (FSeq (fromList []) ({<unknown>, line = 36, col = 45},{<unknown>, line = 37, col = 8}) (Write (fromList []) ({<unknown>, line = 36, col = 45},{<unknown>, line = 36, col = 45}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 36, col = 12},{<unknown>, line = 36, col = 12}) "10"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 36, col = 27},{<unknown>, line = 36, col = 44}) (ESeq (fromList []) ({<unknown>, line = 36, col = 27},{<unknown>, line = 36, col = 39}) (Var (fromList []) ({<unknown>, line = 36, col = 27},{<unknown>, line = 36, col = 35}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 36, col = 31},{<unknown>, line = 36, col = 32}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 36, col = 33},{<unknown>, line = 36, col = 34}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 36, col = 36},{<unknown>, line = 36, col = 39}) "k" (Con (fromList []) ({<unknown>, line = 36, col = 38},{<unknown>, line = 36, col = 39}) "0"))) (Bin (fromList []) ({<unknown>, line = 36, col = 40},{<unknown>, line = 36, col = 44}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 36, col = 40},{<unknown>, line = 36, col = 42}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 36, col = 43},{<unknown>, line = 36, col = 44}) "1"))]) (NullStmt (fromList []) ({<unknown>, line = 37, col = 8},{<unknown>, line = 37, col = 8})))) (FSeq (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 80, col = 51}) (Close (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 38, col = 9}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 38, col = 6},{<unknown>, line = 38, col = 8}) "10")]) (FSeq (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 39, col = 40}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 39, col = 5},{<unknown>, line = 39, col = 7}) "10"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 39, col = 14},{<unknown>, line = 39, col = 22}) "'h0.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 39, col = 28},{<unknown>, line = 39, col = 39}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 42, col = 8}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 40, col = 9},{<unknown>, line = 40, col = 10}) "0") (Bin (fromList []) ({<unknown>, line = 40, col = 11},{<unknown>, line = 40, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 11},{<unknown>, line = 40, col = 13}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 40, col = 14},{<unknown>, line = 40, col = 15}) "1")) (Con (fromList []) ({<unknown>, line = 40, col = 15},{<unknown>, line = 40, col = 15}) "1") (FSeq (fromList []) ({<unknown>, line = 41, col = 47},{<unknown>, line = 42, col = 8}) (Write (fromList []) ({<unknown>, line = 41, col = 47},{<unknown>, line = 41, col = 47}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 12}) "10"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 46}) (ESeq (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 41}) (Var (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 37}) [(VarName (fromList []) "hzero",[Var (fromList []) ({<unknown>, line = 41, col = 33},{<unknown>, line = 41, col = 34}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 41, col = 35},{<unknown>, line = 41, col = 36}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 41, col = 38},{<unknown>, line = 41, col = 41}) "k" (Con (fromList []) ({<unknown>, line = 41, col = 40},{<unknown>, line = 41, col = 41}) "0"))) (Bin (fromList []) ({<unknown>, line = 41, col = 42},{<unknown>, line = 41, col = 46}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 42},{<unknown>, line = 41, col = 44}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 41, col = 45},{<unknown>, line = 41, col = 46}) "1"))]) (NullStmt (fromList []) ({<unknown>, line = 42, col = 8},{<unknown>, line = 42, col = 8})))) (FSeq (fromList []) ({<unknown>, line = 43, col = 0},{<unknown>, line = 80, col = 51}) (Close (fromList []) ({<unknown>, line = 43, col = 0},{<unknown>, line = 43, col = 9}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 43, col = 6},{<unknown>, line = 43, col = 8}) "10")]) (FSeq (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 44, col = 9}) (Var (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 44, col = 5}) [(VarName (fromList []) "hmax",[])]) (Con (fromList []) ({<unknown>, line = 44, col = 7},{<unknown>, line = 44, col = 9}) "0.")) (FSeq (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 49, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 45, col = 7},{<unknown>, line = 45, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 45, col = 9},{<unknown>, line = 45, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 45, col = 11},{<unknown>, line = 45, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 49, col = 6}) (For (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 48, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 46, col = 7},{<unknown>, line = 46, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 46, col = 9},{<unknown>, line = 46, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 46, col = 11},{<unknown>, line = 46, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 47, col = 2},{<unknown>, line = 48, col = 6}) (Assg (fromList []) ({<unknown>, line = 47, col = 2},{<unknown>, line = 47, col = 25}) (Var (fromList []) ({<unknown>, line = 47, col = 2},{<unknown>, line = 47, col = 7}) [(VarName (fromList []) "hmax",[])]) (Var (fromList []) ({<unknown>, line = 47, col = 9},{<unknown>, line = 47, col = 25}) [(VarName (fromList []) "max",[Var (fromList []) ({<unknown>, line = 47, col = 13},{<unknown>, line = 47, col = 17}) [(VarName (fromList []) "hmax",[])],Var (fromList []) ({<unknown>, line = 47, col = 18},{<unknown>, line = 47, col = 24}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 47, col = 20},{<unknown>, line = 47, col = 21}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 47, col = 22},{<unknown>, line = 47, col = 23}) [(VarName (fromList []) "k",[])]])]])])) (NullStmt (fromList []) ({<unknown>, line = 48, col = 6},{<unknown>, line = 48, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 49, col = 6},{<unknown>, line = 49, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 50, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 50, col = 0},{<unknown>, line = 50, col = 9}) (Var (fromList []) ({<unknown>, line = 50, col = 0},{<unknown>, line = 50, col = 6}) [(VarName (fromList []) "dummy",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 8},{<unknown>, line = 50, col = 9}) "0")) (FSeq (fromList []) ({<unknown>, line = 51, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 51, col = 0},{<unknown>, line = 51, col = 18}) (Var (fromList []) ({<unknown>, line = 51, col = 0},{<unknown>, line = 51, col = 2}) [(VarName (fromList []) "c",[])]) (Sqrt (fromList []) ({<unknown>, line = 51, col = 4},{<unknown>, line = 51, col = 18}) (Bin (fromList []) ({<unknown>, line = 51, col = 9},{<unknown>, line = 51, col = 17}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 51, col = 9},{<unknown>, line = 51, col = 12}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 51, col = 9},{<unknown>, line = 51, col = 10}) "2") (Var (fromList []) ({<unknown>, line = 51, col = 11},{<unknown>, line = 51, col = 12}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 51, col = 13},{<unknown>, line = 51, col = 17}) [(VarName (fromList []) "hmax",[])])))) (FSeq (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 80, col = 51}) (Write (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 52, col = 18}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 52, col = 7},{<unknown>, line = 52, col = 7}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 52, col = 9},{<unknown>, line = 52, col = 9}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 52, col = 10},{<unknown>, line = 52, col = 16}) "\"c = \"",Var (fromList []) ({<unknown>, line = 52, col = 17},{<unknown>, line = 52, col = 18}) [(VarName (fromList []) "c",[])]]) (FSeq (fromList []) ({<unknown>, line = 53, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 53, col = 0},{<unknown>, line = 53, col = 35}) (Var (fromList []) ({<unknown>, line = 53, col = 0},{<unknown>, line = 53, col = 7}) [(VarName (fromList []) "lambda",[])]) (Bin (fromList []) ({<unknown>, line = 53, col = 9},{<unknown>, line = 53, col = 35}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 53, col = 9},{<unknown>, line = 53, col = 24}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 53, col = 9},{<unknown>, line = 53, col = 11}) [(VarName (fromList []) "dt",[])]) (Sqrt (fromList []) ({<unknown>, line = 53, col = 12},{<unknown>, line = 53, col = 24}) (Bin (fromList []) ({<unknown>, line = 53, col = 17},{<unknown>, line = 53, col = 23}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 53, col = 17},{<unknown>, line = 53, col = 18}) [(VarName (fromList []) "g",[])]) (Var (fromList []) ({<unknown>, line = 53, col = 19},{<unknown>, line = 53, col = 23}) [(VarName (fromList []) "hmax",[])])))) (Var (fromList []) ({<unknown>, line = 53, col = 25},{<unknown>, line = 53, col = 35}) [(VarName (fromList []) "min",[Var (fromList []) ({<unknown>, line = 53, col = 29},{<unknown>, line = 53, col = 31}) [(VarName (fromList []) "dx",[])],Var (fromList []) ({<unknown>, line = 53, col = 32},{<unknown>, line = 53, col = 34}) [(VarName (fromList []) "dy",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 54, col = 28},{<unknown>, line = 80, col = 51}) (Write (fromList []) ({<unknown>, line = 54, col = 28},{<unknown>, line = 54, col = 28}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 54, col = 7},{<unknown>, line = 54, col = 7}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 54, col = 9},{<unknown>, line = 54, col = 9}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 54, col = 10},{<unknown>, line = 54, col = 21}) "\"lambda = \"",Var (fromList []) ({<unknown>, line = 54, col = 22},{<unknown>, line = 54, col = 28}) [(VarName (fromList []) "lambda",[])]]) (FSeq (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 80, col = 51}) (If (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 58, col = 6}) (Bin (fromList []) ({<unknown>, line = 55, col = 3},{<unknown>, line = 55, col = 13}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 55, col = 3},{<unknown>, line = 55, col = 10}) [(VarName (fromList []) "lambda",[])]) (Con (fromList []) ({<unknown>, line = 55, col = 12},{<unknown>, line = 55, col = 13}) "1")) (FSeq (fromList []) ({<unknown>, line = 56, col = 51},{<unknown>, line = 57, col = 6}) (Write (fromList []) ({<unknown>, line = 56, col = 51},{<unknown>, line = 56, col = 51}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 56, col = 9},{<unknown>, line = 56, col = 9}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 56, col = 11},{<unknown>, line = 56, col = 11}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 56, col = 13},{<unknown>, line = 56, col = 51}) "\"This will not work. Do you know why?\""]) (Stop (fromList []) ({<unknown>, line = 57, col = 2},{<unknown>, line = 57, col = 6}) (NullExpr (fromList []) ({<unknown>, line = 57, col = 2},{<unknown>, line = 57, col = 6})))) [] Nothing) (FSeq (fromList []) ({<unknown>, line = 59, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 59, col = 0},{<unknown>, line = 59, col = 41}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 59, col = 5},{<unknown>, line = 59, col = 7}) "10"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 59, col = 14},{<unknown>, line = 59, col = 23}) "'eta.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 59, col = 29},{<unknown>, line = 59, col = 40}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 60, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 60, col = 0},{<unknown>, line = 60, col = 39}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 7}) "20"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 60, col = 14},{<unknown>, line = 60, col = 21}) "'h.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 60, col = 27},{<unknown>, line = 60, col = 38}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 61, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 61, col = 0},{<unknown>, line = 61, col = 39}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 61, col = 5},{<unknown>, line = 61, col = 7}) "30"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 61, col = 14},{<unknown>, line = 61, col = 21}) "'u.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 61, col = 27},{<unknown>, line = 61, col = 38}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 62, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 62, col = 0},{<unknown>, line = 62, col = 39}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 62, col = 5},{<unknown>, line = 62, col = 7}) "40"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 62, col = 14},{<unknown>, line = 62, col = 21}) "'v.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 62, col = 27},{<unknown>, line = 62, col = 38}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 63, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 63, col = 0},{<unknown>, line = 67, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 63, col = 7},{<unknown>, line = 63, col = 9}) "26") (Con (fromList []) ({<unknown>, line = 63, col = 10},{<unknown>, line = 63, col = 12}) "26") (Con (fromList []) ({<unknown>, line = 63, col = 12},{<unknown>, line = 63, col = 12}) "1") (FSeq (fromList []) ({<unknown>, line = 64, col = 0},{<unknown>, line = 67, col = 6}) (For (fromList []) ({<unknown>, line = 64, col = 0},{<unknown>, line = 66, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 64, col = 7},{<unknown>, line = 64, col = 9}) "26") (Con (fromList []) ({<unknown>, line = 64, col = 10},{<unknown>, line = 64, col = 12}) "26") (Con (fromList []) ({<unknown>, line = 64, col = 12},{<unknown>, line = 64, col = 12}) "1") (FSeq (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 66, col = 6}) (Assg (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 65, col = 14}) (Var (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 65, col = 14}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 65, col = 4},{<unknown>, line = 65, col = 5}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 65, col = 6},{<unknown>, line = 65, col = 7}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 65, col = 11},{<unknown>, line = 65, col = 14}) "1.0")) (NullStmt (fromList []) ({<unknown>, line = 66, col = 6},{<unknown>, line = 66, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 67, col = 6},{<unknown>, line = 67, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 68, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 68, col = 0},{<unknown>, line = 73, col = 6}) (VarName (fromList []) "n") (Con (fromList []) ({<unknown>, line = 68, col = 7},{<unknown>, line = 68, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 68, col = 9},{<unknown>, line = 68, col = 13}) [(VarName (fromList []) "ntot",[])]) (Con (fromList []) ({<unknown>, line = 68, col = 13},{<unknown>, line = 68, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 69, col = 0},{<unknown>, line = 73, col = 6}) (Assg (fromList []) ({<unknown>, line = 69, col = 0},{<unknown>, line = 69, col = 17}) (Var (fromList []) ({<unknown>, line = 69, col = 0},{<unknown>, line = 69, col = 5}) [(VarName (fromList []) "time",[])]) (Bin (fromList []) ({<unknown>, line = 69, col = 7},{<unknown>, line = 69, col = 17}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 7},{<unknown>, line = 69, col = 14}) [(VarName (fromList []) "REAL",[Var (fromList []) ({<unknown>, line = 69, col = 12},{<unknown>, line = 69, col = 13}) [(VarName (fromList []) "n",[])]])]) (Var (fromList []) ({<unknown>, line = 69, col = 15},{<unknown>, line = 69, col = 17}) [(VarName (fromList []) "dt",[])]))) (FSeq (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 73, col = 6}) (Call (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 51}) (Var (fromList []) ({<unknown>, line = 70, col = 7},{<unknown>, line = 70, col = 10}) [(VarName (fromList []) "dyn",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 50}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 45}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 43}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 40}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 38}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 34}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 32}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 29}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 26}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 23}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 19}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 17}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 14}) (Var (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 12}) [(VarName (fromList []) "j",[])]) (Var (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 14}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 15},{<unknown>, line = 70, col = 17}) [(VarName (fromList []) "dx",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 19}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 20},{<unknown>, line = 70, col = 23}) [(VarName (fromList []) "eta",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 24},{<unknown>, line = 70, col = 26}) [(VarName (fromList []) "dt",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 27},{<unknown>, line = 70, col = 29}) [(VarName (fromList []) "dy",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 30},{<unknown>, line = 70, col = 32}) [(VarName (fromList []) "un",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 33},{<unknown>, line = 70, col = 34}) [(VarName (fromList []) "u",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 35},{<unknown>, line = 70, col = 38}) [(VarName (fromList []) "wet",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 39},{<unknown>, line = 70, col = 40}) [(VarName (fromList []) "v",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 41},{<unknown>, line = 70, col = 43}) [(VarName (fromList []) "vn",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 44},{<unknown>, line = 70, col = 45}) [(VarName (fromList []) "h",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 46},{<unknown>, line = 70, col = 50}) [(VarName (fromList []) "etan",[])])))) (FSeq (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 73, col = 6}) (Call (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 36}) (Var (fromList []) ({<unknown>, line = 71, col = 7},{<unknown>, line = 71, col = 14}) [(VarName (fromList []) "shapiro",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 35}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 31}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 27}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 22}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 18}) (Var (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 16}) [(VarName (fromList []) "j",[])]) (Var (fromList []) ({<unknown>, line = 71, col = 17},{<unknown>, line = 71, col = 18}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 19},{<unknown>, line = 71, col = 22}) [(VarName (fromList []) "wet",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 23},{<unknown>, line = 71, col = 27}) [(VarName (fromList []) "etan",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 28},{<unknown>, line = 71, col = 31}) [(VarName (fromList []) "eps",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 32},{<unknown>, line = 71, col = 35}) [(VarName (fromList []) "eta",[])])))) (FSeq (fromList []) ({<unknown>, line = 72, col = 6},{<unknown>, line = 73, col = 6}) (Call (fromList []) ({<unknown>, line = 72, col = 6},{<unknown>, line = 72, col = 75}) (Var (fromList []) ({<unknown>, line = 72, col = 11},{<unknown>, line = 72, col = 19}) [(VarName (fromList []) "vernieuw",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 74}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 70}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 67}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 65}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 62}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 60}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 58}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 56}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 50}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 45}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 43}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 41}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 36}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 32}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 28}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 25}) (Var (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 22}) [(VarName (fromList []) "dt",[])]) (Var (fromList []) ({<unknown>, line = 72, col = 23},{<unknown>, line = 72, col = 25}) [(VarName (fromList []) "dx",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 26},{<unknown>, line = 72, col = 28}) [(VarName (fromList []) "dy",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 29},{<unknown>, line = 72, col = 32}) [(VarName (fromList []) "eps",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 33},{<unknown>, line = 72, col = 36}) [(VarName (fromList []) "eta",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 37},{<unknown>, line = 72, col = 41}) [(VarName (fromList []) "etan",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 42},{<unknown>, line = 72, col = 43}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 44},{<unknown>, line = 72, col = 45}) [(VarName (fromList []) "h",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 46},{<unknown>, line = 72, col = 50}) [(VarName (fromList []) "hmin",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 51},{<unknown>, line = 72, col = 56}) [(VarName (fromList []) "hzero",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 57},{<unknown>, line = 72, col = 58}) [(VarName (fromList []) "j",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 59},{<unknown>, line = 72, col = 60}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 61},{<unknown>, line = 72, col = 62}) [(VarName (fromList []) "u",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 63},{<unknown>, line = 72, col = 65}) [(VarName (fromList []) "un",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 66},{<unknown>, line = 72, col = 67}) [(VarName (fromList []) "v",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 68},{<unknown>, line = 72, col = 70}) [(VarName (fromList []) "vn",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 71},{<unknown>, line = 72, col = 74}) [(VarName (fromList []) "wet",[])])))) (NullStmt (fromList []) ({<unknown>, line = 73, col = 6},{<unknown>, line = 73, col = 6}))))))) (FSeq (fromList []) ({<unknown>, line = 74, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 74, col = 0},{<unknown>, line = 79, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 74, col = 7},{<unknown>, line = 74, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 74, col = 9},{<unknown>, line = 74, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 74, col = 9},{<unknown>, line = 74, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 74, col = 12},{<unknown>, line = 74, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 74, col = 13},{<unknown>, line = 74, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 75, col = 43}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 75, col = 10},{<unknown>, line = 75, col = 10}) "10"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 75, col = 25},{<unknown>, line = 75, col = 42}) (ESeq (fromList []) ({<unknown>, line = 75, col = 25},{<unknown>, line = 75, col = 37}) (Var (fromList []) ({<unknown>, line = 75, col = 25},{<unknown>, line = 75, col = 33}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 75, col = 29},{<unknown>, line = 75, col = 30}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 75, col = 31},{<unknown>, line = 75, col = 32}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 75, col = 34},{<unknown>, line = 75, col = 37}) "k" (Con (fromList []) ({<unknown>, line = 75, col = 36},{<unknown>, line = 75, col = 37}) "0"))) (Bin (fromList []) ({<unknown>, line = 75, col = 38},{<unknown>, line = 75, col = 42}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 38},{<unknown>, line = 75, col = 40}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 42}) "1"))]) (FSeq (fromList []) ({<unknown>, line = 76, col = 42},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 76, col = 42},{<unknown>, line = 76, col = 42}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 76, col = 10},{<unknown>, line = 76, col = 10}) "20"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 76, col = 25},{<unknown>, line = 76, col = 41}) (ESeq (fromList []) ({<unknown>, line = 76, col = 25},{<unknown>, line = 76, col = 36}) (Var (fromList []) ({<unknown>, line = 76, col = 25},{<unknown>, line = 76, col = 32}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 76, col = 27},{<unknown>, line = 76, col = 28}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 76, col = 29},{<unknown>, line = 76, col = 30}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 76, col = 33},{<unknown>, line = 76, col = 36}) "k" (Con (fromList []) ({<unknown>, line = 76, col = 35},{<unknown>, line = 76, col = 36}) "0"))) (Bin (fromList []) ({<unknown>, line = 76, col = 37},{<unknown>, line = 76, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 37},{<unknown>, line = 76, col = 39}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 40},{<unknown>, line = 76, col = 41}) "1"))]) (FSeq (fromList []) ({<unknown>, line = 77, col = 42},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 77, col = 42},{<unknown>, line = 77, col = 42}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 77, col = 10},{<unknown>, line = 77, col = 10}) "30"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 77, col = 25},{<unknown>, line = 77, col = 41}) (ESeq (fromList []) ({<unknown>, line = 77, col = 25},{<unknown>, line = 77, col = 36}) (Var (fromList []) ({<unknown>, line = 77, col = 25},{<unknown>, line = 77, col = 32}) [(VarName (fromList []) "u",[Var (fromList []) ({<unknown>, line = 77, col = 27},{<unknown>, line = 77, col = 28}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 77, col = 29},{<unknown>, line = 77, col = 30}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 77, col = 33},{<unknown>, line = 77, col = 36}) "k" (Con (fromList []) ({<unknown>, line = 77, col = 35},{<unknown>, line = 77, col = 36}) "0"))) (Bin (fromList []) ({<unknown>, line = 77, col = 37},{<unknown>, line = 77, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 77, col = 37},{<unknown>, line = 77, col = 39}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 77, col = 40},{<unknown>, line = 77, col = 41}) "1"))]) (FSeq (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 78, col = 42}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 78, col = 10},{<unknown>, line = 78, col = 10}) "40"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 78, col = 25},{<unknown>, line = 78, col = 41}) (ESeq (fromList []) ({<unknown>, line = 78, col = 25},{<unknown>, line = 78, col = 36}) (Var (fromList []) ({<unknown>, line = 78, col = 25},{<unknown>, line = 78, col = 32}) [(VarName (fromList []) "v",[Var (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 28}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 78, col = 29},{<unknown>, line = 78, col = 30}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 78, col = 33},{<unknown>, line = 78, col = 36}) "k" (Con (fromList []) ({<unknown>, line = 78, col = 35},{<unknown>, line = 78, col = 36}) "0"))) (Bin (fromList []) ({<unknown>, line = 78, col = 37},{<unknown>, line = 78, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 37},{<unknown>, line = 78, col = 39}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 78, col = 40},{<unknown>, line = 78, col = 41}) "1"))]) (NullStmt (fromList []) ({<unknown>, line = 79, col = 6},{<unknown>, line = 79, col = 6}))))))) (Write (fromList []) ({<unknown>, line = 80, col = 51},{<unknown>, line = 80, col = 51}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 80, col = 7},{<unknown>, line = 80, col = 7}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 80, col = 9},{<unknown>, line = 80, col = 9}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 80, col = 10},{<unknown>, line = 80, col = 34}) "\"Data output at time = \"",Bin (fromList []) ({<unknown>, line = 80, col = 35},{<unknown>, line = 80, col = 44}) (Div (fromList [])) (Var (fromList []) ({<unknown>, line = 80, col = 35},{<unknown>, line = 80, col = 39}) [(VarName (fromList []) "time",[])]) (Con (fromList []) ({<unknown>, line = 80, col = 40},{<unknown>, line = 80, col = 44}) "60.0"),ConS (fromList []) ({<unknown>, line = 80, col = 45},{<unknown>, line = 80, col = 51}) "\" min\""]))))))))))))))))))))))))))) []
Argument translations:
	dyn->
	    call dyn(j, k, dx, g, eta, dt, dy, un, u, wet, v, vn, h, etan)
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "j"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "dx", argument = VarName (fromList []) "dx"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dy", argument = VarName (fromList []) "dy"}
	ArgTrans {parameter = ArgName (fromList []) "un", argument = VarName (fromList []) "un"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	init->
	    call init(hmin, dx, dy, dt, g, j, k, hzero, eta, etan, h, wet, u, un, v, vn)
	ArgTrans {parameter = ArgName (fromList []) "hmin", argument = VarName (fromList []) "hmin"}
	ArgTrans {parameter = ArgName (fromList []) "dx", argument = VarName (fromList []) "dx"}
	ArgTrans {parameter = ArgName (fromList []) "dy", argument = VarName (fromList []) "dy"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "j"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "hzero", argument = VarName (fromList []) "hzero"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "un", argument = VarName (fromList []) "un"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	shapiro->
	    call shapiro(j, k, wet, etan, eps, eta)
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "j"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	ArgTrans {parameter = ArgName (fromList []) "eps", argument = VarName (fromList []) "eps"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	vernieuw->
	    call vernieuw(dt, dx, dy, eps, eta, etan, g, h, hmin, hzero, j, k, u, un, v, vn, wet)
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dx", argument = VarName (fromList []) "dx"}
	ArgTrans {parameter = ArgName (fromList []) "dy", argument = VarName (fromList []) "dy"}
	ArgTrans {parameter = ArgName (fromList []) "eps", argument = VarName (fromList []) "eps"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "hmin", argument = VarName (fromList []) "hmin"}
	ArgTrans {parameter = ArgName (fromList []) "hzero", argument = VarName (fromList []) "hzero"}
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "j"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "un", argument = VarName (fromList []) "un"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}

This subroutine will not be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: dyn
Filename: ./Shallow-Water-2D/dyn.f95
Source:
subroutine dyn(j,k,dx,g,eta,dt,dy,un,u,wet,v,vn,h,etan)
      integer(4), parameter :: ny = 500 
      integer(4), parameter :: nx = 500 
      integer :: j
      integer :: k
      real, intent(In) :: dx
      real, intent(In) :: g
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, intent(In) :: dt
      real, intent(In) :: dy
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: un
      real, dimension(0:ny+1,0:nx+1), intent(In) :: u
      integer, dimension(0:ny+1,0:nx+1), intent(In) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(In) :: v
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: vn
      real, dimension(0:ny+1,0:nx+1), intent(In) :: h
      real, dimension(0:ny+1,0:nx+1) :: etan
      real, dimension(0:ny+1,0:nx+1) :: du
      real, dimension(0:ny+1,0:nx+1) :: dv
      real :: uu
      real :: vv
      real :: duu
      real :: dvv
      real :: hue
      real :: huw
      real :: hwp
      real :: hwn
      real :: hen
      real :: hep
      real :: hvn
      real :: hvs
      real :: hsp
      real :: hsn
      real :: hnn
      real :: hnp
    do j = 1, ny, 1
        do k = 1, nx, 1
                du(j,k) = -dt*g*(eta(j,k+1)-eta(j,k))/dx
                dv(j,k) = -dt*g*(eta(j+1,k)-eta(j,k))/dy
        end do
    end do
    do j = 1, ny, 1
        do k = 1, nx, 1
                un(j,k) = 0.0
                uu = u(j,k)
                duu = du(j,k)
                if (wet(j,k)==1) then
                                if ((wet(j,k+1)==1) .or. (duu>0.0)) then
                                                                un(j,k) = uu+duu
                                end if
                else
                                if ((wet(j,k+1)==1) .and. (duu<0.0)) then
                                                                un(j,k) = uu+duu
                                end if
                end if
                vv = v(j,k)
                dvv = dv(j,k)
                vn(j,k) = 0.0
                if (wet(j,k)==1) then
                                if ((wet(j+1,k)==1) .or. (dvv>0.0)) then
                                                                vn(j,k) = vv+dvv
                                end if
                else
                                if ((wet(j+1,k)==1) .and. (dvv<0.0)) then
                                                                vn(j,k) = vv+dvv
                                end if
                end if
        end do
    end do
    do j = 1, ny, 1
        do k = 1, nx, 1
                hep = 0.5*(un(j,k)+abs(un(j,k)))*h(j,k)
                hen = 0.5*(un(j,k)-abs(un(j,k)))*h(j,k+1)
                hue = hep+hen
                hwp = 0.5*(un(j,k-1)+abs(un(j,k-1)))*h(j,k-1)
                hwn = 0.5*(un(j,k-1)-abs(un(j,k-1)))*h(j,k)
                huw = hwp+hwn
                hnp = 0.5*(vn(j,k)+abs(vn(j,k)))*h(j,k)
                hnn = 0.5*(vn(j,k)-abs(vn(j,k)))*h(j+1,k)
                hvn = hnp+hnn
                hsp = 0.5*(vn(j-1,k)+abs(vn(j-1,k)))*h(j-1,k)
                hsn = 0.5*(vn(j-1,k)-abs(vn(j-1,k)))*h(j,k)
                hvs = hsp+hsn
                etan(j,k) = eta(j,k)-dt*(hue-huw)/dx-dt*(hvn-hvs)/dy
        end do
    end do
end subroutine dyn

AST: 
Sub (fromList []) ({<unknown>, line = 3, col = 0},{<unknown>, line = 82, col = 0}) Nothing (SubName (fromList []) "dyn") (Arg (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ArgName (fromList []) "j") (ArgName (fromList []) "k")) (ArgName (fromList []) "dx")) (ArgName (fromList []) "g")) (ArgName (fromList []) "eta")) (ArgName (fromList []) "dt")) (ArgName (fromList []) "dy")) (ArgName (fromList []) "un")) (ArgName (fromList []) "u")) (ArgName (fromList []) "wet")) (ArgName (fromList []) "v")) (ArgName (fromList []) "vn")) (ArgName (fromList []) "h")) (ArgName (fromList []) "etan")) ({<unknown>, line = 3, col = 54},{<unknown>, line = 3, col = 55})) (Block (fromList []) (UseBlock (UseNil (fromList [])) {<unknown>, line = 4, col = 6}) (ImplicitNull (fromList [])) ({<unknown>, line = 4, col = 6},{<unknown>, line = 82, col = 0}) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 4, col = 6},{<unknown>, line = 4, col = 37}) [(Var (fromList []) ({<unknown>, line = 4, col = 31},{<unknown>, line = 4, col = 33}) [(VarName (fromList []) "ny",[])],Con (fromList []) ({<unknown>, line = 4, col = 34},{<unknown>, line = 4, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 4, col = 14},{<unknown>, line = 4, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 4, col = 16},{<unknown>, line = 4, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 5, col = 6},{<unknown>, line = 5, col = 37}) [(Var (fromList []) ({<unknown>, line = 5, col = 31},{<unknown>, line = 5, col = 33}) [(VarName (fromList []) "nx",[])],Con (fromList []) ({<unknown>, line = 5, col = 34},{<unknown>, line = 5, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 5, col = 14},{<unknown>, line = 5, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 5, col = 16},{<unknown>, line = 5, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 19}) [(Var (fromList []) ({<unknown>, line = 6, col = 17},{<unknown>, line = 6, col = 19}) [(VarName (fromList []) "j",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 19},{<unknown>, line = 6, col = 19}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 19}) [(Var (fromList []) ({<unknown>, line = 7, col = 17},{<unknown>, line = 7, col = 19}) [(VarName (fromList []) "k",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 19},{<unknown>, line = 7, col = 19}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 8, col = 6},{<unknown>, line = 8, col = 28}) [(Var (fromList []) ({<unknown>, line = 8, col = 26},{<unknown>, line = 8, col = 28}) [(VarName (fromList []) "dx",[])],NullExpr (fromList []) ({<unknown>, line = 8, col = 28},{<unknown>, line = 8, col = 28}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 9, col = 6},{<unknown>, line = 9, col = 27}) [(Var (fromList []) ({<unknown>, line = 9, col = 26},{<unknown>, line = 9, col = 27}) [(VarName (fromList []) "g",[])],NullExpr (fromList []) ({<unknown>, line = 9, col = 27},{<unknown>, line = 9, col = 27}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 10, col = 6},{<unknown>, line = 10, col = 44}) [(Var (fromList []) ({<unknown>, line = 10, col = 40},{<unknown>, line = 10, col = 44}) [(VarName (fromList []) "eta",[])],NullExpr (fromList []) ({<unknown>, line = 10, col = 44},{<unknown>, line = 10, col = 44}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 10, col = 22},{<unknown>, line = 10, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 10, col = 24},{<unknown>, line = 10, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 10, col = 24},{<unknown>, line = 10, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 10, col = 27},{<unknown>, line = 10, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 10, col = 29},{<unknown>, line = 10, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 10, col = 31},{<unknown>, line = 10, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 10, col = 31},{<unknown>, line = 10, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 10, col = 34},{<unknown>, line = 10, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 11, col = 6},{<unknown>, line = 11, col = 28}) [(Var (fromList []) ({<unknown>, line = 11, col = 26},{<unknown>, line = 11, col = 28}) [(VarName (fromList []) "dt",[])],NullExpr (fromList []) ({<unknown>, line = 11, col = 28},{<unknown>, line = 11, col = 28}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 6},{<unknown>, line = 12, col = 28}) [(Var (fromList []) ({<unknown>, line = 12, col = 26},{<unknown>, line = 12, col = 28}) [(VarName (fromList []) "dy",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 28},{<unknown>, line = 12, col = 28}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 12, col = 10},{<unknown>, line = 12, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 10},{<unknown>, line = 12, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 57}) [(Var (fromList []) ({<unknown>, line = 13, col = 55},{<unknown>, line = 13, col = 57}) [(VarName (fromList []) "un",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 57},{<unknown>, line = 13, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 6},{<unknown>, line = 14, col = 53}) [(Var (fromList []) ({<unknown>, line = 14, col = 52},{<unknown>, line = 14, col = 53}) [(VarName (fromList []) "u",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 53},{<unknown>, line = 14, col = 53}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 14, col = 22},{<unknown>, line = 14, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 14, col = 24},{<unknown>, line = 14, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 14, col = 24},{<unknown>, line = 14, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 14, col = 27},{<unknown>, line = 14, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 14, col = 29},{<unknown>, line = 14, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 14, col = 31},{<unknown>, line = 14, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 14, col = 31},{<unknown>, line = 14, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 14, col = 34},{<unknown>, line = 14, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 15, col = 6},{<unknown>, line = 15, col = 58}) [(Var (fromList []) ({<unknown>, line = 15, col = 55},{<unknown>, line = 15, col = 58}) [(VarName (fromList []) "wet",[])],NullExpr (fromList []) ({<unknown>, line = 15, col = 58},{<unknown>, line = 15, col = 58}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 15, col = 25},{<unknown>, line = 15, col = 26}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 27},{<unknown>, line = 15, col = 31}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 27},{<unknown>, line = 15, col = 29}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 30},{<unknown>, line = 15, col = 31}) "1")),(Con (fromList []) ({<unknown>, line = 15, col = 32},{<unknown>, line = 15, col = 33}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 34},{<unknown>, line = 15, col = 38}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 34},{<unknown>, line = 15, col = 36}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 37},{<unknown>, line = 15, col = 38}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 15, col = 13},{<unknown>, line = 15, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 15, col = 13},{<unknown>, line = 15, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 16, col = 6},{<unknown>, line = 16, col = 53}) [(Var (fromList []) ({<unknown>, line = 16, col = 52},{<unknown>, line = 16, col = 53}) [(VarName (fromList []) "v",[])],NullExpr (fromList []) ({<unknown>, line = 16, col = 53},{<unknown>, line = 16, col = 53}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 16, col = 22},{<unknown>, line = 16, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 27},{<unknown>, line = 16, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 16, col = 29},{<unknown>, line = 16, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 34},{<unknown>, line = 16, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 17, col = 6},{<unknown>, line = 17, col = 57}) [(Var (fromList []) ({<unknown>, line = 17, col = 55},{<unknown>, line = 17, col = 57}) [(VarName (fromList []) "vn",[])],NullExpr (fromList []) ({<unknown>, line = 17, col = 57},{<unknown>, line = 17, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 17, col = 22},{<unknown>, line = 17, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 27},{<unknown>, line = 17, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 17, col = 29},{<unknown>, line = 17, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 34},{<unknown>, line = 17, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 18, col = 6},{<unknown>, line = 18, col = 53}) [(Var (fromList []) ({<unknown>, line = 18, col = 52},{<unknown>, line = 18, col = 53}) [(VarName (fromList []) "h",[])],NullExpr (fromList []) ({<unknown>, line = 18, col = 53},{<unknown>, line = 18, col = 53}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 18, col = 22},{<unknown>, line = 18, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 27},{<unknown>, line = 18, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 34},{<unknown>, line = 18, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 19, col = 6},{<unknown>, line = 19, col = 45}) [(Var (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 45}) [(VarName (fromList []) "etan",[])],NullExpr (fromList []) ({<unknown>, line = 19, col = 45},{<unknown>, line = 19, col = 45}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 19, col = 22},{<unknown>, line = 19, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 27},{<unknown>, line = 19, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 19, col = 29},{<unknown>, line = 19, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 34},{<unknown>, line = 19, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 20, col = 0},{<unknown>, line = 20, col = 36}) [(Var (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 36}) [(VarName (fromList []) "du",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 36}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 16},{<unknown>, line = 20, col = 17}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 18},{<unknown>, line = 20, col = 22}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 18},{<unknown>, line = 20, col = 20}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 21},{<unknown>, line = 20, col = 22}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 23},{<unknown>, line = 20, col = 24}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 27}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 28},{<unknown>, line = 20, col = 29}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 20, col = 4},{<unknown>, line = 20, col = 4})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 4},{<unknown>, line = 20, col = 4})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 21, col = 0},{<unknown>, line = 21, col = 36}) [(Var (fromList []) ({<unknown>, line = 21, col = 34},{<unknown>, line = 21, col = 36}) [(VarName (fromList []) "dv",[])],NullExpr (fromList []) ({<unknown>, line = 21, col = 36},{<unknown>, line = 21, col = 36}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 21, col = 16},{<unknown>, line = 21, col = 17}) "0",Bin (fromList []) ({<unknown>, line = 21, col = 18},{<unknown>, line = 21, col = 22}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 18},{<unknown>, line = 21, col = 20}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 21, col = 21},{<unknown>, line = 21, col = 22}) "1")),(Con (fromList []) ({<unknown>, line = 21, col = 23},{<unknown>, line = 21, col = 24}) "0",Bin (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 27}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 21, col = 28},{<unknown>, line = 21, col = 29}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 21, col = 4},{<unknown>, line = 21, col = 4})) (NullExpr (fromList []) ({<unknown>, line = 21, col = 4},{<unknown>, line = 21, col = 4})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 22, col = 0},{<unknown>, line = 22, col = 10}) [(Var (fromList []) ({<unknown>, line = 22, col = 8},{<unknown>, line = 22, col = 10}) [(VarName (fromList []) "uu",[])],NullExpr (fromList []) ({<unknown>, line = 22, col = 10},{<unknown>, line = 22, col = 10}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 23, col = 10}) [(Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 10}) [(VarName (fromList []) "vv",[])],NullExpr (fromList []) ({<unknown>, line = 23, col = 10},{<unknown>, line = 23, col = 10}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 24, col = 11}) [(Var (fromList []) ({<unknown>, line = 24, col = 8},{<unknown>, line = 24, col = 11}) [(VarName (fromList []) "duu",[])],NullExpr (fromList []) ({<unknown>, line = 24, col = 11},{<unknown>, line = 24, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 25, col = 0},{<unknown>, line = 25, col = 11}) [(Var (fromList []) ({<unknown>, line = 25, col = 8},{<unknown>, line = 25, col = 11}) [(VarName (fromList []) "dvv",[])],NullExpr (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 26, col = 0},{<unknown>, line = 26, col = 11}) [(Var (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 11}) [(VarName (fromList []) "hue",[])],NullExpr (fromList []) ({<unknown>, line = 26, col = 11},{<unknown>, line = 26, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 26, col = 5},{<unknown>, line = 26, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 26, col = 5},{<unknown>, line = 26, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 27, col = 0},{<unknown>, line = 27, col = 11}) [(Var (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 11}) [(VarName (fromList []) "huw",[])],NullExpr (fromList []) ({<unknown>, line = 27, col = 11},{<unknown>, line = 27, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 27, col = 5},{<unknown>, line = 27, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 27, col = 5},{<unknown>, line = 27, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 28, col = 0},{<unknown>, line = 28, col = 11}) [(Var (fromList []) ({<unknown>, line = 28, col = 8},{<unknown>, line = 28, col = 11}) [(VarName (fromList []) "hwp",[])],NullExpr (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 28, col = 5},{<unknown>, line = 28, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 28, col = 5},{<unknown>, line = 28, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 29, col = 0},{<unknown>, line = 29, col = 11}) [(Var (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 11}) [(VarName (fromList []) "hwn",[])],NullExpr (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 29, col = 5},{<unknown>, line = 29, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 29, col = 5},{<unknown>, line = 29, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 30, col = 11}) [(Var (fromList []) ({<unknown>, line = 30, col = 8},{<unknown>, line = 30, col = 11}) [(VarName (fromList []) "hen",[])],NullExpr (fromList []) ({<unknown>, line = 30, col = 11},{<unknown>, line = 30, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 30, col = 5},{<unknown>, line = 30, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 30, col = 5},{<unknown>, line = 30, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 31, col = 11}) [(Var (fromList []) ({<unknown>, line = 31, col = 8},{<unknown>, line = 31, col = 11}) [(VarName (fromList []) "hep",[])],NullExpr (fromList []) ({<unknown>, line = 31, col = 11},{<unknown>, line = 31, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 31, col = 5},{<unknown>, line = 31, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 31, col = 5},{<unknown>, line = 31, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 32, col = 11}) [(Var (fromList []) ({<unknown>, line = 32, col = 8},{<unknown>, line = 32, col = 11}) [(VarName (fromList []) "hvn",[])],NullExpr (fromList []) ({<unknown>, line = 32, col = 11},{<unknown>, line = 32, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 32, col = 5},{<unknown>, line = 32, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 32, col = 5},{<unknown>, line = 32, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 33, col = 0},{<unknown>, line = 33, col = 11}) [(Var (fromList []) ({<unknown>, line = 33, col = 8},{<unknown>, line = 33, col = 11}) [(VarName (fromList []) "hvs",[])],NullExpr (fromList []) ({<unknown>, line = 33, col = 11},{<unknown>, line = 33, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 33, col = 5},{<unknown>, line = 33, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 33, col = 5},{<unknown>, line = 33, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 34, col = 0},{<unknown>, line = 34, col = 11}) [(Var (fromList []) ({<unknown>, line = 34, col = 8},{<unknown>, line = 34, col = 11}) [(VarName (fromList []) "hsp",[])],NullExpr (fromList []) ({<unknown>, line = 34, col = 11},{<unknown>, line = 34, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 34, col = 5},{<unknown>, line = 34, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 34, col = 5},{<unknown>, line = 34, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 35, col = 0},{<unknown>, line = 35, col = 11}) [(Var (fromList []) ({<unknown>, line = 35, col = 8},{<unknown>, line = 35, col = 11}) [(VarName (fromList []) "hsn",[])],NullExpr (fromList []) ({<unknown>, line = 35, col = 11},{<unknown>, line = 35, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 35, col = 5},{<unknown>, line = 35, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 35, col = 5},{<unknown>, line = 35, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 36, col = 0},{<unknown>, line = 36, col = 11}) [(Var (fromList []) ({<unknown>, line = 36, col = 8},{<unknown>, line = 36, col = 11}) [(VarName (fromList []) "hnn",[])],NullExpr (fromList []) ({<unknown>, line = 36, col = 11},{<unknown>, line = 36, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 36, col = 5},{<unknown>, line = 36, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 36, col = 5},{<unknown>, line = 36, col = 5})))) (Decl (fromList []) ({<unknown>, line = 37, col = 0},{<unknown>, line = 37, col = 11}) [(Var (fromList []) ({<unknown>, line = 37, col = 8},{<unknown>, line = 37, col = 11}) [(VarName (fromList []) "hnp",[])],NullExpr (fromList []) ({<unknown>, line = 37, col = 11},{<unknown>, line = 37, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 37, col = 5},{<unknown>, line = 37, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 37, col = 5},{<unknown>, line = 37, col = 5}))))))))))))))))))))))))))))))))))))) (FSeq (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 80, col = 6}) (For (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 43, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 38, col = 7},{<unknown>, line = 38, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 38, col = 9},{<unknown>, line = 38, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 38, col = 11},{<unknown>, line = 38, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 43, col = 6}) (For (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 42, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 39, col = 7},{<unknown>, line = 39, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 39, col = 9},{<unknown>, line = 39, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 39, col = 11},{<unknown>, line = 39, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 42, col = 6}) (Assg (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 40, col = 42}) (Var (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 40, col = 42}) [(VarName (fromList []) "du",[Var (fromList []) ({<unknown>, line = 40, col = 5},{<unknown>, line = 40, col = 6}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 40, col = 7},{<unknown>, line = 40, col = 8}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 42}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 39}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 17}) (Mul (fromList [])) (Unary (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 15}) (UMinus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 13},{<unknown>, line = 40, col = 15}) [(VarName (fromList []) "dt",[])])) (Var (fromList []) ({<unknown>, line = 40, col = 16},{<unknown>, line = 40, col = 17}) [(VarName (fromList []) "g",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 40, col = 18},{<unknown>, line = 40, col = 39}) (Bin (fromList []) ({<unknown>, line = 40, col = 19},{<unknown>, line = 40, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 19},{<unknown>, line = 40, col = 29}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 40, col = 23},{<unknown>, line = 40, col = 24}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 40, col = 25},{<unknown>, line = 40, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 25},{<unknown>, line = 40, col = 26}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 40, col = 27},{<unknown>, line = 40, col = 28}) "1")])]) (Var (fromList []) ({<unknown>, line = 40, col = 30},{<unknown>, line = 40, col = 38}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 40, col = 34},{<unknown>, line = 40, col = 35}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 40, col = 36},{<unknown>, line = 40, col = 37}) [(VarName (fromList []) "k",[])]])])))) (Var (fromList []) ({<unknown>, line = 40, col = 40},{<unknown>, line = 40, col = 42}) [(VarName (fromList []) "dx",[])]))) (FSeq (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 42, col = 6}) (Assg (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 41, col = 42}) (Var (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 41, col = 42}) [(VarName (fromList []) "dv",[Var (fromList []) ({<unknown>, line = 41, col = 5},{<unknown>, line = 41, col = 6}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 41, col = 7},{<unknown>, line = 41, col = 8}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 42}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 39}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 17}) (Mul (fromList [])) (Unary (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 15}) (UMinus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 13},{<unknown>, line = 41, col = 15}) [(VarName (fromList []) "dt",[])])) (Var (fromList []) ({<unknown>, line = 41, col = 16},{<unknown>, line = 41, col = 17}) [(VarName (fromList []) "g",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 41, col = 18},{<unknown>, line = 41, col = 39}) (Bin (fromList []) ({<unknown>, line = 41, col = 19},{<unknown>, line = 41, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 19},{<unknown>, line = 41, col = 29}) [(VarName (fromList []) "eta",[Bin (fromList []) ({<unknown>, line = 41, col = 23},{<unknown>, line = 41, col = 26}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 23},{<unknown>, line = 41, col = 24}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 41, col = 25},{<unknown>, line = 41, col = 26}) "1"),Var (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 28}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 41, col = 30},{<unknown>, line = 41, col = 38}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 41, col = 34},{<unknown>, line = 41, col = 35}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 41, col = 36},{<unknown>, line = 41, col = 37}) [(VarName (fromList []) "k",[])]])])))) (Var (fromList []) ({<unknown>, line = 41, col = 40},{<unknown>, line = 41, col = 42}) [(VarName (fromList []) "dy",[])]))) (NullStmt (fromList []) ({<unknown>, line = 42, col = 6},{<unknown>, line = 42, col = 6}))))) (NullStmt (fromList []) ({<unknown>, line = 43, col = 6},{<unknown>, line = 43, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 80, col = 6}) (For (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 63, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 44, col = 7},{<unknown>, line = 44, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 44, col = 9},{<unknown>, line = 44, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 44, col = 11},{<unknown>, line = 44, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 63, col = 6}) (For (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 62, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 45, col = 7},{<unknown>, line = 45, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 45, col = 9},{<unknown>, line = 45, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 45, col = 11},{<unknown>, line = 45, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 46, col = 13}) (Var (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 46, col = 13}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 46, col = 3},{<unknown>, line = 46, col = 4}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 46, col = 5},{<unknown>, line = 46, col = 6}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 46, col = 10},{<unknown>, line = 46, col = 13}) "0.0")) (FSeq (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 47, col = 11}) (Var (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 47, col = 3}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 47, col = 5},{<unknown>, line = 47, col = 11}) [(VarName (fromList []) "u",[Var (fromList []) ({<unknown>, line = 47, col = 7},{<unknown>, line = 47, col = 8}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 47, col = 9},{<unknown>, line = 47, col = 10}) [(VarName (fromList []) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 48, col = 13}) (Var (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 48, col = 4}) [(VarName (fromList []) "duu",[])]) (Var (fromList []) ({<unknown>, line = 48, col = 6},{<unknown>, line = 48, col = 13}) [(VarName (fromList []) "du",[Var (fromList []) ({<unknown>, line = 48, col = 9},{<unknown>, line = 48, col = 10}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 48, col = 11},{<unknown>, line = 48, col = 12}) [(VarName (fromList []) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 49, col = 0},{<unknown>, line = 62, col = 6}) (If (fromList []) ({<unknown>, line = 49, col = 0},{<unknown>, line = 53, col = 6}) (Bin (fromList []) ({<unknown>, line = 49, col = 3},{<unknown>, line = 49, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 49, col = 3},{<unknown>, line = 49, col = 11}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 49, col = 7},{<unknown>, line = 49, col = 8}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 49, col = 9},{<unknown>, line = 49, col = 10}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 49, col = 13},{<unknown>, line = 49, col = 14}) "1")) (If (fromList []) ({<unknown>, line = 50, col = 2},{<unknown>, line = 50, col = 53}) (Bin (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 35}) (Or (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 21}) (Bin (fromList []) ({<unknown>, line = 50, col = 6},{<unknown>, line = 50, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 6},{<unknown>, line = 50, col = 16}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 50, col = 10},{<unknown>, line = 50, col = 11}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 50, col = 12},{<unknown>, line = 50, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 12},{<unknown>, line = 50, col = 13}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 14},{<unknown>, line = 50, col = 15}) "1")])]) (Con (fromList []) ({<unknown>, line = 50, col = 18},{<unknown>, line = 50, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 50, col = 26},{<unknown>, line = 50, col = 35}) (Bin (fromList []) ({<unknown>, line = 50, col = 27},{<unknown>, line = 50, col = 34}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 27},{<unknown>, line = 50, col = 30}) [(VarName (fromList []) "duu",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 31},{<unknown>, line = 50, col = 34}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 50, col = 37},{<unknown>, line = 50, col = 53}) (Var (fromList []) ({<unknown>, line = 50, col = 37},{<unknown>, line = 50, col = 53}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 50, col = 40},{<unknown>, line = 50, col = 41}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 50, col = 42},{<unknown>, line = 50, col = 43}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 50, col = 47},{<unknown>, line = 50, col = 53}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 47},{<unknown>, line = 50, col = 49}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 50, col = 50},{<unknown>, line = 50, col = 53}) [(VarName (fromList []) "duu",[])]))) [] Nothing) [] (Just (If (fromList []) ({<unknown>, line = 52, col = 2},{<unknown>, line = 52, col = 54}) (Bin (fromList []) ({<unknown>, line = 52, col = 5},{<unknown>, line = 52, col = 36}) (And (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 52, col = 5},{<unknown>, line = 52, col = 21}) (Bin (fromList []) ({<unknown>, line = 52, col = 6},{<unknown>, line = 52, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 6},{<unknown>, line = 52, col = 16}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 52, col = 10},{<unknown>, line = 52, col = 11}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 52, col = 12},{<unknown>, line = 52, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 12},{<unknown>, line = 52, col = 13}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 52, col = 14},{<unknown>, line = 52, col = 15}) "1")])]) (Con (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 52, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 52, col = 27},{<unknown>, line = 52, col = 36}) (Bin (fromList []) ({<unknown>, line = 52, col = 28},{<unknown>, line = 52, col = 35}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 28},{<unknown>, line = 52, col = 31}) [(VarName (fromList []) "duu",[])]) (Con (fromList []) ({<unknown>, line = 52, col = 32},{<unknown>, line = 52, col = 35}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 52, col = 38},{<unknown>, line = 52, col = 54}) (Var (fromList []) ({<unknown>, line = 52, col = 38},{<unknown>, line = 52, col = 54}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 52, col = 41},{<unknown>, line = 52, col = 42}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 52, col = 43},{<unknown>, line = 52, col = 44}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 52, col = 48},{<unknown>, line = 52, col = 54}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 48},{<unknown>, line = 52, col = 50}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 52, col = 51},{<unknown>, line = 52, col = 54}) [(VarName (fromList []) "duu",[])]))) [] Nothing))) (FSeq (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 54, col = 11}) (Var (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 54, col = 3}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 54, col = 5},{<unknown>, line = 54, col = 11}) [(VarName (fromList []) "v",[Var (fromList []) ({<unknown>, line = 54, col = 7},{<unknown>, line = 54, col = 8}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 54, col = 9},{<unknown>, line = 54, col = 10}) [(VarName (fromList []) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 55, col = 13}) (Var (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 55, col = 4}) [(VarName (fromList []) "dvv",[])]) (Var (fromList []) ({<unknown>, line = 55, col = 6},{<unknown>, line = 55, col = 13}) [(VarName (fromList []) "dv",[Var (fromList []) ({<unknown>, line = 55, col = 9},{<unknown>, line = 55, col = 10}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 55, col = 11},{<unknown>, line = 55, col = 12}) [(VarName (fromList []) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 56, col = 13}) (Var (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 56, col = 13}) [(VarName (fromList []) "vn",[Var (fromList []) ({<unknown>, line = 56, col = 3},{<unknown>, line = 56, col = 4}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 56, col = 5},{<unknown>, line = 56, col = 6}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 56, col = 10},{<unknown>, line = 56, col = 13}) "0.0")) (FSeq (fromList []) ({<unknown>, line = 57, col = 0},{<unknown>, line = 62, col = 6}) (If (fromList []) ({<unknown>, line = 57, col = 0},{<unknown>, line = 61, col = 6}) (Bin (fromList []) ({<unknown>, line = 57, col = 3},{<unknown>, line = 57, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 57, col = 3},{<unknown>, line = 57, col = 11}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 57, col = 7},{<unknown>, line = 57, col = 8}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 57, col = 9},{<unknown>, line = 57, col = 10}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 57, col = 13},{<unknown>, line = 57, col = 14}) "1")) (If (fromList []) ({<unknown>, line = 58, col = 2},{<unknown>, line = 58, col = 53}) (Bin (fromList []) ({<unknown>, line = 58, col = 5},{<unknown>, line = 58, col = 35}) (Or (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 58, col = 5},{<unknown>, line = 58, col = 21}) (Bin (fromList []) ({<unknown>, line = 58, col = 6},{<unknown>, line = 58, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 6},{<unknown>, line = 58, col = 16}) [(VarName (fromList []) "wet",[Bin (fromList []) ({<unknown>, line = 58, col = 10},{<unknown>, line = 58, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 10},{<unknown>, line = 58, col = 11}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 58, col = 12},{<unknown>, line = 58, col = 13}) "1"),Var (fromList []) ({<unknown>, line = 58, col = 14},{<unknown>, line = 58, col = 15}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 58, col = 18},{<unknown>, line = 58, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 58, col = 26},{<unknown>, line = 58, col = 35}) (Bin (fromList []) ({<unknown>, line = 58, col = 27},{<unknown>, line = 58, col = 34}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 27},{<unknown>, line = 58, col = 30}) [(VarName (fromList []) "dvv",[])]) (Con (fromList []) ({<unknown>, line = 58, col = 31},{<unknown>, line = 58, col = 34}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 58, col = 37},{<unknown>, line = 58, col = 53}) (Var (fromList []) ({<unknown>, line = 58, col = 37},{<unknown>, line = 58, col = 53}) [(VarName (fromList []) "vn",[Var (fromList []) ({<unknown>, line = 58, col = 40},{<unknown>, line = 58, col = 41}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 58, col = 42},{<unknown>, line = 58, col = 43}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 58, col = 47},{<unknown>, line = 58, col = 53}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 47},{<unknown>, line = 58, col = 49}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 58, col = 50},{<unknown>, line = 58, col = 53}) [(VarName (fromList []) "dvv",[])]))) [] Nothing) [] (Just (If (fromList []) ({<unknown>, line = 60, col = 2},{<unknown>, line = 60, col = 54}) (Bin (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 36}) (And (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 21}) (Bin (fromList []) ({<unknown>, line = 60, col = 6},{<unknown>, line = 60, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 6},{<unknown>, line = 60, col = 16}) [(VarName (fromList []) "wet",[Bin (fromList []) ({<unknown>, line = 60, col = 10},{<unknown>, line = 60, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 10},{<unknown>, line = 60, col = 11}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 60, col = 12},{<unknown>, line = 60, col = 13}) "1"),Var (fromList []) ({<unknown>, line = 60, col = 14},{<unknown>, line = 60, col = 15}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 60, col = 18},{<unknown>, line = 60, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 60, col = 27},{<unknown>, line = 60, col = 36}) (Bin (fromList []) ({<unknown>, line = 60, col = 28},{<unknown>, line = 60, col = 35}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 28},{<unknown>, line = 60, col = 31}) [(VarName (fromList []) "dvv",[])]) (Con (fromList []) ({<unknown>, line = 60, col = 32},{<unknown>, line = 60, col = 35}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 60, col = 38},{<unknown>, line = 60, col = 54}) (Var (fromList []) ({<unknown>, line = 60, col = 38},{<unknown>, line = 60, col = 54}) [(VarName (fromList []) "vn",[Var (fromList []) ({<unknown>, line = 60, col = 41},{<unknown>, line = 60, col = 42}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 60, col = 43},{<unknown>, line = 60, col = 44}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 60, col = 48},{<unknown>, line = 60, col = 54}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 48},{<unknown>, line = 60, col = 50}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 60, col = 51},{<unknown>, line = 60, col = 54}) [(VarName (fromList []) "dvv",[])]))) [] Nothing))) (NullStmt (fromList []) ({<unknown>, line = 62, col = 6},{<unknown>, line = 62, col = 6}))))))))))) (NullStmt (fromList []) ({<unknown>, line = 63, col = 6},{<unknown>, line = 63, col = 6})))) (For (fromList []) ({<unknown>, line = 64, col = 0},{<unknown>, line = 80, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 64, col = 7},{<unknown>, line = 64, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 64, col = 9},{<unknown>, line = 64, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 64, col = 11},{<unknown>, line = 64, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 80, col = 6}) (For (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 79, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 65, col = 7},{<unknown>, line = 65, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 65, col = 9},{<unknown>, line = 65, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 65, col = 11},{<unknown>, line = 65, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 66, col = 41}) (Var (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 66, col = 6}) [(VarName (fromList []) "hep",[])]) (Bin (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 41}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 66, col = 12},{<unknown>, line = 66, col = 34}) (Bin (fromList []) ({<unknown>, line = 66, col = 13},{<unknown>, line = 66, col = 33}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 66, col = 13},{<unknown>, line = 66, col = 20}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 66, col = 16},{<unknown>, line = 66, col = 17}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 66, col = 18},{<unknown>, line = 66, col = 19}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 66, col = 21},{<unknown>, line = 66, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 66, col = 25},{<unknown>, line = 66, col = 32}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 66, col = 28},{<unknown>, line = 66, col = 29}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 66, col = 30},{<unknown>, line = 66, col = 31}) [(VarName (fromList []) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 66, col = 35},{<unknown>, line = 66, col = 41}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 66, col = 37},{<unknown>, line = 66, col = 38}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 66, col = 39},{<unknown>, line = 66, col = 40}) [(VarName (fromList []) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 67, col = 43}) (Var (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 67, col = 6}) [(VarName (fromList []) "hen",[])]) (Bin (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 43}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 67, col = 12},{<unknown>, line = 67, col = 34}) (Bin (fromList []) ({<unknown>, line = 67, col = 13},{<unknown>, line = 67, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 67, col = 13},{<unknown>, line = 67, col = 20}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 67, col = 16},{<unknown>, line = 67, col = 17}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 67, col = 18},{<unknown>, line = 67, col = 19}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 67, col = 21},{<unknown>, line = 67, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 67, col = 25},{<unknown>, line = 67, col = 32}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 67, col = 28},{<unknown>, line = 67, col = 29}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 67, col = 30},{<unknown>, line = 67, col = 31}) [(VarName (fromList []) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 67, col = 35},{<unknown>, line = 67, col = 43}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 67, col = 37},{<unknown>, line = 67, col = 38}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 67, col = 39},{<unknown>, line = 67, col = 42}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 67, col = 39},{<unknown>, line = 67, col = 40}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 67, col = 41},{<unknown>, line = 67, col = 42}) "1")])]))) (FSeq (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 68, col = 15}) (Var (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 68, col = 6}) [(VarName (fromList []) "hue",[])]) (Bin (fromList []) ({<unknown>, line = 68, col = 8},{<unknown>, line = 68, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 68, col = 8},{<unknown>, line = 68, col = 11}) [(VarName (fromList []) "hep",[])]) (Var (fromList []) ({<unknown>, line = 68, col = 12},{<unknown>, line = 68, col = 15}) [(VarName (fromList []) "hen",[])]))) (FSeq (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 69, col = 47}) (Var (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 69, col = 6}) [(VarName (fromList []) "hwp",[])]) (Bin (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 47}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 69, col = 12},{<unknown>, line = 69, col = 38}) (Bin (fromList []) ({<unknown>, line = 69, col = 13},{<unknown>, line = 69, col = 37}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 13},{<unknown>, line = 69, col = 22}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 69, col = 16},{<unknown>, line = 69, col = 17}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 69, col = 18},{<unknown>, line = 69, col = 21}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 18},{<unknown>, line = 69, col = 19}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 20},{<unknown>, line = 69, col = 21}) "1")])]) (Var (fromList []) ({<unknown>, line = 69, col = 23},{<unknown>, line = 69, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 69, col = 27},{<unknown>, line = 69, col = 36}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 69, col = 30},{<unknown>, line = 69, col = 31}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 69, col = 32},{<unknown>, line = 69, col = 35}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 32},{<unknown>, line = 69, col = 33}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 34},{<unknown>, line = 69, col = 35}) "1")])]])])))) (Var (fromList []) ({<unknown>, line = 69, col = 39},{<unknown>, line = 69, col = 47}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 69, col = 41},{<unknown>, line = 69, col = 42}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 69, col = 43},{<unknown>, line = 69, col = 46}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 43},{<unknown>, line = 69, col = 44}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 45},{<unknown>, line = 69, col = 46}) "1")])]))) (FSeq (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 45}) (Var (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 6}) [(VarName (fromList []) "hwn",[])]) (Bin (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 45}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 70, col = 12},{<unknown>, line = 70, col = 38}) (Bin (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 37}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 22}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 70, col = 16},{<unknown>, line = 70, col = 17}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 21}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 19}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 70, col = 20},{<unknown>, line = 70, col = 21}) "1")])]) (Var (fromList []) ({<unknown>, line = 70, col = 23},{<unknown>, line = 70, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 70, col = 27},{<unknown>, line = 70, col = 36}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 70, col = 30},{<unknown>, line = 70, col = 31}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 70, col = 32},{<unknown>, line = 70, col = 35}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 32},{<unknown>, line = 70, col = 33}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 70, col = 34},{<unknown>, line = 70, col = 35}) "1")])]])])))) (Var (fromList []) ({<unknown>, line = 70, col = 39},{<unknown>, line = 70, col = 45}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 70, col = 41},{<unknown>, line = 70, col = 42}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 70, col = 43},{<unknown>, line = 70, col = 44}) [(VarName (fromList []) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 15}) (Var (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 6}) [(VarName (fromList []) "huw",[])]) (Bin (fromList []) ({<unknown>, line = 71, col = 8},{<unknown>, line = 71, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 71, col = 8},{<unknown>, line = 71, col = 11}) [(VarName (fromList []) "hwp",[])]) (Var (fromList []) ({<unknown>, line = 71, col = 12},{<unknown>, line = 71, col = 15}) [(VarName (fromList []) "hwn",[])]))) (FSeq (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 72, col = 41}) (Var (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 72, col = 6}) [(VarName (fromList []) "hnp",[])]) (Bin (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 41}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 72, col = 12},{<unknown>, line = 72, col = 34}) (Bin (fromList []) ({<unknown>, line = 72, col = 13},{<unknown>, line = 72, col = 33}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 72, col = 13},{<unknown>, line = 72, col = 20}) [(VarName (fromList []) "vn",[Var (fromList []) ({<unknown>, line = 72, col = 16},{<unknown>, line = 72, col = 17}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 72, col = 18},{<unknown>, line = 72, col = 19}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 72, col = 21},{<unknown>, line = 72, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 72, col = 25},{<unknown>, line = 72, col = 32}) [(VarName (fromList []) "vn",[Var (fromList []) ({<unknown>, line = 72, col = 28},{<unknown>, line = 72, col = 29}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 72, col = 30},{<unknown>, line = 72, col = 31}) [(VarName (fromList []) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 72, col = 35},{<unknown>, line = 72, col = 41}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 72, col = 37},{<unknown>, line = 72, col = 38}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 72, col = 39},{<unknown>, line = 72, col = 40}) [(VarName (fromList []) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 73, col = 43}) (Var (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 73, col = 6}) [(VarName (fromList []) "hnn",[])]) (Bin (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 43}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 73, col = 12},{<unknown>, line = 73, col = 34}) (Bin (fromList []) ({<unknown>, line = 73, col = 13},{<unknown>, line = 73, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 73, col = 13},{<unknown>, line = 73, col = 20}) [(VarName (fromList []) "vn",[Var (fromList []) ({<unknown>, line = 73, col = 16},{<unknown>, line = 73, col = 17}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 73, col = 18},{<unknown>, line = 73, col = 19}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 73, col = 21},{<unknown>, line = 73, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 73, col = 25},{<unknown>, line = 73, col = 32}) [(VarName (fromList []) "vn",[Var (fromList []) ({<unknown>, line = 73, col = 28},{<unknown>, line = 73, col = 29}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 73, col = 30},{<unknown>, line = 73, col = 31}) [(VarName (fromList []) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 73, col = 35},{<unknown>, line = 73, col = 43}) [(VarName (fromList []) "h",[Bin (fromList []) ({<unknown>, line = 73, col = 37},{<unknown>, line = 73, col = 40}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 73, col = 37},{<unknown>, line = 73, col = 38}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 73, col = 39},{<unknown>, line = 73, col = 40}) "1"),Var (fromList []) ({<unknown>, line = 73, col = 41},{<unknown>, line = 73, col = 42}) [(VarName (fromList []) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 74, col = 15}) (Var (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 74, col = 6}) [(VarName (fromList []) "hvn",[])]) (Bin (fromList []) ({<unknown>, line = 74, col = 8},{<unknown>, line = 74, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 74, col = 8},{<unknown>, line = 74, col = 11}) [(VarName (fromList []) "hnp",[])]) (Var (fromList []) ({<unknown>, line = 74, col = 12},{<unknown>, line = 74, col = 15}) [(VarName (fromList []) "hnn",[])]))) (FSeq (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 75, col = 47}) (Var (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 75, col = 6}) [(VarName (fromList []) "hsp",[])]) (Bin (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 47}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 75, col = 12},{<unknown>, line = 75, col = 38}) (Bin (fromList []) ({<unknown>, line = 75, col = 13},{<unknown>, line = 75, col = 37}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 13},{<unknown>, line = 75, col = 22}) [(VarName (fromList []) "vn",[Bin (fromList []) ({<unknown>, line = 75, col = 16},{<unknown>, line = 75, col = 19}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 16},{<unknown>, line = 75, col = 17}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 18},{<unknown>, line = 75, col = 19}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 20},{<unknown>, line = 75, col = 21}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 75, col = 23},{<unknown>, line = 75, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 75, col = 27},{<unknown>, line = 75, col = 36}) [(VarName (fromList []) "vn",[Bin (fromList []) ({<unknown>, line = 75, col = 30},{<unknown>, line = 75, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 30},{<unknown>, line = 75, col = 31}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 32},{<unknown>, line = 75, col = 33}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 34},{<unknown>, line = 75, col = 35}) [(VarName (fromList []) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 75, col = 39},{<unknown>, line = 75, col = 47}) [(VarName (fromList []) "h",[Bin (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 44}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 42}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 75, col = 44}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 45},{<unknown>, line = 75, col = 46}) [(VarName (fromList []) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 76, col = 45}) (Var (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 76, col = 6}) [(VarName (fromList []) "hsn",[])]) (Bin (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 45}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 76, col = 12},{<unknown>, line = 76, col = 38}) (Bin (fromList []) ({<unknown>, line = 76, col = 13},{<unknown>, line = 76, col = 37}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 13},{<unknown>, line = 76, col = 22}) [(VarName (fromList []) "vn",[Bin (fromList []) ({<unknown>, line = 76, col = 16},{<unknown>, line = 76, col = 19}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 16},{<unknown>, line = 76, col = 17}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 18},{<unknown>, line = 76, col = 19}) "1"),Var (fromList []) ({<unknown>, line = 76, col = 20},{<unknown>, line = 76, col = 21}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 76, col = 23},{<unknown>, line = 76, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 76, col = 27},{<unknown>, line = 76, col = 36}) [(VarName (fromList []) "vn",[Bin (fromList []) ({<unknown>, line = 76, col = 30},{<unknown>, line = 76, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 30},{<unknown>, line = 76, col = 31}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 32},{<unknown>, line = 76, col = 33}) "1"),Var (fromList []) ({<unknown>, line = 76, col = 34},{<unknown>, line = 76, col = 35}) [(VarName (fromList []) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 76, col = 39},{<unknown>, line = 76, col = 45}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 76, col = 41},{<unknown>, line = 76, col = 42}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 76, col = 43},{<unknown>, line = 76, col = 44}) [(VarName (fromList []) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 77, col = 15}) (Var (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 77, col = 6}) [(VarName (fromList []) "hvs",[])]) (Bin (fromList []) ({<unknown>, line = 77, col = 8},{<unknown>, line = 77, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 77, col = 8},{<unknown>, line = 77, col = 11}) [(VarName (fromList []) "hsp",[])]) (Var (fromList []) ({<unknown>, line = 77, col = 12},{<unknown>, line = 77, col = 15}) [(VarName (fromList []) "hsn",[])]))) (FSeq (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 78, col = 54}) (Var (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 78, col = 54}) [(VarName (fromList []) "etan",[Var (fromList []) ({<unknown>, line = 78, col = 7},{<unknown>, line = 78, col = 8}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 78, col = 9},{<unknown>, line = 78, col = 10}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 54}) (Minus (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 22}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 78, col = 18},{<unknown>, line = 78, col = 19}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 78, col = 20},{<unknown>, line = 78, col = 21}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 38}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 35}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 25}) [(VarName (fromList []) "dt",[])]) (ParenthesizedExpr (fromList []) ({<unknown>, line = 78, col = 26},{<unknown>, line = 78, col = 35}) (Bin (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 34}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 30}) [(VarName (fromList []) "hue",[])]) (Var (fromList []) ({<unknown>, line = 78, col = 31},{<unknown>, line = 78, col = 34}) [(VarName (fromList []) "huw",[])])))) (Var (fromList []) ({<unknown>, line = 78, col = 36},{<unknown>, line = 78, col = 38}) [(VarName (fromList []) "dx",[])]))) (Bin (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 54}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 51}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 41}) [(VarName (fromList []) "dt",[])]) (ParenthesizedExpr (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 78, col = 51}) (Bin (fromList []) ({<unknown>, line = 78, col = 43},{<unknown>, line = 78, col = 50}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 43},{<unknown>, line = 78, col = 46}) [(VarName (fromList []) "hvn",[])]) (Var (fromList []) ({<unknown>, line = 78, col = 47},{<unknown>, line = 78, col = 50}) [(VarName (fromList []) "hvs",[])])))) (Var (fromList []) ({<unknown>, line = 78, col = 52},{<unknown>, line = 78, col = 54}) [(VarName (fromList []) "dy",[])])))) (NullStmt (fromList []) ({<unknown>, line = 79, col = 6},{<unknown>, line = 79, col = 6})))))))))))))))) (NullStmt (fromList []) ({<unknown>, line = 80, col = 6},{<unknown>, line = 80, col = 6})))))))
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: shapiro
Filename: ./Shallow-Water-2D/shapiro.f95
Source:
subroutine shapiro(j,k,wet,etan,eps,eta)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      integer, intent(InOut) :: j
      integer, intent(InOut) :: k
      integer, dimension(0:ny+1,0:nx+1), intent(In) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(In) :: etan
      real, intent(In) :: eps
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: eta
      real :: term1
      real :: term2
      real :: term3
    do j = 1, ny, 1
        do k = 1, nx, 1
                if (wet(j,k)==1) then
                                term1 = (1.0-0.25*eps*(wet(j,k+1)+wet(j,k-1)+wet(j+1,k)+wet(j-1,k)))*etan(j,k)
                                term2 = 0.25*eps*(wet(j,k+1)*etan(j,k+1)+wet(j,k-1)*etan(j,k-1))
                                term3 = 0.25*eps*(wet(j+1,k)*etan(j+1,k)+wet(j-1,k)*etan(j-1,k))
                                eta(j,k) = term1+term2+term3
                else
                                eta(j,k) = etan(j,k)
                end if
        end do
    end do
end subroutine shapiro

AST: 
Sub (fromList []) ({<unknown>, line = 3, col = 0},{<unknown>, line = 28, col = 0}) Nothing (SubName (fromList []) "shapiro") (Arg (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ArgName (fromList []) "j") (ArgName (fromList []) "k")) (ArgName (fromList []) "wet")) (ArgName (fromList []) "etan")) (ArgName (fromList []) "eps")) (ArgName (fromList []) "eta")) ({<unknown>, line = 3, col = 39},{<unknown>, line = 3, col = 40})) (Block (fromList []) (UseBlock (UseNil (fromList [])) {<unknown>, line = 4, col = 6}) (ImplicitNull (fromList [])) ({<unknown>, line = 4, col = 6},{<unknown>, line = 28, col = 0}) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 4, col = 6},{<unknown>, line = 4, col = 37}) [(Var (fromList []) ({<unknown>, line = 4, col = 31},{<unknown>, line = 4, col = 33}) [(VarName (fromList []) "nx",[])],Con (fromList []) ({<unknown>, line = 4, col = 34},{<unknown>, line = 4, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 4, col = 14},{<unknown>, line = 4, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 4, col = 16},{<unknown>, line = 4, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 5, col = 6},{<unknown>, line = 5, col = 37}) [(Var (fromList []) ({<unknown>, line = 5, col = 31},{<unknown>, line = 5, col = 33}) [(VarName (fromList []) "ny",[])],Con (fromList []) ({<unknown>, line = 5, col = 34},{<unknown>, line = 5, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 5, col = 14},{<unknown>, line = 5, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 5, col = 16},{<unknown>, line = 5, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 33}) [(Var (fromList []) ({<unknown>, line = 6, col = 32},{<unknown>, line = 6, col = 33}) [(VarName (fromList []) "j",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 33},{<unknown>, line = 6, col = 33}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 6, col = 13},{<unknown>, line = 6, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 13},{<unknown>, line = 6, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 33}) [(Var (fromList []) ({<unknown>, line = 7, col = 32},{<unknown>, line = 7, col = 33}) [(VarName (fromList []) "k",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 33},{<unknown>, line = 7, col = 33}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 7, col = 13},{<unknown>, line = 7, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 13},{<unknown>, line = 7, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 8, col = 6},{<unknown>, line = 8, col = 58}) [(Var (fromList []) ({<unknown>, line = 8, col = 55},{<unknown>, line = 8, col = 58}) [(VarName (fromList []) "wet",[])],NullExpr (fromList []) ({<unknown>, line = 8, col = 58},{<unknown>, line = 8, col = 58}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 8, col = 25},{<unknown>, line = 8, col = 26}) "0",Bin (fromList []) ({<unknown>, line = 8, col = 27},{<unknown>, line = 8, col = 31}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 8, col = 27},{<unknown>, line = 8, col = 29}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 8, col = 30},{<unknown>, line = 8, col = 31}) "1")),(Con (fromList []) ({<unknown>, line = 8, col = 32},{<unknown>, line = 8, col = 33}) "0",Bin (fromList []) ({<unknown>, line = 8, col = 34},{<unknown>, line = 8, col = 38}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 8, col = 34},{<unknown>, line = 8, col = 36}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 8, col = 37},{<unknown>, line = 8, col = 38}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 8, col = 13},{<unknown>, line = 8, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 8, col = 13},{<unknown>, line = 8, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 9, col = 6},{<unknown>, line = 9, col = 56}) [(Var (fromList []) ({<unknown>, line = 9, col = 52},{<unknown>, line = 9, col = 56}) [(VarName (fromList []) "etan",[])],NullExpr (fromList []) ({<unknown>, line = 9, col = 56},{<unknown>, line = 9, col = 56}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 9, col = 22},{<unknown>, line = 9, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 9, col = 24},{<unknown>, line = 9, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 9, col = 24},{<unknown>, line = 9, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 9, col = 27},{<unknown>, line = 9, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 9, col = 29},{<unknown>, line = 9, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 9, col = 31},{<unknown>, line = 9, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 9, col = 31},{<unknown>, line = 9, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 9, col = 34},{<unknown>, line = 9, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 10, col = 6},{<unknown>, line = 10, col = 29}) [(Var (fromList []) ({<unknown>, line = 10, col = 26},{<unknown>, line = 10, col = 29}) [(VarName (fromList []) "eps",[])],NullExpr (fromList []) ({<unknown>, line = 10, col = 29},{<unknown>, line = 10, col = 29}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 11, col = 6},{<unknown>, line = 11, col = 56}) [(Var (fromList []) ({<unknown>, line = 11, col = 53},{<unknown>, line = 11, col = 56}) [(VarName (fromList []) "eta",[])],NullExpr (fromList []) ({<unknown>, line = 11, col = 56},{<unknown>, line = 11, col = 56}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 11, col = 22},{<unknown>, line = 11, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 27},{<unknown>, line = 11, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 11, col = 29},{<unknown>, line = 11, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 34},{<unknown>, line = 11, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 0},{<unknown>, line = 12, col = 13}) [(Var (fromList []) ({<unknown>, line = 12, col = 8},{<unknown>, line = 12, col = 13}) [(VarName (fromList []) "term1",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 13},{<unknown>, line = 12, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 12, col = 5},{<unknown>, line = 12, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 5},{<unknown>, line = 12, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 0},{<unknown>, line = 13, col = 13}) [(Var (fromList []) ({<unknown>, line = 13, col = 8},{<unknown>, line = 13, col = 13}) [(VarName (fromList []) "term2",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 13},{<unknown>, line = 13, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 13, col = 5},{<unknown>, line = 13, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 5},{<unknown>, line = 13, col = 5})))) (Decl (fromList []) ({<unknown>, line = 14, col = 0},{<unknown>, line = 14, col = 13}) [(Var (fromList []) ({<unknown>, line = 14, col = 8},{<unknown>, line = 14, col = 13}) [(VarName (fromList []) "term3",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 13},{<unknown>, line = 14, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 14, col = 5},{<unknown>, line = 14, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 5},{<unknown>, line = 14, col = 5})))))))))))))) (For (fromList []) ({<unknown>, line = 15, col = 0},{<unknown>, line = 26, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 15, col = 7},{<unknown>, line = 15, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 15, col = 9},{<unknown>, line = 15, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 11},{<unknown>, line = 15, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 16, col = 0},{<unknown>, line = 26, col = 6}) (For (fromList []) ({<unknown>, line = 16, col = 0},{<unknown>, line = 25, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 16, col = 7},{<unknown>, line = 16, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 16, col = 9},{<unknown>, line = 16, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 11},{<unknown>, line = 16, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 17, col = 0},{<unknown>, line = 25, col = 6}) (If (fromList []) ({<unknown>, line = 17, col = 0},{<unknown>, line = 24, col = 6}) (Bin (fromList []) ({<unknown>, line = 17, col = 3},{<unknown>, line = 17, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 3},{<unknown>, line = 17, col = 11}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 17, col = 7},{<unknown>, line = 17, col = 8}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 17, col = 9},{<unknown>, line = 17, col = 10}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 17, col = 13},{<unknown>, line = 17, col = 14}) "1")) (FSeq (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 18, col = 81}) (Var (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 18, col = 8}) [(VarName (fromList []) "term1",[])]) (Bin (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 81}) (Mul (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 71}) (Bin (fromList []) ({<unknown>, line = 18, col = 11},{<unknown>, line = 18, col = 70}) (Minus (fromList [])) (Con (fromList []) ({<unknown>, line = 18, col = 11},{<unknown>, line = 18, col = 14}) "1.0") (Bin (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 70}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 23}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 19}) "0.25") (Var (fromList []) ({<unknown>, line = 18, col = 20},{<unknown>, line = 18, col = 23}) [(VarName (fromList []) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 70}) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 69}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 58}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 46}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 35}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 34}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 32}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 33},{<unknown>, line = 18, col = 34}) "1")])]) (Var (fromList []) ({<unknown>, line = 18, col = 36},{<unknown>, line = 18, col = 46}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 18, col = 40},{<unknown>, line = 18, col = 41}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 18, col = 42},{<unknown>, line = 18, col = 45}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 42},{<unknown>, line = 18, col = 43}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 44},{<unknown>, line = 18, col = 45}) "1")])])) (Var (fromList []) ({<unknown>, line = 18, col = 48},{<unknown>, line = 18, col = 58}) [(VarName (fromList []) "wet",[Bin (fromList []) ({<unknown>, line = 18, col = 52},{<unknown>, line = 18, col = 55}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 52},{<unknown>, line = 18, col = 53}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 54},{<unknown>, line = 18, col = 55}) "1"),Var (fromList []) ({<unknown>, line = 18, col = 56},{<unknown>, line = 18, col = 57}) [(VarName (fromList []) "k",[])]])])) (Var (fromList []) ({<unknown>, line = 18, col = 59},{<unknown>, line = 18, col = 69}) [(VarName (fromList []) "wet",[Bin (fromList []) ({<unknown>, line = 18, col = 63},{<unknown>, line = 18, col = 66}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 63},{<unknown>, line = 18, col = 64}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 65},{<unknown>, line = 18, col = 66}) "1"),Var (fromList []) ({<unknown>, line = 18, col = 67},{<unknown>, line = 18, col = 68}) [(VarName (fromList []) "k",[])]])])))))) (Var (fromList []) ({<unknown>, line = 18, col = 72},{<unknown>, line = 18, col = 81}) [(VarName (fromList []) "etan",[Var (fromList []) ({<unknown>, line = 18, col = 77},{<unknown>, line = 18, col = 78}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 18, col = 79},{<unknown>, line = 18, col = 80}) [(VarName (fromList []) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 19, col = 66}) (Var (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 19, col = 8}) [(VarName (fromList []) "term2",[])]) (Bin (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 66}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 18}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 14}) "0.25") (Var (fromList []) ({<unknown>, line = 19, col = 15},{<unknown>, line = 19, col = 18}) [(VarName (fromList []) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 19, col = 19},{<unknown>, line = 19, col = 66}) (Bin (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 65}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 42}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 30}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 25}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 26},{<unknown>, line = 19, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 26},{<unknown>, line = 19, col = 27}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 28},{<unknown>, line = 19, col = 29}) "1")])]) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 42}) [(VarName (fromList []) "etan",[Var (fromList []) ({<unknown>, line = 19, col = 36},{<unknown>, line = 19, col = 37}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 38},{<unknown>, line = 19, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 38},{<unknown>, line = 19, col = 39}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 41}) "1")])])) (Bin (fromList []) ({<unknown>, line = 19, col = 43},{<unknown>, line = 19, col = 65}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 43},{<unknown>, line = 19, col = 53}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 19, col = 47},{<unknown>, line = 19, col = 48}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 49},{<unknown>, line = 19, col = 52}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 49},{<unknown>, line = 19, col = 50}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 51},{<unknown>, line = 19, col = 52}) "1")])]) (Var (fromList []) ({<unknown>, line = 19, col = 54},{<unknown>, line = 19, col = 65}) [(VarName (fromList []) "etan",[Var (fromList []) ({<unknown>, line = 19, col = 59},{<unknown>, line = 19, col = 60}) [(VarName (fromList []) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 61},{<unknown>, line = 19, col = 64}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 61},{<unknown>, line = 19, col = 62}) [(VarName (fromList []) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 63},{<unknown>, line = 19, col = 64}) "1")])])))))) (FSeq (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 20, col = 66}) (Var (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 20, col = 8}) [(VarName (fromList []) "term3",[])]) (Bin (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 66}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 18}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 14}) "0.25") (Var (fromList []) ({<unknown>, line = 20, col = 15},{<unknown>, line = 20, col = 18}) [(VarName (fromList []) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 20, col = 19},{<unknown>, line = 20, col = 66}) (Bin (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 65}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 42}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 30}) [(VarName (fromList []) "wet",[Bin (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 27}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 25}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 26},{<unknown>, line = 20, col = 27}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 28},{<unknown>, line = 20, col = 29}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 20, col = 31},{<unknown>, line = 20, col = 42}) [(VarName (fromList []) "etan",[Bin (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 39}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 37}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 38},{<unknown>, line = 20, col = 39}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 40},{<unknown>, line = 20, col = 41}) [(VarName (fromList []) "k",[])]])])) (Bin (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 65}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 53}) [(VarName (fromList []) "wet",[Bin (fromList []) ({<unknown>, line = 20, col = 47},{<unknown>, line = 20, col = 50}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 47},{<unknown>, line = 20, col = 48}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 49},{<unknown>, line = 20, col = 50}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 51},{<unknown>, line = 20, col = 52}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 20, col = 54},{<unknown>, line = 20, col = 65}) [(VarName (fromList []) "etan",[Bin (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 62}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 60}) [(VarName (fromList []) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 61},{<unknown>, line = 20, col = 62}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 63},{<unknown>, line = 20, col = 64}) [(VarName (fromList []) "k",[])]])])))))) (Assg (fromList []) ({<unknown>, line = 21, col = 2},{<unknown>, line = 21, col = 30}) (Var (fromList []) ({<unknown>, line = 21, col = 2},{<unknown>, line = 21, col = 30}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 21, col = 6},{<unknown>, line = 21, col = 7}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 21, col = 8},{<unknown>, line = 21, col = 9}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 30}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 24}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 18}) [(VarName (fromList []) "term1",[])]) (Var (fromList []) ({<unknown>, line = 21, col = 19},{<unknown>, line = 21, col = 24}) [(VarName (fromList []) "term2",[])])) (Var (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 30}) [(VarName (fromList []) "term3",[])])))))) [] (Just (Assg (fromList []) ({<unknown>, line = 23, col = 2},{<unknown>, line = 23, col = 22}) (Var (fromList []) ({<unknown>, line = 23, col = 2},{<unknown>, line = 23, col = 22}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 23, col = 6},{<unknown>, line = 23, col = 7}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 9}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 22}) [(VarName (fromList []) "etan",[Var (fromList []) ({<unknown>, line = 23, col = 18},{<unknown>, line = 23, col = 19}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 23, col = 20},{<unknown>, line = 23, col = 21}) [(VarName (fromList []) "k",[])]])])))) (NullStmt (fromList []) ({<unknown>, line = 25, col = 6},{<unknown>, line = 25, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 26, col = 6},{<unknown>, line = 26, col = 6})))))
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: vernieuw
Filename: ./Shallow-Water-2D/vernieuw.f95
Source:
subroutine vernieuw(dt,dx,dy,eps,eta,etan,g,h,hmin,hzero,j,k,u,un,v,vn,wet)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1), intent(In) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: h
      real, intent(In) :: hmin
      real, dimension(0:ny+1,0:nx+1), intent(In) :: hzero
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: u
      real, dimension(0:ny+1,0:nx+1), intent(In) :: un
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: v
      real, dimension(0:ny+1,0:nx+1), intent(In) :: vn
      integer, dimension(0:ny+1,0:nx+1), intent(Out) :: wet
      integer, intent(InOut) :: k
      integer, intent(InOut) :: j
    do j = 0, ny+1, 1
        do k = 0, nx+1, 1
                h(j,k) = hzero(j,k)+eta(j,k)
                wet(j,k) = 1
                if (h(j,k)<hmin) then
                                wet(j,k) = 0
                end if
                u(j,k) = un(j,k)
                v(j,k) = vn(j,k)
        end do
    end do
end subroutine vernieuw

AST: 
Sub (fromList []) ({<unknown>, line = 3, col = 0},{<unknown>, line = 33, col = 0}) Nothing (SubName (fromList []) "vernieuw") (Arg (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ASeq (fromList []) (ArgName (fromList []) "dt") (ArgName (fromList []) "dx")) (ArgName (fromList []) "dy")) (ArgName (fromList []) "eps")) (ArgName (fromList []) "eta")) (ArgName (fromList []) "etan")) (ArgName (fromList []) "g")) (ArgName (fromList []) "h")) (ArgName (fromList []) "hmin")) (ArgName (fromList []) "hzero")) (ArgName (fromList []) "j")) (ArgName (fromList []) "k")) (ArgName (fromList []) "u")) (ArgName (fromList []) "un")) (ArgName (fromList []) "v")) (ArgName (fromList []) "vn")) (ArgName (fromList []) "wet")) ({<unknown>, line = 3, col = 74},{<unknown>, line = 3, col = 75})) (Block (fromList []) (UseBlock (UseNil (fromList [])) {<unknown>, line = 4, col = 0}) (ImplicitNull (fromList [])) ({<unknown>, line = 4, col = 0},{<unknown>, line = 33, col = 0}) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 4, col = 0},{<unknown>, line = 4, col = 31}) [(Var (fromList []) ({<unknown>, line = 4, col = 25},{<unknown>, line = 4, col = 27}) [(VarName (fromList []) "nx",[])],Con (fromList []) ({<unknown>, line = 4, col = 28},{<unknown>, line = 4, col = 31}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 4, col = 8},{<unknown>, line = 4, col = 9}) "4") (NullExpr (fromList []) ({<unknown>, line = 4, col = 10},{<unknown>, line = 4, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 5, col = 0},{<unknown>, line = 5, col = 31}) [(Var (fromList []) ({<unknown>, line = 5, col = 25},{<unknown>, line = 5, col = 27}) [(VarName (fromList []) "ny",[])],Con (fromList []) ({<unknown>, line = 5, col = 28},{<unknown>, line = 5, col = 31}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 5, col = 8},{<unknown>, line = 5, col = 9}) "4") (NullExpr (fromList []) ({<unknown>, line = 5, col = 10},{<unknown>, line = 5, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 16}) [(Var (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 16}) [(VarName (fromList []) "dt",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 16},{<unknown>, line = 6, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 16}) [(Var (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 16}) [(VarName (fromList []) "dx",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 16},{<unknown>, line = 7, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 8, col = 6},{<unknown>, line = 8, col = 16}) [(Var (fromList []) ({<unknown>, line = 8, col = 14},{<unknown>, line = 8, col = 16}) [(VarName (fromList []) "dy",[])],NullExpr (fromList []) ({<unknown>, line = 8, col = 16},{<unknown>, line = 8, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 8, col = 11},{<unknown>, line = 8, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 8, col = 11},{<unknown>, line = 8, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 9, col = 6},{<unknown>, line = 9, col = 17}) [(Var (fromList []) ({<unknown>, line = 9, col = 14},{<unknown>, line = 9, col = 17}) [(VarName (fromList []) "eps",[])],NullExpr (fromList []) ({<unknown>, line = 9, col = 17},{<unknown>, line = 9, col = 17}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 9, col = 11},{<unknown>, line = 9, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 9, col = 11},{<unknown>, line = 9, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 10, col = 6},{<unknown>, line = 10, col = 55}) [(Var (fromList []) ({<unknown>, line = 10, col = 52},{<unknown>, line = 10, col = 55}) [(VarName (fromList []) "eta",[])],NullExpr (fromList []) ({<unknown>, line = 10, col = 55},{<unknown>, line = 10, col = 55}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 10, col = 22},{<unknown>, line = 10, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 10, col = 24},{<unknown>, line = 10, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 10, col = 24},{<unknown>, line = 10, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 10, col = 27},{<unknown>, line = 10, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 10, col = 29},{<unknown>, line = 10, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 10, col = 31},{<unknown>, line = 10, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 10, col = 31},{<unknown>, line = 10, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 10, col = 34},{<unknown>, line = 10, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 11, col = 6},{<unknown>, line = 11, col = 44}) [(Var (fromList []) ({<unknown>, line = 11, col = 40},{<unknown>, line = 11, col = 44}) [(VarName (fromList []) "etan",[])],NullExpr (fromList []) ({<unknown>, line = 11, col = 44},{<unknown>, line = 11, col = 44}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 11, col = 22},{<unknown>, line = 11, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 27},{<unknown>, line = 11, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 11, col = 29},{<unknown>, line = 11, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 34},{<unknown>, line = 11, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 6},{<unknown>, line = 12, col = 15}) [(Var (fromList []) ({<unknown>, line = 12, col = 14},{<unknown>, line = 12, col = 15}) [(VarName (fromList []) "g",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 15},{<unknown>, line = 12, col = 15}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 56}) [(Var (fromList []) ({<unknown>, line = 13, col = 55},{<unknown>, line = 13, col = 56}) [(VarName (fromList []) "h",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 56},{<unknown>, line = 13, col = 56}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 6},{<unknown>, line = 14, col = 30}) [(Var (fromList []) ({<unknown>, line = 14, col = 26},{<unknown>, line = 14, col = 30}) [(VarName (fromList []) "hmin",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 30},{<unknown>, line = 14, col = 30}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 15, col = 6},{<unknown>, line = 15, col = 57}) [(Var (fromList []) ({<unknown>, line = 15, col = 52},{<unknown>, line = 15, col = 57}) [(VarName (fromList []) "hzero",[])],NullExpr (fromList []) ({<unknown>, line = 15, col = 57},{<unknown>, line = 15, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 15, col = 22},{<unknown>, line = 15, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 24},{<unknown>, line = 15, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 24},{<unknown>, line = 15, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 27},{<unknown>, line = 15, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 15, col = 29},{<unknown>, line = 15, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 31},{<unknown>, line = 15, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 31},{<unknown>, line = 15, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 34},{<unknown>, line = 15, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 15, col = 10},{<unknown>, line = 15, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 15, col = 10},{<unknown>, line = 15, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 16, col = 6},{<unknown>, line = 16, col = 54}) [(Var (fromList []) ({<unknown>, line = 16, col = 53},{<unknown>, line = 16, col = 54}) [(VarName (fromList []) "u",[])],NullExpr (fromList []) ({<unknown>, line = 16, col = 54},{<unknown>, line = 16, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 16, col = 22},{<unknown>, line = 16, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 27},{<unknown>, line = 16, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 16, col = 29},{<unknown>, line = 16, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 34},{<unknown>, line = 16, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 17, col = 6},{<unknown>, line = 17, col = 54}) [(Var (fromList []) ({<unknown>, line = 17, col = 52},{<unknown>, line = 17, col = 54}) [(VarName (fromList []) "un",[])],NullExpr (fromList []) ({<unknown>, line = 17, col = 54},{<unknown>, line = 17, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 17, col = 22},{<unknown>, line = 17, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 27},{<unknown>, line = 17, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 17, col = 29},{<unknown>, line = 17, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 34},{<unknown>, line = 17, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 18, col = 6},{<unknown>, line = 18, col = 54}) [(Var (fromList []) ({<unknown>, line = 18, col = 53},{<unknown>, line = 18, col = 54}) [(VarName (fromList []) "v",[])],NullExpr (fromList []) ({<unknown>, line = 18, col = 54},{<unknown>, line = 18, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 18, col = 22},{<unknown>, line = 18, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 27},{<unknown>, line = 18, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 34},{<unknown>, line = 18, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 19, col = 6},{<unknown>, line = 19, col = 54}) [(Var (fromList []) ({<unknown>, line = 19, col = 52},{<unknown>, line = 19, col = 54}) [(VarName (fromList []) "vn",[])],NullExpr (fromList []) ({<unknown>, line = 19, col = 54},{<unknown>, line = 19, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 19, col = 22},{<unknown>, line = 19, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 27},{<unknown>, line = 19, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 19, col = 29},{<unknown>, line = 19, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 34},{<unknown>, line = 19, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 20, col = 6},{<unknown>, line = 20, col = 59}) [(Var (fromList []) ({<unknown>, line = 20, col = 56},{<unknown>, line = 20, col = 59}) [(VarName (fromList []) "wet",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 59}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 26}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 31}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 29}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 30},{<unknown>, line = 20, col = 31}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 32},{<unknown>, line = 20, col = 33}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 38}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 36}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 37},{<unknown>, line = 20, col = 38}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 21, col = 6},{<unknown>, line = 21, col = 33}) [(Var (fromList []) ({<unknown>, line = 21, col = 32},{<unknown>, line = 21, col = 33}) [(VarName (fromList []) "k",[])],NullExpr (fromList []) ({<unknown>, line = 21, col = 33},{<unknown>, line = 21, col = 33}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 13})))) (Decl (fromList []) ({<unknown>, line = 22, col = 6},{<unknown>, line = 22, col = 33}) [(Var (fromList []) ({<unknown>, line = 22, col = 32},{<unknown>, line = 22, col = 33}) [(VarName (fromList []) "j",[])],NullExpr (fromList []) ({<unknown>, line = 22, col = 33},{<unknown>, line = 22, col = 33}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 22, col = 13},{<unknown>, line = 22, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 22, col = 13},{<unknown>, line = 22, col = 13})))))))))))))))))))))) (For (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 31, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 23, col = 7},{<unknown>, line = 23, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 23, col = 9},{<unknown>, line = 23, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 23, col = 9},{<unknown>, line = 23, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 23, col = 12},{<unknown>, line = 23, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 31, col = 6}) (For (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 30, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 24, col = 7},{<unknown>, line = 24, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 24, col = 12},{<unknown>, line = 24, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 24, col = 13},{<unknown>, line = 24, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 25, col = 32}) (Var (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 25, col = 32}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 25, col = 4},{<unknown>, line = 25, col = 5}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 25, col = 6},{<unknown>, line = 25, col = 7}) [(VarName (fromList []) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 32}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 22}) [(VarName (fromList []) "hzero",[Var (fromList []) ({<unknown>, line = 25, col = 17},{<unknown>, line = 25, col = 18}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 25, col = 19},{<unknown>, line = 25, col = 20}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 25, col = 24},{<unknown>, line = 25, col = 32}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 25, col = 28},{<unknown>, line = 25, col = 29}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 25, col = 30},{<unknown>, line = 25, col = 31}) [(VarName (fromList []) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 26, col = 14}) (Var (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 26, col = 14}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 26, col = 6},{<unknown>, line = 26, col = 7}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 9}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 26, col = 13},{<unknown>, line = 26, col = 14}) "1")) (FSeq (fromList []) ({<unknown>, line = 27, col = 2},{<unknown>, line = 30, col = 6}) (If (fromList []) ({<unknown>, line = 27, col = 2},{<unknown>, line = 27, col = 31}) (Bin (fromList []) ({<unknown>, line = 27, col = 6},{<unknown>, line = 27, col = 17}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 27, col = 6},{<unknown>, line = 27, col = 12}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 9}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 27, col = 10},{<unknown>, line = 27, col = 11}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 27, col = 13},{<unknown>, line = 27, col = 17}) [(VarName (fromList []) "hmin",[])])) (Assg (fromList []) ({<unknown>, line = 27, col = 19},{<unknown>, line = 27, col = 31}) (Var (fromList []) ({<unknown>, line = 27, col = 19},{<unknown>, line = 27, col = 31}) [(VarName (fromList []) "wet",[Var (fromList []) ({<unknown>, line = 27, col = 23},{<unknown>, line = 27, col = 24}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 27, col = 25},{<unknown>, line = 27, col = 26}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 27, col = 30},{<unknown>, line = 27, col = 31}) "0")) [] Nothing) (FSeq (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 28, col = 18}) (Var (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 28, col = 18}) [(VarName (fromList []) "u",[Var (fromList []) ({<unknown>, line = 28, col = 4},{<unknown>, line = 28, col = 5}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 28, col = 6},{<unknown>, line = 28, col = 7}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 18}) [(VarName (fromList []) "un",[Var (fromList []) ({<unknown>, line = 28, col = 14},{<unknown>, line = 28, col = 15}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 28, col = 16},{<unknown>, line = 28, col = 17}) [(VarName (fromList []) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 18}) (Var (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 18}) [(VarName (fromList []) "v",[Var (fromList []) ({<unknown>, line = 29, col = 4},{<unknown>, line = 29, col = 5}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 29, col = 6},{<unknown>, line = 29, col = 7}) [(VarName (fromList []) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 18}) [(VarName (fromList []) "vn",[Var (fromList []) ({<unknown>, line = 29, col = 14},{<unknown>, line = 29, col = 15}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 29, col = 16},{<unknown>, line = 29, col = 17}) [(VarName (fromList []) "k",[])]])])) (NullStmt (fromList []) ({<unknown>, line = 30, col = 6},{<unknown>, line = 30, col = 6})))))))) (NullStmt (fromList []) ({<unknown>, line = 31, col = 6},{<unknown>, line = 31, col = 6})))))
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines for offload merged 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: dyn_shapiro_vernieuw_merged
Filename: 
Source:
module module_dyn_shapiro_vernieuw_merged
contains
subroutine dyn_shapiro_vernieuw_merged(dt,dx,dy,eps,eta,etan,g,h,hmin,hzero,j,k,u,un,v,vn,wet)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real, dimension(0:ny+1,0:nx+1) :: du
      real :: duu
      real, dimension(0:ny+1,0:nx+1) :: dv
      real :: dvv
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: h
      real :: hen
      real :: hep
      real, intent(In) :: hmin
      real :: hnn
      real :: hnp
      real :: hsn
      real :: hsp
      real :: hue
      real :: huw
      real :: hvn
      real :: hvs
      real :: hwn
      real :: hwp
      real, dimension(0:ny+1,0:nx+1), intent(In) :: hzero
      integer :: j
      integer :: k
      real :: term1
      real :: term2
      real :: term3
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: u
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: un
      real :: uu
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: v
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: vn
      real :: vv
      integer, dimension(0:ny+1,0:nx+1), intent(Out) :: wet
    do j = 1, ny, 1
        do k = 1, nx, 1
                du(j,k) = -dt*g*(eta(j,k+1)-eta(j,k))/dx
                dv(j,k) = -dt*g*(eta(j+1,k)-eta(j,k))/dy
        end do
    end do
    do j = 1, ny, 1
        do k = 1, nx, 1
                un(j,k) = 0.0
                uu = u(j,k)
                duu = du(j,k)
                if (wet(j,k)==1) then
                                if ((wet(j,k+1)==1) .or. (duu>0.0)) then
                                                                un(j,k) = uu+duu
                                end if
                else
                                if ((wet(j,k+1)==1) .and. (duu<0.0)) then
                                                                un(j,k) = uu+duu
                                end if
                end if
                vv = v(j,k)
                dvv = dv(j,k)
                vn(j,k) = 0.0
                if (wet(j,k)==1) then
                                if ((wet(j+1,k)==1) .or. (dvv>0.0)) then
                                                                vn(j,k) = vv+dvv
                                end if
                else
                                if ((wet(j+1,k)==1) .and. (dvv<0.0)) then
                                                                vn(j,k) = vv+dvv
                                end if
                end if
        end do
    end do
    do j = 1, ny, 1
        do k = 1, nx, 1
                hep = 0.5*(un(j,k)+abs(un(j,k)))*h(j,k)
                hen = 0.5*(un(j,k)-abs(un(j,k)))*h(j,k+1)
                hue = hep+hen
                hwp = 0.5*(un(j,k-1)+abs(un(j,k-1)))*h(j,k-1)
                hwn = 0.5*(un(j,k-1)-abs(un(j,k-1)))*h(j,k)
                huw = hwp+hwn
                hnp = 0.5*(vn(j,k)+abs(vn(j,k)))*h(j,k)
                hnn = 0.5*(vn(j,k)-abs(vn(j,k)))*h(j+1,k)
                hvn = hnp+hnn
                hsp = 0.5*(vn(j-1,k)+abs(vn(j-1,k)))*h(j-1,k)
                hsn = 0.5*(vn(j-1,k)-abs(vn(j-1,k)))*h(j,k)
                hvs = hsp+hsn
                etan(j,k) = eta(j,k)-dt*(hue-huw)/dx-dt*(hvn-hvs)/dy
        end do
    end do
    do j = 1, ny, 1
        do k = 1, nx, 1
                if (wet(j,k)==1) then
                                term1 = (1.0-0.25*eps*(wet(j,k+1)+wet(j,k-1)+wet(j+1,k)+wet(j-1,k)))*etan(j,k)
                                term2 = 0.25*eps*(wet(j,k+1)*etan(j,k+1)+wet(j,k-1)*etan(j,k-1))
                                term3 = 0.25*eps*(wet(j+1,k)*etan(j+1,k)+wet(j-1,k)*etan(j-1,k))
                                eta(j,k) = term1+term2+term3
                else
                                eta(j,k) = etan(j,k)
                end if
        end do
    end do
    do j = 0, ny+1, 1
        do k = 0, nx+1, 1
                h(j,k) = hzero(j,k)+eta(j,k)
                wet(j,k) = 1
                if (h(j,k)<hmin) then
                                wet(j,k) = 0
                end if
                u(j,k) = un(j,k)
                v(j,k) = vn(j,k)
        end do
    end do
end subroutine dyn_shapiro_vernieuw_merged

end module module_dyn_shapiro_vernieuw_merged
AST: 
Module (fromList []) (No source location,No source location) (SubName (fromList []) "module_dyn_shapiro_vernieuw_merged") (UseNil (fromList [])) (ImplicitNull (fromList [])) (NullDecl (fromList []) (No source location,No source location)) [Sub (fromList []) (No source location,No source location) Nothing (SubName (fromList []) "dyn_shapiro_vernieuw_merged") (Arg (fromList []) (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "dt") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "dx") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "dy") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "eps") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "eta") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "etan") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "g") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "h") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "hmin") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "hzero") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "j") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "k") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "u") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "un") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "v") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "vn") (ArgName (fromList [("msak",[])]) "wet"))))))))))))))))) (No source location,No source location)) (Block (fromList []) (UseBlock (UseNil (fromList [])) No source location) (ImplicitNull (fromList [])) (No source location,No source location) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 5, col = 6},{<unknown>, line = 5, col = 37}) [(Var (fromList []) ({<unknown>, line = 5, col = 31},{<unknown>, line = 5, col = 33}) [(VarName (fromList []) "nx",[])],Con (fromList []) ({<unknown>, line = 5, col = 34},{<unknown>, line = 5, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 5, col = 14},{<unknown>, line = 5, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 5, col = 16},{<unknown>, line = 5, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 4, col = 6},{<unknown>, line = 4, col = 37}) [(Var (fromList []) ({<unknown>, line = 4, col = 31},{<unknown>, line = 4, col = 33}) [(VarName (fromList []) "ny",[])],Con (fromList []) ({<unknown>, line = 4, col = 34},{<unknown>, line = 4, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 4, col = 14},{<unknown>, line = 4, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 4, col = 16},{<unknown>, line = 4, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 16}) [(Var (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 16}) [(VarName (fromList [("msak",[])]) "dt",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 16},{<unknown>, line = 6, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 20, col = 0},{<unknown>, line = 20, col = 36}) [(Var (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 36}) [(VarName (fromList []) "du",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 36}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 16},{<unknown>, line = 20, col = 17}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 18},{<unknown>, line = 20, col = 22}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 18},{<unknown>, line = 20, col = 20}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 21},{<unknown>, line = 20, col = 22}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 23},{<unknown>, line = 20, col = 24}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 27}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 28},{<unknown>, line = 20, col = 29}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 20, col = 4},{<unknown>, line = 20, col = 4})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 4},{<unknown>, line = 20, col = 4})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 24, col = 11}) [(Var (fromList []) ({<unknown>, line = 24, col = 8},{<unknown>, line = 24, col = 11}) [(VarName (fromList []) "duu",[])],NullExpr (fromList []) ({<unknown>, line = 24, col = 11},{<unknown>, line = 24, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 21, col = 0},{<unknown>, line = 21, col = 36}) [(Var (fromList []) ({<unknown>, line = 21, col = 34},{<unknown>, line = 21, col = 36}) [(VarName (fromList []) "dv",[])],NullExpr (fromList []) ({<unknown>, line = 21, col = 36},{<unknown>, line = 21, col = 36}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 21, col = 16},{<unknown>, line = 21, col = 17}) "0",Bin (fromList []) ({<unknown>, line = 21, col = 18},{<unknown>, line = 21, col = 22}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 18},{<unknown>, line = 21, col = 20}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 21, col = 21},{<unknown>, line = 21, col = 22}) "1")),(Con (fromList []) ({<unknown>, line = 21, col = 23},{<unknown>, line = 21, col = 24}) "0",Bin (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 27}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 21, col = 28},{<unknown>, line = 21, col = 29}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 21, col = 4},{<unknown>, line = 21, col = 4})) (NullExpr (fromList []) ({<unknown>, line = 21, col = 4},{<unknown>, line = 21, col = 4})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 25, col = 0},{<unknown>, line = 25, col = 11}) [(Var (fromList []) ({<unknown>, line = 25, col = 8},{<unknown>, line = 25, col = 11}) [(VarName (fromList []) "dvv",[])],NullExpr (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 16}) [(Var (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 16}) [(VarName (fromList [("msak",[])]) "dx",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 16},{<unknown>, line = 7, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 8, col = 6},{<unknown>, line = 8, col = 16}) [(Var (fromList []) ({<unknown>, line = 8, col = 14},{<unknown>, line = 8, col = 16}) [(VarName (fromList [("msak",[])]) "dy",[])],NullExpr (fromList []) ({<unknown>, line = 8, col = 16},{<unknown>, line = 8, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 8, col = 11},{<unknown>, line = 8, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 8, col = 11},{<unknown>, line = 8, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 9, col = 6},{<unknown>, line = 9, col = 17}) [(Var (fromList []) ({<unknown>, line = 9, col = 14},{<unknown>, line = 9, col = 17}) [(VarName (fromList [("msak",[])]) "eps",[])],NullExpr (fromList []) ({<unknown>, line = 9, col = 17},{<unknown>, line = 9, col = 17}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 9, col = 11},{<unknown>, line = 9, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 9, col = 11},{<unknown>, line = 9, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 10, col = 6},{<unknown>, line = 10, col = 44}) [(Var (fromList []) ({<unknown>, line = 10, col = 40},{<unknown>, line = 10, col = 44}) [(VarName (fromList [("msak",[])]) "eta",[])],NullExpr (fromList []) ({<unknown>, line = 10, col = 44},{<unknown>, line = 10, col = 44}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 10, col = 22},{<unknown>, line = 10, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 10, col = 24},{<unknown>, line = 10, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 10, col = 24},{<unknown>, line = 10, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 10, col = 27},{<unknown>, line = 10, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 10, col = 29},{<unknown>, line = 10, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 10, col = 31},{<unknown>, line = 10, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 10, col = 31},{<unknown>, line = 10, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 10, col = 34},{<unknown>, line = 10, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 19, col = 6},{<unknown>, line = 19, col = 45}) [(Var (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 45}) [(VarName (fromList [("msak",[])]) "etan",[])],NullExpr (fromList []) ({<unknown>, line = 19, col = 45},{<unknown>, line = 19, col = 45}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 19, col = 22},{<unknown>, line = 19, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 27},{<unknown>, line = 19, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 19, col = 29},{<unknown>, line = 19, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 34},{<unknown>, line = 19, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 6},{<unknown>, line = 12, col = 15}) [(Var (fromList []) ({<unknown>, line = 12, col = 14},{<unknown>, line = 12, col = 15}) [(VarName (fromList [("msak",[])]) "g",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 15},{<unknown>, line = 12, col = 15}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 56}) [(Var (fromList []) ({<unknown>, line = 13, col = 55},{<unknown>, line = 13, col = 56}) [(VarName (fromList [("msak",[])]) "h",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 56},{<unknown>, line = 13, col = 56}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 30, col = 11}) [(Var (fromList []) ({<unknown>, line = 30, col = 8},{<unknown>, line = 30, col = 11}) [(VarName (fromList []) "hen",[])],NullExpr (fromList []) ({<unknown>, line = 30, col = 11},{<unknown>, line = 30, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 30, col = 5},{<unknown>, line = 30, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 30, col = 5},{<unknown>, line = 30, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 31, col = 11}) [(Var (fromList []) ({<unknown>, line = 31, col = 8},{<unknown>, line = 31, col = 11}) [(VarName (fromList []) "hep",[])],NullExpr (fromList []) ({<unknown>, line = 31, col = 11},{<unknown>, line = 31, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 31, col = 5},{<unknown>, line = 31, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 31, col = 5},{<unknown>, line = 31, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 6},{<unknown>, line = 14, col = 30}) [(Var (fromList []) ({<unknown>, line = 14, col = 26},{<unknown>, line = 14, col = 30}) [(VarName (fromList [("msak",[])]) "hmin",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 30},{<unknown>, line = 14, col = 30}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 36, col = 0},{<unknown>, line = 36, col = 11}) [(Var (fromList []) ({<unknown>, line = 36, col = 8},{<unknown>, line = 36, col = 11}) [(VarName (fromList []) "hnn",[])],NullExpr (fromList []) ({<unknown>, line = 36, col = 11},{<unknown>, line = 36, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 36, col = 5},{<unknown>, line = 36, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 36, col = 5},{<unknown>, line = 36, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 37, col = 0},{<unknown>, line = 37, col = 11}) [(Var (fromList []) ({<unknown>, line = 37, col = 8},{<unknown>, line = 37, col = 11}) [(VarName (fromList []) "hnp",[])],NullExpr (fromList []) ({<unknown>, line = 37, col = 11},{<unknown>, line = 37, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 37, col = 5},{<unknown>, line = 37, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 37, col = 5},{<unknown>, line = 37, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 35, col = 0},{<unknown>, line = 35, col = 11}) [(Var (fromList []) ({<unknown>, line = 35, col = 8},{<unknown>, line = 35, col = 11}) [(VarName (fromList []) "hsn",[])],NullExpr (fromList []) ({<unknown>, line = 35, col = 11},{<unknown>, line = 35, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 35, col = 5},{<unknown>, line = 35, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 35, col = 5},{<unknown>, line = 35, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 34, col = 0},{<unknown>, line = 34, col = 11}) [(Var (fromList []) ({<unknown>, line = 34, col = 8},{<unknown>, line = 34, col = 11}) [(VarName (fromList []) "hsp",[])],NullExpr (fromList []) ({<unknown>, line = 34, col = 11},{<unknown>, line = 34, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 34, col = 5},{<unknown>, line = 34, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 34, col = 5},{<unknown>, line = 34, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 26, col = 0},{<unknown>, line = 26, col = 11}) [(Var (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 11}) [(VarName (fromList []) "hue",[])],NullExpr (fromList []) ({<unknown>, line = 26, col = 11},{<unknown>, line = 26, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 26, col = 5},{<unknown>, line = 26, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 26, col = 5},{<unknown>, line = 26, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 27, col = 0},{<unknown>, line = 27, col = 11}) [(Var (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 11}) [(VarName (fromList []) "huw",[])],NullExpr (fromList []) ({<unknown>, line = 27, col = 11},{<unknown>, line = 27, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 27, col = 5},{<unknown>, line = 27, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 27, col = 5},{<unknown>, line = 27, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 32, col = 11}) [(Var (fromList []) ({<unknown>, line = 32, col = 8},{<unknown>, line = 32, col = 11}) [(VarName (fromList []) "hvn",[])],NullExpr (fromList []) ({<unknown>, line = 32, col = 11},{<unknown>, line = 32, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 32, col = 5},{<unknown>, line = 32, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 32, col = 5},{<unknown>, line = 32, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 33, col = 0},{<unknown>, line = 33, col = 11}) [(Var (fromList []) ({<unknown>, line = 33, col = 8},{<unknown>, line = 33, col = 11}) [(VarName (fromList []) "hvs",[])],NullExpr (fromList []) ({<unknown>, line = 33, col = 11},{<unknown>, line = 33, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 33, col = 5},{<unknown>, line = 33, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 33, col = 5},{<unknown>, line = 33, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 29, col = 0},{<unknown>, line = 29, col = 11}) [(Var (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 11}) [(VarName (fromList []) "hwn",[])],NullExpr (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 29, col = 5},{<unknown>, line = 29, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 29, col = 5},{<unknown>, line = 29, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 28, col = 0},{<unknown>, line = 28, col = 11}) [(Var (fromList []) ({<unknown>, line = 28, col = 8},{<unknown>, line = 28, col = 11}) [(VarName (fromList []) "hwp",[])],NullExpr (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 28, col = 5},{<unknown>, line = 28, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 28, col = 5},{<unknown>, line = 28, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 15, col = 6},{<unknown>, line = 15, col = 57}) [(Var (fromList []) ({<unknown>, line = 15, col = 52},{<unknown>, line = 15, col = 57}) [(VarName (fromList [("msak",[])]) "hzero",[])],NullExpr (fromList []) ({<unknown>, line = 15, col = 57},{<unknown>, line = 15, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 15, col = 22},{<unknown>, line = 15, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 24},{<unknown>, line = 15, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 24},{<unknown>, line = 15, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 27},{<unknown>, line = 15, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 15, col = 29},{<unknown>, line = 15, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 31},{<unknown>, line = 15, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 31},{<unknown>, line = 15, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 34},{<unknown>, line = 15, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 15, col = 10},{<unknown>, line = 15, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 15, col = 10},{<unknown>, line = 15, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 19}) [(Var (fromList []) ({<unknown>, line = 6, col = 17},{<unknown>, line = 6, col = 19}) [(VarName (fromList [("msak",[])]) "j",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 19},{<unknown>, line = 6, col = 19}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 19}) [(Var (fromList []) ({<unknown>, line = 7, col = 17},{<unknown>, line = 7, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 19},{<unknown>, line = 7, col = 19}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 0},{<unknown>, line = 12, col = 13}) [(Var (fromList []) ({<unknown>, line = 12, col = 8},{<unknown>, line = 12, col = 13}) [(VarName (fromList []) "term1",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 13},{<unknown>, line = 12, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 12, col = 5},{<unknown>, line = 12, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 5},{<unknown>, line = 12, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 0},{<unknown>, line = 13, col = 13}) [(Var (fromList []) ({<unknown>, line = 13, col = 8},{<unknown>, line = 13, col = 13}) [(VarName (fromList []) "term2",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 13},{<unknown>, line = 13, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 13, col = 5},{<unknown>, line = 13, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 5},{<unknown>, line = 13, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 0},{<unknown>, line = 14, col = 13}) [(Var (fromList []) ({<unknown>, line = 14, col = 8},{<unknown>, line = 14, col = 13}) [(VarName (fromList []) "term3",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 13},{<unknown>, line = 14, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 14, col = 5},{<unknown>, line = 14, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 5},{<unknown>, line = 14, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 16, col = 6},{<unknown>, line = 16, col = 54}) [(Var (fromList []) ({<unknown>, line = 16, col = 53},{<unknown>, line = 16, col = 54}) [(VarName (fromList [("msak",[])]) "u",[])],NullExpr (fromList []) ({<unknown>, line = 16, col = 54},{<unknown>, line = 16, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 16, col = 22},{<unknown>, line = 16, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 27},{<unknown>, line = 16, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 16, col = 29},{<unknown>, line = 16, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 34},{<unknown>, line = 16, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 57}) [(Var (fromList []) ({<unknown>, line = 13, col = 55},{<unknown>, line = 13, col = 57}) [(VarName (fromList [("msak",[])]) "un",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 57},{<unknown>, line = 13, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 22, col = 0},{<unknown>, line = 22, col = 10}) [(Var (fromList []) ({<unknown>, line = 22, col = 8},{<unknown>, line = 22, col = 10}) [(VarName (fromList []) "uu",[])],NullExpr (fromList []) ({<unknown>, line = 22, col = 10},{<unknown>, line = 22, col = 10}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 18, col = 6},{<unknown>, line = 18, col = 54}) [(Var (fromList []) ({<unknown>, line = 18, col = 53},{<unknown>, line = 18, col = 54}) [(VarName (fromList [("msak",[])]) "v",[])],NullExpr (fromList []) ({<unknown>, line = 18, col = 54},{<unknown>, line = 18, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 18, col = 22},{<unknown>, line = 18, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 27},{<unknown>, line = 18, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 34},{<unknown>, line = 18, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 17, col = 6},{<unknown>, line = 17, col = 57}) [(Var (fromList []) ({<unknown>, line = 17, col = 55},{<unknown>, line = 17, col = 57}) [(VarName (fromList [("msak",[])]) "vn",[])],NullExpr (fromList []) ({<unknown>, line = 17, col = 57},{<unknown>, line = 17, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 17, col = 22},{<unknown>, line = 17, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 27},{<unknown>, line = 17, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 17, col = 29},{<unknown>, line = 17, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 34},{<unknown>, line = 17, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 23, col = 10}) [(Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 10}) [(VarName (fromList []) "vv",[])],NullExpr (fromList []) ({<unknown>, line = 23, col = 10},{<unknown>, line = 23, col = 10}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})))) (Decl (fromList []) ({<unknown>, line = 20, col = 6},{<unknown>, line = 20, col = 59}) [(Var (fromList []) ({<unknown>, line = 20, col = 56},{<unknown>, line = 20, col = 59}) [(VarName (fromList [("msak",[])]) "wet",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 59}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 26}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 31}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 29}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 30},{<unknown>, line = 20, col = 31}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 32},{<unknown>, line = 20, col = 33}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 38}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 36}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 37},{<unknown>, line = 20, col = 38}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13}))))))))))))))))))))))))))))))))))))))))))) (FSeq (fromList []) (No source location,No source location) (FSeq (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 80, col = 6}) (For (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 43, col = 6}) (VarName (fromList [("msak",[])]) "j") (Con (fromList []) ({<unknown>, line = 38, col = 7},{<unknown>, line = 38, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 38, col = 9},{<unknown>, line = 38, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 38, col = 11},{<unknown>, line = 38, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 43, col = 6}) (For (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 42, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 39, col = 7},{<unknown>, line = 39, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 39, col = 9},{<unknown>, line = 39, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 39, col = 11},{<unknown>, line = 39, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 42, col = 6}) (Assg (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 40, col = 42}) (Var (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 40, col = 42}) [(VarName (fromList []) "du",[Var (fromList []) ({<unknown>, line = 40, col = 5},{<unknown>, line = 40, col = 6}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 40, col = 7},{<unknown>, line = 40, col = 8}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 42}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 39}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 17}) (Mul (fromList [])) (Unary (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 15}) (UMinus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 13},{<unknown>, line = 40, col = 15}) [(VarName (fromList [("msak",[])]) "dt",[])])) (Var (fromList []) ({<unknown>, line = 40, col = 16},{<unknown>, line = 40, col = 17}) [(VarName (fromList [("msak",[])]) "g",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 40, col = 18},{<unknown>, line = 40, col = 39}) (Bin (fromList []) ({<unknown>, line = 40, col = 19},{<unknown>, line = 40, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 19},{<unknown>, line = 40, col = 29}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 40, col = 23},{<unknown>, line = 40, col = 24}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 40, col = 25},{<unknown>, line = 40, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 25},{<unknown>, line = 40, col = 26}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 40, col = 27},{<unknown>, line = 40, col = 28}) "1")])]) (Var (fromList []) ({<unknown>, line = 40, col = 30},{<unknown>, line = 40, col = 38}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 40, col = 34},{<unknown>, line = 40, col = 35}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 40, col = 36},{<unknown>, line = 40, col = 37}) [(VarName (fromList [("msak",[])]) "k",[])]])])))) (Var (fromList []) ({<unknown>, line = 40, col = 40},{<unknown>, line = 40, col = 42}) [(VarName (fromList [("msak",[])]) "dx",[])]))) (FSeq (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 42, col = 6}) (Assg (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 41, col = 42}) (Var (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 41, col = 42}) [(VarName (fromList []) "dv",[Var (fromList []) ({<unknown>, line = 41, col = 5},{<unknown>, line = 41, col = 6}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 41, col = 7},{<unknown>, line = 41, col = 8}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 42}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 39}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 17}) (Mul (fromList [])) (Unary (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 15}) (UMinus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 13},{<unknown>, line = 41, col = 15}) [(VarName (fromList [("msak",[])]) "dt",[])])) (Var (fromList []) ({<unknown>, line = 41, col = 16},{<unknown>, line = 41, col = 17}) [(VarName (fromList [("msak",[])]) "g",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 41, col = 18},{<unknown>, line = 41, col = 39}) (Bin (fromList []) ({<unknown>, line = 41, col = 19},{<unknown>, line = 41, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 19},{<unknown>, line = 41, col = 29}) [(VarName (fromList [("msak",[])]) "eta",[Bin (fromList []) ({<unknown>, line = 41, col = 23},{<unknown>, line = 41, col = 26}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 23},{<unknown>, line = 41, col = 24}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 41, col = 25},{<unknown>, line = 41, col = 26}) "1"),Var (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 28}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 41, col = 30},{<unknown>, line = 41, col = 38}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 41, col = 34},{<unknown>, line = 41, col = 35}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 41, col = 36},{<unknown>, line = 41, col = 37}) [(VarName (fromList [("msak",[])]) "k",[])]])])))) (Var (fromList []) ({<unknown>, line = 41, col = 40},{<unknown>, line = 41, col = 42}) [(VarName (fromList [("msak",[])]) "dy",[])]))) (NullStmt (fromList []) ({<unknown>, line = 42, col = 6},{<unknown>, line = 42, col = 6}))))) (NullStmt (fromList []) ({<unknown>, line = 43, col = 6},{<unknown>, line = 43, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 80, col = 6}) (For (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 63, col = 6}) (VarName (fromList [("msak",[])]) "j") (Con (fromList []) ({<unknown>, line = 44, col = 7},{<unknown>, line = 44, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 44, col = 9},{<unknown>, line = 44, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 44, col = 11},{<unknown>, line = 44, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 63, col = 6}) (For (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 62, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 45, col = 7},{<unknown>, line = 45, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 45, col = 9},{<unknown>, line = 45, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 45, col = 11},{<unknown>, line = 45, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 46, col = 13}) (Var (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 46, col = 13}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 46, col = 3},{<unknown>, line = 46, col = 4}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 46, col = 5},{<unknown>, line = 46, col = 6}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 46, col = 10},{<unknown>, line = 46, col = 13}) "0.0")) (FSeq (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 47, col = 11}) (Var (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 47, col = 3}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 47, col = 5},{<unknown>, line = 47, col = 11}) [(VarName (fromList [("msak",[])]) "u",[Var (fromList []) ({<unknown>, line = 47, col = 7},{<unknown>, line = 47, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 47, col = 9},{<unknown>, line = 47, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 48, col = 13}) (Var (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 48, col = 4}) [(VarName (fromList []) "duu",[])]) (Var (fromList []) ({<unknown>, line = 48, col = 6},{<unknown>, line = 48, col = 13}) [(VarName (fromList []) "du",[Var (fromList []) ({<unknown>, line = 48, col = 9},{<unknown>, line = 48, col = 10}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 48, col = 11},{<unknown>, line = 48, col = 12}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 49, col = 0},{<unknown>, line = 62, col = 6}) (If (fromList []) ({<unknown>, line = 49, col = 0},{<unknown>, line = 53, col = 6}) (Bin (fromList []) ({<unknown>, line = 49, col = 3},{<unknown>, line = 49, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 49, col = 3},{<unknown>, line = 49, col = 11}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 49, col = 7},{<unknown>, line = 49, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 49, col = 9},{<unknown>, line = 49, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 49, col = 13},{<unknown>, line = 49, col = 14}) "1")) (If (fromList []) ({<unknown>, line = 50, col = 2},{<unknown>, line = 50, col = 53}) (Bin (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 35}) (Or (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 21}) (Bin (fromList []) ({<unknown>, line = 50, col = 6},{<unknown>, line = 50, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 6},{<unknown>, line = 50, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 50, col = 10},{<unknown>, line = 50, col = 11}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 50, col = 12},{<unknown>, line = 50, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 12},{<unknown>, line = 50, col = 13}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 14},{<unknown>, line = 50, col = 15}) "1")])]) (Con (fromList []) ({<unknown>, line = 50, col = 18},{<unknown>, line = 50, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 50, col = 26},{<unknown>, line = 50, col = 35}) (Bin (fromList []) ({<unknown>, line = 50, col = 27},{<unknown>, line = 50, col = 34}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 27},{<unknown>, line = 50, col = 30}) [(VarName (fromList []) "duu",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 31},{<unknown>, line = 50, col = 34}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 50, col = 37},{<unknown>, line = 50, col = 53}) (Var (fromList []) ({<unknown>, line = 50, col = 37},{<unknown>, line = 50, col = 53}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 50, col = 40},{<unknown>, line = 50, col = 41}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 50, col = 42},{<unknown>, line = 50, col = 43}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 50, col = 47},{<unknown>, line = 50, col = 53}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 47},{<unknown>, line = 50, col = 49}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 50, col = 50},{<unknown>, line = 50, col = 53}) [(VarName (fromList []) "duu",[])]))) [] Nothing) [] (Just (If (fromList []) ({<unknown>, line = 52, col = 2},{<unknown>, line = 52, col = 54}) (Bin (fromList []) ({<unknown>, line = 52, col = 5},{<unknown>, line = 52, col = 36}) (And (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 52, col = 5},{<unknown>, line = 52, col = 21}) (Bin (fromList []) ({<unknown>, line = 52, col = 6},{<unknown>, line = 52, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 6},{<unknown>, line = 52, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 52, col = 10},{<unknown>, line = 52, col = 11}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 52, col = 12},{<unknown>, line = 52, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 12},{<unknown>, line = 52, col = 13}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 52, col = 14},{<unknown>, line = 52, col = 15}) "1")])]) (Con (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 52, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 52, col = 27},{<unknown>, line = 52, col = 36}) (Bin (fromList []) ({<unknown>, line = 52, col = 28},{<unknown>, line = 52, col = 35}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 28},{<unknown>, line = 52, col = 31}) [(VarName (fromList []) "duu",[])]) (Con (fromList []) ({<unknown>, line = 52, col = 32},{<unknown>, line = 52, col = 35}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 52, col = 38},{<unknown>, line = 52, col = 54}) (Var (fromList []) ({<unknown>, line = 52, col = 38},{<unknown>, line = 52, col = 54}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 52, col = 41},{<unknown>, line = 52, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 52, col = 43},{<unknown>, line = 52, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 52, col = 48},{<unknown>, line = 52, col = 54}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 48},{<unknown>, line = 52, col = 50}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 52, col = 51},{<unknown>, line = 52, col = 54}) [(VarName (fromList []) "duu",[])]))) [] Nothing))) (FSeq (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 54, col = 11}) (Var (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 54, col = 3}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 54, col = 5},{<unknown>, line = 54, col = 11}) [(VarName (fromList [("msak",[])]) "v",[Var (fromList []) ({<unknown>, line = 54, col = 7},{<unknown>, line = 54, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 54, col = 9},{<unknown>, line = 54, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 55, col = 13}) (Var (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 55, col = 4}) [(VarName (fromList []) "dvv",[])]) (Var (fromList []) ({<unknown>, line = 55, col = 6},{<unknown>, line = 55, col = 13}) [(VarName (fromList []) "dv",[Var (fromList []) ({<unknown>, line = 55, col = 9},{<unknown>, line = 55, col = 10}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 55, col = 11},{<unknown>, line = 55, col = 12}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 56, col = 13}) (Var (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 56, col = 13}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 56, col = 3},{<unknown>, line = 56, col = 4}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 56, col = 5},{<unknown>, line = 56, col = 6}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 56, col = 10},{<unknown>, line = 56, col = 13}) "0.0")) (FSeq (fromList []) ({<unknown>, line = 57, col = 0},{<unknown>, line = 62, col = 6}) (If (fromList []) ({<unknown>, line = 57, col = 0},{<unknown>, line = 61, col = 6}) (Bin (fromList []) ({<unknown>, line = 57, col = 3},{<unknown>, line = 57, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 57, col = 3},{<unknown>, line = 57, col = 11}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 57, col = 7},{<unknown>, line = 57, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 57, col = 9},{<unknown>, line = 57, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 57, col = 13},{<unknown>, line = 57, col = 14}) "1")) (If (fromList []) ({<unknown>, line = 58, col = 2},{<unknown>, line = 58, col = 53}) (Bin (fromList []) ({<unknown>, line = 58, col = 5},{<unknown>, line = 58, col = 35}) (Or (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 58, col = 5},{<unknown>, line = 58, col = 21}) (Bin (fromList []) ({<unknown>, line = 58, col = 6},{<unknown>, line = 58, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 6},{<unknown>, line = 58, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 58, col = 10},{<unknown>, line = 58, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 10},{<unknown>, line = 58, col = 11}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 58, col = 12},{<unknown>, line = 58, col = 13}) "1"),Var (fromList []) ({<unknown>, line = 58, col = 14},{<unknown>, line = 58, col = 15}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 58, col = 18},{<unknown>, line = 58, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 58, col = 26},{<unknown>, line = 58, col = 35}) (Bin (fromList []) ({<unknown>, line = 58, col = 27},{<unknown>, line = 58, col = 34}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 27},{<unknown>, line = 58, col = 30}) [(VarName (fromList []) "dvv",[])]) (Con (fromList []) ({<unknown>, line = 58, col = 31},{<unknown>, line = 58, col = 34}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 58, col = 37},{<unknown>, line = 58, col = 53}) (Var (fromList []) ({<unknown>, line = 58, col = 37},{<unknown>, line = 58, col = 53}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 58, col = 40},{<unknown>, line = 58, col = 41}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 58, col = 42},{<unknown>, line = 58, col = 43}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 58, col = 47},{<unknown>, line = 58, col = 53}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 47},{<unknown>, line = 58, col = 49}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 58, col = 50},{<unknown>, line = 58, col = 53}) [(VarName (fromList []) "dvv",[])]))) [] Nothing) [] (Just (If (fromList []) ({<unknown>, line = 60, col = 2},{<unknown>, line = 60, col = 54}) (Bin (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 36}) (And (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 21}) (Bin (fromList []) ({<unknown>, line = 60, col = 6},{<unknown>, line = 60, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 6},{<unknown>, line = 60, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 60, col = 10},{<unknown>, line = 60, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 10},{<unknown>, line = 60, col = 11}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 60, col = 12},{<unknown>, line = 60, col = 13}) "1"),Var (fromList []) ({<unknown>, line = 60, col = 14},{<unknown>, line = 60, col = 15}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 60, col = 18},{<unknown>, line = 60, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 60, col = 27},{<unknown>, line = 60, col = 36}) (Bin (fromList []) ({<unknown>, line = 60, col = 28},{<unknown>, line = 60, col = 35}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 28},{<unknown>, line = 60, col = 31}) [(VarName (fromList []) "dvv",[])]) (Con (fromList []) ({<unknown>, line = 60, col = 32},{<unknown>, line = 60, col = 35}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 60, col = 38},{<unknown>, line = 60, col = 54}) (Var (fromList []) ({<unknown>, line = 60, col = 38},{<unknown>, line = 60, col = 54}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 60, col = 41},{<unknown>, line = 60, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 60, col = 43},{<unknown>, line = 60, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 60, col = 48},{<unknown>, line = 60, col = 54}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 48},{<unknown>, line = 60, col = 50}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 60, col = 51},{<unknown>, line = 60, col = 54}) [(VarName (fromList []) "dvv",[])]))) [] Nothing))) (NullStmt (fromList []) ({<unknown>, line = 62, col = 6},{<unknown>, line = 62, col = 6}))))))))))) (NullStmt (fromList []) ({<unknown>, line = 63, col = 6},{<unknown>, line = 63, col = 6})))) (For (fromList []) ({<unknown>, line = 64, col = 0},{<unknown>, line = 80, col = 6}) (VarName (fromList [("msak",[])]) "j") (Con (fromList []) ({<unknown>, line = 64, col = 7},{<unknown>, line = 64, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 64, col = 9},{<unknown>, line = 64, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 64, col = 11},{<unknown>, line = 64, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 80, col = 6}) (For (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 79, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 65, col = 7},{<unknown>, line = 65, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 65, col = 9},{<unknown>, line = 65, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 65, col = 11},{<unknown>, line = 65, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 66, col = 41}) (Var (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 66, col = 6}) [(VarName (fromList []) "hep",[])]) (Bin (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 41}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 66, col = 12},{<unknown>, line = 66, col = 34}) (Bin (fromList []) ({<unknown>, line = 66, col = 13},{<unknown>, line = 66, col = 33}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 66, col = 13},{<unknown>, line = 66, col = 20}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 66, col = 16},{<unknown>, line = 66, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 66, col = 18},{<unknown>, line = 66, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 66, col = 21},{<unknown>, line = 66, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 66, col = 25},{<unknown>, line = 66, col = 32}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 66, col = 28},{<unknown>, line = 66, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 66, col = 30},{<unknown>, line = 66, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 66, col = 35},{<unknown>, line = 66, col = 41}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 66, col = 37},{<unknown>, line = 66, col = 38}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 66, col = 39},{<unknown>, line = 66, col = 40}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 67, col = 43}) (Var (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 67, col = 6}) [(VarName (fromList []) "hen",[])]) (Bin (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 43}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 67, col = 12},{<unknown>, line = 67, col = 34}) (Bin (fromList []) ({<unknown>, line = 67, col = 13},{<unknown>, line = 67, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 67, col = 13},{<unknown>, line = 67, col = 20}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 67, col = 16},{<unknown>, line = 67, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 67, col = 18},{<unknown>, line = 67, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 67, col = 21},{<unknown>, line = 67, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 67, col = 25},{<unknown>, line = 67, col = 32}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 67, col = 28},{<unknown>, line = 67, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 67, col = 30},{<unknown>, line = 67, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 67, col = 35},{<unknown>, line = 67, col = 43}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 67, col = 37},{<unknown>, line = 67, col = 38}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 67, col = 39},{<unknown>, line = 67, col = 42}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 67, col = 39},{<unknown>, line = 67, col = 40}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 67, col = 41},{<unknown>, line = 67, col = 42}) "1")])]))) (FSeq (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 68, col = 15}) (Var (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 68, col = 6}) [(VarName (fromList []) "hue",[])]) (Bin (fromList []) ({<unknown>, line = 68, col = 8},{<unknown>, line = 68, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 68, col = 8},{<unknown>, line = 68, col = 11}) [(VarName (fromList []) "hep",[])]) (Var (fromList []) ({<unknown>, line = 68, col = 12},{<unknown>, line = 68, col = 15}) [(VarName (fromList []) "hen",[])]))) (FSeq (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 69, col = 47}) (Var (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 69, col = 6}) [(VarName (fromList []) "hwp",[])]) (Bin (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 47}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 69, col = 12},{<unknown>, line = 69, col = 38}) (Bin (fromList []) ({<unknown>, line = 69, col = 13},{<unknown>, line = 69, col = 37}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 13},{<unknown>, line = 69, col = 22}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 69, col = 16},{<unknown>, line = 69, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 69, col = 18},{<unknown>, line = 69, col = 21}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 18},{<unknown>, line = 69, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 20},{<unknown>, line = 69, col = 21}) "1")])]) (Var (fromList []) ({<unknown>, line = 69, col = 23},{<unknown>, line = 69, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 69, col = 27},{<unknown>, line = 69, col = 36}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 69, col = 30},{<unknown>, line = 69, col = 31}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 69, col = 32},{<unknown>, line = 69, col = 35}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 32},{<unknown>, line = 69, col = 33}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 34},{<unknown>, line = 69, col = 35}) "1")])]])])))) (Var (fromList []) ({<unknown>, line = 69, col = 39},{<unknown>, line = 69, col = 47}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 69, col = 41},{<unknown>, line = 69, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 69, col = 43},{<unknown>, line = 69, col = 46}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 43},{<unknown>, line = 69, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 45},{<unknown>, line = 69, col = 46}) "1")])]))) (FSeq (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 45}) (Var (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 6}) [(VarName (fromList []) "hwn",[])]) (Bin (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 45}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 70, col = 12},{<unknown>, line = 70, col = 38}) (Bin (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 37}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 22}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 70, col = 16},{<unknown>, line = 70, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 21}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 70, col = 20},{<unknown>, line = 70, col = 21}) "1")])]) (Var (fromList []) ({<unknown>, line = 70, col = 23},{<unknown>, line = 70, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 70, col = 27},{<unknown>, line = 70, col = 36}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 70, col = 30},{<unknown>, line = 70, col = 31}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 70, col = 32},{<unknown>, line = 70, col = 35}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 32},{<unknown>, line = 70, col = 33}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 70, col = 34},{<unknown>, line = 70, col = 35}) "1")])]])])))) (Var (fromList []) ({<unknown>, line = 70, col = 39},{<unknown>, line = 70, col = 45}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 70, col = 41},{<unknown>, line = 70, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 70, col = 43},{<unknown>, line = 70, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 15}) (Var (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 6}) [(VarName (fromList []) "huw",[])]) (Bin (fromList []) ({<unknown>, line = 71, col = 8},{<unknown>, line = 71, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 71, col = 8},{<unknown>, line = 71, col = 11}) [(VarName (fromList []) "hwp",[])]) (Var (fromList []) ({<unknown>, line = 71, col = 12},{<unknown>, line = 71, col = 15}) [(VarName (fromList []) "hwn",[])]))) (FSeq (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 72, col = 41}) (Var (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 72, col = 6}) [(VarName (fromList []) "hnp",[])]) (Bin (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 41}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 72, col = 12},{<unknown>, line = 72, col = 34}) (Bin (fromList []) ({<unknown>, line = 72, col = 13},{<unknown>, line = 72, col = 33}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 72, col = 13},{<unknown>, line = 72, col = 20}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 72, col = 16},{<unknown>, line = 72, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 72, col = 18},{<unknown>, line = 72, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 72, col = 21},{<unknown>, line = 72, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 72, col = 25},{<unknown>, line = 72, col = 32}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 72, col = 28},{<unknown>, line = 72, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 72, col = 30},{<unknown>, line = 72, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 72, col = 35},{<unknown>, line = 72, col = 41}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 72, col = 37},{<unknown>, line = 72, col = 38}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 72, col = 39},{<unknown>, line = 72, col = 40}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 73, col = 43}) (Var (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 73, col = 6}) [(VarName (fromList []) "hnn",[])]) (Bin (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 43}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 73, col = 12},{<unknown>, line = 73, col = 34}) (Bin (fromList []) ({<unknown>, line = 73, col = 13},{<unknown>, line = 73, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 73, col = 13},{<unknown>, line = 73, col = 20}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 73, col = 16},{<unknown>, line = 73, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 73, col = 18},{<unknown>, line = 73, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 73, col = 21},{<unknown>, line = 73, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 73, col = 25},{<unknown>, line = 73, col = 32}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 73, col = 28},{<unknown>, line = 73, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 73, col = 30},{<unknown>, line = 73, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 73, col = 35},{<unknown>, line = 73, col = 43}) [(VarName (fromList [("msak",[])]) "h",[Bin (fromList []) ({<unknown>, line = 73, col = 37},{<unknown>, line = 73, col = 40}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 73, col = 37},{<unknown>, line = 73, col = 38}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 73, col = 39},{<unknown>, line = 73, col = 40}) "1"),Var (fromList []) ({<unknown>, line = 73, col = 41},{<unknown>, line = 73, col = 42}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 74, col = 15}) (Var (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 74, col = 6}) [(VarName (fromList []) "hvn",[])]) (Bin (fromList []) ({<unknown>, line = 74, col = 8},{<unknown>, line = 74, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 74, col = 8},{<unknown>, line = 74, col = 11}) [(VarName (fromList []) "hnp",[])]) (Var (fromList []) ({<unknown>, line = 74, col = 12},{<unknown>, line = 74, col = 15}) [(VarName (fromList []) "hnn",[])]))) (FSeq (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 75, col = 47}) (Var (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 75, col = 6}) [(VarName (fromList []) "hsp",[])]) (Bin (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 47}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 75, col = 12},{<unknown>, line = 75, col = 38}) (Bin (fromList []) ({<unknown>, line = 75, col = 13},{<unknown>, line = 75, col = 37}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 13},{<unknown>, line = 75, col = 22}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 75, col = 16},{<unknown>, line = 75, col = 19}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 16},{<unknown>, line = 75, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 18},{<unknown>, line = 75, col = 19}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 20},{<unknown>, line = 75, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 75, col = 23},{<unknown>, line = 75, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 75, col = 27},{<unknown>, line = 75, col = 36}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 75, col = 30},{<unknown>, line = 75, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 30},{<unknown>, line = 75, col = 31}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 32},{<unknown>, line = 75, col = 33}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 34},{<unknown>, line = 75, col = 35}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 75, col = 39},{<unknown>, line = 75, col = 47}) [(VarName (fromList [("msak",[])]) "h",[Bin (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 44}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 75, col = 44}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 45},{<unknown>, line = 75, col = 46}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 76, col = 45}) (Var (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 76, col = 6}) [(VarName (fromList []) "hsn",[])]) (Bin (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 45}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 76, col = 12},{<unknown>, line = 76, col = 38}) (Bin (fromList []) ({<unknown>, line = 76, col = 13},{<unknown>, line = 76, col = 37}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 13},{<unknown>, line = 76, col = 22}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 76, col = 16},{<unknown>, line = 76, col = 19}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 16},{<unknown>, line = 76, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 18},{<unknown>, line = 76, col = 19}) "1"),Var (fromList []) ({<unknown>, line = 76, col = 20},{<unknown>, line = 76, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 76, col = 23},{<unknown>, line = 76, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 76, col = 27},{<unknown>, line = 76, col = 36}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 76, col = 30},{<unknown>, line = 76, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 30},{<unknown>, line = 76, col = 31}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 32},{<unknown>, line = 76, col = 33}) "1"),Var (fromList []) ({<unknown>, line = 76, col = 34},{<unknown>, line = 76, col = 35}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 76, col = 39},{<unknown>, line = 76, col = 45}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 76, col = 41},{<unknown>, line = 76, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 76, col = 43},{<unknown>, line = 76, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 77, col = 15}) (Var (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 77, col = 6}) [(VarName (fromList []) "hvs",[])]) (Bin (fromList []) ({<unknown>, line = 77, col = 8},{<unknown>, line = 77, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 77, col = 8},{<unknown>, line = 77, col = 11}) [(VarName (fromList []) "hsp",[])]) (Var (fromList []) ({<unknown>, line = 77, col = 12},{<unknown>, line = 77, col = 15}) [(VarName (fromList []) "hsn",[])]))) (FSeq (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 78, col = 54}) (Var (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 78, col = 54}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 78, col = 7},{<unknown>, line = 78, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 78, col = 9},{<unknown>, line = 78, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 54}) (Minus (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 22}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 78, col = 18},{<unknown>, line = 78, col = 19}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 78, col = 20},{<unknown>, line = 78, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 38}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 35}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 25}) [(VarName (fromList [("msak",[])]) "dt",[])]) (ParenthesizedExpr (fromList []) ({<unknown>, line = 78, col = 26},{<unknown>, line = 78, col = 35}) (Bin (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 34}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 30}) [(VarName (fromList []) "hue",[])]) (Var (fromList []) ({<unknown>, line = 78, col = 31},{<unknown>, line = 78, col = 34}) [(VarName (fromList []) "huw",[])])))) (Var (fromList []) ({<unknown>, line = 78, col = 36},{<unknown>, line = 78, col = 38}) [(VarName (fromList [("msak",[])]) "dx",[])]))) (Bin (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 54}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 51}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 41}) [(VarName (fromList [("msak",[])]) "dt",[])]) (ParenthesizedExpr (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 78, col = 51}) (Bin (fromList []) ({<unknown>, line = 78, col = 43},{<unknown>, line = 78, col = 50}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 43},{<unknown>, line = 78, col = 46}) [(VarName (fromList []) "hvn",[])]) (Var (fromList []) ({<unknown>, line = 78, col = 47},{<unknown>, line = 78, col = 50}) [(VarName (fromList []) "hvs",[])])))) (Var (fromList []) ({<unknown>, line = 78, col = 52},{<unknown>, line = 78, col = 54}) [(VarName (fromList [("msak",[])]) "dy",[])])))) (NullStmt (fromList []) ({<unknown>, line = 79, col = 6},{<unknown>, line = 79, col = 6})))))))))))))))) (NullStmt (fromList []) ({<unknown>, line = 80, col = 6},{<unknown>, line = 80, col = 6})))))) (FSeq (fromList []) (No source location,No source location) (For (fromList []) ({<unknown>, line = 15, col = 0},{<unknown>, line = 26, col = 6}) (VarName (fromList [("msak",[])]) "j") (Con (fromList []) ({<unknown>, line = 15, col = 7},{<unknown>, line = 15, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 15, col = 9},{<unknown>, line = 15, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 11},{<unknown>, line = 15, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 16, col = 0},{<unknown>, line = 26, col = 6}) (For (fromList []) ({<unknown>, line = 16, col = 0},{<unknown>, line = 25, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 16, col = 7},{<unknown>, line = 16, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 16, col = 9},{<unknown>, line = 16, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 11},{<unknown>, line = 16, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 17, col = 0},{<unknown>, line = 25, col = 6}) (If (fromList []) ({<unknown>, line = 17, col = 0},{<unknown>, line = 24, col = 6}) (Bin (fromList []) ({<unknown>, line = 17, col = 3},{<unknown>, line = 17, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 3},{<unknown>, line = 17, col = 11}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 17, col = 7},{<unknown>, line = 17, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 17, col = 9},{<unknown>, line = 17, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 17, col = 13},{<unknown>, line = 17, col = 14}) "1")) (FSeq (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 18, col = 81}) (Var (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 18, col = 8}) [(VarName (fromList []) "term1",[])]) (Bin (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 81}) (Mul (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 71}) (Bin (fromList []) ({<unknown>, line = 18, col = 11},{<unknown>, line = 18, col = 70}) (Minus (fromList [])) (Con (fromList []) ({<unknown>, line = 18, col = 11},{<unknown>, line = 18, col = 14}) "1.0") (Bin (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 70}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 23}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 19}) "0.25") (Var (fromList []) ({<unknown>, line = 18, col = 20},{<unknown>, line = 18, col = 23}) [(VarName (fromList [("msak",[])]) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 70}) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 69}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 58}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 46}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 35}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 34}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 32}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 33},{<unknown>, line = 18, col = 34}) "1")])]) (Var (fromList []) ({<unknown>, line = 18, col = 36},{<unknown>, line = 18, col = 46}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 18, col = 40},{<unknown>, line = 18, col = 41}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 18, col = 42},{<unknown>, line = 18, col = 45}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 42},{<unknown>, line = 18, col = 43}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 44},{<unknown>, line = 18, col = 45}) "1")])])) (Var (fromList []) ({<unknown>, line = 18, col = 48},{<unknown>, line = 18, col = 58}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 18, col = 52},{<unknown>, line = 18, col = 55}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 52},{<unknown>, line = 18, col = 53}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 54},{<unknown>, line = 18, col = 55}) "1"),Var (fromList []) ({<unknown>, line = 18, col = 56},{<unknown>, line = 18, col = 57}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (Var (fromList []) ({<unknown>, line = 18, col = 59},{<unknown>, line = 18, col = 69}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 18, col = 63},{<unknown>, line = 18, col = 66}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 63},{<unknown>, line = 18, col = 64}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 65},{<unknown>, line = 18, col = 66}) "1"),Var (fromList []) ({<unknown>, line = 18, col = 67},{<unknown>, line = 18, col = 68}) [(VarName (fromList [("msak",[])]) "k",[])]])])))))) (Var (fromList []) ({<unknown>, line = 18, col = 72},{<unknown>, line = 18, col = 81}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 18, col = 77},{<unknown>, line = 18, col = 78}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 18, col = 79},{<unknown>, line = 18, col = 80}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 19, col = 66}) (Var (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 19, col = 8}) [(VarName (fromList []) "term2",[])]) (Bin (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 66}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 18}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 14}) "0.25") (Var (fromList []) ({<unknown>, line = 19, col = 15},{<unknown>, line = 19, col = 18}) [(VarName (fromList [("msak",[])]) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 19, col = 19},{<unknown>, line = 19, col = 66}) (Bin (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 65}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 42}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 30}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 25}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 26},{<unknown>, line = 19, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 26},{<unknown>, line = 19, col = 27}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 28},{<unknown>, line = 19, col = 29}) "1")])]) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 42}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 19, col = 36},{<unknown>, line = 19, col = 37}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 38},{<unknown>, line = 19, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 38},{<unknown>, line = 19, col = 39}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 41}) "1")])])) (Bin (fromList []) ({<unknown>, line = 19, col = 43},{<unknown>, line = 19, col = 65}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 43},{<unknown>, line = 19, col = 53}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 19, col = 47},{<unknown>, line = 19, col = 48}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 49},{<unknown>, line = 19, col = 52}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 49},{<unknown>, line = 19, col = 50}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 51},{<unknown>, line = 19, col = 52}) "1")])]) (Var (fromList []) ({<unknown>, line = 19, col = 54},{<unknown>, line = 19, col = 65}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 19, col = 59},{<unknown>, line = 19, col = 60}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 61},{<unknown>, line = 19, col = 64}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 61},{<unknown>, line = 19, col = 62}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 63},{<unknown>, line = 19, col = 64}) "1")])])))))) (FSeq (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 20, col = 66}) (Var (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 20, col = 8}) [(VarName (fromList []) "term3",[])]) (Bin (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 66}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 18}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 14}) "0.25") (Var (fromList []) ({<unknown>, line = 20, col = 15},{<unknown>, line = 20, col = 18}) [(VarName (fromList [("msak",[])]) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 20, col = 19},{<unknown>, line = 20, col = 66}) (Bin (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 65}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 42}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 30}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 27}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 25}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 26},{<unknown>, line = 20, col = 27}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 28},{<unknown>, line = 20, col = 29}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 20, col = 31},{<unknown>, line = 20, col = 42}) [(VarName (fromList [("msak",[])]) "etan",[Bin (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 39}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 37}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 38},{<unknown>, line = 20, col = 39}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 40},{<unknown>, line = 20, col = 41}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (Bin (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 65}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 53}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 20, col = 47},{<unknown>, line = 20, col = 50}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 47},{<unknown>, line = 20, col = 48}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 49},{<unknown>, line = 20, col = 50}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 51},{<unknown>, line = 20, col = 52}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 20, col = 54},{<unknown>, line = 20, col = 65}) [(VarName (fromList [("msak",[])]) "etan",[Bin (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 62}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 60}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 61},{<unknown>, line = 20, col = 62}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 63},{<unknown>, line = 20, col = 64}) [(VarName (fromList [("msak",[])]) "k",[])]])])))))) (Assg (fromList []) ({<unknown>, line = 21, col = 2},{<unknown>, line = 21, col = 30}) (Var (fromList []) ({<unknown>, line = 21, col = 2},{<unknown>, line = 21, col = 30}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 21, col = 6},{<unknown>, line = 21, col = 7}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 21, col = 8},{<unknown>, line = 21, col = 9}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 30}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 24}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 18}) [(VarName (fromList []) "term1",[])]) (Var (fromList []) ({<unknown>, line = 21, col = 19},{<unknown>, line = 21, col = 24}) [(VarName (fromList []) "term2",[])])) (Var (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 30}) [(VarName (fromList []) "term3",[])])))))) [] (Just (Assg (fromList []) ({<unknown>, line = 23, col = 2},{<unknown>, line = 23, col = 22}) (Var (fromList []) ({<unknown>, line = 23, col = 2},{<unknown>, line = 23, col = 22}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 23, col = 6},{<unknown>, line = 23, col = 7}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 9}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 22}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 23, col = 18},{<unknown>, line = 23, col = 19}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 23, col = 20},{<unknown>, line = 23, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])])))) (NullStmt (fromList []) ({<unknown>, line = 25, col = 6},{<unknown>, line = 25, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 26, col = 6},{<unknown>, line = 26, col = 6})))) (For (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 31, col = 6}) (VarName (fromList [("msak",[])]) "j") (Con (fromList []) ({<unknown>, line = 23, col = 7},{<unknown>, line = 23, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 23, col = 9},{<unknown>, line = 23, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 23, col = 9},{<unknown>, line = 23, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 23, col = 12},{<unknown>, line = 23, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 31, col = 6}) (For (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 30, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 24, col = 7},{<unknown>, line = 24, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 24, col = 12},{<unknown>, line = 24, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 24, col = 13},{<unknown>, line = 24, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 25, col = 32}) (Var (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 25, col = 32}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 25, col = 4},{<unknown>, line = 25, col = 5}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 25, col = 6},{<unknown>, line = 25, col = 7}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 32}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 22}) [(VarName (fromList [("msak",[])]) "hzero",[Var (fromList []) ({<unknown>, line = 25, col = 17},{<unknown>, line = 25, col = 18}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 25, col = 19},{<unknown>, line = 25, col = 20}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 25, col = 24},{<unknown>, line = 25, col = 32}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 25, col = 28},{<unknown>, line = 25, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 25, col = 30},{<unknown>, line = 25, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 26, col = 14}) (Var (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 26, col = 14}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 26, col = 6},{<unknown>, line = 26, col = 7}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 9}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 26, col = 13},{<unknown>, line = 26, col = 14}) "1")) (FSeq (fromList []) ({<unknown>, line = 27, col = 2},{<unknown>, line = 30, col = 6}) (If (fromList []) ({<unknown>, line = 27, col = 2},{<unknown>, line = 27, col = 31}) (Bin (fromList []) ({<unknown>, line = 27, col = 6},{<unknown>, line = 27, col = 17}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 27, col = 6},{<unknown>, line = 27, col = 12}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 9}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 27, col = 10},{<unknown>, line = 27, col = 11}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 27, col = 13},{<unknown>, line = 27, col = 17}) [(VarName (fromList [("msak",[])]) "hmin",[])])) (Assg (fromList []) ({<unknown>, line = 27, col = 19},{<unknown>, line = 27, col = 31}) (Var (fromList []) ({<unknown>, line = 27, col = 19},{<unknown>, line = 27, col = 31}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 27, col = 23},{<unknown>, line = 27, col = 24}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 27, col = 25},{<unknown>, line = 27, col = 26}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 27, col = 30},{<unknown>, line = 27, col = 31}) "0")) [] Nothing) (FSeq (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 28, col = 18}) (Var (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 28, col = 18}) [(VarName (fromList [("msak",[])]) "u",[Var (fromList []) ({<unknown>, line = 28, col = 4},{<unknown>, line = 28, col = 5}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 28, col = 6},{<unknown>, line = 28, col = 7}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 18}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 28, col = 14},{<unknown>, line = 28, col = 15}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 28, col = 16},{<unknown>, line = 28, col = 17}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 18}) (Var (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 18}) [(VarName (fromList [("msak",[])]) "v",[Var (fromList []) ({<unknown>, line = 29, col = 4},{<unknown>, line = 29, col = 5}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 29, col = 6},{<unknown>, line = 29, col = 7}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 18}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 29, col = 14},{<unknown>, line = 29, col = 15}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 29, col = 16},{<unknown>, line = 29, col = 17}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (NullStmt (fromList []) ({<unknown>, line = 30, col = 6},{<unknown>, line = 30, col = 6})))))))) (NullStmt (fromList []) ({<unknown>, line = 31, col = 6},{<unknown>, line = 31, col = 6})))))))]
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: wave2d
Filename: ./Shallow-Water-2D/main.f95
Source:
program wave2d
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1) :: h
      real :: hmin
      real, dimension(0:ny+1,0:nx+1) :: hzero
      integer :: j
      integer :: k
      real, dimension(0:ny+1,0:nx+1) :: u
      real, dimension(0:ny+1,0:nx+1) :: un
      real, dimension(0:ny+1,0:nx+1) :: v
      real, dimension(0:ny+1,0:nx+1) :: vn
      integer, dimension(0:ny+1,0:nx+1) :: wet
      real :: hmax
      real :: time
      real :: dtmax
      real :: c
      real :: lambda
      integer :: n
      integer :: ntot
      integer :: nout
      integer :: dummy
    ntot = 10000
    eps = 0.05
    call init(hmin, dx, dy, dt, g, j, k, hzero, eta, etan, h, wet, u, un, v, vn)
    open(90, file='debug.dat', form='formatted')
    open(10, file='eta0.dat', form='formatted')
    do j = 0, ny+1, 1
        write(10, '(101F12.6)')(eta(j,k), k = 0, nx+1)
    end do
    close(10)
    open(10, file='h0.dat', form='formatted')
    do j = 0, ny+1, 1
        write(10, '(101F12.6)')(hzero(j,k), k = 0, nx+1)
    end do
    close(10)
    hmax = 0.
    do j = 1, ny, 1
        do k = 1, nx, 1
                hmax = max(hmax,h(j,k))
        end do
    end do
    dummy = 0
    c = sqrt(2*g*hmax)
    write(6, *)("c = ", c)
    lambda = dt*sqrt(g*hmax)/min(dx,dy)
    write(6, *)("lambda = ", lambda)
    if (lambda>1) then
        write(6, *)("This will not work. Do you know why?")
        stop 
    end if
    open(10, file='eta.dat', form='formatted')
    open(20, file='h.dat', form='formatted')
    open(30, file='u.dat', form='formatted')
    open(40, file='v.dat', form='formatted')
    do j = 26, 26, 1
        do k = 26, 26, 1
                eta(j,k) = 1.0
        end do
    end do
    do n = 1, ntot, 1
        time = REAL(n)*dt
        call dyn(j, k, dx, g, eta, dt, dy, un, u, wet, v, vn, h, etan)
        call shapiro(j, k, wet, etan, eps, eta)
        call vernieuw(dt, dx, dy, eps, eta, etan, g, h, hmin, hzero, j, k, u, un, v, vn, wet)
    end do
    do j = 0, ny+1, 1
        write(10, '(101F12.6)')(eta(j,k), k = 0, nx+1)
        write(20, '(101F12.6)')(h(j,k), k = 0, nx+1)
        write(30, '(101F12.6)')(u(j,k), k = 0, nx+1)
        write(40, '(101F12.6)')(v(j,k), k = 0, nx+1)
    end do
    write(6, *)("Data output at time = ", time/60.0, " min")

end program wave2d
AST: 
Main (fromList []) ({<unknown>, line = 1, col = 5},{<unknown>, line = 82, col = 0}) (SubName (fromList []) "wave2d") (Arg (fromList []) (NullArg (fromList [])) ({<unknown>, line = 1, col = 19},{<unknown>, line = 1, col = 19})) (Block (fromList []) (UseBlock (UseNil (fromList [])) {<unknown>, line = 2, col = 0}) (ImplicitNull (fromList [])) ({<unknown>, line = 2, col = 0},{<unknown>, line = 82, col = 0}) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 2, col = 0},{<unknown>, line = 2, col = 31}) [(Var (fromList []) ({<unknown>, line = 2, col = 25},{<unknown>, line = 2, col = 27}) [(VarName (fromList []) "nx",[])],Con (fromList []) ({<unknown>, line = 2, col = 28},{<unknown>, line = 2, col = 31}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 2, col = 8},{<unknown>, line = 2, col = 9}) "4") (NullExpr (fromList []) ({<unknown>, line = 2, col = 10},{<unknown>, line = 2, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 3, col = 0},{<unknown>, line = 3, col = 31}) [(Var (fromList []) ({<unknown>, line = 3, col = 25},{<unknown>, line = 3, col = 27}) [(VarName (fromList []) "ny",[])],Con (fromList []) ({<unknown>, line = 3, col = 28},{<unknown>, line = 3, col = 31}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 3, col = 8},{<unknown>, line = 3, col = 9}) "4") (NullExpr (fromList []) ({<unknown>, line = 3, col = 10},{<unknown>, line = 3, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 4, col = 6},{<unknown>, line = 4, col = 16}) [(Var (fromList []) ({<unknown>, line = 4, col = 14},{<unknown>, line = 4, col = 16}) [(VarName (fromList []) "dt",[])],NullExpr (fromList []) ({<unknown>, line = 4, col = 16},{<unknown>, line = 4, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 4, col = 11},{<unknown>, line = 4, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 4, col = 11},{<unknown>, line = 4, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 5, col = 6},{<unknown>, line = 5, col = 16}) [(Var (fromList []) ({<unknown>, line = 5, col = 14},{<unknown>, line = 5, col = 16}) [(VarName (fromList []) "dx",[])],NullExpr (fromList []) ({<unknown>, line = 5, col = 16},{<unknown>, line = 5, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 5, col = 11},{<unknown>, line = 5, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 5, col = 11},{<unknown>, line = 5, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 16}) [(Var (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 16}) [(VarName (fromList []) "dy",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 16},{<unknown>, line = 6, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 17}) [(Var (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 17}) [(VarName (fromList []) "eps",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 17},{<unknown>, line = 7, col = 17}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 8, col = 6},{<unknown>, line = 8, col = 43}) [(Var (fromList []) ({<unknown>, line = 8, col = 40},{<unknown>, line = 8, col = 43}) [(VarName (fromList []) "eta",[])],NullExpr (fromList []) ({<unknown>, line = 8, col = 43},{<unknown>, line = 8, col = 43}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 8, col = 22},{<unknown>, line = 8, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 8, col = 24},{<unknown>, line = 8, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 8, col = 24},{<unknown>, line = 8, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 8, col = 27},{<unknown>, line = 8, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 8, col = 29},{<unknown>, line = 8, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 8, col = 31},{<unknown>, line = 8, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 8, col = 31},{<unknown>, line = 8, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 8, col = 34},{<unknown>, line = 8, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 9, col = 6},{<unknown>, line = 9, col = 44}) [(Var (fromList []) ({<unknown>, line = 9, col = 40},{<unknown>, line = 9, col = 44}) [(VarName (fromList []) "etan",[])],NullExpr (fromList []) ({<unknown>, line = 9, col = 44},{<unknown>, line = 9, col = 44}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 9, col = 22},{<unknown>, line = 9, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 9, col = 24},{<unknown>, line = 9, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 9, col = 24},{<unknown>, line = 9, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 9, col = 27},{<unknown>, line = 9, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 9, col = 29},{<unknown>, line = 9, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 9, col = 31},{<unknown>, line = 9, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 9, col = 31},{<unknown>, line = 9, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 9, col = 34},{<unknown>, line = 9, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 10, col = 6},{<unknown>, line = 10, col = 15}) [(Var (fromList []) ({<unknown>, line = 10, col = 14},{<unknown>, line = 10, col = 15}) [(VarName (fromList []) "g",[])],NullExpr (fromList []) ({<unknown>, line = 10, col = 15},{<unknown>, line = 10, col = 15}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 10, col = 11},{<unknown>, line = 10, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 10, col = 11},{<unknown>, line = 10, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 11, col = 6},{<unknown>, line = 11, col = 41}) [(Var (fromList []) ({<unknown>, line = 11, col = 40},{<unknown>, line = 11, col = 41}) [(VarName (fromList []) "h",[])],NullExpr (fromList []) ({<unknown>, line = 11, col = 41},{<unknown>, line = 11, col = 41}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 11, col = 22},{<unknown>, line = 11, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 27},{<unknown>, line = 11, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 11, col = 29},{<unknown>, line = 11, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 34},{<unknown>, line = 11, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 6},{<unknown>, line = 12, col = 18}) [(Var (fromList []) ({<unknown>, line = 12, col = 14},{<unknown>, line = 12, col = 18}) [(VarName (fromList []) "hmin",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 18},{<unknown>, line = 12, col = 18}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 45}) [(Var (fromList []) ({<unknown>, line = 13, col = 40},{<unknown>, line = 13, col = 45}) [(VarName (fromList []) "hzero",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 45},{<unknown>, line = 13, col = 45}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 6},{<unknown>, line = 14, col = 18}) [(Var (fromList []) ({<unknown>, line = 14, col = 17},{<unknown>, line = 14, col = 18}) [(VarName (fromList []) "j",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 18},{<unknown>, line = 14, col = 18}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 14, col = 14},{<unknown>, line = 14, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 14},{<unknown>, line = 14, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 15, col = 6},{<unknown>, line = 15, col = 18}) [(Var (fromList []) ({<unknown>, line = 15, col = 17},{<unknown>, line = 15, col = 18}) [(VarName (fromList []) "k",[])],NullExpr (fromList []) ({<unknown>, line = 15, col = 18},{<unknown>, line = 15, col = 18}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 15, col = 14},{<unknown>, line = 15, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 15, col = 14},{<unknown>, line = 15, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 16, col = 6},{<unknown>, line = 16, col = 41}) [(Var (fromList []) ({<unknown>, line = 16, col = 40},{<unknown>, line = 16, col = 41}) [(VarName (fromList []) "u",[])],NullExpr (fromList []) ({<unknown>, line = 16, col = 41},{<unknown>, line = 16, col = 41}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 16, col = 22},{<unknown>, line = 16, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 27},{<unknown>, line = 16, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 16, col = 29},{<unknown>, line = 16, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 34},{<unknown>, line = 16, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 17, col = 6},{<unknown>, line = 17, col = 42}) [(Var (fromList []) ({<unknown>, line = 17, col = 40},{<unknown>, line = 17, col = 42}) [(VarName (fromList []) "un",[])],NullExpr (fromList []) ({<unknown>, line = 17, col = 42},{<unknown>, line = 17, col = 42}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 17, col = 22},{<unknown>, line = 17, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 27},{<unknown>, line = 17, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 17, col = 29},{<unknown>, line = 17, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 34},{<unknown>, line = 17, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 18, col = 6},{<unknown>, line = 18, col = 41}) [(Var (fromList []) ({<unknown>, line = 18, col = 40},{<unknown>, line = 18, col = 41}) [(VarName (fromList []) "v",[])],NullExpr (fromList []) ({<unknown>, line = 18, col = 41},{<unknown>, line = 18, col = 41}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 18, col = 22},{<unknown>, line = 18, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 27},{<unknown>, line = 18, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 34},{<unknown>, line = 18, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 19, col = 6},{<unknown>, line = 19, col = 42}) [(Var (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 42}) [(VarName (fromList []) "vn",[])],NullExpr (fromList []) ({<unknown>, line = 19, col = 42},{<unknown>, line = 19, col = 42}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 19, col = 22},{<unknown>, line = 19, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 27},{<unknown>, line = 19, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 19, col = 29},{<unknown>, line = 19, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 34},{<unknown>, line = 19, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 20, col = 6},{<unknown>, line = 20, col = 46}) [(Var (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 46}) [(VarName (fromList []) "wet",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 46},{<unknown>, line = 20, col = 46}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 26}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 31}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 29}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 30},{<unknown>, line = 20, col = 31}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 32},{<unknown>, line = 20, col = 33}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 38}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 36}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 37},{<unknown>, line = 20, col = 38}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 21, col = 0},{<unknown>, line = 21, col = 12}) [(Var (fromList []) ({<unknown>, line = 21, col = 8},{<unknown>, line = 21, col = 12}) [(VarName (fromList []) "hmax",[])],NullExpr (fromList []) ({<unknown>, line = 21, col = 12},{<unknown>, line = 21, col = 12}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 21, col = 5},{<unknown>, line = 21, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 21, col = 5},{<unknown>, line = 21, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 22, col = 0},{<unknown>, line = 22, col = 12}) [(Var (fromList []) ({<unknown>, line = 22, col = 8},{<unknown>, line = 22, col = 12}) [(VarName (fromList []) "time",[])],NullExpr (fromList []) ({<unknown>, line = 22, col = 12},{<unknown>, line = 22, col = 12}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 23, col = 13}) [(Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 13}) [(VarName (fromList []) "dtmax",[])],NullExpr (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 24, col = 9}) [(Var (fromList []) ({<unknown>, line = 24, col = 8},{<unknown>, line = 24, col = 9}) [(VarName (fromList []) "c",[])],NullExpr (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 9}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 25, col = 0},{<unknown>, line = 25, col = 14}) [(Var (fromList []) ({<unknown>, line = 25, col = 8},{<unknown>, line = 25, col = 14}) [(VarName (fromList []) "lambda",[])],NullExpr (fromList []) ({<unknown>, line = 25, col = 14},{<unknown>, line = 25, col = 14}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 26, col = 0},{<unknown>, line = 26, col = 12}) [(Var (fromList []) ({<unknown>, line = 26, col = 11},{<unknown>, line = 26, col = 12}) [(VarName (fromList []) "n",[])],NullExpr (fromList []) ({<unknown>, line = 26, col = 12},{<unknown>, line = 26, col = 12}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 8})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 27, col = 0},{<unknown>, line = 27, col = 15}) [(Var (fromList []) ({<unknown>, line = 27, col = 11},{<unknown>, line = 27, col = 15}) [(VarName (fromList []) "ntot",[])],NullExpr (fromList []) ({<unknown>, line = 27, col = 15},{<unknown>, line = 27, col = 15}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 8})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 28, col = 0},{<unknown>, line = 28, col = 15}) [(Var (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 15}) [(VarName (fromList []) "nout",[])],NullExpr (fromList []) ({<unknown>, line = 28, col = 15},{<unknown>, line = 28, col = 15}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 28, col = 8},{<unknown>, line = 28, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 28, col = 8},{<unknown>, line = 28, col = 8})))) (Decl (fromList []) ({<unknown>, line = 29, col = 0},{<unknown>, line = 29, col = 16}) [(Var (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 16}) [(VarName (fromList []) "dummy",[])],NullExpr (fromList []) ({<unknown>, line = 29, col = 16},{<unknown>, line = 29, col = 16}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 8}))))))))))))))))))))))))))))))) (FSeq (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 30, col = 12}) (Var (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 30, col = 5}) [(VarName (fromList []) "ntot",[])]) (Con (fromList []) ({<unknown>, line = 30, col = 7},{<unknown>, line = 30, col = 12}) "10000")) (FSeq (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 31, col = 10}) (Var (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 31, col = 4}) [(VarName (fromList []) "eps",[])]) (Con (fromList []) ({<unknown>, line = 31, col = 6},{<unknown>, line = 31, col = 10}) "0.05")) (FSeq (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 80, col = 51}) (Call (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 32, col = 61}) (Var (fromList []) ({<unknown>, line = 32, col = 5},{<unknown>, line = 32, col = 9}) [(VarName (fromList []) "init",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 60}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 57}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 55}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 52}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 50}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 46}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 44}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 39}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 35}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 29}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 27}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 25}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 23}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 20}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 17}) (Var (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 14}) [(VarName (fromList []) "hmin",[])]) (Var (fromList []) ({<unknown>, line = 32, col = 15},{<unknown>, line = 32, col = 17}) [(VarName (fromList []) "dx",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 18},{<unknown>, line = 32, col = 20}) [(VarName (fromList []) "dy",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 21},{<unknown>, line = 32, col = 23}) [(VarName (fromList []) "dt",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 24},{<unknown>, line = 32, col = 25}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 26},{<unknown>, line = 32, col = 27}) [(VarName (fromList []) "j",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 28},{<unknown>, line = 32, col = 29}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 30},{<unknown>, line = 32, col = 35}) [(VarName (fromList []) "hzero",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 36},{<unknown>, line = 32, col = 39}) [(VarName (fromList []) "eta",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 40},{<unknown>, line = 32, col = 44}) [(VarName (fromList []) "etan",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 45},{<unknown>, line = 32, col = 46}) [(VarName (fromList []) "h",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 47},{<unknown>, line = 32, col = 50}) [(VarName (fromList []) "wet",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 51},{<unknown>, line = 32, col = 52}) [(VarName (fromList []) "u",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 53},{<unknown>, line = 32, col = 55}) [(VarName (fromList []) "un",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 56},{<unknown>, line = 32, col = 57}) [(VarName (fromList []) "v",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 58},{<unknown>, line = 32, col = 60}) [(VarName (fromList []) "vn",[])])))) (FSeq (fromList []) ({<unknown>, line = 33, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 33, col = 0},{<unknown>, line = 33, col = 43}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 33, col = 5},{<unknown>, line = 33, col = 7}) "90"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 33, col = 14},{<unknown>, line = 33, col = 25}) "'debug.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 33, col = 31},{<unknown>, line = 33, col = 42}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 34, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 34, col = 0},{<unknown>, line = 34, col = 42}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 34, col = 5},{<unknown>, line = 34, col = 7}) "10"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 34, col = 14},{<unknown>, line = 34, col = 24}) "'eta0.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 34, col = 30},{<unknown>, line = 34, col = 41}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 35, col = 2},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 35, col = 2},{<unknown>, line = 37, col = 8}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 35, col = 9},{<unknown>, line = 35, col = 10}) "0") (Bin (fromList []) ({<unknown>, line = 35, col = 11},{<unknown>, line = 35, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 35, col = 11},{<unknown>, line = 35, col = 13}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 35, col = 14},{<unknown>, line = 35, col = 15}) "1")) (Con (fromList []) ({<unknown>, line = 35, col = 15},{<unknown>, line = 35, col = 15}) "1") (FSeq (fromList []) ({<unknown>, line = 36, col = 45},{<unknown>, line = 37, col = 8}) (Write (fromList []) ({<unknown>, line = 36, col = 45},{<unknown>, line = 36, col = 45}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 36, col = 12},{<unknown>, line = 36, col = 12}) "10"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 36, col = 27},{<unknown>, line = 36, col = 44}) (ESeq (fromList []) ({<unknown>, line = 36, col = 27},{<unknown>, line = 36, col = 39}) (Var (fromList []) ({<unknown>, line = 36, col = 27},{<unknown>, line = 36, col = 35}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 36, col = 31},{<unknown>, line = 36, col = 32}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 36, col = 33},{<unknown>, line = 36, col = 34}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 36, col = 36},{<unknown>, line = 36, col = 39}) "k" (Con (fromList []) ({<unknown>, line = 36, col = 38},{<unknown>, line = 36, col = 39}) "0"))) (Bin (fromList []) ({<unknown>, line = 36, col = 40},{<unknown>, line = 36, col = 44}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 36, col = 40},{<unknown>, line = 36, col = 42}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 36, col = 43},{<unknown>, line = 36, col = 44}) "1"))]) (NullStmt (fromList []) ({<unknown>, line = 37, col = 8},{<unknown>, line = 37, col = 8})))) (FSeq (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 80, col = 51}) (Close (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 38, col = 9}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 38, col = 6},{<unknown>, line = 38, col = 8}) "10")]) (FSeq (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 39, col = 40}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 39, col = 5},{<unknown>, line = 39, col = 7}) "10"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 39, col = 14},{<unknown>, line = 39, col = 22}) "'h0.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 39, col = 28},{<unknown>, line = 39, col = 39}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 42, col = 8}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 40, col = 9},{<unknown>, line = 40, col = 10}) "0") (Bin (fromList []) ({<unknown>, line = 40, col = 11},{<unknown>, line = 40, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 11},{<unknown>, line = 40, col = 13}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 40, col = 14},{<unknown>, line = 40, col = 15}) "1")) (Con (fromList []) ({<unknown>, line = 40, col = 15},{<unknown>, line = 40, col = 15}) "1") (FSeq (fromList []) ({<unknown>, line = 41, col = 47},{<unknown>, line = 42, col = 8}) (Write (fromList []) ({<unknown>, line = 41, col = 47},{<unknown>, line = 41, col = 47}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 12}) "10"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 46}) (ESeq (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 41}) (Var (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 37}) [(VarName (fromList []) "hzero",[Var (fromList []) ({<unknown>, line = 41, col = 33},{<unknown>, line = 41, col = 34}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 41, col = 35},{<unknown>, line = 41, col = 36}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 41, col = 38},{<unknown>, line = 41, col = 41}) "k" (Con (fromList []) ({<unknown>, line = 41, col = 40},{<unknown>, line = 41, col = 41}) "0"))) (Bin (fromList []) ({<unknown>, line = 41, col = 42},{<unknown>, line = 41, col = 46}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 42},{<unknown>, line = 41, col = 44}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 41, col = 45},{<unknown>, line = 41, col = 46}) "1"))]) (NullStmt (fromList []) ({<unknown>, line = 42, col = 8},{<unknown>, line = 42, col = 8})))) (FSeq (fromList []) ({<unknown>, line = 43, col = 0},{<unknown>, line = 80, col = 51}) (Close (fromList []) ({<unknown>, line = 43, col = 0},{<unknown>, line = 43, col = 9}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 43, col = 6},{<unknown>, line = 43, col = 8}) "10")]) (FSeq (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 44, col = 9}) (Var (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 44, col = 5}) [(VarName (fromList []) "hmax",[])]) (Con (fromList []) ({<unknown>, line = 44, col = 7},{<unknown>, line = 44, col = 9}) "0.")) (FSeq (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 49, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 45, col = 7},{<unknown>, line = 45, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 45, col = 9},{<unknown>, line = 45, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 45, col = 11},{<unknown>, line = 45, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 49, col = 6}) (For (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 48, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 46, col = 7},{<unknown>, line = 46, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 46, col = 9},{<unknown>, line = 46, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 46, col = 11},{<unknown>, line = 46, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 47, col = 2},{<unknown>, line = 48, col = 6}) (Assg (fromList []) ({<unknown>, line = 47, col = 2},{<unknown>, line = 47, col = 25}) (Var (fromList []) ({<unknown>, line = 47, col = 2},{<unknown>, line = 47, col = 7}) [(VarName (fromList []) "hmax",[])]) (Var (fromList []) ({<unknown>, line = 47, col = 9},{<unknown>, line = 47, col = 25}) [(VarName (fromList []) "max",[Var (fromList []) ({<unknown>, line = 47, col = 13},{<unknown>, line = 47, col = 17}) [(VarName (fromList []) "hmax",[])],Var (fromList []) ({<unknown>, line = 47, col = 18},{<unknown>, line = 47, col = 24}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 47, col = 20},{<unknown>, line = 47, col = 21}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 47, col = 22},{<unknown>, line = 47, col = 23}) [(VarName (fromList []) "k",[])]])]])])) (NullStmt (fromList []) ({<unknown>, line = 48, col = 6},{<unknown>, line = 48, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 49, col = 6},{<unknown>, line = 49, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 50, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 50, col = 0},{<unknown>, line = 50, col = 9}) (Var (fromList []) ({<unknown>, line = 50, col = 0},{<unknown>, line = 50, col = 6}) [(VarName (fromList []) "dummy",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 8},{<unknown>, line = 50, col = 9}) "0")) (FSeq (fromList []) ({<unknown>, line = 51, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 51, col = 0},{<unknown>, line = 51, col = 18}) (Var (fromList []) ({<unknown>, line = 51, col = 0},{<unknown>, line = 51, col = 2}) [(VarName (fromList []) "c",[])]) (Sqrt (fromList []) ({<unknown>, line = 51, col = 4},{<unknown>, line = 51, col = 18}) (Bin (fromList []) ({<unknown>, line = 51, col = 9},{<unknown>, line = 51, col = 17}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 51, col = 9},{<unknown>, line = 51, col = 12}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 51, col = 9},{<unknown>, line = 51, col = 10}) "2") (Var (fromList []) ({<unknown>, line = 51, col = 11},{<unknown>, line = 51, col = 12}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 51, col = 13},{<unknown>, line = 51, col = 17}) [(VarName (fromList []) "hmax",[])])))) (FSeq (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 80, col = 51}) (Write (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 52, col = 18}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 52, col = 7},{<unknown>, line = 52, col = 7}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 52, col = 9},{<unknown>, line = 52, col = 9}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 52, col = 10},{<unknown>, line = 52, col = 16}) "\"c = \"",Var (fromList []) ({<unknown>, line = 52, col = 17},{<unknown>, line = 52, col = 18}) [(VarName (fromList []) "c",[])]]) (FSeq (fromList []) ({<unknown>, line = 53, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 53, col = 0},{<unknown>, line = 53, col = 35}) (Var (fromList []) ({<unknown>, line = 53, col = 0},{<unknown>, line = 53, col = 7}) [(VarName (fromList []) "lambda",[])]) (Bin (fromList []) ({<unknown>, line = 53, col = 9},{<unknown>, line = 53, col = 35}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 53, col = 9},{<unknown>, line = 53, col = 24}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 53, col = 9},{<unknown>, line = 53, col = 11}) [(VarName (fromList []) "dt",[])]) (Sqrt (fromList []) ({<unknown>, line = 53, col = 12},{<unknown>, line = 53, col = 24}) (Bin (fromList []) ({<unknown>, line = 53, col = 17},{<unknown>, line = 53, col = 23}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 53, col = 17},{<unknown>, line = 53, col = 18}) [(VarName (fromList []) "g",[])]) (Var (fromList []) ({<unknown>, line = 53, col = 19},{<unknown>, line = 53, col = 23}) [(VarName (fromList []) "hmax",[])])))) (Var (fromList []) ({<unknown>, line = 53, col = 25},{<unknown>, line = 53, col = 35}) [(VarName (fromList []) "min",[Var (fromList []) ({<unknown>, line = 53, col = 29},{<unknown>, line = 53, col = 31}) [(VarName (fromList []) "dx",[])],Var (fromList []) ({<unknown>, line = 53, col = 32},{<unknown>, line = 53, col = 34}) [(VarName (fromList []) "dy",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 54, col = 28},{<unknown>, line = 80, col = 51}) (Write (fromList []) ({<unknown>, line = 54, col = 28},{<unknown>, line = 54, col = 28}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 54, col = 7},{<unknown>, line = 54, col = 7}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 54, col = 9},{<unknown>, line = 54, col = 9}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 54, col = 10},{<unknown>, line = 54, col = 21}) "\"lambda = \"",Var (fromList []) ({<unknown>, line = 54, col = 22},{<unknown>, line = 54, col = 28}) [(VarName (fromList []) "lambda",[])]]) (FSeq (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 80, col = 51}) (If (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 58, col = 6}) (Bin (fromList []) ({<unknown>, line = 55, col = 3},{<unknown>, line = 55, col = 13}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 55, col = 3},{<unknown>, line = 55, col = 10}) [(VarName (fromList []) "lambda",[])]) (Con (fromList []) ({<unknown>, line = 55, col = 12},{<unknown>, line = 55, col = 13}) "1")) (FSeq (fromList []) ({<unknown>, line = 56, col = 51},{<unknown>, line = 57, col = 6}) (Write (fromList []) ({<unknown>, line = 56, col = 51},{<unknown>, line = 56, col = 51}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 56, col = 9},{<unknown>, line = 56, col = 9}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 56, col = 11},{<unknown>, line = 56, col = 11}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 56, col = 13},{<unknown>, line = 56, col = 51}) "\"This will not work. Do you know why?\""]) (Stop (fromList []) ({<unknown>, line = 57, col = 2},{<unknown>, line = 57, col = 6}) (NullExpr (fromList []) ({<unknown>, line = 57, col = 2},{<unknown>, line = 57, col = 6})))) [] Nothing) (FSeq (fromList []) ({<unknown>, line = 59, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 59, col = 0},{<unknown>, line = 59, col = 41}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 59, col = 5},{<unknown>, line = 59, col = 7}) "10"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 59, col = 14},{<unknown>, line = 59, col = 23}) "'eta.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 59, col = 29},{<unknown>, line = 59, col = 40}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 60, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 60, col = 0},{<unknown>, line = 60, col = 39}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 7}) "20"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 60, col = 14},{<unknown>, line = 60, col = 21}) "'h.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 60, col = 27},{<unknown>, line = 60, col = 38}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 61, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 61, col = 0},{<unknown>, line = 61, col = 39}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 61, col = 5},{<unknown>, line = 61, col = 7}) "30"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 61, col = 14},{<unknown>, line = 61, col = 21}) "'u.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 61, col = 27},{<unknown>, line = 61, col = 38}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 62, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 62, col = 0},{<unknown>, line = 62, col = 39}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 62, col = 5},{<unknown>, line = 62, col = 7}) "40"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 62, col = 14},{<unknown>, line = 62, col = 21}) "'v.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 62, col = 27},{<unknown>, line = 62, col = 38}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 63, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 63, col = 0},{<unknown>, line = 67, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 63, col = 7},{<unknown>, line = 63, col = 9}) "26") (Con (fromList []) ({<unknown>, line = 63, col = 10},{<unknown>, line = 63, col = 12}) "26") (Con (fromList []) ({<unknown>, line = 63, col = 12},{<unknown>, line = 63, col = 12}) "1") (FSeq (fromList []) ({<unknown>, line = 64, col = 0},{<unknown>, line = 67, col = 6}) (For (fromList []) ({<unknown>, line = 64, col = 0},{<unknown>, line = 66, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 64, col = 7},{<unknown>, line = 64, col = 9}) "26") (Con (fromList []) ({<unknown>, line = 64, col = 10},{<unknown>, line = 64, col = 12}) "26") (Con (fromList []) ({<unknown>, line = 64, col = 12},{<unknown>, line = 64, col = 12}) "1") (FSeq (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 66, col = 6}) (Assg (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 65, col = 14}) (Var (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 65, col = 14}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 65, col = 4},{<unknown>, line = 65, col = 5}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 65, col = 6},{<unknown>, line = 65, col = 7}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 65, col = 11},{<unknown>, line = 65, col = 14}) "1.0")) (NullStmt (fromList []) ({<unknown>, line = 66, col = 6},{<unknown>, line = 66, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 67, col = 6},{<unknown>, line = 67, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 68, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 68, col = 0},{<unknown>, line = 73, col = 6}) (VarName (fromList []) "n") (Con (fromList []) ({<unknown>, line = 68, col = 7},{<unknown>, line = 68, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 68, col = 9},{<unknown>, line = 68, col = 13}) [(VarName (fromList []) "ntot",[])]) (Con (fromList []) ({<unknown>, line = 68, col = 13},{<unknown>, line = 68, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 69, col = 0},{<unknown>, line = 73, col = 6}) (Assg (fromList []) ({<unknown>, line = 69, col = 0},{<unknown>, line = 69, col = 17}) (Var (fromList []) ({<unknown>, line = 69, col = 0},{<unknown>, line = 69, col = 5}) [(VarName (fromList []) "time",[])]) (Bin (fromList []) ({<unknown>, line = 69, col = 7},{<unknown>, line = 69, col = 17}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 7},{<unknown>, line = 69, col = 14}) [(VarName (fromList []) "REAL",[Var (fromList []) ({<unknown>, line = 69, col = 12},{<unknown>, line = 69, col = 13}) [(VarName (fromList []) "n",[])]])]) (Var (fromList []) ({<unknown>, line = 69, col = 15},{<unknown>, line = 69, col = 17}) [(VarName (fromList []) "dt",[])]))) (FSeq (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 73, col = 6}) (Call (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 51}) (Var (fromList []) ({<unknown>, line = 70, col = 7},{<unknown>, line = 70, col = 10}) [(VarName (fromList []) "dyn",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 50}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 45}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 43}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 40}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 38}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 34}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 32}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 29}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 26}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 23}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 19}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 17}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 14}) (Var (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 12}) [(VarName (fromList []) "j",[])]) (Var (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 14}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 15},{<unknown>, line = 70, col = 17}) [(VarName (fromList []) "dx",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 19}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 20},{<unknown>, line = 70, col = 23}) [(VarName (fromList []) "eta",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 24},{<unknown>, line = 70, col = 26}) [(VarName (fromList []) "dt",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 27},{<unknown>, line = 70, col = 29}) [(VarName (fromList []) "dy",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 30},{<unknown>, line = 70, col = 32}) [(VarName (fromList []) "un",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 33},{<unknown>, line = 70, col = 34}) [(VarName (fromList []) "u",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 35},{<unknown>, line = 70, col = 38}) [(VarName (fromList []) "wet",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 39},{<unknown>, line = 70, col = 40}) [(VarName (fromList []) "v",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 41},{<unknown>, line = 70, col = 43}) [(VarName (fromList []) "vn",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 44},{<unknown>, line = 70, col = 45}) [(VarName (fromList []) "h",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 46},{<unknown>, line = 70, col = 50}) [(VarName (fromList []) "etan",[])])))) (FSeq (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 73, col = 6}) (Call (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 36}) (Var (fromList []) ({<unknown>, line = 71, col = 7},{<unknown>, line = 71, col = 14}) [(VarName (fromList []) "shapiro",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 35}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 31}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 27}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 22}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 18}) (Var (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 16}) [(VarName (fromList []) "j",[])]) (Var (fromList []) ({<unknown>, line = 71, col = 17},{<unknown>, line = 71, col = 18}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 19},{<unknown>, line = 71, col = 22}) [(VarName (fromList []) "wet",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 23},{<unknown>, line = 71, col = 27}) [(VarName (fromList []) "etan",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 28},{<unknown>, line = 71, col = 31}) [(VarName (fromList []) "eps",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 32},{<unknown>, line = 71, col = 35}) [(VarName (fromList []) "eta",[])])))) (FSeq (fromList []) ({<unknown>, line = 72, col = 6},{<unknown>, line = 73, col = 6}) (Call (fromList []) ({<unknown>, line = 72, col = 6},{<unknown>, line = 72, col = 75}) (Var (fromList []) ({<unknown>, line = 72, col = 11},{<unknown>, line = 72, col = 19}) [(VarName (fromList []) "vernieuw",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 74}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 70}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 67}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 65}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 62}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 60}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 58}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 56}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 50}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 45}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 43}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 41}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 36}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 32}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 28}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 25}) (Var (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 22}) [(VarName (fromList []) "dt",[])]) (Var (fromList []) ({<unknown>, line = 72, col = 23},{<unknown>, line = 72, col = 25}) [(VarName (fromList []) "dx",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 26},{<unknown>, line = 72, col = 28}) [(VarName (fromList []) "dy",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 29},{<unknown>, line = 72, col = 32}) [(VarName (fromList []) "eps",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 33},{<unknown>, line = 72, col = 36}) [(VarName (fromList []) "eta",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 37},{<unknown>, line = 72, col = 41}) [(VarName (fromList []) "etan",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 42},{<unknown>, line = 72, col = 43}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 44},{<unknown>, line = 72, col = 45}) [(VarName (fromList []) "h",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 46},{<unknown>, line = 72, col = 50}) [(VarName (fromList []) "hmin",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 51},{<unknown>, line = 72, col = 56}) [(VarName (fromList []) "hzero",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 57},{<unknown>, line = 72, col = 58}) [(VarName (fromList []) "j",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 59},{<unknown>, line = 72, col = 60}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 61},{<unknown>, line = 72, col = 62}) [(VarName (fromList []) "u",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 63},{<unknown>, line = 72, col = 65}) [(VarName (fromList []) "un",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 66},{<unknown>, line = 72, col = 67}) [(VarName (fromList []) "v",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 68},{<unknown>, line = 72, col = 70}) [(VarName (fromList []) "vn",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 71},{<unknown>, line = 72, col = 74}) [(VarName (fromList []) "wet",[])])))) (NullStmt (fromList []) ({<unknown>, line = 73, col = 6},{<unknown>, line = 73, col = 6}))))))) (FSeq (fromList []) ({<unknown>, line = 74, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 74, col = 0},{<unknown>, line = 79, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 74, col = 7},{<unknown>, line = 74, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 74, col = 9},{<unknown>, line = 74, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 74, col = 9},{<unknown>, line = 74, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 74, col = 12},{<unknown>, line = 74, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 74, col = 13},{<unknown>, line = 74, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 75, col = 43}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 75, col = 10},{<unknown>, line = 75, col = 10}) "10"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 75, col = 25},{<unknown>, line = 75, col = 42}) (ESeq (fromList []) ({<unknown>, line = 75, col = 25},{<unknown>, line = 75, col = 37}) (Var (fromList []) ({<unknown>, line = 75, col = 25},{<unknown>, line = 75, col = 33}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 75, col = 29},{<unknown>, line = 75, col = 30}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 75, col = 31},{<unknown>, line = 75, col = 32}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 75, col = 34},{<unknown>, line = 75, col = 37}) "k" (Con (fromList []) ({<unknown>, line = 75, col = 36},{<unknown>, line = 75, col = 37}) "0"))) (Bin (fromList []) ({<unknown>, line = 75, col = 38},{<unknown>, line = 75, col = 42}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 38},{<unknown>, line = 75, col = 40}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 42}) "1"))]) (FSeq (fromList []) ({<unknown>, line = 76, col = 42},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 76, col = 42},{<unknown>, line = 76, col = 42}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 76, col = 10},{<unknown>, line = 76, col = 10}) "20"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 76, col = 25},{<unknown>, line = 76, col = 41}) (ESeq (fromList []) ({<unknown>, line = 76, col = 25},{<unknown>, line = 76, col = 36}) (Var (fromList []) ({<unknown>, line = 76, col = 25},{<unknown>, line = 76, col = 32}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 76, col = 27},{<unknown>, line = 76, col = 28}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 76, col = 29},{<unknown>, line = 76, col = 30}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 76, col = 33},{<unknown>, line = 76, col = 36}) "k" (Con (fromList []) ({<unknown>, line = 76, col = 35},{<unknown>, line = 76, col = 36}) "0"))) (Bin (fromList []) ({<unknown>, line = 76, col = 37},{<unknown>, line = 76, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 37},{<unknown>, line = 76, col = 39}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 40},{<unknown>, line = 76, col = 41}) "1"))]) (FSeq (fromList []) ({<unknown>, line = 77, col = 42},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 77, col = 42},{<unknown>, line = 77, col = 42}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 77, col = 10},{<unknown>, line = 77, col = 10}) "30"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 77, col = 25},{<unknown>, line = 77, col = 41}) (ESeq (fromList []) ({<unknown>, line = 77, col = 25},{<unknown>, line = 77, col = 36}) (Var (fromList []) ({<unknown>, line = 77, col = 25},{<unknown>, line = 77, col = 32}) [(VarName (fromList []) "u",[Var (fromList []) ({<unknown>, line = 77, col = 27},{<unknown>, line = 77, col = 28}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 77, col = 29},{<unknown>, line = 77, col = 30}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 77, col = 33},{<unknown>, line = 77, col = 36}) "k" (Con (fromList []) ({<unknown>, line = 77, col = 35},{<unknown>, line = 77, col = 36}) "0"))) (Bin (fromList []) ({<unknown>, line = 77, col = 37},{<unknown>, line = 77, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 77, col = 37},{<unknown>, line = 77, col = 39}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 77, col = 40},{<unknown>, line = 77, col = 41}) "1"))]) (FSeq (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 78, col = 42}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 78, col = 10},{<unknown>, line = 78, col = 10}) "40"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 78, col = 25},{<unknown>, line = 78, col = 41}) (ESeq (fromList []) ({<unknown>, line = 78, col = 25},{<unknown>, line = 78, col = 36}) (Var (fromList []) ({<unknown>, line = 78, col = 25},{<unknown>, line = 78, col = 32}) [(VarName (fromList []) "v",[Var (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 28}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 78, col = 29},{<unknown>, line = 78, col = 30}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 78, col = 33},{<unknown>, line = 78, col = 36}) "k" (Con (fromList []) ({<unknown>, line = 78, col = 35},{<unknown>, line = 78, col = 36}) "0"))) (Bin (fromList []) ({<unknown>, line = 78, col = 37},{<unknown>, line = 78, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 37},{<unknown>, line = 78, col = 39}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 78, col = 40},{<unknown>, line = 78, col = 41}) "1"))]) (NullStmt (fromList []) ({<unknown>, line = 79, col = 6},{<unknown>, line = 79, col = 6}))))))) (Write (fromList []) ({<unknown>, line = 80, col = 51},{<unknown>, line = 80, col = 51}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 80, col = 7},{<unknown>, line = 80, col = 7}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 80, col = 9},{<unknown>, line = 80, col = 9}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 80, col = 10},{<unknown>, line = 80, col = 34}) "\"Data output at time = \"",Bin (fromList []) ({<unknown>, line = 80, col = 35},{<unknown>, line = 80, col = 44}) (Div (fromList [])) (Var (fromList []) ({<unknown>, line = 80, col = 35},{<unknown>, line = 80, col = 39}) [(VarName (fromList []) "time",[])]) (Con (fromList []) ({<unknown>, line = 80, col = 40},{<unknown>, line = 80, col = 44}) "60.0"),ConS (fromList []) ({<unknown>, line = 80, col = 45},{<unknown>, line = 80, col = 51}) "\" min\""]))))))))))))))))))))))))))) []
Argument translations:
	dyn->
	    call dyn(j, k, dx, g, eta, dt, dy, un, u, wet, v, vn, h, etan)
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "j"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "dx", argument = VarName (fromList []) "dx"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dy", argument = VarName (fromList []) "dy"}
	ArgTrans {parameter = ArgName (fromList []) "un", argument = VarName (fromList []) "un"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	init->
	    call init(hmin, dx, dy, dt, g, j, k, hzero, eta, etan, h, wet, u, un, v, vn)
	ArgTrans {parameter = ArgName (fromList []) "hmin", argument = VarName (fromList []) "hmin"}
	ArgTrans {parameter = ArgName (fromList []) "dx", argument = VarName (fromList []) "dx"}
	ArgTrans {parameter = ArgName (fromList []) "dy", argument = VarName (fromList []) "dy"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "j"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "hzero", argument = VarName (fromList []) "hzero"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "un", argument = VarName (fromList []) "un"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	shapiro->
	    call shapiro(j, k, wet, etan, eps, eta)
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "j"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	ArgTrans {parameter = ArgName (fromList []) "eps", argument = VarName (fromList []) "eps"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	vernieuw->
	    call vernieuw(dt, dx, dy, eps, eta, etan, g, h, hmin, hzero, j, k, u, un, v, vn, wet)
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dx", argument = VarName (fromList []) "dx"}
	ArgTrans {parameter = ArgName (fromList []) "dy", argument = VarName (fromList []) "dy"}
	ArgTrans {parameter = ArgName (fromList []) "eps", argument = VarName (fromList []) "eps"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "hmin", argument = VarName (fromList []) "hmin"}
	ArgTrans {parameter = ArgName (fromList []) "hzero", argument = VarName (fromList []) "hzero"}
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "j"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "un", argument = VarName (fromList []) "un"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}

This subroutine will not be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Map Detection 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: dyn_shapiro_vernieuw_merged
Filename: 
Source:
module module_dyn_shapiro_vernieuw_merged
contains
subroutine dyn_shapiro_vernieuw_merged(dt,dx,dy,eps,eta,etan,g,h,hmin,hzero,j,k,u,un,v,vn,wet)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real, dimension(0:ny+1,0:nx+1) :: du
      real :: duu
      real, dimension(0:ny+1,0:nx+1) :: dv
      real :: dvv
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: h
      real :: hen
      real :: hep
      real, intent(In) :: hmin
      real :: hnn
      real :: hnp
      real :: hsn
      real :: hsp
      real :: hue
      real :: huw
      real :: hvn
      real :: hvs
      real :: hwn
      real :: hwp
      real, dimension(0:ny+1,0:nx+1), intent(In) :: hzero
      integer :: j
      integer :: k
      real :: term1
      real :: term2
      real :: term3
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: u
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: un
      real :: uu
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: v
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: vn
      real :: vv
      integer, dimension(0:ny+1,0:nx+1), intent(Out) :: wet
! OpenCLMap ( ["dt","g","dx","dy"],["du","dv"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["dt","g","dx","dy"],["du","dv"],["(k,1,500.0,1)"],[]) {
    du(j,k) = -dt*g*(eta(j,k+1)-eta(j,k))/dx
    dv(j,k) = -dt*g*(eta(j+1,k)-eta(j,k))/dy
    }
    }
! OpenCLMap ( ["u","du","wet","v","dv"],[],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["u","du","wet","v","dv"],[],["(k,1,500.0,1)"],[]) {
    un(j,k) = 0.0
    uu = u(j,k)
    duu = du(j,k)
    if (wet(j,k)==1) then
        if ((wet(j,k+1)==1) .or. (duu>0.0)) then
                un(j,k) = uu+duu
        end if
    else
        if ((wet(j,k+1)==1) .and. (duu<0.0)) then
                un(j,k) = uu+duu
        end if
    end if
    vv = v(j,k)
    dvv = dv(j,k)
    vn(j,k) = 0.0
    if (wet(j,k)==1) then
        if ((wet(j+1,k)==1) .or. (dvv>0.0)) then
                vn(j,k) = vv+dvv
        end if
    else
        if ((wet(j+1,k)==1) .and. (dvv<0.0)) then
                vn(j,k) = vv+dvv
        end if
    end if
    }
    }
! OpenCLMap ( ["h","eta","dt","dx","dy"],[],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["h","eta","dt","dx","dy"],[],["(k,1,500.0,1)"],[]) {
    hep = 0.5*(un(j,k)+abs(un(j,k)))*h(j,k)
    hen = 0.5*(un(j,k)-abs(un(j,k)))*h(j,k+1)
    hue = hep+hen
    hwp = 0.5*(un(j,k-1)+abs(un(j,k-1)))*h(j,k-1)
    hwn = 0.5*(un(j,k-1)-abs(un(j,k-1)))*h(j,k)
    huw = hwp+hwn
    hnp = 0.5*(vn(j,k)+abs(vn(j,k)))*h(j,k)
    hnn = 0.5*(vn(j,k)-abs(vn(j,k)))*h(j+1,k)
    hvn = hnp+hnn
    hsp = 0.5*(vn(j-1,k)+abs(vn(j-1,k)))*h(j-1,k)
    hsn = 0.5*(vn(j-1,k)-abs(vn(j-1,k)))*h(j,k)
    hvs = hsp+hsn
    etan(j,k) = eta(j,k)-dt*(hue-huw)/dx-dt*(hvn-hvs)/dy
    }
    }
! OpenCLMap ( ["wet","etan","eps"],["eta"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["wet","etan","eps"],["eta"],["(k,1,500.0,1)"],[]) {
    if (wet(j,k)==1) then
        term1 = (1.0-0.25*eps*(wet(j,k+1)+wet(j,k-1)+wet(j+1,k)+wet(j-1,k)))*etan(j,k)
        term2 = 0.25*eps*(wet(j,k+1)*etan(j,k+1)+wet(j,k-1)*etan(j,k-1))
        term3 = 0.25*eps*(wet(j+1,k)*etan(j+1,k)+wet(j-1,k)*etan(j-1,k))
        eta(j,k) = term1+term2+term3
    else
        eta(j,k) = etan(j,k)
    end if
    }
    }
! OpenCLMap ( ["hzero","h","hmin","un","vn"],["h","wet","u","v"],["(j,0,500.0+1,1)","(k,0,500.0+1,1)"],[]) {
! OpenCLMap ( ["hzero","eta","h","hmin","un","vn"],["h","wet","u","v"],["(k,0,500.0+1,1)"],[]) {
    h(j,k) = hzero(j,k)+eta(j,k)
    wet(j,k) = 1
    if (h(j,k)<hmin) then
        wet(j,k) = 0
    end if
    u(j,k) = un(j,k)
    v(j,k) = vn(j,k)
    }
    }
end subroutine dyn_shapiro_vernieuw_merged

end module module_dyn_shapiro_vernieuw_merged
AST: 
Module (fromList []) (No source location,No source location) (SubName (fromList []) "module_dyn_shapiro_vernieuw_merged") (UseNil (fromList [])) (ImplicitNull (fromList [])) (NullDecl (fromList []) (No source location,No source location)) [Sub (fromList []) (No source location,No source location) Nothing (SubName (fromList []) "dyn_shapiro_vernieuw_merged") (Arg (fromList []) (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "dt") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "dx") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "dy") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "eps") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "eta") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "etan") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "g") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "h") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "hmin") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "hzero") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "j") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "k") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "u") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "un") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "v") (ASeq (fromList []) (ArgName (fromList [("msak",[])]) "vn") (ArgName (fromList [("msak",[])]) "wet"))))))))))))))))) (No source location,No source location)) (Block (fromList []) (UseBlock (UseNil (fromList [])) No source location) (ImplicitNull (fromList [])) (No source location,No source location) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 5, col = 6},{<unknown>, line = 5, col = 37}) [(Var (fromList []) ({<unknown>, line = 5, col = 31},{<unknown>, line = 5, col = 33}) [(VarName (fromList []) "nx",[])],Con (fromList []) ({<unknown>, line = 5, col = 34},{<unknown>, line = 5, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 5, col = 14},{<unknown>, line = 5, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 5, col = 16},{<unknown>, line = 5, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 4, col = 6},{<unknown>, line = 4, col = 37}) [(Var (fromList []) ({<unknown>, line = 4, col = 31},{<unknown>, line = 4, col = 33}) [(VarName (fromList []) "ny",[])],Con (fromList []) ({<unknown>, line = 4, col = 34},{<unknown>, line = 4, col = 37}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 4, col = 14},{<unknown>, line = 4, col = 15}) "4") (NullExpr (fromList []) ({<unknown>, line = 4, col = 16},{<unknown>, line = 4, col = 16})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 16}) [(Var (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 16}) [(VarName (fromList [("msak",[])]) "dt",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 16},{<unknown>, line = 6, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 20, col = 0},{<unknown>, line = 20, col = 36}) [(Var (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 36}) [(VarName (fromList []) "du",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 36}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 16},{<unknown>, line = 20, col = 17}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 18},{<unknown>, line = 20, col = 22}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 18},{<unknown>, line = 20, col = 20}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 21},{<unknown>, line = 20, col = 22}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 23},{<unknown>, line = 20, col = 24}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 27}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 28},{<unknown>, line = 20, col = 29}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 20, col = 4},{<unknown>, line = 20, col = 4})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 4},{<unknown>, line = 20, col = 4})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 24, col = 11}) [(Var (fromList []) ({<unknown>, line = 24, col = 8},{<unknown>, line = 24, col = 11}) [(VarName (fromList []) "duu",[])],NullExpr (fromList []) ({<unknown>, line = 24, col = 11},{<unknown>, line = 24, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 21, col = 0},{<unknown>, line = 21, col = 36}) [(Var (fromList []) ({<unknown>, line = 21, col = 34},{<unknown>, line = 21, col = 36}) [(VarName (fromList []) "dv",[])],NullExpr (fromList []) ({<unknown>, line = 21, col = 36},{<unknown>, line = 21, col = 36}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 21, col = 16},{<unknown>, line = 21, col = 17}) "0",Bin (fromList []) ({<unknown>, line = 21, col = 18},{<unknown>, line = 21, col = 22}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 18},{<unknown>, line = 21, col = 20}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 21, col = 21},{<unknown>, line = 21, col = 22}) "1")),(Con (fromList []) ({<unknown>, line = 21, col = 23},{<unknown>, line = 21, col = 24}) "0",Bin (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 27}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 21, col = 28},{<unknown>, line = 21, col = 29}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 21, col = 4},{<unknown>, line = 21, col = 4})) (NullExpr (fromList []) ({<unknown>, line = 21, col = 4},{<unknown>, line = 21, col = 4})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 25, col = 0},{<unknown>, line = 25, col = 11}) [(Var (fromList []) ({<unknown>, line = 25, col = 8},{<unknown>, line = 25, col = 11}) [(VarName (fromList []) "dvv",[])],NullExpr (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 16}) [(Var (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 16}) [(VarName (fromList [("msak",[])]) "dx",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 16},{<unknown>, line = 7, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 8, col = 6},{<unknown>, line = 8, col = 16}) [(Var (fromList []) ({<unknown>, line = 8, col = 14},{<unknown>, line = 8, col = 16}) [(VarName (fromList [("msak",[])]) "dy",[])],NullExpr (fromList []) ({<unknown>, line = 8, col = 16},{<unknown>, line = 8, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 8, col = 11},{<unknown>, line = 8, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 8, col = 11},{<unknown>, line = 8, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 9, col = 6},{<unknown>, line = 9, col = 17}) [(Var (fromList []) ({<unknown>, line = 9, col = 14},{<unknown>, line = 9, col = 17}) [(VarName (fromList [("msak",[])]) "eps",[])],NullExpr (fromList []) ({<unknown>, line = 9, col = 17},{<unknown>, line = 9, col = 17}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 9, col = 11},{<unknown>, line = 9, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 9, col = 11},{<unknown>, line = 9, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 10, col = 6},{<unknown>, line = 10, col = 44}) [(Var (fromList []) ({<unknown>, line = 10, col = 40},{<unknown>, line = 10, col = 44}) [(VarName (fromList [("msak",[])]) "eta",[])],NullExpr (fromList []) ({<unknown>, line = 10, col = 44},{<unknown>, line = 10, col = 44}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 10, col = 22},{<unknown>, line = 10, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 10, col = 24},{<unknown>, line = 10, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 10, col = 24},{<unknown>, line = 10, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 10, col = 27},{<unknown>, line = 10, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 10, col = 29},{<unknown>, line = 10, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 10, col = 31},{<unknown>, line = 10, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 10, col = 31},{<unknown>, line = 10, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 10, col = 34},{<unknown>, line = 10, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 10, col = 10},{<unknown>, line = 10, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 19, col = 6},{<unknown>, line = 19, col = 45}) [(Var (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 45}) [(VarName (fromList [("msak",[])]) "etan",[])],NullExpr (fromList []) ({<unknown>, line = 19, col = 45},{<unknown>, line = 19, col = 45}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 19, col = 22},{<unknown>, line = 19, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 27},{<unknown>, line = 19, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 19, col = 29},{<unknown>, line = 19, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 34},{<unknown>, line = 19, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 6},{<unknown>, line = 12, col = 15}) [(Var (fromList []) ({<unknown>, line = 12, col = 14},{<unknown>, line = 12, col = 15}) [(VarName (fromList [("msak",[])]) "g",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 15},{<unknown>, line = 12, col = 15}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 56}) [(Var (fromList []) ({<unknown>, line = 13, col = 55},{<unknown>, line = 13, col = 56}) [(VarName (fromList [("msak",[])]) "h",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 56},{<unknown>, line = 13, col = 56}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 30, col = 11}) [(Var (fromList []) ({<unknown>, line = 30, col = 8},{<unknown>, line = 30, col = 11}) [(VarName (fromList []) "hen",[])],NullExpr (fromList []) ({<unknown>, line = 30, col = 11},{<unknown>, line = 30, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 30, col = 5},{<unknown>, line = 30, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 30, col = 5},{<unknown>, line = 30, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 31, col = 11}) [(Var (fromList []) ({<unknown>, line = 31, col = 8},{<unknown>, line = 31, col = 11}) [(VarName (fromList []) "hep",[])],NullExpr (fromList []) ({<unknown>, line = 31, col = 11},{<unknown>, line = 31, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 31, col = 5},{<unknown>, line = 31, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 31, col = 5},{<unknown>, line = 31, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 6},{<unknown>, line = 14, col = 30}) [(Var (fromList []) ({<unknown>, line = 14, col = 26},{<unknown>, line = 14, col = 30}) [(VarName (fromList [("msak",[])]) "hmin",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 30},{<unknown>, line = 14, col = 30}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 10},{<unknown>, line = 14, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 36, col = 0},{<unknown>, line = 36, col = 11}) [(Var (fromList []) ({<unknown>, line = 36, col = 8},{<unknown>, line = 36, col = 11}) [(VarName (fromList []) "hnn",[])],NullExpr (fromList []) ({<unknown>, line = 36, col = 11},{<unknown>, line = 36, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 36, col = 5},{<unknown>, line = 36, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 36, col = 5},{<unknown>, line = 36, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 37, col = 0},{<unknown>, line = 37, col = 11}) [(Var (fromList []) ({<unknown>, line = 37, col = 8},{<unknown>, line = 37, col = 11}) [(VarName (fromList []) "hnp",[])],NullExpr (fromList []) ({<unknown>, line = 37, col = 11},{<unknown>, line = 37, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 37, col = 5},{<unknown>, line = 37, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 37, col = 5},{<unknown>, line = 37, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 35, col = 0},{<unknown>, line = 35, col = 11}) [(Var (fromList []) ({<unknown>, line = 35, col = 8},{<unknown>, line = 35, col = 11}) [(VarName (fromList []) "hsn",[])],NullExpr (fromList []) ({<unknown>, line = 35, col = 11},{<unknown>, line = 35, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 35, col = 5},{<unknown>, line = 35, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 35, col = 5},{<unknown>, line = 35, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 34, col = 0},{<unknown>, line = 34, col = 11}) [(Var (fromList []) ({<unknown>, line = 34, col = 8},{<unknown>, line = 34, col = 11}) [(VarName (fromList []) "hsp",[])],NullExpr (fromList []) ({<unknown>, line = 34, col = 11},{<unknown>, line = 34, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 34, col = 5},{<unknown>, line = 34, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 34, col = 5},{<unknown>, line = 34, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 26, col = 0},{<unknown>, line = 26, col = 11}) [(Var (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 11}) [(VarName (fromList []) "hue",[])],NullExpr (fromList []) ({<unknown>, line = 26, col = 11},{<unknown>, line = 26, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 26, col = 5},{<unknown>, line = 26, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 26, col = 5},{<unknown>, line = 26, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 27, col = 0},{<unknown>, line = 27, col = 11}) [(Var (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 11}) [(VarName (fromList []) "huw",[])],NullExpr (fromList []) ({<unknown>, line = 27, col = 11},{<unknown>, line = 27, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 27, col = 5},{<unknown>, line = 27, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 27, col = 5},{<unknown>, line = 27, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 32, col = 11}) [(Var (fromList []) ({<unknown>, line = 32, col = 8},{<unknown>, line = 32, col = 11}) [(VarName (fromList []) "hvn",[])],NullExpr (fromList []) ({<unknown>, line = 32, col = 11},{<unknown>, line = 32, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 32, col = 5},{<unknown>, line = 32, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 32, col = 5},{<unknown>, line = 32, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 33, col = 0},{<unknown>, line = 33, col = 11}) [(Var (fromList []) ({<unknown>, line = 33, col = 8},{<unknown>, line = 33, col = 11}) [(VarName (fromList []) "hvs",[])],NullExpr (fromList []) ({<unknown>, line = 33, col = 11},{<unknown>, line = 33, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 33, col = 5},{<unknown>, line = 33, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 33, col = 5},{<unknown>, line = 33, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 29, col = 0},{<unknown>, line = 29, col = 11}) [(Var (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 11}) [(VarName (fromList []) "hwn",[])],NullExpr (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 29, col = 5},{<unknown>, line = 29, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 29, col = 5},{<unknown>, line = 29, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 28, col = 0},{<unknown>, line = 28, col = 11}) [(Var (fromList []) ({<unknown>, line = 28, col = 8},{<unknown>, line = 28, col = 11}) [(VarName (fromList []) "hwp",[])],NullExpr (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 11}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 28, col = 5},{<unknown>, line = 28, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 28, col = 5},{<unknown>, line = 28, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 15, col = 6},{<unknown>, line = 15, col = 57}) [(Var (fromList []) ({<unknown>, line = 15, col = 52},{<unknown>, line = 15, col = 57}) [(VarName (fromList [("msak",[])]) "hzero",[])],NullExpr (fromList []) ({<unknown>, line = 15, col = 57},{<unknown>, line = 15, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 15, col = 22},{<unknown>, line = 15, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 24},{<unknown>, line = 15, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 24},{<unknown>, line = 15, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 27},{<unknown>, line = 15, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 15, col = 29},{<unknown>, line = 15, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 15, col = 31},{<unknown>, line = 15, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 15, col = 31},{<unknown>, line = 15, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 34},{<unknown>, line = 15, col = 35}) "1"))],Intent (fromList []) (In (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 15, col = 10},{<unknown>, line = 15, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 15, col = 10},{<unknown>, line = 15, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 19}) [(Var (fromList []) ({<unknown>, line = 6, col = 17},{<unknown>, line = 6, col = 19}) [(VarName (fromList [("msak",[])]) "j",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 19},{<unknown>, line = 6, col = 19}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 19}) [(Var (fromList []) ({<unknown>, line = 7, col = 17},{<unknown>, line = 7, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 19},{<unknown>, line = 7, col = 19}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 0},{<unknown>, line = 12, col = 13}) [(Var (fromList []) ({<unknown>, line = 12, col = 8},{<unknown>, line = 12, col = 13}) [(VarName (fromList []) "term1",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 13},{<unknown>, line = 12, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 12, col = 5},{<unknown>, line = 12, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 5},{<unknown>, line = 12, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 0},{<unknown>, line = 13, col = 13}) [(Var (fromList []) ({<unknown>, line = 13, col = 8},{<unknown>, line = 13, col = 13}) [(VarName (fromList []) "term2",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 13},{<unknown>, line = 13, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 13, col = 5},{<unknown>, line = 13, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 5},{<unknown>, line = 13, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 0},{<unknown>, line = 14, col = 13}) [(Var (fromList []) ({<unknown>, line = 14, col = 8},{<unknown>, line = 14, col = 13}) [(VarName (fromList []) "term3",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 13},{<unknown>, line = 14, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 14, col = 5},{<unknown>, line = 14, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 5},{<unknown>, line = 14, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 16, col = 6},{<unknown>, line = 16, col = 54}) [(Var (fromList []) ({<unknown>, line = 16, col = 53},{<unknown>, line = 16, col = 54}) [(VarName (fromList [("msak",[])]) "u",[])],NullExpr (fromList []) ({<unknown>, line = 16, col = 54},{<unknown>, line = 16, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 16, col = 22},{<unknown>, line = 16, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 27},{<unknown>, line = 16, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 16, col = 29},{<unknown>, line = 16, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 34},{<unknown>, line = 16, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 57}) [(Var (fromList []) ({<unknown>, line = 13, col = 55},{<unknown>, line = 13, col = 57}) [(VarName (fromList [("msak",[])]) "un",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 57},{<unknown>, line = 13, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 22, col = 0},{<unknown>, line = 22, col = 10}) [(Var (fromList []) ({<unknown>, line = 22, col = 8},{<unknown>, line = 22, col = 10}) [(VarName (fromList []) "uu",[])],NullExpr (fromList []) ({<unknown>, line = 22, col = 10},{<unknown>, line = 22, col = 10}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 18, col = 6},{<unknown>, line = 18, col = 54}) [(Var (fromList []) ({<unknown>, line = 18, col = 53},{<unknown>, line = 18, col = 54}) [(VarName (fromList [("msak",[])]) "v",[])],NullExpr (fromList []) ({<unknown>, line = 18, col = 54},{<unknown>, line = 18, col = 54}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 18, col = 22},{<unknown>, line = 18, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 27},{<unknown>, line = 18, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 34},{<unknown>, line = 18, col = 35}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 17, col = 6},{<unknown>, line = 17, col = 57}) [(Var (fromList []) ({<unknown>, line = 17, col = 55},{<unknown>, line = 17, col = 57}) [(VarName (fromList [("msak",[])]) "vn",[])],NullExpr (fromList []) ({<unknown>, line = 17, col = 57},{<unknown>, line = 17, col = 57}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 17, col = 22},{<unknown>, line = 17, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 27},{<unknown>, line = 17, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 17, col = 29},{<unknown>, line = 17, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 34},{<unknown>, line = 17, col = 35}) "1"))],Intent (fromList []) (InOut (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 23, col = 10}) [(Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 10}) [(VarName (fromList []) "vv",[])],NullExpr (fromList []) ({<unknown>, line = 23, col = 10},{<unknown>, line = 23, col = 10}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})))) (Decl (fromList []) ({<unknown>, line = 20, col = 6},{<unknown>, line = 20, col = 59}) [(Var (fromList []) ({<unknown>, line = 20, col = 56},{<unknown>, line = 20, col = 59}) [(VarName (fromList [("msak",[])]) "wet",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 59}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 26}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 31}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 29}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 30},{<unknown>, line = 20, col = 31}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 32},{<unknown>, line = 20, col = 33}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 38}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 36}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 37},{<unknown>, line = 20, col = 38}) "1"))],Intent (fromList []) (Out (fromList []))] (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13}))))))))))))))))))))))))))))))))))))))))))) (FSeq (fromList []) (No source location,No source location) (FSeq (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 80, col = 6}) (OpenCLMap (fromList [("ParallelFortran: Map at 38:0",[""])]) ({generated, line = 38, col = 0},{generated, line = 43, col = 6}) [VarName (fromList [("msak",[])]) "dt",VarName (fromList [("msak",[])]) "g",VarName (fromList [("msak",[])]) "dx",VarName (fromList [("msak",[])]) "dy"] [VarName (fromList []) "du",VarName (fromList []) "dv"] [(VarName (fromList [("msak",[])]) "j",Con (fromList []) ({<unknown>, line = 38, col = 7},{<unknown>, line = 38, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 38, col = 11},{<unknown>, line = 38, col = 11}) "1"),(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 39, col = 7},{<unknown>, line = 39, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 39, col = 11},{<unknown>, line = 39, col = 11}) "1")] [] (OpenCLMap (fromList [("ParallelFortran: Map at 39:0",[""])]) ({generated, line = 39, col = 0},{generated, line = 42, col = 6}) [VarName (fromList [("msak",[])]) "dt",VarName (fromList [("msak",[])]) "g",VarName (fromList [("msak",[])]) "dx",VarName (fromList [("msak",[])]) "dy"] [VarName (fromList []) "du",VarName (fromList []) "dv"] [(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 39, col = 7},{<unknown>, line = 39, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 39, col = 11},{<unknown>, line = 39, col = 11}) "1")] [] (FSeq (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 42, col = 6}) (Assg (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 40, col = 42}) (Var (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 40, col = 42}) [(VarName (fromList []) "du",[Var (fromList []) ({<unknown>, line = 40, col = 5},{<unknown>, line = 40, col = 6}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 40, col = 7},{<unknown>, line = 40, col = 8}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 42}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 39}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 17}) (Mul (fromList [])) (Unary (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 15}) (UMinus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 13},{<unknown>, line = 40, col = 15}) [(VarName (fromList [("msak",[])]) "dt",[])])) (Var (fromList []) ({<unknown>, line = 40, col = 16},{<unknown>, line = 40, col = 17}) [(VarName (fromList [("msak",[])]) "g",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 40, col = 18},{<unknown>, line = 40, col = 39}) (Bin (fromList []) ({<unknown>, line = 40, col = 19},{<unknown>, line = 40, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 19},{<unknown>, line = 40, col = 29}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 40, col = 23},{<unknown>, line = 40, col = 24}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 40, col = 25},{<unknown>, line = 40, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 25},{<unknown>, line = 40, col = 26}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 40, col = 27},{<unknown>, line = 40, col = 28}) "1")])]) (Var (fromList []) ({<unknown>, line = 40, col = 30},{<unknown>, line = 40, col = 38}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 40, col = 34},{<unknown>, line = 40, col = 35}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 40, col = 36},{<unknown>, line = 40, col = 37}) [(VarName (fromList [("msak",[])]) "k",[])]])])))) (Var (fromList []) ({<unknown>, line = 40, col = 40},{<unknown>, line = 40, col = 42}) [(VarName (fromList [("msak",[])]) "dx",[])]))) (FSeq (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 42, col = 6}) (Assg (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 41, col = 42}) (Var (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 41, col = 42}) [(VarName (fromList []) "dv",[Var (fromList []) ({<unknown>, line = 41, col = 5},{<unknown>, line = 41, col = 6}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 41, col = 7},{<unknown>, line = 41, col = 8}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 42}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 39}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 17}) (Mul (fromList [])) (Unary (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 15}) (UMinus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 13},{<unknown>, line = 41, col = 15}) [(VarName (fromList [("msak",[])]) "dt",[])])) (Var (fromList []) ({<unknown>, line = 41, col = 16},{<unknown>, line = 41, col = 17}) [(VarName (fromList [("msak",[])]) "g",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 41, col = 18},{<unknown>, line = 41, col = 39}) (Bin (fromList []) ({<unknown>, line = 41, col = 19},{<unknown>, line = 41, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 19},{<unknown>, line = 41, col = 29}) [(VarName (fromList [("msak",[])]) "eta",[Bin (fromList []) ({<unknown>, line = 41, col = 23},{<unknown>, line = 41, col = 26}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 23},{<unknown>, line = 41, col = 24}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 41, col = 25},{<unknown>, line = 41, col = 26}) "1"),Var (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 28}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 41, col = 30},{<unknown>, line = 41, col = 38}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 41, col = 34},{<unknown>, line = 41, col = 35}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 41, col = 36},{<unknown>, line = 41, col = 37}) [(VarName (fromList [("msak",[])]) "k",[])]])])))) (Var (fromList []) ({<unknown>, line = 41, col = 40},{<unknown>, line = 41, col = 42}) [(VarName (fromList [("msak",[])]) "dy",[])]))) (NullStmt (fromList []) ({<unknown>, line = 42, col = 6},{<unknown>, line = 42, col = 6})))))) (FSeq (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 80, col = 6}) (OpenCLMap (fromList [("ParallelFortran: Map at 44:0",[""])]) ({generated, line = 44, col = 0},{generated, line = 63, col = 6}) [VarName (fromList [("msak",[])]) "u",VarName (fromList []) "du",VarName (fromList [("msak",[])]) "wet",VarName (fromList [("msak",[])]) "v",VarName (fromList []) "dv"] [] [(VarName (fromList [("msak",[])]) "j",Con (fromList []) ({<unknown>, line = 44, col = 7},{<unknown>, line = 44, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 44, col = 11},{<unknown>, line = 44, col = 11}) "1"),(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 45, col = 7},{<unknown>, line = 45, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 45, col = 11},{<unknown>, line = 45, col = 11}) "1")] [] (OpenCLMap (fromList [("ParallelFortran: Map at 45:0",[""])]) ({generated, line = 45, col = 0},{generated, line = 62, col = 6}) [VarName (fromList [("msak",[])]) "u",VarName (fromList []) "du",VarName (fromList [("msak",[])]) "wet",VarName (fromList [("msak",[])]) "v",VarName (fromList []) "dv"] [] [(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 45, col = 7},{<unknown>, line = 45, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 45, col = 11},{<unknown>, line = 45, col = 11}) "1")] [] (FSeq (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 46, col = 13}) (Var (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 46, col = 13}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 46, col = 3},{<unknown>, line = 46, col = 4}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 46, col = 5},{<unknown>, line = 46, col = 6}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 46, col = 10},{<unknown>, line = 46, col = 13}) "0.0")) (FSeq (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 47, col = 11}) (Var (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 47, col = 3}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 47, col = 5},{<unknown>, line = 47, col = 11}) [(VarName (fromList [("msak",[])]) "u",[Var (fromList []) ({<unknown>, line = 47, col = 7},{<unknown>, line = 47, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 47, col = 9},{<unknown>, line = 47, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 48, col = 13}) (Var (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 48, col = 4}) [(VarName (fromList []) "duu",[])]) (Var (fromList []) ({<unknown>, line = 48, col = 6},{<unknown>, line = 48, col = 13}) [(VarName (fromList []) "du",[Var (fromList []) ({<unknown>, line = 48, col = 9},{<unknown>, line = 48, col = 10}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 48, col = 11},{<unknown>, line = 48, col = 12}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 49, col = 0},{<unknown>, line = 62, col = 6}) (If (fromList []) ({<unknown>, line = 49, col = 0},{<unknown>, line = 53, col = 6}) (Bin (fromList []) ({<unknown>, line = 49, col = 3},{<unknown>, line = 49, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 49, col = 3},{<unknown>, line = 49, col = 11}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 49, col = 7},{<unknown>, line = 49, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 49, col = 9},{<unknown>, line = 49, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 49, col = 13},{<unknown>, line = 49, col = 14}) "1")) (If (fromList []) ({<unknown>, line = 50, col = 2},{<unknown>, line = 50, col = 53}) (Bin (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 35}) (Or (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 21}) (Bin (fromList []) ({<unknown>, line = 50, col = 6},{<unknown>, line = 50, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 6},{<unknown>, line = 50, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 50, col = 10},{<unknown>, line = 50, col = 11}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 50, col = 12},{<unknown>, line = 50, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 12},{<unknown>, line = 50, col = 13}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 14},{<unknown>, line = 50, col = 15}) "1")])]) (Con (fromList []) ({<unknown>, line = 50, col = 18},{<unknown>, line = 50, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 50, col = 26},{<unknown>, line = 50, col = 35}) (Bin (fromList []) ({<unknown>, line = 50, col = 27},{<unknown>, line = 50, col = 34}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 27},{<unknown>, line = 50, col = 30}) [(VarName (fromList []) "duu",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 31},{<unknown>, line = 50, col = 34}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 50, col = 37},{<unknown>, line = 50, col = 53}) (Var (fromList []) ({<unknown>, line = 50, col = 37},{<unknown>, line = 50, col = 53}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 50, col = 40},{<unknown>, line = 50, col = 41}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 50, col = 42},{<unknown>, line = 50, col = 43}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 50, col = 47},{<unknown>, line = 50, col = 53}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 47},{<unknown>, line = 50, col = 49}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 50, col = 50},{<unknown>, line = 50, col = 53}) [(VarName (fromList []) "duu",[])]))) [] Nothing) [] (Just (If (fromList []) ({<unknown>, line = 52, col = 2},{<unknown>, line = 52, col = 54}) (Bin (fromList []) ({<unknown>, line = 52, col = 5},{<unknown>, line = 52, col = 36}) (And (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 52, col = 5},{<unknown>, line = 52, col = 21}) (Bin (fromList []) ({<unknown>, line = 52, col = 6},{<unknown>, line = 52, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 6},{<unknown>, line = 52, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 52, col = 10},{<unknown>, line = 52, col = 11}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 52, col = 12},{<unknown>, line = 52, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 12},{<unknown>, line = 52, col = 13}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 52, col = 14},{<unknown>, line = 52, col = 15}) "1")])]) (Con (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 52, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 52, col = 27},{<unknown>, line = 52, col = 36}) (Bin (fromList []) ({<unknown>, line = 52, col = 28},{<unknown>, line = 52, col = 35}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 28},{<unknown>, line = 52, col = 31}) [(VarName (fromList []) "duu",[])]) (Con (fromList []) ({<unknown>, line = 52, col = 32},{<unknown>, line = 52, col = 35}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 52, col = 38},{<unknown>, line = 52, col = 54}) (Var (fromList []) ({<unknown>, line = 52, col = 38},{<unknown>, line = 52, col = 54}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 52, col = 41},{<unknown>, line = 52, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 52, col = 43},{<unknown>, line = 52, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 52, col = 48},{<unknown>, line = 52, col = 54}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 48},{<unknown>, line = 52, col = 50}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 52, col = 51},{<unknown>, line = 52, col = 54}) [(VarName (fromList []) "duu",[])]))) [] Nothing))) (FSeq (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 54, col = 11}) (Var (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 54, col = 3}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 54, col = 5},{<unknown>, line = 54, col = 11}) [(VarName (fromList [("msak",[])]) "v",[Var (fromList []) ({<unknown>, line = 54, col = 7},{<unknown>, line = 54, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 54, col = 9},{<unknown>, line = 54, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 55, col = 13}) (Var (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 55, col = 4}) [(VarName (fromList []) "dvv",[])]) (Var (fromList []) ({<unknown>, line = 55, col = 6},{<unknown>, line = 55, col = 13}) [(VarName (fromList []) "dv",[Var (fromList []) ({<unknown>, line = 55, col = 9},{<unknown>, line = 55, col = 10}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 55, col = 11},{<unknown>, line = 55, col = 12}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 56, col = 13}) (Var (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 56, col = 13}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 56, col = 3},{<unknown>, line = 56, col = 4}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 56, col = 5},{<unknown>, line = 56, col = 6}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 56, col = 10},{<unknown>, line = 56, col = 13}) "0.0")) (FSeq (fromList []) ({<unknown>, line = 57, col = 0},{<unknown>, line = 62, col = 6}) (If (fromList []) ({<unknown>, line = 57, col = 0},{<unknown>, line = 61, col = 6}) (Bin (fromList []) ({<unknown>, line = 57, col = 3},{<unknown>, line = 57, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 57, col = 3},{<unknown>, line = 57, col = 11}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 57, col = 7},{<unknown>, line = 57, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 57, col = 9},{<unknown>, line = 57, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 57, col = 13},{<unknown>, line = 57, col = 14}) "1")) (If (fromList []) ({<unknown>, line = 58, col = 2},{<unknown>, line = 58, col = 53}) (Bin (fromList []) ({<unknown>, line = 58, col = 5},{<unknown>, line = 58, col = 35}) (Or (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 58, col = 5},{<unknown>, line = 58, col = 21}) (Bin (fromList []) ({<unknown>, line = 58, col = 6},{<unknown>, line = 58, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 6},{<unknown>, line = 58, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 58, col = 10},{<unknown>, line = 58, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 10},{<unknown>, line = 58, col = 11}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 58, col = 12},{<unknown>, line = 58, col = 13}) "1"),Var (fromList []) ({<unknown>, line = 58, col = 14},{<unknown>, line = 58, col = 15}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 58, col = 18},{<unknown>, line = 58, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 58, col = 26},{<unknown>, line = 58, col = 35}) (Bin (fromList []) ({<unknown>, line = 58, col = 27},{<unknown>, line = 58, col = 34}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 27},{<unknown>, line = 58, col = 30}) [(VarName (fromList []) "dvv",[])]) (Con (fromList []) ({<unknown>, line = 58, col = 31},{<unknown>, line = 58, col = 34}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 58, col = 37},{<unknown>, line = 58, col = 53}) (Var (fromList []) ({<unknown>, line = 58, col = 37},{<unknown>, line = 58, col = 53}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 58, col = 40},{<unknown>, line = 58, col = 41}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 58, col = 42},{<unknown>, line = 58, col = 43}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 58, col = 47},{<unknown>, line = 58, col = 53}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 47},{<unknown>, line = 58, col = 49}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 58, col = 50},{<unknown>, line = 58, col = 53}) [(VarName (fromList []) "dvv",[])]))) [] Nothing) [] (Just (If (fromList []) ({<unknown>, line = 60, col = 2},{<unknown>, line = 60, col = 54}) (Bin (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 36}) (And (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 21}) (Bin (fromList []) ({<unknown>, line = 60, col = 6},{<unknown>, line = 60, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 6},{<unknown>, line = 60, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 60, col = 10},{<unknown>, line = 60, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 10},{<unknown>, line = 60, col = 11}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 60, col = 12},{<unknown>, line = 60, col = 13}) "1"),Var (fromList []) ({<unknown>, line = 60, col = 14},{<unknown>, line = 60, col = 15}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 60, col = 18},{<unknown>, line = 60, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 60, col = 27},{<unknown>, line = 60, col = 36}) (Bin (fromList []) ({<unknown>, line = 60, col = 28},{<unknown>, line = 60, col = 35}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 28},{<unknown>, line = 60, col = 31}) [(VarName (fromList []) "dvv",[])]) (Con (fromList []) ({<unknown>, line = 60, col = 32},{<unknown>, line = 60, col = 35}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 60, col = 38},{<unknown>, line = 60, col = 54}) (Var (fromList []) ({<unknown>, line = 60, col = 38},{<unknown>, line = 60, col = 54}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 60, col = 41},{<unknown>, line = 60, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 60, col = 43},{<unknown>, line = 60, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 60, col = 48},{<unknown>, line = 60, col = 54}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 48},{<unknown>, line = 60, col = 50}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 60, col = 51},{<unknown>, line = 60, col = 54}) [(VarName (fromList []) "dvv",[])]))) [] Nothing))) (NullStmt (fromList []) ({<unknown>, line = 62, col = 6},{<unknown>, line = 62, col = 6})))))))))))) (OpenCLMap (fromList [("ParallelFortran: Map at 64:0",[""])]) ({generated, line = 64, col = 0},{generated, line = 80, col = 6}) [VarName (fromList [("msak",[])]) "h",VarName (fromList [("msak",[])]) "eta",VarName (fromList [("msak",[])]) "dt",VarName (fromList [("msak",[])]) "dx",VarName (fromList [("msak",[])]) "dy"] [] [(VarName (fromList [("msak",[])]) "j",Con (fromList []) ({<unknown>, line = 64, col = 7},{<unknown>, line = 64, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 64, col = 11},{<unknown>, line = 64, col = 11}) "1"),(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 65, col = 7},{<unknown>, line = 65, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 65, col = 11},{<unknown>, line = 65, col = 11}) "1")] [] (OpenCLMap (fromList [("ParallelFortran: Map at 65:0",[""])]) ({generated, line = 65, col = 0},{generated, line = 79, col = 6}) [VarName (fromList [("msak",[])]) "h",VarName (fromList [("msak",[])]) "eta",VarName (fromList [("msak",[])]) "dt",VarName (fromList [("msak",[])]) "dx",VarName (fromList [("msak",[])]) "dy"] [] [(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 65, col = 7},{<unknown>, line = 65, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 65, col = 11},{<unknown>, line = 65, col = 11}) "1")] [] (FSeq (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 66, col = 41}) (Var (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 66, col = 6}) [(VarName (fromList []) "hep",[])]) (Bin (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 41}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 66, col = 12},{<unknown>, line = 66, col = 34}) (Bin (fromList []) ({<unknown>, line = 66, col = 13},{<unknown>, line = 66, col = 33}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 66, col = 13},{<unknown>, line = 66, col = 20}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 66, col = 16},{<unknown>, line = 66, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 66, col = 18},{<unknown>, line = 66, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 66, col = 21},{<unknown>, line = 66, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 66, col = 25},{<unknown>, line = 66, col = 32}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 66, col = 28},{<unknown>, line = 66, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 66, col = 30},{<unknown>, line = 66, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 66, col = 35},{<unknown>, line = 66, col = 41}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 66, col = 37},{<unknown>, line = 66, col = 38}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 66, col = 39},{<unknown>, line = 66, col = 40}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 67, col = 43}) (Var (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 67, col = 6}) [(VarName (fromList []) "hen",[])]) (Bin (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 43}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 67, col = 12},{<unknown>, line = 67, col = 34}) (Bin (fromList []) ({<unknown>, line = 67, col = 13},{<unknown>, line = 67, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 67, col = 13},{<unknown>, line = 67, col = 20}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 67, col = 16},{<unknown>, line = 67, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 67, col = 18},{<unknown>, line = 67, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 67, col = 21},{<unknown>, line = 67, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 67, col = 25},{<unknown>, line = 67, col = 32}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 67, col = 28},{<unknown>, line = 67, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 67, col = 30},{<unknown>, line = 67, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 67, col = 35},{<unknown>, line = 67, col = 43}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 67, col = 37},{<unknown>, line = 67, col = 38}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 67, col = 39},{<unknown>, line = 67, col = 42}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 67, col = 39},{<unknown>, line = 67, col = 40}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 67, col = 41},{<unknown>, line = 67, col = 42}) "1")])]))) (FSeq (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 68, col = 15}) (Var (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 68, col = 6}) [(VarName (fromList []) "hue",[])]) (Bin (fromList []) ({<unknown>, line = 68, col = 8},{<unknown>, line = 68, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 68, col = 8},{<unknown>, line = 68, col = 11}) [(VarName (fromList []) "hep",[])]) (Var (fromList []) ({<unknown>, line = 68, col = 12},{<unknown>, line = 68, col = 15}) [(VarName (fromList []) "hen",[])]))) (FSeq (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 69, col = 47}) (Var (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 69, col = 6}) [(VarName (fromList []) "hwp",[])]) (Bin (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 47}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 69, col = 12},{<unknown>, line = 69, col = 38}) (Bin (fromList []) ({<unknown>, line = 69, col = 13},{<unknown>, line = 69, col = 37}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 13},{<unknown>, line = 69, col = 22}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 69, col = 16},{<unknown>, line = 69, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 69, col = 18},{<unknown>, line = 69, col = 21}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 18},{<unknown>, line = 69, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 20},{<unknown>, line = 69, col = 21}) "1")])]) (Var (fromList []) ({<unknown>, line = 69, col = 23},{<unknown>, line = 69, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 69, col = 27},{<unknown>, line = 69, col = 36}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 69, col = 30},{<unknown>, line = 69, col = 31}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 69, col = 32},{<unknown>, line = 69, col = 35}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 32},{<unknown>, line = 69, col = 33}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 34},{<unknown>, line = 69, col = 35}) "1")])]])])))) (Var (fromList []) ({<unknown>, line = 69, col = 39},{<unknown>, line = 69, col = 47}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 69, col = 41},{<unknown>, line = 69, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 69, col = 43},{<unknown>, line = 69, col = 46}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 43},{<unknown>, line = 69, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 45},{<unknown>, line = 69, col = 46}) "1")])]))) (FSeq (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 45}) (Var (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 6}) [(VarName (fromList []) "hwn",[])]) (Bin (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 45}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 70, col = 12},{<unknown>, line = 70, col = 38}) (Bin (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 37}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 22}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 70, col = 16},{<unknown>, line = 70, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 21}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 70, col = 20},{<unknown>, line = 70, col = 21}) "1")])]) (Var (fromList []) ({<unknown>, line = 70, col = 23},{<unknown>, line = 70, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 70, col = 27},{<unknown>, line = 70, col = 36}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 70, col = 30},{<unknown>, line = 70, col = 31}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 70, col = 32},{<unknown>, line = 70, col = 35}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 32},{<unknown>, line = 70, col = 33}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 70, col = 34},{<unknown>, line = 70, col = 35}) "1")])]])])))) (Var (fromList []) ({<unknown>, line = 70, col = 39},{<unknown>, line = 70, col = 45}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 70, col = 41},{<unknown>, line = 70, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 70, col = 43},{<unknown>, line = 70, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 15}) (Var (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 6}) [(VarName (fromList []) "huw",[])]) (Bin (fromList []) ({<unknown>, line = 71, col = 8},{<unknown>, line = 71, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 71, col = 8},{<unknown>, line = 71, col = 11}) [(VarName (fromList []) "hwp",[])]) (Var (fromList []) ({<unknown>, line = 71, col = 12},{<unknown>, line = 71, col = 15}) [(VarName (fromList []) "hwn",[])]))) (FSeq (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 72, col = 41}) (Var (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 72, col = 6}) [(VarName (fromList []) "hnp",[])]) (Bin (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 41}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 72, col = 12},{<unknown>, line = 72, col = 34}) (Bin (fromList []) ({<unknown>, line = 72, col = 13},{<unknown>, line = 72, col = 33}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 72, col = 13},{<unknown>, line = 72, col = 20}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 72, col = 16},{<unknown>, line = 72, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 72, col = 18},{<unknown>, line = 72, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 72, col = 21},{<unknown>, line = 72, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 72, col = 25},{<unknown>, line = 72, col = 32}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 72, col = 28},{<unknown>, line = 72, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 72, col = 30},{<unknown>, line = 72, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 72, col = 35},{<unknown>, line = 72, col = 41}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 72, col = 37},{<unknown>, line = 72, col = 38}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 72, col = 39},{<unknown>, line = 72, col = 40}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 73, col = 43}) (Var (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 73, col = 6}) [(VarName (fromList []) "hnn",[])]) (Bin (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 43}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 73, col = 12},{<unknown>, line = 73, col = 34}) (Bin (fromList []) ({<unknown>, line = 73, col = 13},{<unknown>, line = 73, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 73, col = 13},{<unknown>, line = 73, col = 20}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 73, col = 16},{<unknown>, line = 73, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 73, col = 18},{<unknown>, line = 73, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 73, col = 21},{<unknown>, line = 73, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 73, col = 25},{<unknown>, line = 73, col = 32}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 73, col = 28},{<unknown>, line = 73, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 73, col = 30},{<unknown>, line = 73, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 73, col = 35},{<unknown>, line = 73, col = 43}) [(VarName (fromList [("msak",[])]) "h",[Bin (fromList []) ({<unknown>, line = 73, col = 37},{<unknown>, line = 73, col = 40}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 73, col = 37},{<unknown>, line = 73, col = 38}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 73, col = 39},{<unknown>, line = 73, col = 40}) "1"),Var (fromList []) ({<unknown>, line = 73, col = 41},{<unknown>, line = 73, col = 42}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 74, col = 15}) (Var (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 74, col = 6}) [(VarName (fromList []) "hvn",[])]) (Bin (fromList []) ({<unknown>, line = 74, col = 8},{<unknown>, line = 74, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 74, col = 8},{<unknown>, line = 74, col = 11}) [(VarName (fromList []) "hnp",[])]) (Var (fromList []) ({<unknown>, line = 74, col = 12},{<unknown>, line = 74, col = 15}) [(VarName (fromList []) "hnn",[])]))) (FSeq (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 75, col = 47}) (Var (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 75, col = 6}) [(VarName (fromList []) "hsp",[])]) (Bin (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 47}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 75, col = 12},{<unknown>, line = 75, col = 38}) (Bin (fromList []) ({<unknown>, line = 75, col = 13},{<unknown>, line = 75, col = 37}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 13},{<unknown>, line = 75, col = 22}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 75, col = 16},{<unknown>, line = 75, col = 19}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 16},{<unknown>, line = 75, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 18},{<unknown>, line = 75, col = 19}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 20},{<unknown>, line = 75, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 75, col = 23},{<unknown>, line = 75, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 75, col = 27},{<unknown>, line = 75, col = 36}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 75, col = 30},{<unknown>, line = 75, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 30},{<unknown>, line = 75, col = 31}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 32},{<unknown>, line = 75, col = 33}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 34},{<unknown>, line = 75, col = 35}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 75, col = 39},{<unknown>, line = 75, col = 47}) [(VarName (fromList [("msak",[])]) "h",[Bin (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 44}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 75, col = 44}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 45},{<unknown>, line = 75, col = 46}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 76, col = 45}) (Var (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 76, col = 6}) [(VarName (fromList []) "hsn",[])]) (Bin (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 45}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 76, col = 12},{<unknown>, line = 76, col = 38}) (Bin (fromList []) ({<unknown>, line = 76, col = 13},{<unknown>, line = 76, col = 37}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 13},{<unknown>, line = 76, col = 22}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 76, col = 16},{<unknown>, line = 76, col = 19}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 16},{<unknown>, line = 76, col = 17}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 18},{<unknown>, line = 76, col = 19}) "1"),Var (fromList []) ({<unknown>, line = 76, col = 20},{<unknown>, line = 76, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 76, col = 23},{<unknown>, line = 76, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 76, col = 27},{<unknown>, line = 76, col = 36}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 76, col = 30},{<unknown>, line = 76, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 30},{<unknown>, line = 76, col = 31}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 32},{<unknown>, line = 76, col = 33}) "1"),Var (fromList []) ({<unknown>, line = 76, col = 34},{<unknown>, line = 76, col = 35}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 76, col = 39},{<unknown>, line = 76, col = 45}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 76, col = 41},{<unknown>, line = 76, col = 42}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 76, col = 43},{<unknown>, line = 76, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 77, col = 15}) (Var (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 77, col = 6}) [(VarName (fromList []) "hvs",[])]) (Bin (fromList []) ({<unknown>, line = 77, col = 8},{<unknown>, line = 77, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 77, col = 8},{<unknown>, line = 77, col = 11}) [(VarName (fromList []) "hsp",[])]) (Var (fromList []) ({<unknown>, line = 77, col = 12},{<unknown>, line = 77, col = 15}) [(VarName (fromList []) "hsn",[])]))) (FSeq (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 78, col = 54}) (Var (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 78, col = 54}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 78, col = 7},{<unknown>, line = 78, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 78, col = 9},{<unknown>, line = 78, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 54}) (Minus (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 22}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 78, col = 18},{<unknown>, line = 78, col = 19}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 78, col = 20},{<unknown>, line = 78, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 38}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 35}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 25}) [(VarName (fromList [("msak",[])]) "dt",[])]) (ParenthesizedExpr (fromList []) ({<unknown>, line = 78, col = 26},{<unknown>, line = 78, col = 35}) (Bin (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 34}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 30}) [(VarName (fromList []) "hue",[])]) (Var (fromList []) ({<unknown>, line = 78, col = 31},{<unknown>, line = 78, col = 34}) [(VarName (fromList []) "huw",[])])))) (Var (fromList []) ({<unknown>, line = 78, col = 36},{<unknown>, line = 78, col = 38}) [(VarName (fromList [("msak",[])]) "dx",[])]))) (Bin (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 54}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 51}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 41}) [(VarName (fromList [("msak",[])]) "dt",[])]) (ParenthesizedExpr (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 78, col = 51}) (Bin (fromList []) ({<unknown>, line = 78, col = 43},{<unknown>, line = 78, col = 50}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 43},{<unknown>, line = 78, col = 46}) [(VarName (fromList []) "hvn",[])]) (Var (fromList []) ({<unknown>, line = 78, col = 47},{<unknown>, line = 78, col = 50}) [(VarName (fromList []) "hvs",[])])))) (Var (fromList []) ({<unknown>, line = 78, col = 52},{<unknown>, line = 78, col = 54}) [(VarName (fromList [("msak",[])]) "dy",[])])))) (NullStmt (fromList []) ({<unknown>, line = 79, col = 6},{<unknown>, line = 79, col = 6}))))))))))))))))))) (FSeq (fromList []) (No source location,No source location) (OpenCLMap (fromList [("ParallelFortran: Map at 15:0",[""])]) ({generated, line = 15, col = 0},{generated, line = 26, col = 6}) [VarName (fromList [("msak",[])]) "wet",VarName (fromList [("msak",[])]) "etan",VarName (fromList [("msak",[])]) "eps"] [VarName (fromList [("msak",[])]) "eta"] [(VarName (fromList [("msak",[])]) "j",Con (fromList []) ({<unknown>, line = 15, col = 7},{<unknown>, line = 15, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 15, col = 11},{<unknown>, line = 15, col = 11}) "1"),(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 16, col = 7},{<unknown>, line = 16, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 16, col = 11},{<unknown>, line = 16, col = 11}) "1")] [] (OpenCLMap (fromList [("ParallelFortran: Map at 16:0",[""])]) ({generated, line = 16, col = 0},{generated, line = 25, col = 6}) [VarName (fromList [("msak",[])]) "wet",VarName (fromList [("msak",[])]) "etan",VarName (fromList [("msak",[])]) "eps"] [VarName (fromList [("msak",[])]) "eta"] [(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 16, col = 7},{<unknown>, line = 16, col = 8}) "1",Con (fromList []) (No source location,No source location) "500.0",Con (fromList []) ({<unknown>, line = 16, col = 11},{<unknown>, line = 16, col = 11}) "1")] [] (If (fromList []) ({<unknown>, line = 17, col = 0},{<unknown>, line = 24, col = 6}) (Bin (fromList []) ({<unknown>, line = 17, col = 3},{<unknown>, line = 17, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 3},{<unknown>, line = 17, col = 11}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 17, col = 7},{<unknown>, line = 17, col = 8}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 17, col = 9},{<unknown>, line = 17, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 17, col = 13},{<unknown>, line = 17, col = 14}) "1")) (FSeq (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 18, col = 81}) (Var (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 18, col = 8}) [(VarName (fromList []) "term1",[])]) (Bin (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 81}) (Mul (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 71}) (Bin (fromList []) ({<unknown>, line = 18, col = 11},{<unknown>, line = 18, col = 70}) (Minus (fromList [])) (Con (fromList []) ({<unknown>, line = 18, col = 11},{<unknown>, line = 18, col = 14}) "1.0") (Bin (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 70}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 23}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 19}) "0.25") (Var (fromList []) ({<unknown>, line = 18, col = 20},{<unknown>, line = 18, col = 23}) [(VarName (fromList [("msak",[])]) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 70}) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 69}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 58}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 46}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 35}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 34}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 32}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 33},{<unknown>, line = 18, col = 34}) "1")])]) (Var (fromList []) ({<unknown>, line = 18, col = 36},{<unknown>, line = 18, col = 46}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 18, col = 40},{<unknown>, line = 18, col = 41}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 18, col = 42},{<unknown>, line = 18, col = 45}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 42},{<unknown>, line = 18, col = 43}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 44},{<unknown>, line = 18, col = 45}) "1")])])) (Var (fromList []) ({<unknown>, line = 18, col = 48},{<unknown>, line = 18, col = 58}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 18, col = 52},{<unknown>, line = 18, col = 55}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 52},{<unknown>, line = 18, col = 53}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 54},{<unknown>, line = 18, col = 55}) "1"),Var (fromList []) ({<unknown>, line = 18, col = 56},{<unknown>, line = 18, col = 57}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (Var (fromList []) ({<unknown>, line = 18, col = 59},{<unknown>, line = 18, col = 69}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 18, col = 63},{<unknown>, line = 18, col = 66}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 63},{<unknown>, line = 18, col = 64}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 65},{<unknown>, line = 18, col = 66}) "1"),Var (fromList []) ({<unknown>, line = 18, col = 67},{<unknown>, line = 18, col = 68}) [(VarName (fromList [("msak",[])]) "k",[])]])])))))) (Var (fromList []) ({<unknown>, line = 18, col = 72},{<unknown>, line = 18, col = 81}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 18, col = 77},{<unknown>, line = 18, col = 78}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 18, col = 79},{<unknown>, line = 18, col = 80}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 19, col = 66}) (Var (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 19, col = 8}) [(VarName (fromList []) "term2",[])]) (Bin (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 66}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 18}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 14}) "0.25") (Var (fromList []) ({<unknown>, line = 19, col = 15},{<unknown>, line = 19, col = 18}) [(VarName (fromList [("msak",[])]) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 19, col = 19},{<unknown>, line = 19, col = 66}) (Bin (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 65}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 42}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 30}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 25}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 26},{<unknown>, line = 19, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 26},{<unknown>, line = 19, col = 27}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 28},{<unknown>, line = 19, col = 29}) "1")])]) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 42}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 19, col = 36},{<unknown>, line = 19, col = 37}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 38},{<unknown>, line = 19, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 38},{<unknown>, line = 19, col = 39}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 41}) "1")])])) (Bin (fromList []) ({<unknown>, line = 19, col = 43},{<unknown>, line = 19, col = 65}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 43},{<unknown>, line = 19, col = 53}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 19, col = 47},{<unknown>, line = 19, col = 48}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 49},{<unknown>, line = 19, col = 52}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 49},{<unknown>, line = 19, col = 50}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 51},{<unknown>, line = 19, col = 52}) "1")])]) (Var (fromList []) ({<unknown>, line = 19, col = 54},{<unknown>, line = 19, col = 65}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 19, col = 59},{<unknown>, line = 19, col = 60}) [(VarName (fromList [("msak",[])]) "j",[])],Bin (fromList []) ({<unknown>, line = 19, col = 61},{<unknown>, line = 19, col = 64}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 61},{<unknown>, line = 19, col = 62}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 63},{<unknown>, line = 19, col = 64}) "1")])])))))) (FSeq (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 20, col = 66}) (Var (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 20, col = 8}) [(VarName (fromList []) "term3",[])]) (Bin (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 66}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 18}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 14}) "0.25") (Var (fromList []) ({<unknown>, line = 20, col = 15},{<unknown>, line = 20, col = 18}) [(VarName (fromList [("msak",[])]) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 20, col = 19},{<unknown>, line = 20, col = 66}) (Bin (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 65}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 42}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 30}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 27}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 25}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 26},{<unknown>, line = 20, col = 27}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 28},{<unknown>, line = 20, col = 29}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 20, col = 31},{<unknown>, line = 20, col = 42}) [(VarName (fromList [("msak",[])]) "etan",[Bin (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 39}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 37}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 38},{<unknown>, line = 20, col = 39}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 40},{<unknown>, line = 20, col = 41}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (Bin (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 65}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 53}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 20, col = 47},{<unknown>, line = 20, col = 50}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 47},{<unknown>, line = 20, col = 48}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 49},{<unknown>, line = 20, col = 50}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 51},{<unknown>, line = 20, col = 52}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 20, col = 54},{<unknown>, line = 20, col = 65}) [(VarName (fromList [("msak",[])]) "etan",[Bin (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 62}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 60}) [(VarName (fromList [("msak",[])]) "j",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 61},{<unknown>, line = 20, col = 62}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 63},{<unknown>, line = 20, col = 64}) [(VarName (fromList [("msak",[])]) "k",[])]])])))))) (Assg (fromList []) ({<unknown>, line = 21, col = 2},{<unknown>, line = 21, col = 30}) (Var (fromList []) ({<unknown>, line = 21, col = 2},{<unknown>, line = 21, col = 30}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 21, col = 6},{<unknown>, line = 21, col = 7}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 21, col = 8},{<unknown>, line = 21, col = 9}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 30}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 24}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 18}) [(VarName (fromList []) "term1",[])]) (Var (fromList []) ({<unknown>, line = 21, col = 19},{<unknown>, line = 21, col = 24}) [(VarName (fromList []) "term2",[])])) (Var (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 30}) [(VarName (fromList []) "term3",[])])))))) [] (Just (Assg (fromList []) ({<unknown>, line = 23, col = 2},{<unknown>, line = 23, col = 22}) (Var (fromList []) ({<unknown>, line = 23, col = 2},{<unknown>, line = 23, col = 22}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 23, col = 6},{<unknown>, line = 23, col = 7}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 9}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 22}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 23, col = 18},{<unknown>, line = 23, col = 19}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 23, col = 20},{<unknown>, line = 23, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])])))))) (OpenCLMap (fromList [("ParallelFortran: Map at 23:0",[""])]) ({generated, line = 23, col = 0},{generated, line = 31, col = 6}) [VarName (fromList [("msak",[])]) "hzero",VarName (fromList [("msak",[])]) "h",VarName (fromList [("msak",[])]) "hmin",VarName (fromList [("msak",[])]) "un",VarName (fromList [("msak",[])]) "vn"] [VarName (fromList [("msak",[])]) "h",VarName (fromList [("msak",[])]) "wet",VarName (fromList [("msak",[])]) "u",VarName (fromList [("msak",[])]) "v"] [(VarName (fromList [("msak",[])]) "j",Con (fromList []) ({<unknown>, line = 23, col = 7},{<unknown>, line = 23, col = 8}) "0",Bin (fromList []) ({<unknown>, line = 23, col = 9},{<unknown>, line = 23, col = 13}) (Plus (fromList [])) (Con (fromList []) (No source location,No source location) "500.0") (Con (fromList []) ({<unknown>, line = 23, col = 12},{<unknown>, line = 23, col = 13}) "1"),Con (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 13}) "1"),(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 24, col = 7},{<unknown>, line = 24, col = 8}) "0",Bin (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 13}) (Plus (fromList [])) (Con (fromList []) (No source location,No source location) "500.0") (Con (fromList []) ({<unknown>, line = 24, col = 12},{<unknown>, line = 24, col = 13}) "1"),Con (fromList []) ({<unknown>, line = 24, col = 13},{<unknown>, line = 24, col = 13}) "1")] [] (OpenCLMap (fromList [("ParallelFortran: Map at 24:0",[""])]) ({generated, line = 24, col = 0},{generated, line = 30, col = 6}) [VarName (fromList [("msak",[])]) "hzero",VarName (fromList [("msak",[])]) "eta",VarName (fromList [("msak",[])]) "h",VarName (fromList [("msak",[])]) "hmin",VarName (fromList [("msak",[])]) "un",VarName (fromList [("msak",[])]) "vn"] [VarName (fromList [("msak",[])]) "h",VarName (fromList [("msak",[])]) "wet",VarName (fromList [("msak",[])]) "u",VarName (fromList [("msak",[])]) "v"] [(VarName (fromList [("msak",[])]) "k",Con (fromList []) ({<unknown>, line = 24, col = 7},{<unknown>, line = 24, col = 8}) "0",Bin (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 13}) (Plus (fromList [])) (Con (fromList []) (No source location,No source location) "500.0") (Con (fromList []) ({<unknown>, line = 24, col = 12},{<unknown>, line = 24, col = 13}) "1"),Con (fromList []) ({<unknown>, line = 24, col = 13},{<unknown>, line = 24, col = 13}) "1")] [] (FSeq (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 25, col = 32}) (Var (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 25, col = 32}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 25, col = 4},{<unknown>, line = 25, col = 5}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 25, col = 6},{<unknown>, line = 25, col = 7}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 32}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 22}) [(VarName (fromList [("msak",[])]) "hzero",[Var (fromList []) ({<unknown>, line = 25, col = 17},{<unknown>, line = 25, col = 18}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 25, col = 19},{<unknown>, line = 25, col = 20}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 25, col = 24},{<unknown>, line = 25, col = 32}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 25, col = 28},{<unknown>, line = 25, col = 29}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 25, col = 30},{<unknown>, line = 25, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 26, col = 14}) (Var (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 26, col = 14}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 26, col = 6},{<unknown>, line = 26, col = 7}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 9}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 26, col = 13},{<unknown>, line = 26, col = 14}) "1")) (FSeq (fromList []) ({<unknown>, line = 27, col = 2},{<unknown>, line = 30, col = 6}) (If (fromList []) ({<unknown>, line = 27, col = 2},{<unknown>, line = 27, col = 31}) (Bin (fromList []) ({<unknown>, line = 27, col = 6},{<unknown>, line = 27, col = 17}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 27, col = 6},{<unknown>, line = 27, col = 12}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 9}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 27, col = 10},{<unknown>, line = 27, col = 11}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 27, col = 13},{<unknown>, line = 27, col = 17}) [(VarName (fromList [("msak",[])]) "hmin",[])])) (Assg (fromList []) ({<unknown>, line = 27, col = 19},{<unknown>, line = 27, col = 31}) (Var (fromList []) ({<unknown>, line = 27, col = 19},{<unknown>, line = 27, col = 31}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 27, col = 23},{<unknown>, line = 27, col = 24}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 27, col = 25},{<unknown>, line = 27, col = 26}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 27, col = 30},{<unknown>, line = 27, col = 31}) "0")) [] Nothing) (FSeq (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 28, col = 18}) (Var (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 28, col = 18}) [(VarName (fromList [("msak",[])]) "u",[Var (fromList []) ({<unknown>, line = 28, col = 4},{<unknown>, line = 28, col = 5}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 28, col = 6},{<unknown>, line = 28, col = 7}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 18}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 28, col = 14},{<unknown>, line = 28, col = 15}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 28, col = 16},{<unknown>, line = 28, col = 17}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 18}) (Var (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 18}) [(VarName (fromList [("msak",[])]) "v",[Var (fromList []) ({<unknown>, line = 29, col = 4},{<unknown>, line = 29, col = 5}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 29, col = 6},{<unknown>, line = 29, col = 7}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 18}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 29, col = 14},{<unknown>, line = 29, col = 15}) [(VarName (fromList [("msak",[])]) "j",[])],Var (fromList []) ({<unknown>, line = 29, col = 16},{<unknown>, line = 29, col = 17}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (NullStmt (fromList []) ({<unknown>, line = 30, col = 6},{<unknown>, line = 30, col = 6}))))))))))))]
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================



--------------------------------------------------------------------------------
dyn_shapiro_vernieuw_merged
--------------------------------------------------------------------------------
module module_dyn_shapiro_vernieuw_merged
contains
subroutine dyn_shapiro_vernieuw_merged(dt,dx,dy,eps,eta,etan,g,h,hmin,hzero,j,k,u,un,v,vn,wet)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real, dimension(0:ny+1,0:nx+1) :: du
      real :: duu
      real, dimension(0:ny+1,0:nx+1) :: dv
      real :: dvv
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: h
      real :: hen
      real :: hep
      real, intent(In) :: hmin
      real :: hnn
      real :: hnp
      real :: hsn
      real :: hsp
      real :: hue
      real :: huw
      real :: hvn
      real :: hvs
      real :: hwn
      real :: hwp
      real, dimension(0:ny+1,0:nx+1), intent(In) :: hzero
      integer :: j
      integer :: k
      real :: term1
      real :: term2
      real :: term3
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: u
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: un
      real :: uu
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: v
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: vn
      real :: vv
      integer, dimension(0:ny+1,0:nx+1), intent(Out) :: wet
! OpenCLMap ( ["dt","g","dx","dy"],["du","dv"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["dt","g","dx","dy"],["du","dv"],["(k,1,500.0,1)"],[]) {
    du(j,k) = -dt*g*(eta(j,k+1)-eta(j,k))/dx
    dv(j,k) = -dt*g*(eta(j+1,k)-eta(j,k))/dy
    }
    }
! OpenCLMap ( ["u","du","wet","v","dv"],[],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["u","du","wet","v","dv"],[],["(k,1,500.0,1)"],[]) {
    un(j,k) = 0.0
    uu = u(j,k)
    duu = du(j,k)
    if (wet(j,k)==1) then
        if ((wet(j,k+1)==1) .or. (duu>0.0)) then
                un(j,k) = uu+duu
        end if
    else
        if ((wet(j,k+1)==1) .and. (duu<0.0)) then
                un(j,k) = uu+duu
        end if
    end if
    vv = v(j,k)
    dvv = dv(j,k)
    vn(j,k) = 0.0
    if (wet(j,k)==1) then
        if ((wet(j+1,k)==1) .or. (dvv>0.0)) then
                vn(j,k) = vv+dvv
        end if
    else
        if ((wet(j+1,k)==1) .and. (dvv<0.0)) then
                vn(j,k) = vv+dvv
        end if
    end if
    }
    }
! OpenCLMap ( ["h","eta","dt","dx","dy"],[],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["h","eta","dt","dx","dy"],[],["(k,1,500.0,1)"],[]) {
    hep = 0.5*(un(j,k)+abs(un(j,k)))*h(j,k)
    hen = 0.5*(un(j,k)-abs(un(j,k)))*h(j,k+1)
    hue = hep+hen
    hwp = 0.5*(un(j,k-1)+abs(un(j,k-1)))*h(j,k-1)
    hwn = 0.5*(un(j,k-1)-abs(un(j,k-1)))*h(j,k)
    huw = hwp+hwn
    hnp = 0.5*(vn(j,k)+abs(vn(j,k)))*h(j,k)
    hnn = 0.5*(vn(j,k)-abs(vn(j,k)))*h(j+1,k)
    hvn = hnp+hnn
    hsp = 0.5*(vn(j-1,k)+abs(vn(j-1,k)))*h(j-1,k)
    hsn = 0.5*(vn(j-1,k)-abs(vn(j-1,k)))*h(j,k)
    hvs = hsp+hsn
    etan(j,k) = eta(j,k)-dt*(hue-huw)/dx-dt*(hvn-hvs)/dy
    }
    }
! OpenCLMap ( ["wet","etan","eps"],["eta"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["wet","etan","eps"],["eta"],["(k,1,500.0,1)"],[]) {
    if (wet(j,k)==1) then
        term1 = (1.0-0.25*eps*(wet(j,k+1)+wet(j,k-1)+wet(j+1,k)+wet(j-1,k)))*etan(j,k)
        term2 = 0.25*eps*(wet(j,k+1)*etan(j,k+1)+wet(j,k-1)*etan(j,k-1))
        term3 = 0.25*eps*(wet(j+1,k)*etan(j+1,k)+wet(j-1,k)*etan(j-1,k))
        eta(j,k) = term1+term2+term3
    else
        eta(j,k) = etan(j,k)
    end if
    }
    }
! OpenCLMap ( ["hzero","h","hmin","un","vn"],["h","wet","u","v"],["(j,0,500.0+1,1)","(k,0,500.0+1,1)"],[]) {
! OpenCLMap ( ["hzero","eta","h","hmin","un","vn"],["h","wet","u","v"],["(k,0,500.0+1,1)"],[]) {
    h(j,k) = hzero(j,k)+eta(j,k)
    wet(j,k) = 1
    if (h(j,k)<hmin) then
        wet(j,k) = 0
    end if
    u(j,k) = un(j,k)
    v(j,k) = vn(j,k)
    }
    }
end subroutine dyn_shapiro_vernieuw_merged

end module module_dyn_shapiro_vernieuw_merged
--------------------------------------------------------------------------------

Array {varName = VarName (fromList []) "du", arrDimensions = 2}
Array {varName = VarName (fromList []) "dv", arrDimensions = 2}
Array {varName = VarName (fromList [("msak",[])]) "eta", arrDimensions = 2}
Array {varName = VarName (fromList [("msak",[])]) "etan", arrDimensions = 2}
Array {varName = VarName (fromList [("msak",[])]) "h", arrDimensions = 2}
Array {varName = VarName (fromList [("msak",[])]) "hzero", arrDimensions = 2}
Array {varName = VarName (fromList [("msak",[])]) "u", arrDimensions = 2}
Array {varName = VarName (fromList [("msak",[])]) "un", arrDimensions = 2}
Array {varName = VarName (fromList [("msak",[])]) "v", arrDimensions = 2}
Array {varName = VarName (fromList [("msak",[])]) "vn", arrDimensions = 2}
Array {varName = VarName (fromList [("msak",[])]) "wet", arrDimensions = 2}


----------------------------------

----------------------------------

----------------------------------
u(j,k)
du(j,k)
v(j,k)
dv(j,k)

----------------------------------
u(j,k)
du(j,k)
v(j,k)
dv(j,k)

----------------------------------

----------------------------------

----------------------------------
etan(j,k)

----------------------------------
etan(j,k)

----------------------------------
un(j,k)
vn(j,k)

----------------------------------
un(j,k)
vn(j,k)

