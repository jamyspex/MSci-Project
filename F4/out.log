
================================================================================
F4: Finite-element Fortran for FPGAs
This compiler allows Fortran finite element codes to be compiled
for execution on FPGA devices via OpenCL
================================================================================

The following command line values were parsed:

Files with subroutines to be parallelised:
	dyn
	vernieuw
	shapiro
File containing main subroutine: 
	main.f95
Source directory:
	./Shallow-Water-2D
Fixed form: False
Loop fusion bound: Nothing
CPP Defines: 
CPP Excludes:

Parsing ./Shallow-Water-2D/main.f95
Parsing ./Shallow-Water-2D/dyn.f95
Parsing ./Shallow-Water-2D/init.f95
Parsing ./Shallow-Water-2D/shapiro.f95
Parsing ./Shallow-Water-2D/vernieuw.f95

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines not for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: init
Filename: ./Shallow-Water-2D/init.f95
Source:
subroutine init(hmin,dx,dy,dt,g,j,k,hzero,eta,etan,h,wet,u,un,v,vn)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real, intent(InOut) :: hmin
      real, intent(Out) :: dx
      real, intent(Out) :: dy
      real, intent(Out) :: dt
      real, intent(Out) :: g
      integer, intent(InOut) :: j
      integer, intent(InOut) :: k
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: hzero
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: eta
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: etan
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: h
      integer, dimension(0:ny+1,0:nx+1), intent(Out) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: u
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: un
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: v
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: vn
    hmin = 0.05
    dx = 10.0
    dy = 10.0
    dt = 0.1
    g = 9.81
    do j = 0, ny+1, 1
        do k = 0, nx+1, 1
                hzero(j,k) = 10.0
        end do
    end do
    do k = 0, nx+1, 1
        hzero(0,k) = -10.0
        hzero(ny+1,k) = -10.0
    end do
    do j = 0, ny+1, 1
        hzero(j,0) = -10.0
        hzero(j,nx+1) = -10.0
    end do
    do j = 0, ny+1, 1
        do k = 0, nx+1, 1
                eta(j,k) = -min(0.0,hzero(j,k))
                etan(j,k) = eta(j,k)
        end do
    end do
    do j = 0, ny+1, 1
        do k = 0, nx+1, 1
                h(j,k) = hzero(j,k)+eta(j,k)
                wet(j,k) = 1
                if (h(j,k)<hmin) then
                                wet(j,k) = 0
                end if
                u(j,k) = 0.
                un(j,k) = 0.
                v(j,k) = 0.
                vn(j,k) = 0.
        end do
    end do
end subroutine init

Argument translations:

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: wave2d
Filename: ./Shallow-Water-2D/main.f95
Source:
program wave2d
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1) :: h
      real :: hmin
      real, dimension(0:ny+1,0:nx+1) :: hzero
      integer :: term3
      integer :: k
      real, dimension(0:ny+1,0:nx+1) :: u
      real, dimension(0:ny+1,0:nx+1) :: un
      real, dimension(0:ny+1,0:nx+1) :: v
      real, dimension(0:ny+1,0:nx+1) :: vn
      integer, dimension(0:ny+1,0:nx+1) :: wet
      real :: hmax
      real :: time
      real :: dtmax
      real :: c
      real :: lambda
      integer :: n
      integer :: ntot
      integer :: nout
      integer :: dummy
    ntot = 10000
    eps = 0.05
    call init(hmin, dx, dy, dt, g, term3, k, hzero, eta, etan, h, wet, u, un, v, vn)
    open(90, file='debug.dat', form='formatted')
    open(10, file='eta0.dat', form='formatted')
    do term3 = 0, ny+1, 1
        write(10, '(101F12.6)')(eta(term3,k), k = 0, nx+1)
    end do
    close(10)
    open(10, file='h0.dat', form='formatted')
    do term3 = 0, ny+1, 1
        write(10, '(101F12.6)')(hzero(term3,k), k = 0, nx+1)
    end do
    close(10)
    hmax = 0.
    do term3 = 1, ny, 1
        do k = 1, nx, 1
                hmax = max(hmax,h(term3,k))
        end do
    end do
    dummy = 0
    c = sqrt(2*g*hmax)
    write(6, *)("c = ", c)
    lambda = dt*sqrt(g*hmax)/min(dx,dy)
    write(6, *)("lambda = ", lambda)
    if (lambda>1) then
        write(6, *)("This will not work. Do you know why?")
        stop 
    end if
    open(10, file='eta.dat', form='formatted')
    open(20, file='h.dat', form='formatted')
    open(30, file='u.dat', form='formatted')
    open(40, file='v.dat', form='formatted')
    do term3 = 26, 26, 1
        do k = 26, 26, 1
                eta(term3,k) = 1.0
        end do
    end do
    do n = 1, ntot, 1
        time = REAL(n)*dt
        call dyn(term3, k, dx, g, eta, dt, dy, un, u, wet, v, vn, h, etan)
        call shapiro(term3, k, wet, etan, eps, eta)
        call vernieuw(dt, dx, dy, eps, eta, etan, g, h, hmin, hzero, term3, k, u, un, v, vn, wet)
    end do
    do term3 = 0, ny+1, 1
        write(10, '(101F12.6)')(eta(term3,k), k = 0, nx+1)
        write(20, '(101F12.6)')(h(term3,k), k = 0, nx+1)
        write(30, '(101F12.6)')(u(term3,k), k = 0, nx+1)
        write(40, '(101F12.6)')(v(term3,k), k = 0, nx+1)
    end do
    write(6, *)("Data output at time = ", time/60.0, " min")

end program wave2d
Argument translations:
	dyn->
	    call dyn(term3, k, dx, g, eta, dt, dy, un, u, wet, v, vn, h, etan)
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "term3"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "dx", argument = VarName (fromList []) "dx"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dy", argument = VarName (fromList []) "dy"}
	ArgTrans {parameter = ArgName (fromList []) "un", argument = VarName (fromList []) "un"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	init->
	    call init(hmin, dx, dy, dt, g, term3, k, hzero, eta, etan, h, wet, u, un, v, vn)
	ArgTrans {parameter = ArgName (fromList []) "hmin", argument = VarName (fromList []) "hmin"}
	ArgTrans {parameter = ArgName (fromList []) "dx", argument = VarName (fromList []) "dx"}
	ArgTrans {parameter = ArgName (fromList []) "dy", argument = VarName (fromList []) "dy"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "term3"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "hzero", argument = VarName (fromList []) "hzero"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "un", argument = VarName (fromList []) "un"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	shapiro->
	    call shapiro(term3, k, wet, etan, eps, eta)
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "term3"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	ArgTrans {parameter = ArgName (fromList []) "eps", argument = VarName (fromList []) "eps"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	vernieuw->
	    call vernieuw(dt, dx, dy, eps, eta, etan, g, h, hmin, hzero, term3, k, u, un, v, vn, wet)
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dx", argument = VarName (fromList []) "dx"}
	ArgTrans {parameter = ArgName (fromList []) "dy", argument = VarName (fromList []) "dy"}
	ArgTrans {parameter = ArgName (fromList []) "eps", argument = VarName (fromList []) "eps"}
	ArgTrans {parameter = ArgName (fromList []) "eta", argument = VarName (fromList []) "eta"}
	ArgTrans {parameter = ArgName (fromList []) "etan", argument = VarName (fromList []) "etan"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "hmin", argument = VarName (fromList []) "hmin"}
	ArgTrans {parameter = ArgName (fromList []) "hzero", argument = VarName (fromList []) "hzero"}
	ArgTrans {parameter = ArgName (fromList []) "j", argument = VarName (fromList []) "term3"}
	ArgTrans {parameter = ArgName (fromList []) "k", argument = VarName (fromList []) "k"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "un", argument = VarName (fromList []) "un"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "wet", argument = VarName (fromList []) "wet"}

This subroutine will not be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: dyn
Filename: ./Shallow-Water-2D/dyn.f95
Source:
subroutine dyn(j,k,dx,g,eta,dt,dy,un,u,wet,v,vn,h,etan)
      integer(4), parameter :: ny = 500 
      integer(4), parameter :: nx = 500 
      integer :: j
      integer :: k
      real, intent(In) :: dx
      real, intent(In) :: g
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, intent(In) :: dt
      real, intent(In) :: dy
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: un
      real, dimension(0:ny+1,0:nx+1), intent(In) :: u
      integer, dimension(0:ny+1,0:nx+1), intent(In) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(In) :: v
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: vn
      real, dimension(0:ny+1,0:nx+1), intent(In) :: h
      real, dimension(0:ny+1,0:nx+1) :: etan
      real, dimension(0:ny+1,0:nx+1) :: du
      real, dimension(0:ny+1,0:nx+1) :: dv
      real :: uu
      real :: vv
      real :: duu
      real :: dvv
      real :: hue
      real :: huw
      real :: hwp
      real :: hwn
      real :: hen
      real :: hep
      real :: hvn
      real :: hvs
      real :: hsp
      real :: hsn
      real :: hnn
      real :: hnp
    do j = 1, ny, 1
        do k = 1, nx, 1
                du(j,k) = -dt*g*(eta(j,k+1)-eta(j,k))/dx
                dv(j,k) = -dt*g*(eta(j+1,k)-eta(j,k))/dy
        end do
    end do
    do j = 1, ny, 1
        do k = 1, nx, 1
                un(j,k) = 0.0
                uu = u(j,k)
                duu = du(j,k)
                if (wet(j,k)==1) then
                                if ((wet(j,k+1)==1) .or. (duu>0.0)) then
                                                                un(j,k) = uu+duu
                                end if
                else
                                if ((wet(j,k+1)==1) .and. (duu<0.0)) then
                                                                un(j,k) = uu+duu
                                end if
                end if
                vv = v(j,k)
                dvv = dv(j,k)
                vn(j,k) = 0.0
                if (wet(j,k)==1) then
                                if ((wet(j+1,k)==1) .or. (dvv>0.0)) then
                                                                vn(j,k) = vv+dvv
                                end if
                else
                                if ((wet(j+1,k)==1) .and. (dvv<0.0)) then
                                                                vn(j,k) = vv+dvv
                                end if
                end if
        end do
    end do
    do j = 1, ny, 1
        do k = 1, nx, 1
                hep = 0.5*(un(j,k)+abs(un(j,k)))*h(j,k)
                hen = 0.5*(un(j,k)-abs(un(j,k)))*h(j,k+1)
                hue = hep+hen
                hwp = 0.5*(un(j,k-1)+abs(un(j,k-1)))*h(j,k-1)
                hwn = 0.5*(un(j,k-1)-abs(un(j,k-1)))*h(j,k)
                huw = hwp+hwn
                hnp = 0.5*(vn(j,k)+abs(vn(j,k)))*h(j,k)
                hnn = 0.5*(vn(j,k)-abs(vn(j,k)))*h(j+1,k)
                hvn = hnp+hnn
                hsp = 0.5*(vn(j-1,k)+abs(vn(j-1,k)))*h(j-1,k)
                hsn = 0.5*(vn(j-1,k)-abs(vn(j-1,k)))*h(j,k)
                hvs = hsp+hsn
                etan(j,k) = eta(j,k)-dt*(hue-huw)/dx-dt*(hvn-hvs)/dy
        end do
    end do
end subroutine dyn

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: shapiro
Filename: ./Shallow-Water-2D/shapiro.f95
Source:
subroutine shapiro(j,k,wet,etan,eps,eta)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      integer, intent(InOut) :: j
      integer, intent(InOut) :: k
      integer, dimension(0:ny+1,0:nx+1), intent(In) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(In) :: etan
      real, intent(In) :: eps
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: eta
      real :: term1
      real :: term2
      real :: term3
    do j = 1, ny, 1
        do k = 1, nx, 1
                if (wet(j,k)==1) then
                                term1 = (1.0-0.25*eps*(wet(j,k+1)+wet(j,k-1)+wet(j+1,k)+wet(j-1,k)))*etan(j,k)
                                term2 = 0.25*eps*(wet(j,k+1)*etan(j,k+1)+wet(j,k-1)*etan(j,k-1))
                                term3 = 0.25*eps*(wet(j+1,k)*etan(j+1,k)+wet(j-1,k)*etan(j-1,k))
                                eta(j,k) = term1+term2+term3
                else
                                eta(j,k) = etan(j,k)
                end if
        end do
    end do
end subroutine shapiro

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: vernieuw
Filename: ./Shallow-Water-2D/vernieuw.f95
Source:
subroutine vernieuw(dt,dx,dy,eps,eta,etan,g,h,hmin,hzero,j,k,u,un,v,vn,wet)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1), intent(In) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: h
      real, intent(In) :: hmin
      real, dimension(0:ny+1,0:nx+1), intent(In) :: hzero
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: u
      real, dimension(0:ny+1,0:nx+1), intent(In) :: un
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: v
      real, dimension(0:ny+1,0:nx+1), intent(In) :: vn
      integer, dimension(0:ny+1,0:nx+1), intent(Out) :: wet
      integer, intent(InOut) :: k
      integer, intent(InOut) :: j
    do j = 0, ny+1, 1
        do k = 0, nx+1, 1
                h(j,k) = hzero(j,k)+eta(j,k)
                wet(j,k) = 1
                if (h(j,k)<hmin) then
                                wet(j,k) = 0
                end if
                u(j,k) = un(j,k)
                v(j,k) = vn(j,k)
        end do
    end do
end subroutine vernieuw

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Offload subroutines with parameters replaced with args 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

unique args = ["dt","dx","dy","eps","eta","etan","g","h","hmin","hzero","k","term3_F4_cas","u","un","v","vn","wet"]
unique decls = 
      real, intent(In) :: dt
      real, dimension(0:ny+1,0:nx+1) :: du
      real :: duu
      real, dimension(0:ny+1,0:nx+1) :: dv
      real :: dvv
      real, intent(In) :: dx
      real, intent(In) :: dy
      real, intent(In) :: eps
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real, intent(In) :: g
      real, dimension(0:ny+1,0:nx+1), intent(In) :: h
      real :: hen
      real :: hep
      real, intent(In) :: hmin
      real :: hnn
      real :: hnp
      real :: hsn
      real :: hsp
      real :: hue
      real :: huw
      real :: hvn
      real :: hvs
      real :: hwn
      real :: hwp
      real, dimension(0:ny+1,0:nx+1), intent(In) :: hzero
      integer :: k
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: term1
      real :: term2
      real :: term3
      integer :: term3_F4_cas
      real, dimension(0:ny+1,0:nx+1), intent(In) :: u
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: un
      real :: uu
      real, dimension(0:ny+1,0:nx+1), intent(In) :: v
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: vn
      real :: vv
      integer, dimension(0:ny+1,0:nx+1), intent(In) :: wet

mergedBody = 
    do term3_F4_cas = 1, ny, 1
        do k = 1, nx, 1
                du(term3_F4_cas,k) = -dt*g*(eta(term3_F4_cas,k+1)-eta(term3_F4_cas,k))/dx
                dv(term3_F4_cas,k) = -dt*g*(eta(term3_F4_cas+1,k)-eta(term3_F4_cas,k))/dy
        end do
    end do
    do term3_F4_cas = 1, ny, 1
        do k = 1, nx, 1
                un(term3_F4_cas,k) = 0.0
                uu = u(term3_F4_cas,k)
                duu = du(term3_F4_cas,k)
                if (wet(term3_F4_cas,k)==1) then
                                if ((wet(term3_F4_cas,k+1)==1) .or. (duu>0.0)) then
                                                                un(term3_F4_cas,k) = uu+duu
                                end if
                else
                                if ((wet(term3_F4_cas,k+1)==1) .and. (duu<0.0)) then
                                                                un(term3_F4_cas,k) = uu+duu
                                end if
                end if
                vv = v(term3_F4_cas,k)
                dvv = dv(term3_F4_cas,k)
                vn(term3_F4_cas,k) = 0.0
                if (wet(term3_F4_cas,k)==1) then
                                if ((wet(term3_F4_cas+1,k)==1) .or. (dvv>0.0)) then
                                                                vn(term3_F4_cas,k) = vv+dvv
                                end if
                else
                                if ((wet(term3_F4_cas+1,k)==1) .and. (dvv<0.0)) then
                                                                vn(term3_F4_cas,k) = vv+dvv
                                end if
                end if
        end do
    end do
    do term3_F4_cas = 1, ny, 1
        do k = 1, nx, 1
                hep = 0.5*(un(term3_F4_cas,k)+abs(un(term3_F4_cas,k)))*h(term3_F4_cas,k)
                hen = 0.5*(un(term3_F4_cas,k)-abs(un(term3_F4_cas,k)))*h(term3_F4_cas,k+1)
                hue = hep+hen
                hwp = 0.5*(un(term3_F4_cas,k-1)+abs(un(term3_F4_cas,k-1)))*h(term3_F4_cas,k-1)
                hwn = 0.5*(un(term3_F4_cas,k-1)-abs(un(term3_F4_cas,k-1)))*h(term3_F4_cas,k)
                huw = hwp+hwn
                hnp = 0.5*(vn(term3_F4_cas,k)+abs(vn(term3_F4_cas,k)))*h(term3_F4_cas,k)
                hnn = 0.5*(vn(term3_F4_cas,k)-abs(vn(term3_F4_cas,k)))*h(term3_F4_cas+1,k)
                hvn = hnp+hnn
                hsp = 0.5*(vn(term3_F4_cas-1,k)+abs(vn(term3_F4_cas-1,k)))*h(term3_F4_cas-1,k)
                hsn = 0.5*(vn(term3_F4_cas-1,k)-abs(vn(term3_F4_cas-1,k)))*h(term3_F4_cas,k)
                hvs = hsp+hsn
                etan(term3_F4_cas,k) = eta(term3_F4_cas,k)-dt*(hue-huw)/dx-dt*(hvn-hvs)/dy
        end do
    end do
    do term3_F4_cas = 1, ny, 1
        do k = 1, nx, 1
                if (wet(term3_F4_cas,k)==1) then
                                term1 = (1.0-0.25*eps*(wet(term3_F4_cas,k+1)+wet(term3_F4_cas,k-1)+wet(term3_F4_cas+1,k)+wet(term3_F4_cas-1,k)))*etan(term3_F4_cas,k)
                                term2 = 0.25*eps*(wet(term3_F4_cas,k+1)*etan(term3_F4_cas,k+1)+wet(term3_F4_cas,k-1)*etan(term3_F4_cas,k-1))
                                term3 = 0.25*eps*(wet(term3_F4_cas+1,k)*etan(term3_F4_cas+1,k)+wet(term3_F4_cas-1,k)*etan(term3_F4_cas-1,k))
                                eta(term3_F4_cas,k) = term1+term2+term3
                else
                                eta(term3_F4_cas,k) = etan(term3_F4_cas,k)
                end if
        end do
    end do
    do term3_F4_cas = 0, ny+1, 1
        do k = 0, nx+1, 1
                h(term3_F4_cas,k) = hzero(term3_F4_cas,k)+eta(term3_F4_cas,k)
                wet(term3_F4_cas,k) = 1
                if (h(term3_F4_cas,k)<hmin) then
                                wet(term3_F4_cas,k) = 0
                end if
                u(term3_F4_cas,k) = un(term3_F4_cas,k)
                v(term3_F4_cas,k) = vn(term3_F4_cas,k)
        end do
    end do
merged AST = 
FSeq (fromList []) (No source location,No source location) (FSeq (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 80, col = 6}) (For (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 43, col = 6}) (VarName (fromList [("msak",[])]) "term3_F4_cas") (Con (fromList []) ({<unknown>, line = 38, col = 7},{<unknown>, line = 38, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 38, col = 9},{<unknown>, line = 38, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 38, col = 11},{<unknown>, line = 38, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 43, col = 6}) (For (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 42, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 39, col = 7},{<unknown>, line = 39, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 39, col = 9},{<unknown>, line = 39, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 39, col = 11},{<unknown>, line = 39, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 42, col = 6}) (Assg (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 40, col = 42}) (Var (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 40, col = 42}) [(VarName (fromList []) "du",[Var (fromList []) ({<unknown>, line = 40, col = 5},{<unknown>, line = 40, col = 6}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 40, col = 7},{<unknown>, line = 40, col = 8}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 42}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 39}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 17}) (Mul (fromList [])) (Unary (fromList []) ({<unknown>, line = 40, col = 12},{<unknown>, line = 40, col = 15}) (UMinus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 13},{<unknown>, line = 40, col = 15}) [(VarName (fromList [("msak",[])]) "dt",[])])) (Var (fromList []) ({<unknown>, line = 40, col = 16},{<unknown>, line = 40, col = 17}) [(VarName (fromList [("msak",[])]) "g",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 40, col = 18},{<unknown>, line = 40, col = 39}) (Bin (fromList []) ({<unknown>, line = 40, col = 19},{<unknown>, line = 40, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 19},{<unknown>, line = 40, col = 29}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 40, col = 23},{<unknown>, line = 40, col = 24}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 40, col = 25},{<unknown>, line = 40, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 25},{<unknown>, line = 40, col = 26}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 40, col = 27},{<unknown>, line = 40, col = 28}) "1")])]) (Var (fromList []) ({<unknown>, line = 40, col = 30},{<unknown>, line = 40, col = 38}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 40, col = 34},{<unknown>, line = 40, col = 35}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 40, col = 36},{<unknown>, line = 40, col = 37}) [(VarName (fromList [("msak",[])]) "k",[])]])])))) (Var (fromList []) ({<unknown>, line = 40, col = 40},{<unknown>, line = 40, col = 42}) [(VarName (fromList [("msak",[])]) "dx",[])]))) (FSeq (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 42, col = 6}) (Assg (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 41, col = 42}) (Var (fromList []) ({<unknown>, line = 41, col = 2},{<unknown>, line = 41, col = 42}) [(VarName (fromList []) "dv",[Var (fromList []) ({<unknown>, line = 41, col = 5},{<unknown>, line = 41, col = 6}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 41, col = 7},{<unknown>, line = 41, col = 8}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 42}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 39}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 17}) (Mul (fromList [])) (Unary (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 15}) (UMinus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 13},{<unknown>, line = 41, col = 15}) [(VarName (fromList [("msak",[])]) "dt",[])])) (Var (fromList []) ({<unknown>, line = 41, col = 16},{<unknown>, line = 41, col = 17}) [(VarName (fromList [("msak",[])]) "g",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 41, col = 18},{<unknown>, line = 41, col = 39}) (Bin (fromList []) ({<unknown>, line = 41, col = 19},{<unknown>, line = 41, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 19},{<unknown>, line = 41, col = 29}) [(VarName (fromList [("msak",[])]) "eta",[Bin (fromList []) ({<unknown>, line = 41, col = 23},{<unknown>, line = 41, col = 26}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 23},{<unknown>, line = 41, col = 24}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 41, col = 25},{<unknown>, line = 41, col = 26}) "1"),Var (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 28}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 41, col = 30},{<unknown>, line = 41, col = 38}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 41, col = 34},{<unknown>, line = 41, col = 35}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 41, col = 36},{<unknown>, line = 41, col = 37}) [(VarName (fromList [("msak",[])]) "k",[])]])])))) (Var (fromList []) ({<unknown>, line = 41, col = 40},{<unknown>, line = 41, col = 42}) [(VarName (fromList [("msak",[])]) "dy",[])]))) (NullStmt (fromList []) ({<unknown>, line = 42, col = 6},{<unknown>, line = 42, col = 6}))))) (NullStmt (fromList []) ({<unknown>, line = 43, col = 6},{<unknown>, line = 43, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 80, col = 6}) (For (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 63, col = 6}) (VarName (fromList [("msak",[])]) "term3_F4_cas") (Con (fromList []) ({<unknown>, line = 44, col = 7},{<unknown>, line = 44, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 44, col = 9},{<unknown>, line = 44, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 44, col = 11},{<unknown>, line = 44, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 63, col = 6}) (For (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 62, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 45, col = 7},{<unknown>, line = 45, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 45, col = 9},{<unknown>, line = 45, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 45, col = 11},{<unknown>, line = 45, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 46, col = 13}) (Var (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 46, col = 13}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 46, col = 3},{<unknown>, line = 46, col = 4}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 46, col = 5},{<unknown>, line = 46, col = 6}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 46, col = 10},{<unknown>, line = 46, col = 13}) "0.0")) (FSeq (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 47, col = 11}) (Var (fromList []) ({<unknown>, line = 47, col = 0},{<unknown>, line = 47, col = 3}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 47, col = 5},{<unknown>, line = 47, col = 11}) [(VarName (fromList [("msak",[])]) "u",[Var (fromList []) ({<unknown>, line = 47, col = 7},{<unknown>, line = 47, col = 8}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 47, col = 9},{<unknown>, line = 47, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 48, col = 13}) (Var (fromList []) ({<unknown>, line = 48, col = 0},{<unknown>, line = 48, col = 4}) [(VarName (fromList []) "duu",[])]) (Var (fromList []) ({<unknown>, line = 48, col = 6},{<unknown>, line = 48, col = 13}) [(VarName (fromList []) "du",[Var (fromList []) ({<unknown>, line = 48, col = 9},{<unknown>, line = 48, col = 10}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 48, col = 11},{<unknown>, line = 48, col = 12}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 49, col = 0},{<unknown>, line = 62, col = 6}) (If (fromList []) ({<unknown>, line = 49, col = 0},{<unknown>, line = 53, col = 6}) (Bin (fromList []) ({<unknown>, line = 49, col = 3},{<unknown>, line = 49, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 49, col = 3},{<unknown>, line = 49, col = 11}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 49, col = 7},{<unknown>, line = 49, col = 8}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 49, col = 9},{<unknown>, line = 49, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 49, col = 13},{<unknown>, line = 49, col = 14}) "1")) (If (fromList []) ({<unknown>, line = 50, col = 2},{<unknown>, line = 50, col = 53}) (Bin (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 35}) (Or (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 50, col = 5},{<unknown>, line = 50, col = 21}) (Bin (fromList []) ({<unknown>, line = 50, col = 6},{<unknown>, line = 50, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 6},{<unknown>, line = 50, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 50, col = 10},{<unknown>, line = 50, col = 11}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 50, col = 12},{<unknown>, line = 50, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 12},{<unknown>, line = 50, col = 13}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 14},{<unknown>, line = 50, col = 15}) "1")])]) (Con (fromList []) ({<unknown>, line = 50, col = 18},{<unknown>, line = 50, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 50, col = 26},{<unknown>, line = 50, col = 35}) (Bin (fromList []) ({<unknown>, line = 50, col = 27},{<unknown>, line = 50, col = 34}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 27},{<unknown>, line = 50, col = 30}) [(VarName (fromList []) "duu",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 31},{<unknown>, line = 50, col = 34}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 50, col = 37},{<unknown>, line = 50, col = 53}) (Var (fromList []) ({<unknown>, line = 50, col = 37},{<unknown>, line = 50, col = 53}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 50, col = 40},{<unknown>, line = 50, col = 41}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 50, col = 42},{<unknown>, line = 50, col = 43}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 50, col = 47},{<unknown>, line = 50, col = 53}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 50, col = 47},{<unknown>, line = 50, col = 49}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 50, col = 50},{<unknown>, line = 50, col = 53}) [(VarName (fromList []) "duu",[])]))) [] Nothing) [] (Just (If (fromList []) ({<unknown>, line = 52, col = 2},{<unknown>, line = 52, col = 54}) (Bin (fromList []) ({<unknown>, line = 52, col = 5},{<unknown>, line = 52, col = 36}) (And (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 52, col = 5},{<unknown>, line = 52, col = 21}) (Bin (fromList []) ({<unknown>, line = 52, col = 6},{<unknown>, line = 52, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 6},{<unknown>, line = 52, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 52, col = 10},{<unknown>, line = 52, col = 11}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 52, col = 12},{<unknown>, line = 52, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 12},{<unknown>, line = 52, col = 13}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 52, col = 14},{<unknown>, line = 52, col = 15}) "1")])]) (Con (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 52, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 52, col = 27},{<unknown>, line = 52, col = 36}) (Bin (fromList []) ({<unknown>, line = 52, col = 28},{<unknown>, line = 52, col = 35}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 28},{<unknown>, line = 52, col = 31}) [(VarName (fromList []) "duu",[])]) (Con (fromList []) ({<unknown>, line = 52, col = 32},{<unknown>, line = 52, col = 35}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 52, col = 38},{<unknown>, line = 52, col = 54}) (Var (fromList []) ({<unknown>, line = 52, col = 38},{<unknown>, line = 52, col = 54}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 52, col = 41},{<unknown>, line = 52, col = 42}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 52, col = 43},{<unknown>, line = 52, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 52, col = 48},{<unknown>, line = 52, col = 54}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 52, col = 48},{<unknown>, line = 52, col = 50}) [(VarName (fromList []) "uu",[])]) (Var (fromList []) ({<unknown>, line = 52, col = 51},{<unknown>, line = 52, col = 54}) [(VarName (fromList []) "duu",[])]))) [] Nothing))) (FSeq (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 54, col = 11}) (Var (fromList []) ({<unknown>, line = 54, col = 0},{<unknown>, line = 54, col = 3}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 54, col = 5},{<unknown>, line = 54, col = 11}) [(VarName (fromList [("msak",[])]) "v",[Var (fromList []) ({<unknown>, line = 54, col = 7},{<unknown>, line = 54, col = 8}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 54, col = 9},{<unknown>, line = 54, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 55, col = 13}) (Var (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 55, col = 4}) [(VarName (fromList []) "dvv",[])]) (Var (fromList []) ({<unknown>, line = 55, col = 6},{<unknown>, line = 55, col = 13}) [(VarName (fromList []) "dv",[Var (fromList []) ({<unknown>, line = 55, col = 9},{<unknown>, line = 55, col = 10}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 55, col = 11},{<unknown>, line = 55, col = 12}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 62, col = 6}) (Assg (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 56, col = 13}) (Var (fromList []) ({<unknown>, line = 56, col = 0},{<unknown>, line = 56, col = 13}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 56, col = 3},{<unknown>, line = 56, col = 4}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 56, col = 5},{<unknown>, line = 56, col = 6}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 56, col = 10},{<unknown>, line = 56, col = 13}) "0.0")) (FSeq (fromList []) ({<unknown>, line = 57, col = 0},{<unknown>, line = 62, col = 6}) (If (fromList []) ({<unknown>, line = 57, col = 0},{<unknown>, line = 61, col = 6}) (Bin (fromList []) ({<unknown>, line = 57, col = 3},{<unknown>, line = 57, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 57, col = 3},{<unknown>, line = 57, col = 11}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 57, col = 7},{<unknown>, line = 57, col = 8}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 57, col = 9},{<unknown>, line = 57, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 57, col = 13},{<unknown>, line = 57, col = 14}) "1")) (If (fromList []) ({<unknown>, line = 58, col = 2},{<unknown>, line = 58, col = 53}) (Bin (fromList []) ({<unknown>, line = 58, col = 5},{<unknown>, line = 58, col = 35}) (Or (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 58, col = 5},{<unknown>, line = 58, col = 21}) (Bin (fromList []) ({<unknown>, line = 58, col = 6},{<unknown>, line = 58, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 6},{<unknown>, line = 58, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 58, col = 10},{<unknown>, line = 58, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 10},{<unknown>, line = 58, col = 11}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 58, col = 12},{<unknown>, line = 58, col = 13}) "1"),Var (fromList []) ({<unknown>, line = 58, col = 14},{<unknown>, line = 58, col = 15}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 58, col = 18},{<unknown>, line = 58, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 58, col = 26},{<unknown>, line = 58, col = 35}) (Bin (fromList []) ({<unknown>, line = 58, col = 27},{<unknown>, line = 58, col = 34}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 27},{<unknown>, line = 58, col = 30}) [(VarName (fromList []) "dvv",[])]) (Con (fromList []) ({<unknown>, line = 58, col = 31},{<unknown>, line = 58, col = 34}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 58, col = 37},{<unknown>, line = 58, col = 53}) (Var (fromList []) ({<unknown>, line = 58, col = 37},{<unknown>, line = 58, col = 53}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 58, col = 40},{<unknown>, line = 58, col = 41}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 58, col = 42},{<unknown>, line = 58, col = 43}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 58, col = 47},{<unknown>, line = 58, col = 53}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 58, col = 47},{<unknown>, line = 58, col = 49}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 58, col = 50},{<unknown>, line = 58, col = 53}) [(VarName (fromList []) "dvv",[])]))) [] Nothing) [] (Just (If (fromList []) ({<unknown>, line = 60, col = 2},{<unknown>, line = 60, col = 54}) (Bin (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 36}) (And (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 21}) (Bin (fromList []) ({<unknown>, line = 60, col = 6},{<unknown>, line = 60, col = 19}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 6},{<unknown>, line = 60, col = 16}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 60, col = 10},{<unknown>, line = 60, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 10},{<unknown>, line = 60, col = 11}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 60, col = 12},{<unknown>, line = 60, col = 13}) "1"),Var (fromList []) ({<unknown>, line = 60, col = 14},{<unknown>, line = 60, col = 15}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 60, col = 18},{<unknown>, line = 60, col = 19}) "1"))) (ParenthesizedExpr (fromList []) ({<unknown>, line = 60, col = 27},{<unknown>, line = 60, col = 36}) (Bin (fromList []) ({<unknown>, line = 60, col = 28},{<unknown>, line = 60, col = 35}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 28},{<unknown>, line = 60, col = 31}) [(VarName (fromList []) "dvv",[])]) (Con (fromList []) ({<unknown>, line = 60, col = 32},{<unknown>, line = 60, col = 35}) "0.0")))) (Assg (fromList []) ({<unknown>, line = 60, col = 38},{<unknown>, line = 60, col = 54}) (Var (fromList []) ({<unknown>, line = 60, col = 38},{<unknown>, line = 60, col = 54}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 60, col = 41},{<unknown>, line = 60, col = 42}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 60, col = 43},{<unknown>, line = 60, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 60, col = 48},{<unknown>, line = 60, col = 54}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 60, col = 48},{<unknown>, line = 60, col = 50}) [(VarName (fromList []) "vv",[])]) (Var (fromList []) ({<unknown>, line = 60, col = 51},{<unknown>, line = 60, col = 54}) [(VarName (fromList []) "dvv",[])]))) [] Nothing))) (NullStmt (fromList []) ({<unknown>, line = 62, col = 6},{<unknown>, line = 62, col = 6}))))))))))) (NullStmt (fromList []) ({<unknown>, line = 63, col = 6},{<unknown>, line = 63, col = 6})))) (For (fromList []) ({<unknown>, line = 64, col = 0},{<unknown>, line = 80, col = 6}) (VarName (fromList [("msak",[])]) "term3_F4_cas") (Con (fromList []) ({<unknown>, line = 64, col = 7},{<unknown>, line = 64, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 64, col = 9},{<unknown>, line = 64, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 64, col = 11},{<unknown>, line = 64, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 80, col = 6}) (For (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 79, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 65, col = 7},{<unknown>, line = 65, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 65, col = 9},{<unknown>, line = 65, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 65, col = 11},{<unknown>, line = 65, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 66, col = 41}) (Var (fromList []) ({<unknown>, line = 66, col = 2},{<unknown>, line = 66, col = 6}) [(VarName (fromList []) "hep",[])]) (Bin (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 41}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 66, col = 8},{<unknown>, line = 66, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 66, col = 12},{<unknown>, line = 66, col = 34}) (Bin (fromList []) ({<unknown>, line = 66, col = 13},{<unknown>, line = 66, col = 33}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 66, col = 13},{<unknown>, line = 66, col = 20}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 66, col = 16},{<unknown>, line = 66, col = 17}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 66, col = 18},{<unknown>, line = 66, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 66, col = 21},{<unknown>, line = 66, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 66, col = 25},{<unknown>, line = 66, col = 32}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 66, col = 28},{<unknown>, line = 66, col = 29}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 66, col = 30},{<unknown>, line = 66, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 66, col = 35},{<unknown>, line = 66, col = 41}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 66, col = 37},{<unknown>, line = 66, col = 38}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 66, col = 39},{<unknown>, line = 66, col = 40}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 67, col = 43}) (Var (fromList []) ({<unknown>, line = 67, col = 2},{<unknown>, line = 67, col = 6}) [(VarName (fromList []) "hen",[])]) (Bin (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 43}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 67, col = 8},{<unknown>, line = 67, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 67, col = 12},{<unknown>, line = 67, col = 34}) (Bin (fromList []) ({<unknown>, line = 67, col = 13},{<unknown>, line = 67, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 67, col = 13},{<unknown>, line = 67, col = 20}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 67, col = 16},{<unknown>, line = 67, col = 17}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 67, col = 18},{<unknown>, line = 67, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 67, col = 21},{<unknown>, line = 67, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 67, col = 25},{<unknown>, line = 67, col = 32}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 67, col = 28},{<unknown>, line = 67, col = 29}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 67, col = 30},{<unknown>, line = 67, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 67, col = 35},{<unknown>, line = 67, col = 43}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 67, col = 37},{<unknown>, line = 67, col = 38}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 67, col = 39},{<unknown>, line = 67, col = 42}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 67, col = 39},{<unknown>, line = 67, col = 40}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 67, col = 41},{<unknown>, line = 67, col = 42}) "1")])]))) (FSeq (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 68, col = 15}) (Var (fromList []) ({<unknown>, line = 68, col = 2},{<unknown>, line = 68, col = 6}) [(VarName (fromList []) "hue",[])]) (Bin (fromList []) ({<unknown>, line = 68, col = 8},{<unknown>, line = 68, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 68, col = 8},{<unknown>, line = 68, col = 11}) [(VarName (fromList []) "hep",[])]) (Var (fromList []) ({<unknown>, line = 68, col = 12},{<unknown>, line = 68, col = 15}) [(VarName (fromList []) "hen",[])]))) (FSeq (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 69, col = 47}) (Var (fromList []) ({<unknown>, line = 69, col = 2},{<unknown>, line = 69, col = 6}) [(VarName (fromList []) "hwp",[])]) (Bin (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 47}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 69, col = 8},{<unknown>, line = 69, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 69, col = 12},{<unknown>, line = 69, col = 38}) (Bin (fromList []) ({<unknown>, line = 69, col = 13},{<unknown>, line = 69, col = 37}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 13},{<unknown>, line = 69, col = 22}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 69, col = 16},{<unknown>, line = 69, col = 17}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 69, col = 18},{<unknown>, line = 69, col = 21}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 18},{<unknown>, line = 69, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 20},{<unknown>, line = 69, col = 21}) "1")])]) (Var (fromList []) ({<unknown>, line = 69, col = 23},{<unknown>, line = 69, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 69, col = 27},{<unknown>, line = 69, col = 36}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 69, col = 30},{<unknown>, line = 69, col = 31}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 69, col = 32},{<unknown>, line = 69, col = 35}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 32},{<unknown>, line = 69, col = 33}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 34},{<unknown>, line = 69, col = 35}) "1")])]])])))) (Var (fromList []) ({<unknown>, line = 69, col = 39},{<unknown>, line = 69, col = 47}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 69, col = 41},{<unknown>, line = 69, col = 42}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 69, col = 43},{<unknown>, line = 69, col = 46}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 43},{<unknown>, line = 69, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 69, col = 45},{<unknown>, line = 69, col = 46}) "1")])]))) (FSeq (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 45}) (Var (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 6}) [(VarName (fromList []) "hwn",[])]) (Bin (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 45}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 70, col = 8},{<unknown>, line = 70, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 70, col = 12},{<unknown>, line = 70, col = 38}) (Bin (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 37}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 22}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 70, col = 16},{<unknown>, line = 70, col = 17}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 21}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 70, col = 20},{<unknown>, line = 70, col = 21}) "1")])]) (Var (fromList []) ({<unknown>, line = 70, col = 23},{<unknown>, line = 70, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 70, col = 27},{<unknown>, line = 70, col = 36}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 70, col = 30},{<unknown>, line = 70, col = 31}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 70, col = 32},{<unknown>, line = 70, col = 35}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 70, col = 32},{<unknown>, line = 70, col = 33}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 70, col = 34},{<unknown>, line = 70, col = 35}) "1")])]])])))) (Var (fromList []) ({<unknown>, line = 70, col = 39},{<unknown>, line = 70, col = 45}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 70, col = 41},{<unknown>, line = 70, col = 42}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 70, col = 43},{<unknown>, line = 70, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 15}) (Var (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 6}) [(VarName (fromList []) "huw",[])]) (Bin (fromList []) ({<unknown>, line = 71, col = 8},{<unknown>, line = 71, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 71, col = 8},{<unknown>, line = 71, col = 11}) [(VarName (fromList []) "hwp",[])]) (Var (fromList []) ({<unknown>, line = 71, col = 12},{<unknown>, line = 71, col = 15}) [(VarName (fromList []) "hwn",[])]))) (FSeq (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 72, col = 41}) (Var (fromList []) ({<unknown>, line = 72, col = 2},{<unknown>, line = 72, col = 6}) [(VarName (fromList []) "hnp",[])]) (Bin (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 41}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 72, col = 8},{<unknown>, line = 72, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 72, col = 12},{<unknown>, line = 72, col = 34}) (Bin (fromList []) ({<unknown>, line = 72, col = 13},{<unknown>, line = 72, col = 33}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 72, col = 13},{<unknown>, line = 72, col = 20}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 72, col = 16},{<unknown>, line = 72, col = 17}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 72, col = 18},{<unknown>, line = 72, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 72, col = 21},{<unknown>, line = 72, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 72, col = 25},{<unknown>, line = 72, col = 32}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 72, col = 28},{<unknown>, line = 72, col = 29}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 72, col = 30},{<unknown>, line = 72, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 72, col = 35},{<unknown>, line = 72, col = 41}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 72, col = 37},{<unknown>, line = 72, col = 38}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 72, col = 39},{<unknown>, line = 72, col = 40}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 73, col = 43}) (Var (fromList []) ({<unknown>, line = 73, col = 2},{<unknown>, line = 73, col = 6}) [(VarName (fromList []) "hnn",[])]) (Bin (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 43}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 34}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 73, col = 8},{<unknown>, line = 73, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 73, col = 12},{<unknown>, line = 73, col = 34}) (Bin (fromList []) ({<unknown>, line = 73, col = 13},{<unknown>, line = 73, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 73, col = 13},{<unknown>, line = 73, col = 20}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 73, col = 16},{<unknown>, line = 73, col = 17}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 73, col = 18},{<unknown>, line = 73, col = 19}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 73, col = 21},{<unknown>, line = 73, col = 33}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 73, col = 25},{<unknown>, line = 73, col = 32}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 73, col = 28},{<unknown>, line = 73, col = 29}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 73, col = 30},{<unknown>, line = 73, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 73, col = 35},{<unknown>, line = 73, col = 43}) [(VarName (fromList [("msak",[])]) "h",[Bin (fromList []) ({<unknown>, line = 73, col = 37},{<unknown>, line = 73, col = 40}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 73, col = 37},{<unknown>, line = 73, col = 38}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 73, col = 39},{<unknown>, line = 73, col = 40}) "1"),Var (fromList []) ({<unknown>, line = 73, col = 41},{<unknown>, line = 73, col = 42}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 74, col = 15}) (Var (fromList []) ({<unknown>, line = 74, col = 2},{<unknown>, line = 74, col = 6}) [(VarName (fromList []) "hvn",[])]) (Bin (fromList []) ({<unknown>, line = 74, col = 8},{<unknown>, line = 74, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 74, col = 8},{<unknown>, line = 74, col = 11}) [(VarName (fromList []) "hnp",[])]) (Var (fromList []) ({<unknown>, line = 74, col = 12},{<unknown>, line = 74, col = 15}) [(VarName (fromList []) "hnn",[])]))) (FSeq (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 75, col = 47}) (Var (fromList []) ({<unknown>, line = 75, col = 2},{<unknown>, line = 75, col = 6}) [(VarName (fromList []) "hsp",[])]) (Bin (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 47}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 75, col = 8},{<unknown>, line = 75, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 75, col = 12},{<unknown>, line = 75, col = 38}) (Bin (fromList []) ({<unknown>, line = 75, col = 13},{<unknown>, line = 75, col = 37}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 13},{<unknown>, line = 75, col = 22}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 75, col = 16},{<unknown>, line = 75, col = 19}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 16},{<unknown>, line = 75, col = 17}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 18},{<unknown>, line = 75, col = 19}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 20},{<unknown>, line = 75, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 75, col = 23},{<unknown>, line = 75, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 75, col = 27},{<unknown>, line = 75, col = 36}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 75, col = 30},{<unknown>, line = 75, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 30},{<unknown>, line = 75, col = 31}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 32},{<unknown>, line = 75, col = 33}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 34},{<unknown>, line = 75, col = 35}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 75, col = 39},{<unknown>, line = 75, col = 47}) [(VarName (fromList [("msak",[])]) "h",[Bin (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 44}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 42}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 75, col = 44}) "1"),Var (fromList []) ({<unknown>, line = 75, col = 45},{<unknown>, line = 75, col = 46}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 76, col = 45}) (Var (fromList []) ({<unknown>, line = 76, col = 2},{<unknown>, line = 76, col = 6}) [(VarName (fromList []) "hsn",[])]) (Bin (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 45}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 38}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 76, col = 8},{<unknown>, line = 76, col = 11}) "0.5") (ParenthesizedExpr (fromList []) ({<unknown>, line = 76, col = 12},{<unknown>, line = 76, col = 38}) (Bin (fromList []) ({<unknown>, line = 76, col = 13},{<unknown>, line = 76, col = 37}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 13},{<unknown>, line = 76, col = 22}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 76, col = 16},{<unknown>, line = 76, col = 19}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 16},{<unknown>, line = 76, col = 17}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 18},{<unknown>, line = 76, col = 19}) "1"),Var (fromList []) ({<unknown>, line = 76, col = 20},{<unknown>, line = 76, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 76, col = 23},{<unknown>, line = 76, col = 37}) [(VarName (fromList []) "abs",[Var (fromList []) ({<unknown>, line = 76, col = 27},{<unknown>, line = 76, col = 36}) [(VarName (fromList [("msak",[])]) "vn",[Bin (fromList []) ({<unknown>, line = 76, col = 30},{<unknown>, line = 76, col = 33}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 30},{<unknown>, line = 76, col = 31}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 32},{<unknown>, line = 76, col = 33}) "1"),Var (fromList []) ({<unknown>, line = 76, col = 34},{<unknown>, line = 76, col = 35}) [(VarName (fromList [("msak",[])]) "k",[])]])]])])))) (Var (fromList []) ({<unknown>, line = 76, col = 39},{<unknown>, line = 76, col = 45}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 76, col = 41},{<unknown>, line = 76, col = 42}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 76, col = 43},{<unknown>, line = 76, col = 44}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 77, col = 15}) (Var (fromList []) ({<unknown>, line = 77, col = 2},{<unknown>, line = 77, col = 6}) [(VarName (fromList []) "hvs",[])]) (Bin (fromList []) ({<unknown>, line = 77, col = 8},{<unknown>, line = 77, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 77, col = 8},{<unknown>, line = 77, col = 11}) [(VarName (fromList []) "hsp",[])]) (Var (fromList []) ({<unknown>, line = 77, col = 12},{<unknown>, line = 77, col = 15}) [(VarName (fromList []) "hsn",[])]))) (FSeq (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 79, col = 6}) (Assg (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 78, col = 54}) (Var (fromList []) ({<unknown>, line = 78, col = 2},{<unknown>, line = 78, col = 54}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 78, col = 7},{<unknown>, line = 78, col = 8}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 78, col = 9},{<unknown>, line = 78, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 54}) (Minus (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 38}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 14},{<unknown>, line = 78, col = 22}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 78, col = 18},{<unknown>, line = 78, col = 19}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 78, col = 20},{<unknown>, line = 78, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 38}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 35}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 23},{<unknown>, line = 78, col = 25}) [(VarName (fromList [("msak",[])]) "dt",[])]) (ParenthesizedExpr (fromList []) ({<unknown>, line = 78, col = 26},{<unknown>, line = 78, col = 35}) (Bin (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 34}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 30}) [(VarName (fromList []) "hue",[])]) (Var (fromList []) ({<unknown>, line = 78, col = 31},{<unknown>, line = 78, col = 34}) [(VarName (fromList []) "huw",[])])))) (Var (fromList []) ({<unknown>, line = 78, col = 36},{<unknown>, line = 78, col = 38}) [(VarName (fromList [("msak",[])]) "dx",[])]))) (Bin (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 54}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 51}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 39},{<unknown>, line = 78, col = 41}) [(VarName (fromList [("msak",[])]) "dt",[])]) (ParenthesizedExpr (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 78, col = 51}) (Bin (fromList []) ({<unknown>, line = 78, col = 43},{<unknown>, line = 78, col = 50}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 43},{<unknown>, line = 78, col = 46}) [(VarName (fromList []) "hvn",[])]) (Var (fromList []) ({<unknown>, line = 78, col = 47},{<unknown>, line = 78, col = 50}) [(VarName (fromList []) "hvs",[])])))) (Var (fromList []) ({<unknown>, line = 78, col = 52},{<unknown>, line = 78, col = 54}) [(VarName (fromList [("msak",[])]) "dy",[])])))) (NullStmt (fromList []) ({<unknown>, line = 79, col = 6},{<unknown>, line = 79, col = 6})))))))))))))))) (NullStmt (fromList []) ({<unknown>, line = 80, col = 6},{<unknown>, line = 80, col = 6})))))) (FSeq (fromList []) (No source location,No source location) (For (fromList []) ({<unknown>, line = 15, col = 0},{<unknown>, line = 26, col = 6}) (VarName (fromList [("msak",[])]) "term3_F4_cas") (Con (fromList []) ({<unknown>, line = 15, col = 7},{<unknown>, line = 15, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 15, col = 9},{<unknown>, line = 15, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 15, col = 11},{<unknown>, line = 15, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 16, col = 0},{<unknown>, line = 26, col = 6}) (For (fromList []) ({<unknown>, line = 16, col = 0},{<unknown>, line = 25, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 16, col = 7},{<unknown>, line = 16, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 16, col = 9},{<unknown>, line = 16, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 11},{<unknown>, line = 16, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 17, col = 0},{<unknown>, line = 25, col = 6}) (If (fromList []) ({<unknown>, line = 17, col = 0},{<unknown>, line = 24, col = 6}) (Bin (fromList []) ({<unknown>, line = 17, col = 3},{<unknown>, line = 17, col = 14}) (RelEQ (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 3},{<unknown>, line = 17, col = 11}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 17, col = 7},{<unknown>, line = 17, col = 8}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 17, col = 9},{<unknown>, line = 17, col = 10}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 17, col = 13},{<unknown>, line = 17, col = 14}) "1")) (FSeq (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 18, col = 81}) (Var (fromList []) ({<unknown>, line = 18, col = 2},{<unknown>, line = 18, col = 8}) [(VarName (fromList []) "term1",[])]) (Bin (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 81}) (Mul (fromList [])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 71}) (Bin (fromList []) ({<unknown>, line = 18, col = 11},{<unknown>, line = 18, col = 70}) (Minus (fromList [])) (Con (fromList []) ({<unknown>, line = 18, col = 11},{<unknown>, line = 18, col = 14}) "1.0") (Bin (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 70}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 23}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 18, col = 15},{<unknown>, line = 18, col = 19}) "0.25") (Var (fromList []) ({<unknown>, line = 18, col = 20},{<unknown>, line = 18, col = 23}) [(VarName (fromList [("msak",[])]) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 70}) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 69}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 58}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 46}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 25},{<unknown>, line = 18, col = 35}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 34}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 32}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 33},{<unknown>, line = 18, col = 34}) "1")])]) (Var (fromList []) ({<unknown>, line = 18, col = 36},{<unknown>, line = 18, col = 46}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 18, col = 40},{<unknown>, line = 18, col = 41}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 18, col = 42},{<unknown>, line = 18, col = 45}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 42},{<unknown>, line = 18, col = 43}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 44},{<unknown>, line = 18, col = 45}) "1")])])) (Var (fromList []) ({<unknown>, line = 18, col = 48},{<unknown>, line = 18, col = 58}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 18, col = 52},{<unknown>, line = 18, col = 55}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 52},{<unknown>, line = 18, col = 53}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 54},{<unknown>, line = 18, col = 55}) "1"),Var (fromList []) ({<unknown>, line = 18, col = 56},{<unknown>, line = 18, col = 57}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (Var (fromList []) ({<unknown>, line = 18, col = 59},{<unknown>, line = 18, col = 69}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 18, col = 63},{<unknown>, line = 18, col = 66}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 63},{<unknown>, line = 18, col = 64}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 65},{<unknown>, line = 18, col = 66}) "1"),Var (fromList []) ({<unknown>, line = 18, col = 67},{<unknown>, line = 18, col = 68}) [(VarName (fromList [("msak",[])]) "k",[])]])])))))) (Var (fromList []) ({<unknown>, line = 18, col = 72},{<unknown>, line = 18, col = 81}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 18, col = 77},{<unknown>, line = 18, col = 78}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 18, col = 79},{<unknown>, line = 18, col = 80}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 19, col = 66}) (Var (fromList []) ({<unknown>, line = 19, col = 2},{<unknown>, line = 19, col = 8}) [(VarName (fromList []) "term2",[])]) (Bin (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 66}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 18}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 14}) "0.25") (Var (fromList []) ({<unknown>, line = 19, col = 15},{<unknown>, line = 19, col = 18}) [(VarName (fromList [("msak",[])]) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 19, col = 19},{<unknown>, line = 19, col = 66}) (Bin (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 65}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 42}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 20},{<unknown>, line = 19, col = 30}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 25}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 19, col = 26},{<unknown>, line = 19, col = 29}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 26},{<unknown>, line = 19, col = 27}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 28},{<unknown>, line = 19, col = 29}) "1")])]) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 42}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 19, col = 36},{<unknown>, line = 19, col = 37}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 19, col = 38},{<unknown>, line = 19, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 38},{<unknown>, line = 19, col = 39}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 41}) "1")])])) (Bin (fromList []) ({<unknown>, line = 19, col = 43},{<unknown>, line = 19, col = 65}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 43},{<unknown>, line = 19, col = 53}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 19, col = 47},{<unknown>, line = 19, col = 48}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 19, col = 49},{<unknown>, line = 19, col = 52}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 49},{<unknown>, line = 19, col = 50}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 51},{<unknown>, line = 19, col = 52}) "1")])]) (Var (fromList []) ({<unknown>, line = 19, col = 54},{<unknown>, line = 19, col = 65}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 19, col = 59},{<unknown>, line = 19, col = 60}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Bin (fromList []) ({<unknown>, line = 19, col = 61},{<unknown>, line = 19, col = 64}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 61},{<unknown>, line = 19, col = 62}) [(VarName (fromList [("msak",[])]) "k",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 63},{<unknown>, line = 19, col = 64}) "1")])])))))) (FSeq (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 21, col = 30}) (Assg (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 20, col = 66}) (Var (fromList []) ({<unknown>, line = 20, col = 2},{<unknown>, line = 20, col = 8}) [(VarName (fromList []) "term3",[])]) (Bin (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 66}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 18}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 20, col = 10},{<unknown>, line = 20, col = 14}) "0.25") (Var (fromList []) ({<unknown>, line = 20, col = 15},{<unknown>, line = 20, col = 18}) [(VarName (fromList [("msak",[])]) "eps",[])])) (ParenthesizedExpr (fromList []) ({<unknown>, line = 20, col = 19},{<unknown>, line = 20, col = 66}) (Bin (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 65}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 42}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 20},{<unknown>, line = 20, col = 30}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 27}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 24},{<unknown>, line = 20, col = 25}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 26},{<unknown>, line = 20, col = 27}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 28},{<unknown>, line = 20, col = 29}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 20, col = 31},{<unknown>, line = 20, col = 42}) [(VarName (fromList [("msak",[])]) "etan",[Bin (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 39}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 36},{<unknown>, line = 20, col = 37}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 38},{<unknown>, line = 20, col = 39}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 40},{<unknown>, line = 20, col = 41}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (Bin (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 65}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 53}) [(VarName (fromList [("msak",[])]) "wet",[Bin (fromList []) ({<unknown>, line = 20, col = 47},{<unknown>, line = 20, col = 50}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 47},{<unknown>, line = 20, col = 48}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 49},{<unknown>, line = 20, col = 50}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 51},{<unknown>, line = 20, col = 52}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 20, col = 54},{<unknown>, line = 20, col = 65}) [(VarName (fromList [("msak",[])]) "etan",[Bin (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 62}) (Minus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 59},{<unknown>, line = 20, col = 60}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 61},{<unknown>, line = 20, col = 62}) "1"),Var (fromList []) ({<unknown>, line = 20, col = 63},{<unknown>, line = 20, col = 64}) [(VarName (fromList [("msak",[])]) "k",[])]])])))))) (Assg (fromList []) ({<unknown>, line = 21, col = 2},{<unknown>, line = 21, col = 30}) (Var (fromList []) ({<unknown>, line = 21, col = 2},{<unknown>, line = 21, col = 30}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 21, col = 6},{<unknown>, line = 21, col = 7}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 21, col = 8},{<unknown>, line = 21, col = 9}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 30}) (Plus (fromList [])) (Bin (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 24}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 21, col = 13},{<unknown>, line = 21, col = 18}) [(VarName (fromList []) "term1",[])]) (Var (fromList []) ({<unknown>, line = 21, col = 19},{<unknown>, line = 21, col = 24}) [(VarName (fromList []) "term2",[])])) (Var (fromList []) ({<unknown>, line = 21, col = 25},{<unknown>, line = 21, col = 30}) [(VarName (fromList []) "term3",[])])))))) [] (Just (Assg (fromList []) ({<unknown>, line = 23, col = 2},{<unknown>, line = 23, col = 22}) (Var (fromList []) ({<unknown>, line = 23, col = 2},{<unknown>, line = 23, col = 22}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 23, col = 6},{<unknown>, line = 23, col = 7}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 9}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 22}) [(VarName (fromList [("msak",[])]) "etan",[Var (fromList []) ({<unknown>, line = 23, col = 18},{<unknown>, line = 23, col = 19}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 23, col = 20},{<unknown>, line = 23, col = 21}) [(VarName (fromList [("msak",[])]) "k",[])]])])))) (NullStmt (fromList []) ({<unknown>, line = 25, col = 6},{<unknown>, line = 25, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 26, col = 6},{<unknown>, line = 26, col = 6})))) (For (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 31, col = 6}) (VarName (fromList [("msak",[])]) "term3_F4_cas") (Con (fromList []) ({<unknown>, line = 23, col = 7},{<unknown>, line = 23, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 23, col = 9},{<unknown>, line = 23, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 23, col = 9},{<unknown>, line = 23, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 23, col = 12},{<unknown>, line = 23, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 31, col = 6}) (For (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 30, col = 6}) (VarName (fromList [("msak",[])]) "k") (Con (fromList []) ({<unknown>, line = 24, col = 7},{<unknown>, line = 24, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 24, col = 12},{<unknown>, line = 24, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 24, col = 13},{<unknown>, line = 24, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 25, col = 32}) (Var (fromList []) ({<unknown>, line = 25, col = 2},{<unknown>, line = 25, col = 32}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 25, col = 4},{<unknown>, line = 25, col = 5}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 25, col = 6},{<unknown>, line = 25, col = 7}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Bin (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 32}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 25, col = 11},{<unknown>, line = 25, col = 22}) [(VarName (fromList [("msak",[])]) "hzero",[Var (fromList []) ({<unknown>, line = 25, col = 17},{<unknown>, line = 25, col = 18}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 25, col = 19},{<unknown>, line = 25, col = 20}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 25, col = 24},{<unknown>, line = 25, col = 32}) [(VarName (fromList [("msak",[])]) "eta",[Var (fromList []) ({<unknown>, line = 25, col = 28},{<unknown>, line = 25, col = 29}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 25, col = 30},{<unknown>, line = 25, col = 31}) [(VarName (fromList [("msak",[])]) "k",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 26, col = 14}) (Var (fromList []) ({<unknown>, line = 26, col = 2},{<unknown>, line = 26, col = 14}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 26, col = 6},{<unknown>, line = 26, col = 7}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 9}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 26, col = 13},{<unknown>, line = 26, col = 14}) "1")) (FSeq (fromList []) ({<unknown>, line = 27, col = 2},{<unknown>, line = 30, col = 6}) (If (fromList []) ({<unknown>, line = 27, col = 2},{<unknown>, line = 27, col = 31}) (Bin (fromList []) ({<unknown>, line = 27, col = 6},{<unknown>, line = 27, col = 17}) (RelLT (fromList [])) (Var (fromList []) ({<unknown>, line = 27, col = 6},{<unknown>, line = 27, col = 12}) [(VarName (fromList [("msak",[])]) "h",[Var (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 9}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 27, col = 10},{<unknown>, line = 27, col = 11}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 27, col = 13},{<unknown>, line = 27, col = 17}) [(VarName (fromList [("msak",[])]) "hmin",[])])) (Assg (fromList []) ({<unknown>, line = 27, col = 19},{<unknown>, line = 27, col = 31}) (Var (fromList []) ({<unknown>, line = 27, col = 19},{<unknown>, line = 27, col = 31}) [(VarName (fromList [("msak",[])]) "wet",[Var (fromList []) ({<unknown>, line = 27, col = 23},{<unknown>, line = 27, col = 24}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 27, col = 25},{<unknown>, line = 27, col = 26}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 27, col = 30},{<unknown>, line = 27, col = 31}) "0")) [] Nothing) (FSeq (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 28, col = 18}) (Var (fromList []) ({<unknown>, line = 28, col = 2},{<unknown>, line = 28, col = 18}) [(VarName (fromList [("msak",[])]) "u",[Var (fromList []) ({<unknown>, line = 28, col = 4},{<unknown>, line = 28, col = 5}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 28, col = 6},{<unknown>, line = 28, col = 7}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 18}) [(VarName (fromList [("msak",[])]) "un",[Var (fromList []) ({<unknown>, line = 28, col = 14},{<unknown>, line = 28, col = 15}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 28, col = 16},{<unknown>, line = 28, col = 17}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (FSeq (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 30, col = 6}) (Assg (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 18}) (Var (fromList []) ({<unknown>, line = 29, col = 2},{<unknown>, line = 29, col = 18}) [(VarName (fromList [("msak",[])]) "v",[Var (fromList []) ({<unknown>, line = 29, col = 4},{<unknown>, line = 29, col = 5}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 29, col = 6},{<unknown>, line = 29, col = 7}) [(VarName (fromList [("msak",[])]) "k",[])]])]) (Var (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 18}) [(VarName (fromList [("msak",[])]) "vn",[Var (fromList []) ({<unknown>, line = 29, col = 14},{<unknown>, line = 29, col = 15}) [(VarName (fromList [("msak",[])]) "term3_F4_cas",[])],Var (fromList []) ({<unknown>, line = 29, col = 16},{<unknown>, line = 29, col = 17}) [(VarName (fromList [("msak",[])]) "k",[])]])])) (NullStmt (fromList []) ({<unknown>, line = 30, col = 6},{<unknown>, line = 30, col = 6})))))))) (NullStmt (fromList []) ({<unknown>, line = 31, col = 6},{<unknown>, line = 31, col = 6})))))
bodies = 
    do term3_F4_cas = 1, ny, 1
        do k = 1, nx, 1
                du(term3_F4_cas,k) = -dt*g*(eta(term3_F4_cas,k+1)-eta(term3_F4_cas,k))/dx
                dv(term3_F4_cas,k) = -dt*g*(eta(term3_F4_cas+1,k)-eta(term3_F4_cas,k))/dy
        end do
    end do
    do term3_F4_cas = 1, ny, 1
        do k = 1, nx, 1
                un(term3_F4_cas,k) = 0.0
                uu = u(term3_F4_cas,k)
                duu = du(term3_F4_cas,k)
                if (wet(term3_F4_cas,k)==1) then
                                if ((wet(term3_F4_cas,k+1)==1) .or. (duu>0.0)) then
                                                                un(term3_F4_cas,k) = uu+duu
                                end if
                else
                                if ((wet(term3_F4_cas,k+1)==1) .and. (duu<0.0)) then
                                                                un(term3_F4_cas,k) = uu+duu
                                end if
                end if
                vv = v(term3_F4_cas,k)
                dvv = dv(term3_F4_cas,k)
                vn(term3_F4_cas,k) = 0.0
                if (wet(term3_F4_cas,k)==1) then
                                if ((wet(term3_F4_cas+1,k)==1) .or. (dvv>0.0)) then
                                                                vn(term3_F4_cas,k) = vv+dvv
                                end if
                else
                                if ((wet(term3_F4_cas+1,k)==1) .and. (dvv<0.0)) then
                                                                vn(term3_F4_cas,k) = vv+dvv
                                end if
                end if
        end do
    end do
    do term3_F4_cas = 1, ny, 1
        do k = 1, nx, 1
                hep = 0.5*(un(term3_F4_cas,k)+abs(un(term3_F4_cas,k)))*h(term3_F4_cas,k)
                hen = 0.5*(un(term3_F4_cas,k)-abs(un(term3_F4_cas,k)))*h(term3_F4_cas,k+1)
                hue = hep+hen
                hwp = 0.5*(un(term3_F4_cas,k-1)+abs(un(term3_F4_cas,k-1)))*h(term3_F4_cas,k-1)
                hwn = 0.5*(un(term3_F4_cas,k-1)-abs(un(term3_F4_cas,k-1)))*h(term3_F4_cas,k)
                huw = hwp+hwn
                hnp = 0.5*(vn(term3_F4_cas,k)+abs(vn(term3_F4_cas,k)))*h(term3_F4_cas,k)
                hnn = 0.5*(vn(term3_F4_cas,k)-abs(vn(term3_F4_cas,k)))*h(term3_F4_cas+1,k)
                hvn = hnp+hnn
                hsp = 0.5*(vn(term3_F4_cas-1,k)+abs(vn(term3_F4_cas-1,k)))*h(term3_F4_cas-1,k)
                hsn = 0.5*(vn(term3_F4_cas-1,k)-abs(vn(term3_F4_cas-1,k)))*h(term3_F4_cas,k)
                hvs = hsp+hsn
                etan(term3_F4_cas,k) = eta(term3_F4_cas,k)-dt*(hue-huw)/dx-dt*(hvn-hvs)/dy
        end do
    end do    do term3_F4_cas = 1, ny, 1
        do k = 1, nx, 1
                if (wet(term3_F4_cas,k)==1) then
                                term1 = (1.0-0.25*eps*(wet(term3_F4_cas,k+1)+wet(term3_F4_cas,k-1)+wet(term3_F4_cas+1,k)+wet(term3_F4_cas-1,k)))*etan(term3_F4_cas,k)
                                term2 = 0.25*eps*(wet(term3_F4_cas,k+1)*etan(term3_F4_cas,k+1)+wet(term3_F4_cas,k-1)*etan(term3_F4_cas,k-1))
                                term3 = 0.25*eps*(wet(term3_F4_cas+1,k)*etan(term3_F4_cas+1,k)+wet(term3_F4_cas-1,k)*etan(term3_F4_cas-1,k))
                                eta(term3_F4_cas,k) = term1+term2+term3
                else
                                eta(term3_F4_cas,k) = etan(term3_F4_cas,k)
                end if
        end do
    end do    do term3_F4_cas = 0, ny+1, 1
        do k = 0, nx+1, 1
                h(term3_F4_cas,k) = hzero(term3_F4_cas,k)+eta(term3_F4_cas,k)
                wet(term3_F4_cas,k) = 1
                if (h(term3_F4_cas,k)<hmin) then
                                wet(term3_F4_cas,k) = 0
                end if
                u(term3_F4_cas,k) = un(term3_F4_cas,k)
                v(term3_F4_cas,k) = vn(term3_F4_cas,k)
        end do
    end do


--------------------------------------------------------------------------------
dyn
--------------------------------------------------------------------------------
subroutine dyn(j,k,dx,g,eta,dt,dy,un,u,wet,v,vn,h,etan)
      integer(4), parameter :: ny = 500 
      integer(4), parameter :: nx = 500 
      integer :: j
      integer :: k
      real, intent(In) :: dx
      real, intent(In) :: g
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, intent(In) :: dt
      real, intent(In) :: dy
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: un
      real, dimension(0:ny+1,0:nx+1), intent(In) :: u
      integer, dimension(0:ny+1,0:nx+1), intent(In) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(In) :: v
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: vn
      real, dimension(0:ny+1,0:nx+1), intent(In) :: h
      real, dimension(0:ny+1,0:nx+1) :: etan
      real, dimension(0:ny+1,0:nx+1) :: du
      real, dimension(0:ny+1,0:nx+1) :: dv
      real :: uu
      real :: vv
      real :: duu
      real :: dvv
      real :: hue
      real :: huw
      real :: hwp
      real :: hwn
      real :: hen
      real :: hep
      real :: hvn
      real :: hvs
      real :: hsp
      real :: hsn
      real :: hnn
      real :: hnp
! OpenCLMap ( ["dt","g","dx","dy"],["du","dv"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["dt","g","dx","dy"],["du","dv"],["(k,1,500.0,1)"],[]) {
    du(j,k) = -dt*g*(eta(j,k+1)-eta(j,k))/dx
    dv(j,k) = -dt*g*(eta(j+1,k)-eta(j,k))/dy
    }
    }
! OpenCLMap ( ["u","du","wet","v","dv"],["un","vn"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["j","u","du","wet","v","dv"],["un","vn"],["(k,1,500.0,1)"],[]) {
    un(j,k) = 0.0
    uu = u(j,k)
    duu = du(j,k)
    if (wet(j,k)==1) then
        if ((wet(j,k+1)==1) .or. (duu>0.0)) then
                un(j,k) = uu+duu
        end if
    else
        if ((wet(j,k+1)==1) .and. (duu<0.0)) then
                un(j,k) = uu+duu
        end if
    end if
    vv = v(j,k)
    dvv = dv(j,k)
    vn(j,k) = 0.0
    if (wet(j,k)==1) then
        if ((wet(j+1,k)==1) .or. (dvv>0.0)) then
                vn(j,k) = vv+dvv
        end if
    else
        if ((wet(j+1,k)==1) .and. (dvv<0.0)) then
                vn(j,k) = vv+dvv
        end if
    end if
    }
    }
! OpenCLMap ( ["h","eta","dt","dx","dy"],["etan"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["j","h","eta","dt","dx","dy"],["etan"],["(k,1,500.0,1)"],[]) {
    hep = 0.5*(un(j,k)+abs(un(j,k)))*h(j,k)
    hen = 0.5*(un(j,k)-abs(un(j,k)))*h(j,k+1)
    hue = hep+hen
    hwp = 0.5*(un(j,k-1)+abs(un(j,k-1)))*h(j,k-1)
    hwn = 0.5*(un(j,k-1)-abs(un(j,k-1)))*h(j,k)
    huw = hwp+hwn
    hnp = 0.5*(vn(j,k)+abs(vn(j,k)))*h(j,k)
    hnn = 0.5*(vn(j,k)-abs(vn(j,k)))*h(j+1,k)
    hvn = hnp+hnn
    hsp = 0.5*(vn(j-1,k)+abs(vn(j-1,k)))*h(j-1,k)
    hsn = 0.5*(vn(j-1,k)-abs(vn(j-1,k)))*h(j,k)
    hvs = hsp+hsn
    etan(j,k) = eta(j,k)-dt*(hue-huw)/dx-dt*(hvn-hvs)/dy
    }
    }
end subroutine dyn

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
shapiro
--------------------------------------------------------------------------------
subroutine shapiro(j,k,wet,etan,eps,eta)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      integer, intent(InOut) :: j
      integer, intent(InOut) :: k
      integer, dimension(0:ny+1,0:nx+1), intent(In) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(In) :: etan
      real, intent(In) :: eps
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: eta
      real :: term1
      real :: term2
      real :: term3
! OpenCLMap ( ["wet","etan","eps"],["eta"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
! OpenCLMap ( ["wet","j","etan","eps"],["eta"],["(k,1,500.0,1)"],[]) {
    if (wet(j,k)==1) then
        term1 = (1.0-0.25*eps*(wet(j,k+1)+wet(j,k-1)+wet(j+1,k)+wet(j-1,k)))*etan(j,k)
        term2 = 0.25*eps*(wet(j,k+1)*etan(j,k+1)+wet(j,k-1)*etan(j,k-1))
        term3 = 0.25*eps*(wet(j+1,k)*etan(j+1,k)+wet(j-1,k)*etan(j-1,k))
        eta(j,k) = term1+term2+term3
    else
        eta(j,k) = etan(j,k)
    end if
    }
    }
end subroutine shapiro

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
vernieuw
--------------------------------------------------------------------------------
subroutine vernieuw(dt,dx,dy,eps,eta,etan,g,h,hmin,hzero,j,k,u,un,v,vn,wet)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1), intent(In) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: h
      real, intent(In) :: hmin
      real, dimension(0:ny+1,0:nx+1), intent(In) :: hzero
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: u
      real, dimension(0:ny+1,0:nx+1), intent(In) :: un
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: v
      real, dimension(0:ny+1,0:nx+1), intent(In) :: vn
      integer, dimension(0:ny+1,0:nx+1), intent(Out) :: wet
      integer, intent(InOut) :: k
      integer, intent(InOut) :: j
! OpenCLMap ( ["hzero","eta","h","hmin","un","vn"],["h","wet","u","v"],["(j,0,500.0+1,1)","(k,0,500.0+1,1)"],[]) {
! OpenCLMap ( ["j","hzero","eta","h","hmin","un","vn"],["h","wet","u","v"],["(k,0,500.0+1,1)"],[]) {
    h(j,k) = hzero(j,k)+eta(j,k)
    wet(j,k) = 1
    if (h(j,k)<hmin) then
        wet(j,k) = 0
    end if
    u(j,k) = un(j,k)
    v(j,k) = vn(j,k)
    }
    }
end subroutine vernieuw

--------------------------------------------------------------------------------


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Combined 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



--------------------------------------------------------------------------------
dyn
--------------------------------------------------------------------------------
subroutine dyn(j,k,dx,g,eta,dt,dy,un,u,wet,v,vn,h,etan)
      integer(4), parameter :: ny = 500 
      integer(4), parameter :: nx = 500 
      integer :: j
      integer :: k
      real, intent(In) :: dx
      real, intent(In) :: g
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, intent(In) :: dt
      real, intent(In) :: dy
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: un
      real, dimension(0:ny+1,0:nx+1), intent(In) :: u
      integer, dimension(0:ny+1,0:nx+1), intent(In) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(In) :: v
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: vn
      real, dimension(0:ny+1,0:nx+1), intent(In) :: h
      real, dimension(0:ny+1,0:nx+1) :: etan
      real, dimension(0:ny+1,0:nx+1) :: du
      real, dimension(0:ny+1,0:nx+1) :: dv
      real :: uu
      real :: vv
      real :: duu
      real :: dvv
      real :: hue
      real :: huw
      real :: hwp
      real :: hwn
      real :: hen
      real :: hep
      real :: hvn
      real :: hvs
      real :: hsp
      real :: hsn
      real :: hnn
      real :: hnp
! OpenCLMap ( ["dt","g","dx","dy","u","du","wet","v","dv","j","h","eta"],["du","dv","un","vn","etan"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
    du(j,k) = -dt*g*(eta(j,k+1)-eta(j,k))/dx
    dv(j,k) = -dt*g*(eta(j+1,k)-eta(j,k))/dy
    un(j,k) = 0.0
    uu = u(j,k)
    duu = du(j,k)
    if (wet(j,k)==1) then
        if ((wet(j,k+1)==1) .or. (duu>0.0)) then
                un(j,k) = uu+duu
        end if
    else
        if ((wet(j,k+1)==1) .and. (duu<0.0)) then
                un(j,k) = uu+duu
        end if
    end if
    vv = v(j,k)
    dvv = dv(j,k)
    vn(j,k) = 0.0
    if (wet(j,k)==1) then
        if ((wet(j+1,k)==1) .or. (dvv>0.0)) then
                vn(j,k) = vv+dvv
        end if
    else
        if ((wet(j+1,k)==1) .and. (dvv<0.0)) then
                vn(j,k) = vv+dvv
        end if
    end if
    hep = 0.5*(un(j,k)+abs(un(j,k)))*h(j,k)
    hen = 0.5*(un(j,k)-abs(un(j,k)))*h(j,k+1)
    hue = hep+hen
    hwp = 0.5*(un(j,k-1)+abs(un(j,k-1)))*h(j,k-1)
    hwn = 0.5*(un(j,k-1)-abs(un(j,k-1)))*h(j,k)
    huw = hwp+hwn
    hnp = 0.5*(vn(j,k)+abs(vn(j,k)))*h(j,k)
    hnn = 0.5*(vn(j,k)-abs(vn(j,k)))*h(j+1,k)
    hvn = hnp+hnn
    hsp = 0.5*(vn(j-1,k)+abs(vn(j-1,k)))*h(j-1,k)
    hsn = 0.5*(vn(j-1,k)-abs(vn(j-1,k)))*h(j,k)
    hvs = hsp+hsn
    etan(j,k) = eta(j,k)-dt*(hue-huw)/dx-dt*(hvn-hvs)/dy
    }
end subroutine dyn

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
shapiro
--------------------------------------------------------------------------------
subroutine shapiro(j,k,wet,etan,eps,eta)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      integer, intent(InOut) :: j
      integer, intent(InOut) :: k
      integer, dimension(0:ny+1,0:nx+1), intent(In) :: wet
      real, dimension(0:ny+1,0:nx+1), intent(In) :: etan
      real, intent(In) :: eps
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: eta
      real :: term1
      real :: term2
      real :: term3
! OpenCLMap ( ["wet","etan","eps","j"],["eta"],["(j,1,500.0,1)","(k,1,500.0,1)"],[]) {
    if (wet(j,k)==1) then
        term1 = (1.0-0.25*eps*(wet(j,k+1)+wet(j,k-1)+wet(j+1,k)+wet(j-1,k)))*etan(j,k)
        term2 = 0.25*eps*(wet(j,k+1)*etan(j,k+1)+wet(j,k-1)*etan(j,k-1))
        term3 = 0.25*eps*(wet(j+1,k)*etan(j+1,k)+wet(j-1,k)*etan(j-1,k))
        eta(j,k) = term1+term2+term3
    else
        eta(j,k) = etan(j,k)
    end if
    }
end subroutine shapiro

--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
vernieuw
--------------------------------------------------------------------------------
subroutine vernieuw(dt,dx,dy,eps,eta,etan,g,h,hmin,hzero,j,k,u,un,v,vn,wet)
      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1), intent(In) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1), intent(InOut) :: h
      real, intent(In) :: hmin
      real, dimension(0:ny+1,0:nx+1), intent(In) :: hzero
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: u
      real, dimension(0:ny+1,0:nx+1), intent(In) :: un
      real, dimension(0:ny+1,0:nx+1), intent(Out) :: v
      real, dimension(0:ny+1,0:nx+1), intent(In) :: vn
      integer, dimension(0:ny+1,0:nx+1), intent(Out) :: wet
      integer, intent(InOut) :: k
      integer, intent(InOut) :: j
! OpenCLMap ( ["hzero","eta","h","hmin","un","vn","j"],["h","wet","u","v"],["(j,0,500.0+1,1)","(k,0,500.0+1,1)"],[]) {
    h(j,k) = hzero(j,k)+eta(j,k)
    wet(j,k) = 1
    if (h(j,k)<hmin) then
        wet(j,k) = 0
    end if
    u(j,k) = un(j,k)
    v(j,k) = vn(j,k)
    }
end subroutine vernieuw

--------------------------------------------------------------------------------

