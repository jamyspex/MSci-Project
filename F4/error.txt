(Key "program","program wave2d\ninteg",7)

(ID "wave2d","wave2d\ninteger(4), p",6)

(NewLine,"\ninteger(4), paramet",1)

(Key "integer","integer(4), paramete",7)

(LParen,"(4), parameter :: nx",1)

(Num "4","4), parameter :: nx=",1)

(RParen,"), parameter :: nx=5",1)

(Comma,", parameter :: nx=50",1)

(Key "parameter","parameter :: nx=500\n",9)

(ColonColon,":: nx=500\ninteger(4)",2)

(ID "nx","nx=500\ninteger(4), p",2)

(OpEquals,"=500\ninteger(4), par",1)

(Num "500","500\ninteger(4), para",3)

(NewLine,"\ninteger(4), paramet",1)

(Key "integer","integer(4), paramete",7)

(LParen,"(4), parameter :: ny",1)

(Num "4","4), parameter :: ny=",1)

(RParen,"), parameter :: ny=5",1)

(Comma,", parameter :: ny=50",1)

(Key "parameter","parameter :: ny=500\n",9)

(ColonColon,":: ny=500\n      real",2)

(ID "ny","ny=500\n      real ::",2)

(OpEquals,"=500\n      real :: d",1)

(Num "500","500\n      real :: dt",3)

(NewLine,"\n      real :: dt\n  ",1)

(Key "real","real :: dt\n      rea",4)

(ColonColon,":: dt\n      real :: ",2)

(ID "dt","dt\n      real :: dx\n",2)

(NewLine,"\n      real :: dx\n  ",1)

(Key "real","real :: dx\n      rea",4)

(ColonColon,":: dx\n      real :: ",2)

(ID "dx","dx\n      real :: dy\n",2)

(NewLine,"\n      real :: dy\n  ",1)

(Key "real","real :: dy\n      rea",4)

(ColonColon,":: dy\n      real :: ",2)

(ID "dy","dy\n      real :: eps",2)

(NewLine,"\n      real :: eps\n ",1)

(Key "real","real :: eps\n      re",4)

(ColonColon,":: eps\n      real, d",2)

(ID "eps","eps\n      real, dime",3)

(NewLine,"\n      real, dimensi",1)

(Key "real","real, dimension(0:ny",4)

(Comma,", dimension(0:ny+1,0",1)

(Key "dimension","dimension(0:ny+1,0:n",9)

(LParen,"(0:ny+1,0:nx+1) :: e",1)

(Num "0","0:ny+1,0:nx+1) :: et",1)

(Colon,":ny+1,0:nx+1) :: eta",1)

(ID "ny","ny+1,0:nx+1) :: eta\n",2)

(OpAdd,"+1,0:nx+1) :: eta\n  ",1)

(Num "1","1,0:nx+1) :: eta\n   ",1)

(Comma,",0:nx+1) :: eta\n    ",1)

(Num "0","0:nx+1) :: eta\n     ",1)

(Colon,":nx+1) :: eta\n      ",1)

(ID "nx","nx+1) :: eta\n      r",2)

(OpAdd,"+1) :: eta\n      rea",1)

(Num "1","1) :: eta\n      real",1)

(RParen,") :: eta\n      real,",1)

(ColonColon,":: eta\n      real, d",2)

(ID "eta","eta\n      real, dime",3)

(NewLine,"\n      real, dimensi",1)

(Key "real","real, dimension(0:ny",4)

(Comma,", dimension(0:ny+1,0",1)

(Key "dimension","dimension(0:ny+1,0:n",9)

(LParen,"(0:ny+1,0:nx+1) :: e",1)

(Num "0","0:ny+1,0:nx+1) :: et",1)

(Colon,":ny+1,0:nx+1) :: eta",1)

(ID "ny","ny+1,0:nx+1) :: etan",2)

(OpAdd,"+1,0:nx+1) :: etan\n ",1)

(Num "1","1,0:nx+1) :: etan\n  ",1)

(Comma,",0:nx+1) :: etan\n   ",1)

(Num "0","0:nx+1) :: etan\n    ",1)

(Colon,":nx+1) :: etan\n     ",1)

(ID "nx","nx+1) :: etan\n      ",2)

(OpAdd,"+1) :: etan\n      re",1)

(Num "1","1) :: etan\n      rea",1)

(RParen,") :: etan\n      real",1)

(ColonColon,":: etan\n      real :",2)

(ID "etan","etan\n      real :: g",4)

(NewLine,"\n      real :: g\n   ",1)

(Key "real","real :: g\n      real",4)

(ColonColon,":: g\n      real, dim",2)

(ID "g","g\n      real, dimens",1)

(NewLine,"\n      real, dimensi",1)

(Key "real","real, dimension(0:ny",4)

(Comma,", dimension(0:ny+1,0",1)

(Key "dimension","dimension(0:ny+1,0:n",9)

(LParen,"(0:ny+1,0:nx+1) :: h",1)

(Num "0","0:ny+1,0:nx+1) :: h\n",1)

(Colon,":ny+1,0:nx+1) :: h\n ",1)

(ID "ny","ny+1,0:nx+1) :: h\n  ",2)

(OpAdd,"+1,0:nx+1) :: h\n    ",1)

(Num "1","1,0:nx+1) :: h\n     ",1)

(Comma,",0:nx+1) :: h\n      ",1)

(Num "0","0:nx+1) :: h\n      r",1)

(Colon,":nx+1) :: h\n      re",1)

(ID "nx","nx+1) :: h\n      rea",2)

(OpAdd,"+1) :: h\n      real ",1)

(Num "1","1) :: h\n      real :",1)

(RParen,") :: h\n      real ::",1)

(ColonColon,":: h\n      real :: h",2)

(ID "h","h\n      real :: hmin",1)

(NewLine,"\n      real :: hmin\n",1)

(Key "real","real :: hmin\n      r",4)

(ColonColon,":: hmin\n      real, ",2)

(ID "hmin","hmin\n      real, dim",4)

(NewLine,"\n      real, dimensi",1)

(Key "real","real, dimension(0:ny",4)

(Comma,", dimension(0:ny+1,0",1)

(Key "dimension","dimension(0:ny+1,0:n",9)

(LParen,"(0:ny+1,0:nx+1) :: h",1)

(Num "0","0:ny+1,0:nx+1) :: hz",1)

(Colon,":ny+1,0:nx+1) :: hze",1)

(ID "ny","ny+1,0:nx+1) :: hzer",2)

(OpAdd,"+1,0:nx+1) :: hzero\n",1)

(Num "1","1,0:nx+1) :: hzero\n ",1)

(Comma,",0:nx+1) :: hzero\n  ",1)

(Num "0","0:nx+1) :: hzero\n   ",1)

(Colon,":nx+1) :: hzero\n    ",1)

(ID "nx","nx+1) :: hzero\n     ",2)

(OpAdd,"+1) :: hzero\n      i",1)

(Num "1","1) :: hzero\n      in",1)

(RParen,") :: hzero\n      int",1)

(ColonColon,":: hzero\n      integ",2)

(ID "hzero","hzero\n      integer ",5)

(NewLine,"\n      integer :: j\n",1)

(Key "integer","integer :: j\n      i",7)

(ColonColon,":: j\n      integer :",2)

(ID "j","j\n      integer :: k",1)

(NewLine,"\n      integer :: k\n",1)

(Key "integer","integer :: k\n      r",7)

(ColonColon,":: k\n      real, dim",2)

(ID "k","k\n      real, dimens",1)

(NewLine,"\n      real, dimensi",1)

(Key "real","real, dimension(0:ny",4)

(Comma,", dimension(0:ny+1,0",1)

(Key "dimension","dimension(0:ny+1,0:n",9)

(LParen,"(0:ny+1,0:nx+1) :: u",1)

(Num "0","0:ny+1,0:nx+1) :: u\n",1)

(Colon,":ny+1,0:nx+1) :: u\n ",1)

(ID "ny","ny+1,0:nx+1) :: u\n  ",2)

(OpAdd,"+1,0:nx+1) :: u\n    ",1)

(Num "1","1,0:nx+1) :: u\n     ",1)

(Comma,",0:nx+1) :: u\n      ",1)

(Num "0","0:nx+1) :: u\n      r",1)

(Colon,":nx+1) :: u\n      re",1)

(ID "nx","nx+1) :: u\n      rea",2)

(OpAdd,"+1) :: u\n      real,",1)

(Num "1","1) :: u\n      real, ",1)

(RParen,") :: u\n      real, d",1)

(ColonColon,":: u\n      real, dim",2)

(ID "u","u\n      real, dimens",1)

(NewLine,"\n      real, dimensi",1)

(Key "real","real, dimension(0:ny",4)

(Comma,", dimension(0:ny+1,0",1)

(Key "dimension","dimension(0:ny+1,0:n",9)

(LParen,"(0:ny+1,0:nx+1) :: u",1)

(Num "0","0:ny+1,0:nx+1) :: un",1)

(Colon,":ny+1,0:nx+1) :: un\n",1)

(ID "ny","ny+1,0:nx+1) :: un\n ",2)

(OpAdd,"+1,0:nx+1) :: un\n   ",1)

(Num "1","1,0:nx+1) :: un\n    ",1)

(Comma,",0:nx+1) :: un\n     ",1)

(Num "0","0:nx+1) :: un\n      ",1)

(Colon,":nx+1) :: un\n      r",1)

(ID "nx","nx+1) :: un\n      re",2)

(OpAdd,"+1) :: un\n      real",1)

(Num "1","1) :: un\n      real,",1)

(RParen,") :: un\n      real, ",1)

(ColonColon,":: un\n      real, di",2)

(ID "un","un\n      real, dimen",2)

(NewLine,"\n      real, dimensi",1)

(Key "real","real, dimension(0:ny",4)

(Comma,", dimension(0:ny+1,0",1)

(Key "dimension","dimension(0:ny+1,0:n",9)

(LParen,"(0:ny+1,0:nx+1) :: v",1)

(Num "0","0:ny+1,0:nx+1) :: v\n",1)

(Colon,":ny+1,0:nx+1) :: v\n ",1)

(ID "ny","ny+1,0:nx+1) :: v\n  ",2)

(OpAdd,"+1,0:nx+1) :: v\n    ",1)

(Num "1","1,0:nx+1) :: v\n     ",1)

(Comma,",0:nx+1) :: v\n      ",1)

(Num "0","0:nx+1) :: v\n      r",1)

(Colon,":nx+1) :: v\n      re",1)

(ID "nx","nx+1) :: v\n      rea",2)

(OpAdd,"+1) :: v\n      real,",1)

(Num "1","1) :: v\n      real, ",1)

(RParen,") :: v\n      real, d",1)

(ColonColon,":: v\n      real, dim",2)

(ID "v","v\n      real, dimens",1)

(NewLine,"\n      real, dimensi",1)

(Key "real","real, dimension(0:ny",4)

(Comma,", dimension(0:ny+1,0",1)

(Key "dimension","dimension(0:ny+1,0:n",9)

(LParen,"(0:ny+1,0:nx+1) :: v",1)

(Num "0","0:ny+1,0:nx+1) :: vn",1)

(Colon,":ny+1,0:nx+1) :: vn\n",1)

(ID "ny","ny+1,0:nx+1) :: vn\n ",2)

(OpAdd,"+1,0:nx+1) :: vn\n   ",1)

(Num "1","1,0:nx+1) :: vn\n    ",1)

(Comma,",0:nx+1) :: vn\n     ",1)

(Num "0","0:nx+1) :: vn\n      ",1)

(Colon,":nx+1) :: vn\n      i",1)

(ID "nx","nx+1) :: vn\n      in",2)

(OpAdd,"+1) :: vn\n      inte",1)

(Num "1","1) :: vn\n      integ",1)

(RParen,") :: vn\n      intege",1)

(ColonColon,":: vn\n      integer,",2)

(ID "vn","vn\n      integer, di",2)

(NewLine,"\n      integer, dime",1)

(Key "integer","integer, dimension(0",7)

(Comma,", dimension(0:ny+1,0",1)

(Key "dimension","dimension(0:ny+1,0:n",9)

(LParen,"(0:ny+1,0:nx+1) :: w",1)

(Num "0","0:ny+1,0:nx+1) :: we",1)

(Colon,":ny+1,0:nx+1) :: wet",1)

(ID "ny","ny+1,0:nx+1) :: wet\n",2)

(OpAdd,"+1,0:nx+1) :: wet\nre",1)

(Num "1","1,0:nx+1) :: wet\nrea",1)

(Comma,",0:nx+1) :: wet\nreal",1)

(Num "0","0:nx+1) :: wet\nreal ",1)

(Colon,":nx+1) :: wet\nreal :",1)

(ID "nx","nx+1) :: wet\nreal ::",2)

(OpAdd,"+1) :: wet\nreal :: h",1)

(Num "1","1) :: wet\nreal :: hm",1)

(RParen,") :: wet\nreal :: hma",1)

(ColonColon,":: wet\nreal :: hmax\n",2)

(ID "wet","wet\nreal :: hmax\nrea",3)

(NewLine,"\nreal :: hmax\nreal :",1)

(Key "real","real :: hmax\nreal ::",4)

(ColonColon,":: hmax\nreal :: time",2)

(ID "hmax","hmax\nreal :: time\nre",4)

(NewLine,"\nreal :: time\nreal :",1)

(Key "real","real :: time\nreal ::",4)

(ColonColon,":: time\nreal :: dtma",2)

(ID "time","time\nreal :: dtmax\nr",4)

(NewLine,"\nreal :: dtmax\nreal ",1)

(Key "real","real :: dtmax\nreal :",4)

(ColonColon,":: dtmax\nreal :: c\nr",2)

(ID "dtmax","dtmax\nreal :: c\nreal",5)

(NewLine,"\nreal :: c\nreal :: l",1)

(Key "real","real :: c\nreal :: la",4)

(ColonColon,":: c\nreal :: lambda\n",2)

(ID "c","c\nreal :: lambda\nint",1)

(NewLine,"\nreal :: lambda\ninte",1)

(Key "real","real :: lambda\ninteg",4)

(ColonColon,":: lambda\ninteger ::",2)

(ID "lambda","lambda\ninteger :: n\n",6)

(NewLine,"\ninteger :: n\nintege",1)

(Key "integer","integer :: n\ninteger",7)

(ColonColon,":: n\ninteger :: ntot",2)

(ID "n","n\ninteger :: ntot\nin",1)

(NewLine,"\ninteger :: ntot\nint",1)

(Key "integer","integer :: ntot\ninte",7)

(ColonColon,":: ntot\ninteger :: n",2)

(ID "ntot","ntot\ninteger :: nout",4)

(NewLine,"\ninteger :: nout\nint",1)

(Key "integer","integer :: nout\ninte",7)

(ColonColon,":: nout\ninteger :: d",2)

(ID "nout","nout\ninteger :: dumm",4)

(NewLine,"\ninteger :: dummy\nnt",1)

(Key "integer","integer :: dummy\nnto",7)

(ColonColon,":: dummy\nntot = 1000",2)

(ID "dummy","dummy\nntot = 10000\ne",5)

(NewLine,"\nntot = 10000\neps = ",1)

(ID "ntot","ntot = 10000\neps = 0",4)

(OpEquals,"= 10000\neps = 0.05\nc",1)

(Num "10000","10000\neps = 0.05\ncal",5)

(NewLine,"\neps = 0.05\ncall ini",1)

(ID "eps","eps = 0.05\ncall init",3)

(OpEquals,"= 0.05\ncall init(hmi",1)

(Num "0.05","0.05\ncall init(hmin,",4)

(NewLine,"\ncall init(hmin,dx,d",1)

(Key "call","call init(hmin,dx,dy",4)

(ID "init","init(hmin,dx,dy,dt,g",4)

(LParen,"(hmin,dx,dy,dt,g,j,k",1)

(ID "hmin","hmin,dx,dy,dt,g,j,k,",4)

(Comma,",dx,dy,dt,g,j,k,hzer",1)

(ID "dx","dx,dy,dt,g,j,k,hzero",2)

(Comma,",dy,dt,g,j,k,hzero,e",1)

(ID "dy","dy,dt,g,j,k,hzero,et",2)

(Comma,",dt,g,j,k,hzero,eta,",1)

(ID "dt","dt,g,j,k,hzero,eta,e",2)

(Comma,",g,j,k,hzero,eta,eta",1)

(ID "g","g,j,k,hzero,eta,etan",1)

(Comma,",j,k,hzero,eta,etan,",1)

(ID "j","j,k,hzero,eta,etan,h",1)

(Comma,",k,hzero,eta,etan,h,",1)

(ID "k","k,hzero,eta,etan,h,w",1)

(Comma,",hzero,eta,etan,h,we",1)

(ID "hzero","hzero,eta,etan,h,wet",5)

(Comma,",eta,etan,h,wet,u,un",1)

(ID "eta","eta,etan,h,wet,u,un,",3)

(Comma,",etan,h,wet,u,un,v,v",1)

(ID "etan","etan,h,wet,u,un,v,vn",4)

(Comma,",h,wet,u,un,v,vn)\nop",1)

(ID "h","h,wet,u,un,v,vn)\nope",1)

(Comma,",wet,u,un,v,vn)\nopen",1)

(ID "wet","wet,u,un,v,vn)\nopen(",3)

(Comma,",u,un,v,vn)\nopen(90,",1)

(ID "u","u,un,v,vn)\nopen(90,f",1)

(Comma,",un,v,vn)\nopen(90,fi",1)

(ID "un","un,v,vn)\nopen(90,fil",2)

(Comma,",v,vn)\nopen(90,file ",1)

(ID "v","v,vn)\nopen(90,file =",1)

(Comma,",vn)\nopen(90,file ='",1)

(ID "vn","vn)\nopen(90,file ='d",2)

(RParen,")\nopen(90,file ='deb",1)

(NewLine,"\nopen(90,file ='debu",1)

(Key "open","open(90,file ='debug",4)

(LParen,"(90,file ='debug.dat",1)

(Num "90","90,file ='debug.dat'",2)

(Comma,",file ='debug.dat',f",1)

(ID "file","file ='debug.dat',fo",4)

(OpEquals,"='debug.dat',form='f",1)

(StrConst "'debug.dat'","'debug.dat',form='fo",11)

(Comma,",form='formatted')\no",1)

(ID "form","form='formatted')\nop",4)

(OpEquals,"='formatted')\nopen(1",1)

(StrConst "'formatted'","'formatted')\nopen(10",11)

(RParen,")\nopen(10,file ='eta",1)

(NewLine,"\nopen(10,file ='eta0",1)

(Key "open","open(10,file ='eta0.",4)

(LParen,"(10,file ='eta0.dat'",1)

(Num "10","10,file ='eta0.dat',",2)

(Comma,",file ='eta0.dat',fo",1)

(ID "file","file ='eta0.dat',for",4)

(OpEquals,"='eta0.dat',form='fo",1)

(StrConst "'eta0.dat'","'eta0.dat',form='for",10)

(Comma,",form='formatted')\n ",1)

(ID "form","form='formatted')\n  ",4)

(OpEquals,"='formatted')\n  do j",1)

(StrConst "'formatted'","'formatted')\n  do j ",11)

(RParen,")\n  do j = 0,ny+1\n  ",1)

(NewLine,"\n  do j = 0,ny+1\n   ",1)

(Key "do","do j = 0,ny+1\n    wr",2)

(ID "j","j = 0,ny+1\n    write",1)

(OpEquals,"= 0,ny+1\n    write(1",1)

(Num "0","0,ny+1\n    write(10,",1)

(Comma,",ny+1\n    write(10,'",1)

(ID "ny","ny+1\n    write(10,'(",2)

(OpAdd,"+1\n    write(10,'(10",1)

(Num "1","1\n    write(10,'(101",1)

(NewLine,"\n    write(10,'(101F",1)

(Key "write","write(10,'(101F12.6)",5)

(LParen,"(10,'(101F12.6)')(et",1)

(Num "10","10,'(101F12.6)')(eta",2)

(Comma,",'(101F12.6)')(eta(j",1)

(StrConst "'(101F12.6)'","'(101F12.6)')(eta(j,",12)

(RParen,")(eta(j,k),k=0,nx+1)",1)

(LParen,"(eta(j,k),k=0,nx+1)\n",1)

(ID "eta","eta(j,k),k=0,nx+1)\n ",3)

(LParen,"(j,k),k=0,nx+1)\n  en",1)

(ID "j","j,k),k=0,nx+1)\n  end",1)

(Comma,",k),k=0,nx+1)\n  end ",1)

(ID "k","k),k=0,nx+1)\n  end d",1)

(RParen,"),k=0,nx+1)\n  end do",1)

(Comma,",k=0,nx+1)\n  end do\n",1)

(ID "k","k=0,nx+1)\n  end do\nc",1)

(OpEquals,"=0,nx+1)\n  end do\ncl",1)

(Num "0","0,nx+1)\n  end do\nclo",1)

(Comma,",nx+1)\n  end do\nclos",1)

(ID "nx","nx+1)\n  end do\nclose",2)

(OpAdd,"+1)\n  end do\nclose(1",1)

(Num "1","1)\n  end do\nclose(10",1)

(RParen,")\n  end do\nclose(10)",1)

(NewLine,"\n  end do\nclose(10)\n",1)

(Key "end","end do\nclose(10)\nope",3)

(Key "do","do\nclose(10)\nopen(10",2)

(NewLine,"\nclose(10)\nopen(10,f",1)

(Key "close","close(10)\nopen(10,fi",5)

(LParen,"(10)\nopen(10,file ='",1)

(Num "10","10)\nopen(10,file ='h",2)

(RParen,")\nopen(10,file ='h0.",1)

(NewLine,"\nopen(10,file ='h0.d",1)

(Key "open","open(10,file ='h0.da",4)

(LParen,"(10,file ='h0.dat',f",1)

(Num "10","10,file ='h0.dat',fo",2)

(Comma,",file ='h0.dat',form",1)

(ID "file","file ='h0.dat',form=",4)

(OpEquals,"='h0.dat',form='form",1)

(StrConst "'h0.dat'","'h0.dat',form='forma",8)

(Comma,",form='formatted')\n ",1)

(ID "form","form='formatted')\n  ",4)

(OpEquals,"='formatted')\n  do j",1)

(StrConst "'formatted'","'formatted')\n  do j ",11)

(RParen,")\n  do j = 0,ny+1\n  ",1)

(NewLine,"\n  do j = 0,ny+1\n   ",1)

(Key "do","do j = 0,ny+1\n    wr",2)

(ID "j","j = 0,ny+1\n    write",1)

(OpEquals,"= 0,ny+1\n    write(1",1)

(Num "0","0,ny+1\n    write(10,",1)

(Comma,",ny+1\n    write(10,'",1)

(ID "ny","ny+1\n    write(10,'(",2)

(OpAdd,"+1\n    write(10,'(10",1)

(Num "1","1\n    write(10,'(101",1)

(NewLine,"\n    write(10,'(101F",1)

(Key "write","write(10,'(101F12.6)",5)

(LParen,"(10,'(101F12.6)')(hz",1)

(Num "10","10,'(101F12.6)')(hze",2)

(Comma,",'(101F12.6)')(hzero",1)

(StrConst "'(101F12.6)'","'(101F12.6)')(hzero(",12)

(RParen,")(hzero(j,k),k=0,nx+",1)

(LParen,"(hzero(j,k),k=0,nx+1",1)

(ID "hzero","hzero(j,k),k=0,nx+1)",5)

(LParen,"(j,k),k=0,nx+1)\n  en",1)

(ID "j","j,k),k=0,nx+1)\n  end",1)

(Comma,",k),k=0,nx+1)\n  end ",1)

(ID "k","k),k=0,nx+1)\n  end d",1)

(RParen,"),k=0,nx+1)\n  end do",1)

(Comma,",k=0,nx+1)\n  end do\n",1)

(ID "k","k=0,nx+1)\n  end do\nc",1)

(OpEquals,"=0,nx+1)\n  end do\ncl",1)

(Num "0","0,nx+1)\n  end do\nclo",1)

(Comma,",nx+1)\n  end do\nclos",1)

(ID "nx","nx+1)\n  end do\nclose",2)

(OpAdd,"+1)\n  end do\nclose(1",1)

(Num "1","1)\n  end do\nclose(10",1)

(RParen,")\n  end do\nclose(10)",1)

(NewLine,"\n  end do\nclose(10)\n",1)

(Key "end","end do\nclose(10)\nhma",3)

(Key "do","do\nclose(10)\nhmax = ",2)

(NewLine,"\nclose(10)\nhmax = 0.",1)

(Key "close","close(10)\nhmax = 0.\n",5)

(LParen,"(10)\nhmax = 0.\ndo j ",1)

(Num "10","10)\nhmax = 0.\ndo j =",2)

(RParen,")\nhmax = 0.\ndo j = 1",1)

(NewLine,"\nhmax = 0.\ndo j = 1,",1)

(ID "hmax","hmax = 0.\ndo j = 1,n",4)

(OpEquals,"= 0.\ndo j = 1,ny\ndo ",1)

(Num "0.","0.\ndo j = 1,ny\ndo k ",2)

(NewLine,"\ndo j = 1,ny\ndo k = ",1)

(Key "do","do j = 1,ny\ndo k = 1",2)

(ID "j","j = 1,ny\ndo k = 1,nx",1)

(OpEquals,"= 1,ny\ndo k = 1,nx\n ",1)

(Num "1","1,ny\ndo k = 1,nx\n  h",1)

(Comma,",ny\ndo k = 1,nx\n  hm",1)

(ID "ny","ny\ndo k = 1,nx\n  hma",2)

(NewLine,"\ndo k = 1,nx\n  hmax ",1)

(Key "do","do k = 1,nx\n  hmax =",2)

(ID "k","k = 1,nx\n  hmax = ma",1)

(OpEquals,"= 1,nx\n  hmax = max(",1)

(Num "1","1,nx\n  hmax = max(hm",1)

(Comma,",nx\n  hmax = max(hma",1)

(ID "nx","nx\n  hmax = max(hmax",2)

(NewLine,"\n  hmax = max(hmax,h",1)

(ID "hmax","hmax = max(hmax,h(j,",4)

(OpEquals,"= max(hmax,h(j,k))\ne",1)

(ID "max","max(hmax,h(j,k))\nend",3)

(LParen,"(hmax,h(j,k))\nend do",1)

(ID "hmax","hmax,h(j,k))\nend do\n",4)

(Comma,",h(j,k))\nend do\nend ",1)

(ID "h","h(j,k))\nend do\nend d",1)

(LParen,"(j,k))\nend do\nend do",1)

(ID "j","j,k))\nend do\nend do\n",1)

(Comma,",k))\nend do\nend do\nd",1)

(ID "k","k))\nend do\nend do\ndu",1)

(RParen,"))\nend do\nend do\ndum",1)

(RParen,")\nend do\nend do\ndumm",1)

(NewLine,"\nend do\nend do\ndummy",1)

(Key "end","end do\nend do\ndummy ",3)

(Key "do","do\nend do\ndummy = 0\n",2)

(NewLine,"\nend do\ndummy = 0\nc ",1)

(Key "end","end do\ndummy = 0\nc =",3)

(Key "do","do\ndummy = 0\nc = sqr",2)

(NewLine,"\ndummy = 0\nc = sqrt(",1)

(ID "dummy","dummy = 0\nc = sqrt(2",5)

(OpEquals,"= 0\nc = sqrt(2*g*hma",1)

(Num "0","0\nc = sqrt(2*g*hmax)",1)

(NewLine,"\nc = sqrt(2*g*hmax)\n",1)

(ID "c","c = sqrt(2*g*hmax)\nw",1)

(OpEquals,"= sqrt(2*g*hmax)\nwri",1)

(Key "sqrt","sqrt(2*g*hmax)\nwrite",4)

(LParen,"(2*g*hmax)\nwrite(6,*",1)

(Num "2","2*g*hmax)\nwrite(6,*)",1)

(OpMul,"*g*hmax)\nwrite(6,*)\"",1)

(ID "g","g*hmax)\nwrite(6,*)\"c",1)

(OpMul,"*hmax)\nwrite(6,*)\"c ",1)

(ID "hmax","hmax)\nwrite(6,*)\"c =",4)

(RParen,")\nwrite(6,*)\"c = \",c",1)

(NewLine,"\nwrite(6,*)\"c = \",c\n",1)

(Key "write","write(6,*)\"c = \",c\nl",5)

(LParen,"(6,*)\"c = \",c\nlambda",1)

(Num "6","6,*)\"c = \",c\nlambda ",1)

(Comma,",*)\"c = \",c\nlambda =",1)

(OpMul,"*)\"c = \",c\nlambda = ",1)

(RParen,")\"c = \",c\nlambda = d",1)

(StrConst "\"c = \"","\"c = \",c\nlambda = dt",6)

(Comma,",c\nlambda = dt*sqrt(",1)

(ID "c","c\nlambda = dt*sqrt(g",1)

(NewLine,"\nlambda = dt*sqrt(g*",1)

(ID "lambda","lambda = dt*sqrt(g*h",6)

(OpEquals,"= dt*sqrt(g*hmax)/mi",1)

(ID "dt","dt*sqrt(g*hmax)/min(",2)

(OpMul,"*sqrt(g*hmax)/min(dx",1)

(Key "sqrt","sqrt(g*hmax)/min(dx,",4)

(LParen,"(g*hmax)/min(dx,dy)\n",1)

(ID "g","g*hmax)/min(dx,dy)\nw",1)

(OpMul,"*hmax)/min(dx,dy)\nwr",1)

(ID "hmax","hmax)/min(dx,dy)\nwri",4)

(RParen,")/min(dx,dy)\nwrite(6",1)

(OpDiv,"/min(dx,dy)\nwrite(6,",1)

(ID "min","min(dx,dy)\nwrite(6,*",3)

(LParen,"(dx,dy)\nwrite(6,*)\"l",1)

(ID "dx","dx,dy)\nwrite(6,*)\"la",2)

(Comma,",dy)\nwrite(6,*)\"lamb",1)

(ID "dy","dy)\nwrite(6,*)\"lambd",2)

(RParen,")\nwrite(6,*)\"lambda ",1)

(NewLine,"\nwrite(6,*)\"lambda =",1)

(Key "write","write(6,*)\"lambda = ",5)

(LParen,"(6,*)\"lambda = \",lam",1)

(Num "6","6,*)\"lambda = \",lamb",1)

(Comma,",*)\"lambda = \",lambd",1)

(OpMul,"*)\"lambda = \",lambda",1)

(RParen,")\"lambda = \",lambda\n",1)

(StrConst "\"lambda = \"","\"lambda = \",lambda\ni",11)

(Comma,",lambda\nif(lambda > ",1)

(ID "lambda","lambda\nif(lambda > 1",6)

(NewLine,"\nif(lambda > 1)then\n",1)

(Key "if","if(lambda > 1)then\n ",2)

(LParen,"(lambda > 1)then\n  w",1)

(ID "lambda","lambda > 1)then\n  wr",6)

(OpGT,"> 1)then\n  write(6,*",1)

(Num "1","1)then\n  write(6,*) ",1)

(RParen,")then\n  write(6,*) \"",1)

(Key "then","then\n  write(6,*) \"T",4)

(NewLine,"\n  write(6,*) \"This ",1)

(Key "write","write(6,*) \"This wil",5)

(LParen,"(6,*) \"This will not",1)

(Num "6","6,*) \"This will not ",1)

(Comma,",*) \"This will not w",1)

(OpMul,"*) \"This will not wo",1)

(RParen,") \"This will not wor",1)

(StrConst "\"This will not work. Do you know why?\"","\"This will not work.",38)

(NewLine,"\n  stop\nend if\nopen(",1)

(Key "stop","stop\nend if\nopen(10,",4)

(NewLine,"\nend if\nopen(10,file",1)

(Key "end","end if\nopen(10,file ",3)

(Key "if","if\nopen(10,file ='et",2)

(NewLine,"\nopen(10,file ='eta.",1)

(Key "open","open(10,file ='eta.d",4)

(LParen,"(10,file ='eta.dat',",1)

(Num "10","10,file ='eta.dat',f",2)

(Comma,",file ='eta.dat',for",1)

(ID "file","file ='eta.dat',form",4)

(OpEquals,"='eta.dat',form='for",1)

(StrConst "'eta.dat'","'eta.dat',form='form",9)

(Comma,",form='formatted')\no",1)

(ID "form","form='formatted')\nop",4)

(OpEquals,"='formatted')\nopen(2",1)

(StrConst "'formatted'","'formatted')\nopen(20",11)

(RParen,")\nopen(20,file ='h.d",1)

(NewLine,"\nopen(20,file ='h.da",1)

(Key "open","open(20,file ='h.dat",4)

(LParen,"(20,file ='h.dat',fo",1)

(Num "20","20,file ='h.dat',for",2)

(Comma,",file ='h.dat',form=",1)

(ID "file","file ='h.dat',form='",4)

(OpEquals,"='h.dat',form='forma",1)

(StrConst "'h.dat'","'h.dat',form='format",7)

(Comma,",form='formatted')\no",1)

(ID "form","form='formatted')\nop",4)

(OpEquals,"='formatted')\nopen(3",1)

(StrConst "'formatted'","'formatted')\nopen(30",11)

(RParen,")\nopen(30,file ='u.d",1)

(NewLine,"\nopen(30,file ='u.da",1)

(Key "open","open(30,file ='u.dat",4)

(LParen,"(30,file ='u.dat',fo",1)

(Num "30","30,file ='u.dat',for",2)

(Comma,",file ='u.dat',form=",1)

(ID "file","file ='u.dat',form='",4)

(OpEquals,"='u.dat',form='forma",1)

(StrConst "'u.dat'","'u.dat',form='format",7)

(Comma,",form='formatted')\no",1)

(ID "form","form='formatted')\nop",4)

(OpEquals,"='formatted')\nopen(4",1)

(StrConst "'formatted'","'formatted')\nopen(40",11)

(RParen,")\nopen(40,file ='v.d",1)

(NewLine,"\nopen(40,file ='v.da",1)

(Key "open","open(40,file ='v.dat",4)

(LParen,"(40,file ='v.dat',fo",1)

(Num "40","40,file ='v.dat',for",2)

(Comma,",file ='v.dat',form=",1)

(ID "file","file ='v.dat',form='",4)

(OpEquals,"='v.dat',form='forma",1)

(StrConst "'v.dat'","'v.dat',form='format",7)

(Comma,",form='formatted')\nd",1)

(ID "form","form='formatted')\ndo",4)

(OpEquals,"='formatted')\ndo j =",1)

(StrConst "'formatted'","'formatted')\ndo j = ",11)

(RParen,")\ndo j = 26,26\ndo k ",1)

(NewLine,"\ndo j = 26,26\ndo k =",1)

(Key "do","do j = 26,26\ndo k = ",2)

(ID "j","j = 26,26\ndo k = 26,",1)

(OpEquals,"= 26,26\ndo k = 26,26",1)

(Num "26","26,26\ndo k = 26,26\ne",2)

(Comma,",26\ndo k = 26,26\neta",1)

(Num "26","26\ndo k = 26,26\neta(",2)

(NewLine,"\ndo k = 26,26\neta(j,",1)

(Key "do","do k = 26,26\neta(j,k",2)

(ID "k","k = 26,26\neta(j,k) =",1)

(OpEquals,"= 26,26\neta(j,k) = 1",1)

(Num "26","26,26\neta(j,k) = 1.0",2)

(Comma,",26\neta(j,k) = 1.0\ne",1)

(Num "26","26\neta(j,k) = 1.0\nen",2)

(NewLine,"\neta(j,k) = 1.0\nend ",1)

(ID "eta","eta(j,k) = 1.0\nend d",3)

(LParen,"(j,k) = 1.0\nend do\ne",1)

(ID "j","j,k) = 1.0\nend do\nen",1)

(Comma,",k) = 1.0\nend do\nend",1)

(ID "k","k) = 1.0\nend do\nend ",1)

(RParen,") = 1.0\nend do\nend d",1)

(OpEquals,"= 1.0\nend do\nend do\n",1)

(Num "1.0","1.0\nend do\nend do\ndo",3)

(NewLine,"\nend do\nend do\ndo n ",1)

(Key "end","end do\nend do\ndo n =",3)

(Key "do","do\nend do\ndo n = 1,n",2)

(NewLine,"\nend do\ndo n = 1,nto",1)

(Key "end","end do\ndo n = 1,ntot",3)

(Key "do","do\ndo n = 1,ntot\ntim",2)

(NewLine,"\ndo n = 1,ntot\ntime ",1)

(Key "do","do n = 1,ntot\ntime =",2)

(ID "n","n = 1,ntot\ntime = re",1)

(OpEquals,"= 1,ntot\ntime = real",1)

(Num "1","1,ntot\ntime = real(n",1)

(Comma,",ntot\ntime = real(n)",1)

(ID "ntot","ntot\ntime = real(n)*",4)

(NewLine,"\ntime = real(n)*dt\n ",1)

(ID "time","time = real(n)*dt\n  ",4)

(OpEquals,"= real(n)*dt\n  call ",1)

(Key "real","real(n)*dt\n  call dy",4)

(LParen,"(n)*dt\n  call dyn(j,",1)

(ID "n","n)*dt\n  call dyn(j,k",1)

(RParen,")*dt\n  call dyn(j,k,",1)

(OpMul,"*dt\n  call dyn(j,k,d",1)

(ID "dt","dt\n  call dyn(j,k,dx",2)

(NewLine,"\n  call dyn(j,k,dx,g",1)

(Key "call","call dyn(j,k,dx,g,et",4)

(ID "dyn","dyn(j,k,dx,g,eta,dt,",3)

(LParen,"(j,k,dx,g,eta,dt,dy,",1)

(ID "j","j,k,dx,g,eta,dt,dy,u",1)

(Comma,",k,dx,g,eta,dt,dy,un",1)

(ID "k","k,dx,g,eta,dt,dy,un,",1)

(Comma,",dx,g,eta,dt,dy,un,u",1)

(ID "dx","dx,g,eta,dt,dy,un,u,",2)

(Comma,",g,eta,dt,dy,un,u,we",1)

(ID "g","g,eta,dt,dy,un,u,wet",1)

(Comma,",eta,dt,dy,un,u,wet,",1)

(ID "eta","eta,dt,dy,un,u,wet,v",3)

(Comma,",dt,dy,un,u,wet,v,vn",1)

(ID "dt","dt,dy,un,u,wet,v,vn,",2)

(Comma,",dy,un,u,wet,v,vn,h,",1)

(ID "dy","dy,un,u,wet,v,vn,h,e",2)

(Comma,",un,u,wet,v,vn,h,eta",1)

(ID "un","un,u,wet,v,vn,h,etan",2)

(Comma,",u,wet,v,vn,h,etan)\n",1)

(ID "u","u,wet,v,vn,h,etan)\n ",1)

(Comma,",wet,v,vn,h,etan)\n  ",1)

(ID "wet","wet,v,vn,h,etan)\n  c",3)

(Comma,",v,vn,h,etan)\n  call",1)

(ID "v","v,vn,h,etan)\n  call ",1)

(Comma,",vn,h,etan)\n  call s",1)

(ID "vn","vn,h,etan)\n  call sh",2)

(Comma,",h,etan)\n  call shap",1)

(ID "h","h,etan)\n  call shapi",1)

(Comma,",etan)\n  call shapir",1)

(ID "etan","etan)\n  call shapiro",4)

(RParen,")\n  call shapiro(j,k",1)

(NewLine,"\n  call shapiro(j,k,",1)

(Key "call","call shapiro(j,k,wet",4)

(ID "shapiro","shapiro(j,k,wet,etan",7)

(LParen,"(j,k,wet,etan,eps,et",1)

(ID "j","j,k,wet,etan,eps,eta",1)

(Comma,",k,wet,etan,eps,eta)",1)

(ID "k","k,wet,etan,eps,eta)\n",1)

(Comma,",wet,etan,eps,eta)\n ",1)

(ID "wet","wet,etan,eps,eta)\n  ",3)

(Comma,",etan,eps,eta)\n     ",1)

(ID "etan","etan,eps,eta)\n      ",4)

(Comma,",eps,eta)\n      call",1)

(ID "eps","eps,eta)\n      call ",3)

(Comma,",eta)\n      call ver",1)

(ID "eta","eta)\n      call vern",3)

(RParen,")\n      call vernieu",1)

(NewLine,"\n      call vernieuw",1)

(Key "call","call vernieuw(dt,dx,",4)

(ID "vernieuw","vernieuw(dt,dx,dy,ep",8)

(LParen,"(dt,dx,dy,eps,eta,et",1)

(ID "dt","dt,dx,dy,eps,eta,eta",2)

(Comma,",dx,dy,eps,eta,etan,",1)

(ID "dx","dx,dy,eps,eta,etan,g",2)

(Comma,",dy,eps,eta,etan,g,h",1)

(ID "dy","dy,eps,eta,etan,g,h,",2)

(Comma,",eps,eta,etan,g,h,hm",1)

(ID "eps","eps,eta,etan,g,h,hmi",3)

(Comma,",eta,etan,g,h,hmin,h",1)

(ID "eta","eta,etan,g,h,hmin,hz",3)

(Comma,",etan,g,h,hmin,hzero",1)

(ID "etan","etan,g,h,hmin,hzero,",4)

(Comma,",g,h,hmin,hzero,j,k,",1)

(ID "g","g,h,hmin,hzero,j,k,u",1)

(Comma,",h,hmin,hzero,j,k,u,",1)

(ID "h","h,hmin,hzero,j,k,u,u",1)

(Comma,",hmin,hzero,j,k,u,un",1)

(ID "hmin","hmin,hzero,j,k,u,un,",4)

(Comma,",hzero,j,k,u,un,v,vn",1)

(ID "hzero","hzero,j,k,u,un,v,vn,",5)

(Comma,",j,k,u,un,v,vn,wet)\n",1)

(ID "j","j,k,u,un,v,vn,wet)\ne",1)

(Comma,",k,u,un,v,vn,wet)\nen",1)

(ID "k","k,u,un,v,vn,wet)\nend",1)

(Comma,",u,un,v,vn,wet)\nend ",1)

(ID "u","u,un,v,vn,wet)\nend d",1)

(Comma,",un,v,vn,wet)\nend do",1)

(ID "un","un,v,vn,wet)\nend do\n",2)

(Comma,",v,vn,wet)\nend do\ndo",1)

(ID "v","v,vn,wet)\nend do\ndo ",1)

(Comma,",vn,wet)\nend do\ndo j",1)

(ID "vn","vn,wet)\nend do\ndo j ",2)

(Comma,",wet)\nend do\ndo j = ",1)

(ID "wet","wet)\nend do\ndo j = 0",3)

(RParen,")\nend do\ndo j = 0,ny",1)

(NewLine,"\nend do\ndo j = 0,ny+",1)

(Key "end","end do\ndo j = 0,ny+1",3)

(Key "do","do\ndo j = 0,ny+1\n  w",2)

(NewLine,"\ndo j = 0,ny+1\n  wri",1)

(Key "do","do j = 0,ny+1\n  writ",2)

(ID "j","j = 0,ny+1\n  write(1",1)

(OpEquals,"= 0,ny+1\n  write(10,",1)

(Num "0","0,ny+1\n  write(10,'(",1)

(Comma,",ny+1\n  write(10,'(1",1)

(ID "ny","ny+1\n  write(10,'(10",2)

(OpAdd,"+1\n  write(10,'(101F",1)

(Num "1","1\n  write(10,'(101F1",1)

(NewLine,"\n  write(10,'(101F12",1)

(Key "write","write(10,'(101F12.6)",5)

(LParen,"(10,'(101F12.6)')(et",1)

(Num "10","10,'(101F12.6)')(eta",2)

(Comma,",'(101F12.6)')(eta(j",1)

(StrConst "'(101F12.6)'","'(101F12.6)')(eta(j,",12)

(RParen,")(eta(j,k),k=0,nx+1)",1)

(LParen,"(eta(j,k),k=0,nx+1)\n",1)

(ID "eta","eta(j,k),k=0,nx+1)\n ",3)

(LParen,"(j,k),k=0,nx+1)\n  wr",1)

(ID "j","j,k),k=0,nx+1)\n  wri",1)

(Comma,",k),k=0,nx+1)\n  writ",1)

(ID "k","k),k=0,nx+1)\n  write",1)

(RParen,"),k=0,nx+1)\n  write(",1)

(Comma,",k=0,nx+1)\n  write(2",1)

(ID "k","k=0,nx+1)\n  write(20",1)

(OpEquals,"=0,nx+1)\n  write(20,",1)

(Num "0","0,nx+1)\n  write(20,'",1)

(Comma,",nx+1)\n  write(20,'(",1)

(ID "nx","nx+1)\n  write(20,'(1",2)

(OpAdd,"+1)\n  write(20,'(101",1)

(Num "1","1)\n  write(20,'(101F",1)

(RParen,")\n  write(20,'(101F1",1)

(NewLine,"\n  write(20,'(101F12",1)

(Key "write","write(20,'(101F12.6)",5)

(LParen,"(20,'(101F12.6)')(h(",1)

(Num "20","20,'(101F12.6)')(h(j",2)

(Comma,",'(101F12.6)')(h(j,k",1)

(StrConst "'(101F12.6)'","'(101F12.6)')(h(j,k)",12)

(RParen,")(h(j,k) ,k=0,nx+1)\n",1)

(LParen,"(h(j,k) ,k=0,nx+1)\n ",1)

(ID "h","h(j,k) ,k=0,nx+1)\n  ",1)

(LParen,"(j,k) ,k=0,nx+1)\n  w",1)

(ID "j","j,k) ,k=0,nx+1)\n  wr",1)

(Comma,",k) ,k=0,nx+1)\n  wri",1)

(ID "k","k) ,k=0,nx+1)\n  writ",1)

(RParen,") ,k=0,nx+1)\n  write",1)

(Comma,",k=0,nx+1)\n  write(3",1)

(ID "k","k=0,nx+1)\n  write(30",1)

(OpEquals,"=0,nx+1)\n  write(30,",1)

(Num "0","0,nx+1)\n  write(30,'",1)

(Comma,",nx+1)\n  write(30,'(",1)

(ID "nx","nx+1)\n  write(30,'(1",2)

(OpAdd,"+1)\n  write(30,'(101",1)

(Num "1","1)\n  write(30,'(101F",1)

(RParen,")\n  write(30,'(101F1",1)

(NewLine,"\n  write(30,'(101F12",1)

(Key "write","write(30,'(101F12.6)",5)

(LParen,"(30,'(101F12.6)')(u(",1)

(Num "30","30,'(101F12.6)')(u(j",2)

(Comma,",'(101F12.6)')(u(j,k",1)

(StrConst "'(101F12.6)'","'(101F12.6)')(u(j,k)",12)

(RParen,")(u(j,k) ,k=0,nx+1)\n",1)

(LParen,"(u(j,k) ,k=0,nx+1)\n ",1)

(ID "u","u(j,k) ,k=0,nx+1)\n  ",1)

(LParen,"(j,k) ,k=0,nx+1)\n  w",1)

(ID "j","j,k) ,k=0,nx+1)\n  wr",1)

(Comma,",k) ,k=0,nx+1)\n  wri",1)

(ID "k","k) ,k=0,nx+1)\n  writ",1)

(RParen,") ,k=0,nx+1)\n  write",1)

(Comma,",k=0,nx+1)\n  write(4",1)

(ID "k","k=0,nx+1)\n  write(40",1)

(OpEquals,"=0,nx+1)\n  write(40,",1)

(Num "0","0,nx+1)\n  write(40,'",1)

(Comma,",nx+1)\n  write(40,'(",1)

(ID "nx","nx+1)\n  write(40,'(1",2)

(OpAdd,"+1)\n  write(40,'(101",1)

(Num "1","1)\n  write(40,'(101F",1)

(RParen,")\n  write(40,'(101F1",1)

(NewLine,"\n  write(40,'(101F12",1)

(Key "write","write(40,'(101F12.6)",5)

(LParen,"(40,'(101F12.6)')(v(",1)

(Num "40","40,'(101F12.6)')(v(j",2)

(Comma,",'(101F12.6)')(v(j,k",1)

(StrConst "'(101F12.6)'","'(101F12.6)')(v(j,k)",12)

(RParen,")(v(j,k) ,k=0,nx+1)\n",1)

(LParen,"(v(j,k) ,k=0,nx+1)\ne",1)

(ID "v","v(j,k) ,k=0,nx+1)\nen",1)

(LParen,"(j,k) ,k=0,nx+1)\nend",1)

(ID "j","j,k) ,k=0,nx+1)\nend ",1)

(Comma,",k) ,k=0,nx+1)\nend d",1)

(ID "k","k) ,k=0,nx+1)\nend do",1)

(RParen,") ,k=0,nx+1)\nend do\n",1)

(Comma,",k=0,nx+1)\nend do\nwr",1)

(ID "k","k=0,nx+1)\nend do\nwri",1)

(OpEquals,"=0,nx+1)\nend do\nwrit",1)

(Num "0","0,nx+1)\nend do\nwrite",1)

(Comma,",nx+1)\nend do\nwrite(",1)

(ID "nx","nx+1)\nend do\nwrite(6",2)

(OpAdd,"+1)\nend do\nwrite(6,*",1)

(Num "1","1)\nend do\nwrite(6,*)",1)

(RParen,")\nend do\nwrite(6,*)\"",1)

(NewLine,"\nend do\nwrite(6,*)\"D",1)

(Key "end","end do\nwrite(6,*)\"Da",3)

(Key "do","do\nwrite(6,*)\"Data o",2)

(NewLine,"\nwrite(6,*)\"Data out",1)

(Key "write","write(6,*)\"Data outp",5)

(LParen,"(6,*)\"Data output at",1)

(Num "6","6,*)\"Data output at ",1)

(Comma,",*)\"Data output at t",1)

(OpMul,"*)\"Data output at ti",1)

(RParen,")\"Data output at tim",1)

(StrConst "\"Data output at time = \"","\"Data output at time",24)

(Comma,",time/60.0,\" min\"\nen",1)

(ID "time","time/60.0,\" min\"\nend",4)

(OpDiv,"/60.0,\" min\"\nend pro",1)

(Num "60.0","60.0,\" min\"\nend prog",4)

(Comma,",\" min\"\nend program ",1)

(StrConst "\" min\"","\" min\"\nend program w",6)

(NewLine,"\nend program wave2d\n",1)

(Key "end","end program wave2d\n",3)

(Key "program","program wave2d\n",7)

(ID "wave2d","wave2d\n",6)

(NewLine,"\n",1)

