./src/grid_tmp.f95:149:9: warning: missing terminating ' character
 !WV: let's set the *whole* array to this value!
         ^
cc1: warning: unrecognized command line option ‘-Wno-invalid-pp-token’
./src/velnw_tmp.f95:31:17: warning: missing terminating ' character
 ! Which means it's the values of f,g,h that are changing. g seems fine.
                 ^
cc1: warning: unrecognized command line option ‘-Wno-invalid-pp-token’

================================================================================
F4: Finite-element Fortran for FPGAs
This compiler allows Fortran finite element codes to be compiled
for execution on FPGA devices via OpenCL
================================================================================

The following command line values were parsed:

Files with subroutines to be parallelised:
	adam
	bondv1
	feedbf
	les
	press
	velfg
	velnw
File containing main subroutine: 
	main.f95
Source directory:
	./src
Fixed form: False
Loop fusion bound: Nothing
CPP Defines: WV_OPENCL, WV_NEW, NO_GLOBAL_SOR, INLINE_BOUND_CALCS, WV_TEST, TWINNED_BUFFER, NO_IO, IFBF=1, IADAM=0, 
CPP Excludes:

cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/main_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/init_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbfm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/grid_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/set_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/aveflow_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/ifdata_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondv1_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundsm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundp_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbfm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/velnw_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondv1_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundsm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=callsOfInterest: main: ["velnw","bondv1","velfg","feedbf","les","adam","press"]

./src/vel2_tmp.f95:133:16: warning: missing terminating ' character
         ! I don't think this is ever used anywhere!
                ^
./src/vel2_tmp.f95:256:14: warning: missing terminating ' character
         ! Don't need the guard, we could simply recompute
              ^
cc1: warning: unrecognized command line option ‘-Wno-invalid-pp-token’
./src/velnw_tmp.f95:31:17: warning: missing terminating ' character
 ! Which means it's the values of f,g,h that are changing. g seems fine.
                 ^
cc1: warning: unrecognized command line option ‘-Wno-invalid-pp-token’
callsOfInterest: adam: []
bondv1: []
feedbf: []
les: []
main: ["velnw","bondv1","velfg","feedbf","les","adam","press"]
press: []
velfg: []
velnw: []

callsOfInterest: adam: []
bondv1: []
feedbf: []
les: []
main: ["velnw","bondv1","velfg","feedbf","les","adam","press"]
press: []
velfg: []
velnw: []

0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/press_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondFG_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundp_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/adam_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
Parsing ./src/main.f95
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/adam_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondv1_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundsm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/press_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondFG_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundp_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/velfg_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/vel2_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/velnw_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
Parsing ./src/adam.f95
Parsing ./src/bondv1.f95
Parsing ./src/feedbf.f95
Parsing ./src/les.f95
Parsing ./src/press.f95
Parsing ./src/velfg.f95
Parsing ./src/velnw.f95

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines not for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: ./src/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character*70 :: data10
      character*70 :: data11
      character*70 :: data12
      character*70 :: data13
      character*70 :: data14
      character*70 :: data15
      character*70 :: data20
      character*70 :: data21
      character*70 :: data22
      character*70 :: data23
      character*70 :: data24
      character*70 :: data25
      character*70 :: data26
      character*70 :: data27
      character*70 :: data30
      character*70 :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: cov1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: cov5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov9
      real(4), dimension(kp) :: delx1
      real(4), dimension(0:ip,jp,kp) :: dfu1
      real(4), dimension(ip,0:jp,kp) :: dfv1
      real(4), dimension(ip,jp,kp) :: dfw1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      real(4), dimension(0:ip+1,0:jp+1) :: uspd
      real(4), dimension(0:ip+1,0:jp+1) :: vspd
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dfu1, dfv1, dfw1, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dmask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call bondv1(u, z2, dzn, v, w, n, n0, dt, dxs)
        call velfg(dx1, dy1, dzn, f, g, h, u, v, w, dfu1, dfv1, dfw1, vn, dzs, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, uspd, vspd)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	bondv1->
	    call bondv1(u, z2, dzn, v, w, n, n0, dt, dxs)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "z2", argument = VarName (fromList []) "z2"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "n0", argument = VarName (fromList []) "n0"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velfg->
	    call velfg(dx1, dy1, dzn, f, g, h, u, v, w, dfu1, dfv1, dfw1, vn, dzs, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, uspd, vspd)
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dfu1", argument = VarName (fromList []) "dfu1"}
	ArgTrans {parameter = ArgName (fromList []) "dfv1", argument = VarName (fromList []) "dfv1"}
	ArgTrans {parameter = ArgName (fromList []) "dfw1", argument = VarName (fromList []) "dfw1"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "cov1", argument = VarName (fromList []) "cov1"}
	ArgTrans {parameter = ArgName (fromList []) "cov2", argument = VarName (fromList []) "cov2"}
	ArgTrans {parameter = ArgName (fromList []) "cov3", argument = VarName (fromList []) "cov3"}
	ArgTrans {parameter = ArgName (fromList []) "cov4", argument = VarName (fromList []) "cov4"}
	ArgTrans {parameter = ArgName (fromList []) "cov5", argument = VarName (fromList []) "cov5"}
	ArgTrans {parameter = ArgName (fromList []) "cov6", argument = VarName (fromList []) "cov6"}
	ArgTrans {parameter = ArgName (fromList []) "cov7", argument = VarName (fromList []) "cov7"}
	ArgTrans {parameter = ArgName (fromList []) "cov8", argument = VarName (fromList []) "cov8"}
	ArgTrans {parameter = ArgName (fromList []) "cov9", argument = VarName (fromList []) "cov9"}
	ArgTrans {parameter = ArgName (fromList []) "nou1", argument = VarName (fromList []) "nou1"}
	ArgTrans {parameter = ArgName (fromList []) "nou2", argument = VarName (fromList []) "nou2"}
	ArgTrans {parameter = ArgName (fromList []) "nou3", argument = VarName (fromList []) "nou3"}
	ArgTrans {parameter = ArgName (fromList []) "nou4", argument = VarName (fromList []) "nou4"}
	ArgTrans {parameter = ArgName (fromList []) "nou5", argument = VarName (fromList []) "nou5"}
	ArgTrans {parameter = ArgName (fromList []) "nou6", argument = VarName (fromList []) "nou6"}
	ArgTrans {parameter = ArgName (fromList []) "nou7", argument = VarName (fromList []) "nou7"}
	ArgTrans {parameter = ArgName (fromList []) "nou8", argument = VarName (fromList []) "nou8"}
	ArgTrans {parameter = ArgName (fromList []) "nou9", argument = VarName (fromList []) "nou9"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: adam
Filename: ./src/adam.f95
Source:
subroutine adam(n,nmax,data21,fold,gold,hold,f,g,h)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      character*70, intent(In) :: data21
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: f
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: g
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: h
      real(4), dimension(ip,jp,kp), intent(InOut) :: fold
      real(4), dimension(ip,jp,kp), intent(InOut) :: gold
      real(4), dimension(ip,jp,kp), intent(InOut) :: hold
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      integer :: i,j,k
      real(4) :: fd,gd,hd
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                fd = f(i,j,k)
                                gd = g(i,j,k)
                                hd = h(i,j,k)
                                f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
                                g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
                                h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
                                fold(i,j,k) = fd
                                gold(i,j,k) = gd
                                hold(i,j,k) = hd
                end do
        end do
    end do
end subroutine adam

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: bondv1
Filename: ./src/bondv1.f95
Source:
subroutine bondv1(u,z2,dzn,v,w,n,n0,dt,dxs)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), intent(In) :: dt
      real(4), dimension(0:ip), intent(In) :: dxs
      real(4), dimension(-1:kp+2), intent(In) :: dzn
      integer, intent(In) :: n,n0
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: u
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: v
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(InOut) :: w
      real(4), dimension(0:kp+2), intent(In) :: z2
      real(4) :: u_val
      integer :: i,j,k
      real(4) :: aaa,bbb,uout,gaaa,gbbb
    do i = 0, 1, 1
        do k = 1, 78, 1
                do j = 1, jp, 1
                                u_val = 5.*((z2(k)+0.5*dzn(k))/600.)**0.2
                                u(i,j,k) = u_val
                                v(i,j,k) = 0.0
                                w(i,j,k) = 0.0
                end do
        end do
    end do
    do i = 0, 1, 1
        do k = 79, kp, 1
                do j = 1, jp, 1
                                u(i,j,k) = u(i,j,77)
                                v(i,j,k) = 0.0
                                w(i,j,k) = 0.0
                end do
        end do
    end do
    if (n==n0) then
        do k = 1, kp, 1
                do j = 1, jp, 1
                                do i = 2, ip, 1
                                                                u(i,j,k) = u(1,j,k)
                                                                v(i,j,k) = v(1,j,k)
                                                                w(i,j,k) = w(1,j,k)
                                end do
                end do
        end do
    end if
    aaa = 0.0
    do k = 1, kp, 1
        do j = 1, jp, 1
                aaa = amax1(aaa,u(ip,j,k))
        end do
    end do
    gaaa = aaa
    bbb = 1e38
    do k = 1, kp, 1
        do j = 1, jp, 1
                bbb = amin1(bbb,u(ip,j,k))
        end do
    end do
    gbbb = bbb
    uout = (gaaa+gbbb)/2.
    do k = 1, kp, 1
        do j = 1, jp, 1
                u(ip,j,k) = u(ip,j,k)-dt*uout*(u(ip,j,k)-u(ip-1,j,k))/dxs(ip)
        end do
    end do
    do k = 1, kp, 1
        do j = 1, jp, 1
                v(ip+1,j,k) = v(ip+1,j,k)-dt*uout*(v(ip+1,j,k)-v(ip,j,k))/dxs(ip)
        end do
    end do
    do k = 1, kp, 1
        do j = 1, jp, 1
                w(ip+1,j,k) = w(ip+1,j,k)-dt*uout*(w(ip+1,j,k)-w(ip,j,k))/dxs(ip)
        end do
    end do
    do k = 0, kp+1, 1
        do i = 0, ip+1, 1
                u(i,0,k) = u(i,jp,k)
                u(i,jp+1,k) = u(i,1,k)
        end do
    end do
    do k = 0, kp+1, 1
        do i = 0, ip+1, 1
                v(i,0,k) = v(i,jp,k)
                v(i,jp+1,k) = v(i,1,k)
        end do
    end do
    do k = 0, kp, 1
        do i = 0, ip+1, 1
                w(i,0,k) = w(i,jp,k)
                w(i,jp+1,k) = w(i,1,k)
        end do
    end do
    do j = 0, jp+1, 1
        do i = 0, ip+1, 1
                u(i,j,0) = -u(i,j,1)
                u(i,j,kp+1) = u(i,j,kp)
        end do
    end do
    do j = 0, jp+1, 1
        do i = 0, ip+1, 1
                v(i,j,0) = -v(i,j,1)
                v(i,j,kp+1) = v(i,j,kp)
        end do
    end do
    do j = -1, jp+1, 1
        do i = 0, ip+1, 1
                w(i,j,0) = 0.0
                w(i,j,kp) = 0.0
        end do
    end do
end subroutine bondv1

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: feedbf
Filename: ./src/feedbf.f95
Source:
subroutine feedbf(usum,u,bmask1,vsum,v,cmask1,wsum,w,dmask1,alpha,dt,beta,fx,fy,fz,f,g,h,n)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1), intent(In) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: f
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fx
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fy
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fz
      integer, intent(In) :: n
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: g
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: h
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: u
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: usum
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: v
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(In) :: w
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: wsum
      integer :: i,j,k
      real(4) :: f1x,f1y,f1z,f2x,f2y,f2z
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
                                vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
                                wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
                                f1x = alpha*usum(i,j,k)*dt
                                f1y = alpha*vsum(i,j,k)*dt
                                f1z = alpha*wsum(i,j,k)*dt
                                f2x = beta*u(i,j,k)*bmask1(i,j,k)
                                f2y = beta*v(i,j,k)*cmask1(i,j,k)
                                f2z = beta*w(i,j,k)*dmask1(i,j,k)
                                fx(i,j,k) = f1x+f2x
                                fy(i,j,k) = f1y+f2y
                                fz(i,j,k) = f1z+f2z
                end do
        end do
    end do
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                f(i,j,k) = f(i,j,k)+fx(i,j,k)
                                g(i,j,k) = g(i,j,k)+fy(i,j,k)
                                h(i,j,k) = h(i,j,k)+fz(i,j,k)
                end do
        end do
    end do
end subroutine feedbf

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: les
Filename: ./src/les.f95
Source:
subroutine les(delx1,dx1,dy1,dzn,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm,f,g,h,u,v,uspd,vspd,dxs,dys,n)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), dimension(kp), intent(Out) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(In) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(In) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(In) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(In) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(In) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(In) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(In) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(In) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(In) :: diu9
      integer, intent(In) :: n
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(-1:ip+1), intent(In) :: dx1
      real(4), dimension(0:jp+1), intent(In) :: dy1
      real(4), dimension(-1:kp+2), intent(In) :: dzn
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: f
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: g
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: h
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1), intent(Out) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: u
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: v
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(In) :: w
      real(4), dimension(0:ip+1,0:jp+1), intent(In) :: uspd
      real(4), dimension(0:ip+1,0:jp+1), intent(In) :: vspd
      real(4), dimension(0:ip), intent(In) :: dxs
      real(4), dimension(0:jp), intent(In) :: dys
      integer :: i,j,k
      real(4) :: csx1
      real(4) :: dudxx1,dudyx1,dudzx1,dvdxx1,dvdyx1,dvdzx1,dwdxx1,dwdyx1,dwdzx1
      real(4) :: visux2,visux1,visuy2,visuy1,visuz2,visuz1
      real(4) :: visvx2,visvx1,visvy2,visvy1,visvz2,visvz1
      real(4) :: viswx2,viswx1,viswy2,viswy1,viswz2,viswz1
      real(4) :: evsx2,evsx1,evsy2,evsy1,evsz2,evsz1
      real(4) :: vfu,vfv,vfw
    do k = 1, kp, 1
        delx1(k) = (dx1(0)*dy1(0)*dzn(k))**(1./3.)
    end do
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                dudxx1 = diu1(i,j,k)
                                dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
                                dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
                                dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
                                dvdyx1 = diu5(i,j,k)
                                dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
                                dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
                                dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
                                dwdzx1 = diu9(i,j,k)
                                csx1 = cs0
                                sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
                end do
        end do
    end do
    do k = 0, kp+1, 1
        do j = -1, jp+1, 1
                sm(0,j,k) = sm(1,j,k)
                sm(ip+1,j,k) = sm(ip,j,k)
        end do
    end do
    do k = 0, kp+1, 1
        do i = 0, ip+1, 1
                sm(i,jp+1,k) = sm(i,jp,k)
                sm(i,0,k) = sm(i,1,k)
        end do
    end do
    do j = -1, jp+1, 1
        do i = 0, ip+1, 1
                sm(i,j,0) = -sm(i,j,1)
                sm(i,j,kp+1) = sm(i,j,kp)
        end do
    end do
    do k = 2, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                evsx2 = sm(i+1,j,k)
                                evsx1 = sm(i,j,k)
                                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                                visux2 = (evsx2)*2.*diu1(i+1,j,k)
                                visux1 = (evsx1)*2.*diu1(i,j,k)
                                visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                                visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
                                visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                                visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
                                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
                                f(i,j,k) = (f(i,j,k)+vfu)
                end do
        end do
    end do
    do j = 1, jp, 1
        do i = 1, ip, 1
                evsx2 = sm(i+1,j,1)
                evsx1 = sm(i,j,1)
                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,1)+dx1(i)*sm(i+1,j-1,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
                visux2 = (evsx2)*2.*diu1(i+1,j,1)
                visux1 = (evsx1)*2.*diu1(i,j,1)
                visuy2 = (evsy2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
                visuy1 = (evsy1)*(diu2(i,j,1)+diu4(i+1,j-1,1))
                visuz2 = (evsz2)*(diu3(i,j,2)+diu7(i+1,j,1))
                visuz1 = (0.4*uspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(u(i,j,1)/uspd(i,j))
                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(1)
                f(i,j,1) = (f(i,j,1)+vfu)
        end do
    end do
    do k = 2, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                evsy2 = sm(i,j+1,k)
                                evsy1 = sm(i,j,k)
                                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                                visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                                visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
                                visvy2 = (evsy2)*2.*diu5(i,j+1,k)
                                visvy1 = (evsy1)*2.*diu5(i,j,k)
                                visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                                visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
                                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
                                g(i,j,k) = (g(i,j,k)+vfv)
                end do
        end do
    end do
    do j = 1, jp, 1
        do i = 1, ip, 1
                evsy2 = sm(i,j+1,1)
                evsy1 = sm(i,j,1)
                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,1)+dx1(i-1)*sm(i,j,1))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,1)+dx1(i-1)*sm(i,j+1,1))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
                visvx2 = (evsx2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
                visvx1 = (evsx1)*(diu2(i-1,j+1,1)+diu4(i,j,1))
                visvy2 = (evsy2)*2.*diu5(i,j+1,1)
                visvy1 = (evsy1)*2.*diu5(i,j,1)
                visvz2 = (evsz2)*(diu6(i,j,2)+diu8(i,j+1,1))
                visvz1 = (0.4*vspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(v(i,j,1)/vspd(i,j))
                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(1)
                g(i,j,1) = (g(i,j,1)+vfv)
        end do
    end do
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                evsz2 = sm(i,j,k+1)
                                evsz1 = sm(i,j,k)
                                evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                                evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
                                evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
                                evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
                                viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                                viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
                                viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                                viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
                                viswz2 = (evsz2)*2.*diu9(i,j,k+1)
                                viswz1 = (evsz1)*2.*diu9(i,j,k)
                                vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
                                h(i,j,k) = (h(i,j,k)+vfw)
                end do
        end do
    end do
    return 
end subroutine les

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: press
Filename: ./src/press.f95
Source:
subroutine press(u,v,w,p,rhs,f,g,h,dx1,dy1,dzn,dxs,dys,dzs,dt,n,nmax)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), dimension(0:ip), intent(In) :: dxs
      real(4), dimension(0:jp), intent(In) :: dys
      real(4), dimension(-1:kp+2), intent(In) :: dzs
      real(4) :: cn1,cn2l,cn2s,cn3l,cn3s,cn4l,cn4s,dz1,dz2
      real(4), intent(In) :: dt
      real(4), dimension(-1:ip+1), intent(In) :: dx1
      real(4), dimension(0:jp+1), intent(In) :: dy1
      real(4), dimension(-1:kp+2), intent(In) :: dzn
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: f
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: g
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: h
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(Out) :: rhs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: u
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: v
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(In) :: w
      integer :: nn
      integer :: i,j,k,l,nrd
      real(4) :: rhsav,pav,area,pco,sor,reltmp
      real, parameter :: pjuge = 0.0001 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
    do k = 1, kp, 1
        do j = 1, jp, 1
                f(0,j,k) = f(1,j,k)
        end do
    end do
    do k = 1, kp, 1
        do i = 1, ip, 1
                g(i,0,k) = g(i,jp,k)
        end do
    end do
    do j = 1, jp, 1
        do i = 1, ip, 1
                h(i,j,0) = 0.0
                h(i,j,kp) = 0.0
        end do
    end do
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
                                rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
                end do
        end do
    end do
    rhsav = 0.0
    area = 0.0
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
                                area = area+dx1(i)*dy1(j)*dzn(k)
                end do
        end do
    end do
    rhsav = rhsav/area
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                rhs(i,j,k) = rhs(i,j,k)-rhsav
                end do
        end do
    end do
    do l = 1, nmaxp, 1
        sor = 0.0
        do nrd = 0, 1, 1
                do k = 1, kp, 1
                                do j = 1, jp, 1
                                                                do i = 1, ip, 1
                                                                                                                                dz1 = dzs(k-1)
                                                                                                                                dz2 = dzs(k)
                                                                                                                                cn4s = 2./(dz1*(dz1+dz2))
                                                                                                                                cn4l = 2./(dz2*(dz1+dz2))
                                                                                                                                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                                                                                                                                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                                                                                                                                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                                                                                                                                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                                                                                                                                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                                                                                                                                if (nrd==0) then
                                                                                                                                                                                                                                                                reltmp = omega*(cn1*(cn2l*p(0,i+1,j,k)+cn2s*p(0,i-1,j,k)+cn3l*p(0,i,j+1,k)+cn3s*p(0,i,j-1,k)+cn4l*p(0,i,j,k+1)+cn4s*p(0,i,j,k-1)-rhs(i,j,k))-p(0,i,j,k))
                                                                                                                                                                                                                                                                p(1,i,j,k) = p(0,i,j,k)+reltmp
                                                                                                                                else
                                                                                                                                                                                                                                                                reltmp = omega*(cn1*(cn2l*p(1,i+1,j,k)+cn2s*p(1,i-1,j,k)+cn3l*p(1,i,j+1,k)+cn3s*p(1,i,j-1,k)+cn4l*p(1,i,j,k+1)+cn4s*p(1,i,j,k-1)-rhs(i,j,k))-p(1,i,j,k))
                                                                                                                                                                                                                                                                p(0,i,j,k) = p(1,i,j,k)+reltmp
                                                                                                                                end if
                                                                end do
                                end do
                end do
                do k = 0, kp+1, 1
                                do j = 0, jp+1, 1
                                                                p(0,0,j,k) = p(0,1,j,k)
                                                                p(0,ip+1,j,k) = p(0,ip,j,k)
                                end do
                end do
                do k = 0, kp+1, 1
                                do i = 0, ip+1, 1
                                                                p(0,i,0,k) = p(0,i,jp,k)
                                                                p(0,i,jp+1,k) = p(0,i,1,k)
                                end do
                end do
        end do
        do j = 0, jp+1, 1
                do i = 0, ip+1, 1
                                p(0,i,j,0) = p(0,i,j,1)
                                p(0,i,j,kp+1) = p(0,i,j,kp)
                end do
        end do
    end do
    pav = 0.0
    pco = 0.0
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                pav = pav+p(0,i,j,k)*dx1(i)*dy1(j)*dzn(k)
                                pco = pco+dx1(i)*dy1(j)*dzn(k)
                end do
        end do
    end do
    pav = pav/pco
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                p(0,i,j,k) = p(0,i,j,k)-pav
                end do
        end do
    end do
    do k = 0, kp+1, 1
        do j = 0, jp+1, 1
                p(0,0,j,k) = p(0,1,j,k)
                p(0,ip+1,j,k) = p(0,ip,j,k)
        end do
    end do
    do k = 0, kp+1, 1
        do i = 0, ip+1, 1
                p(0,i,0,k) = p(0,i,jp,k)
                p(0,i,jp+1,k) = p(0,i,1,k)
        end do
    end do
    do j = 0, jp+1, 1
        do i = 0, ip+1, 1
                p(0,i,j,0) = p(0,i,j,1)
                p(0,i,j,kp+1) = p(0,i,j,kp)
        end do
    end do
end subroutine press

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velfg
Filename: ./src/velfg.f95
Source:
subroutine velfg(dx1,dy1,dzn,f,g,h,u,v,w,dfu1,dfv1,dfw1,vn,dzs,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,cov1,cov2,cov3,cov4,cov5,cov6,cov7,cov8,cov9,nou1,nou2,nou3,nou4,nou5,nou6,nou7,nou8,nou9,uspd,vspd)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov9
      real(4), dimension(0:ip,jp,kp), intent(Out) :: dfu1
      real(4), dimension(ip,0:jp,kp), intent(Out) :: dfv1
      real(4), dimension(ip,jp,kp), intent(Out) :: dfw1
      real(4), intent(In) :: vn
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu9
      real(4), dimension(-1:ip+1), intent(In) :: dx1
      real(4), dimension(0:jp+1), intent(In) :: dy1
      real(4), dimension(-1:kp+2), intent(In) :: dzn
      real(4), dimension(-1:kp+2), intent(In) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: f
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: g
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: h
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou9
      real(4) :: nou1_,nou2_,nou3_,nou4_,nou5_,nou6_,nou7_,nou8_,nou9_
      real(4) :: diu1_,diu2_,diu3_,diu4_,diu5_,diu6_,diu7_,diu8_,diu9_
      real(4) :: cov1_i,cov2_j,cov3_k,cov4_i,cov5_j,cov6_k,cov7_i,cov8_j,cov9_k
      real(4) :: nou1_ip1,nou2_jp1,nou3_kp1,nou4_ip1,nou5_jp1,nou6_kp1,nou7_ip1,nou8_jp1,nou9_kp1
      real(4) :: diu1_ip1,diu2_jp1,diu3_kp1,diu4_ip1,diu5_jp1,diu6_kp1,diu7_ip1,diu8_jp1,diu9_kp1
      real(4) :: cov1_ip1,cov2_jp1,cov3_kp1,cov4_ip1,cov5_jp1,cov6_kp1,cov7_ip1,cov8_jp1,cov9_kp1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: u
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: v
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(In) :: w
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: uspd
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: vspd
      integer :: i,j,k
      real(4) :: covc,covx1,covy1,covz1
    call vel2(nou1, nou5, nou9, nou2, nou3, nou4, nou6, nou7, nou8, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, u, v, w, dx1, dy1, dzn, dzs, uspd, vspd)
    do j = 1, jp, 1
        do i = 1, ip, 1
                uspd(i,j) = (u(i,j,1)**2+((0.5*(v(i,j-1,1)+v(i,j,1))*dx1(i+1)+0.5*(v(i+1,j-1,1)+v(i+1,j,1))*dx1(i))/(dx1(i)+dx1(i+1)))**2)**0.5
        end do
    end do
    do j = 1, jp, 1
        do i = 1, ip, 1
                vspd(i,j) = (v(i,j,1)**2+((0.5*(u(i-1,j,1)+u(i,j,1))*dy1(j+1)+0.5*(u(i-1,j+1,1)+u(i,j+1,1))*dy1(j))/(dy1(j)+dy1(j+1)))**2)**0.5
        end do
    end do
    write(6, *)('CHK_uspd_vspd=', uspd(ip/2,jp/2), vspd(ip/2,jp/2))
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                covx1 = (dx1(i+1)*cov1(i,j,k)+dx1(i)*cov1(i+1,j,k))/(dx1(i)+dx1(i+1))
                                covy1 = (cov2(i,j,k)+cov2(i,j+1,k))/2.
                                covz1 = (cov3(i,j,k)+cov3(i,j,k+1))/2.
                                covc = covx1+covy1+covz1
                                f(i,j,k) = (-covc)
                end do
        end do
    end do
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                covx1 = (cov4(i,j,k)+cov4(i+1,j,k))/2.
                                covy1 = (dy1(j+1)*cov5(i,j,k)+dy1(j)*cov5(i,j+1,k))/(dy1(j)+dy1(j+1))
                                covz1 = (cov6(i,j,k)+cov6(i,j,k+1))/2.
                                covc = covx1+covy1+covz1
                                g(i,j,k) = (-covc)
                end do
        end do
    end do
    do k = 1, kp-1, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                covx1 = (cov7(i,j,k)+cov7(i+1,j,k))/2.
                                covy1 = (cov8(i,j,k)+cov8(i,j+1,k))/2.
                                covz1 = (dzn(k+1)*cov9(i,j,k)+dzn(k)*cov9(i,j,k+1))/(dzn(k)+dzn(k+1))
                                covc = covx1+covy1+covz1
                                h(i,j,k) = (-covc)
                end do
        end do
    end do
    return 
end subroutine velfg

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw
Filename: ./src/velnw.f95
Source:
subroutine velnw(p,ro,dxs,u,dt,f,dys,v,g,dzs,w,h)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), intent(In) :: dt
      real(4), dimension(0:ip), intent(In) :: dxs
      real(4), dimension(0:jp), intent(In) :: dys
      real(4), dimension(-1:kp+2), intent(In) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp), intent(In) :: f
      real(4), dimension(0:ip,0:jp,0:kp), intent(In) :: g
      real(4), dimension(0:ip,0:jp,0:kp), intent(In) :: h
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1), intent(In) :: p
      real(4), intent(In) :: ro
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: u
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: v
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(InOut) :: w
      integer :: i,j,k
      real(4) :: pz
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                pz = (-p(0,i,j,k)+p(0,i+1,j,k))/ro/dxs(i)
                                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
                end do
        end do
    end do
    do k = 1, kp, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                pz = (-p(0,i,j,k)+p(0,i,j+1,k))/ro/dys(j)
                                v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
                end do
        end do
    end do
    do k = 1, kp-1, 1
        do j = 1, jp, 1
                do i = 1, ip, 1
                                pz = (-p(0,i,j,k)+p(0,i,j,k+1))/ro/dzs(k)
                                w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
                end do
        end do
    end do
    return 
end subroutine velnw

Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines for offload merged 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: ./src/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character*70 :: data10
      character*70 :: data11
      character*70 :: data12
      character*70 :: data13
      character*70 :: data14
      character*70 :: data15
      character*70 :: data20
      character*70 :: data21
      character*70 :: data22
      character*70 :: data23
      character*70 :: data24
      character*70 :: data25
      character*70 :: data26
      character*70 :: data27
      character*70 :: data30
      character*70 :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: cov1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: cov5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov9
      real(4), dimension(kp) :: delx1
      real(4), dimension(0:ip,jp,kp) :: dfu1
      real(4), dimension(ip,0:jp,kp) :: dfv1
      real(4), dimension(ip,jp,kp) :: dfw1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      real(4), dimension(0:ip+1,0:jp+1) :: uspd
      real(4), dimension(0:ip+1,0:jp+1) :: vspd
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dfu1, dfv1, dfw1, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dmask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call bondv1(u, z2, dzn, v, w, n, n0, dt, dxs)
        call velfg(dx1, dy1, dzn, f, g, h, u, v, w, dfu1, dfv1, dfw1, vn, dzs, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, uspd, vspd)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	bondv1->
	    call bondv1(u, z2, dzn, v, w, n, n0, dt, dxs)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "z2", argument = VarName (fromList []) "z2"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "n0", argument = VarName (fromList []) "n0"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velfg->
	    call velfg(dx1, dy1, dzn, f, g, h, u, v, w, dfu1, dfv1, dfw1, vn, dzs, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, uspd, vspd)
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dfu1", argument = VarName (fromList []) "dfu1"}
	ArgTrans {parameter = ArgName (fromList []) "dfv1", argument = VarName (fromList []) "dfv1"}
	ArgTrans {parameter = ArgName (fromList []) "dfw1", argument = VarName (fromList []) "dfw1"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "cov1", argument = VarName (fromList []) "cov1"}
	ArgTrans {parameter = ArgName (fromList []) "cov2", argument = VarName (fromList []) "cov2"}
	ArgTrans {parameter = ArgName (fromList []) "cov3", argument = VarName (fromList []) "cov3"}
	ArgTrans {parameter = ArgName (fromList []) "cov4", argument = VarName (fromList []) "cov4"}
	ArgTrans {parameter = ArgName (fromList []) "cov5", argument = VarName (fromList []) "cov5"}
	ArgTrans {parameter = ArgName (fromList []) "cov6", argument = VarName (fromList []) "cov6"}
	ArgTrans {parameter = ArgName (fromList []) "cov7", argument = VarName (fromList []) "cov7"}
	ArgTrans {parameter = ArgName (fromList []) "cov8", argument = VarName (fromList []) "cov8"}
	ArgTrans {parameter = ArgName (fromList []) "cov9", argument = VarName (fromList []) "cov9"}
	ArgTrans {parameter = ArgName (fromList []) "nou1", argument = VarName (fromList []) "nou1"}
	ArgTrans {parameter = ArgName (fromList []) "nou2", argument = VarName (fromList []) "nou2"}
	ArgTrans {parameter = ArgName (fromList []) "nou3", argument = VarName (fromList []) "nou3"}
	ArgTrans {parameter = ArgName (fromList []) "nou4", argument = VarName (fromList []) "nou4"}
	ArgTrans {parameter = ArgName (fromList []) "nou5", argument = VarName (fromList []) "nou5"}
	ArgTrans {parameter = ArgName (fromList []) "nou6", argument = VarName (fromList []) "nou6"}
	ArgTrans {parameter = ArgName (fromList []) "nou7", argument = VarName (fromList []) "nou7"}
	ArgTrans {parameter = ArgName (fromList []) "nou8", argument = VarName (fromList []) "nou8"}
	ArgTrans {parameter = ArgName (fromList []) "nou9", argument = VarName (fromList []) "nou9"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw_bondv1_velfg_feedbf_les_adam_press_merged
Filename: 
Source:
module module_velnw_bondv1_velfg_feedbf_les_adam_press_merged
contains
subroutine velnw_bondv1_velfg_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,cov1,cov2,cov3,cov4,cov5,cov6,cov7,cov8,cov9,data21,delx1,dfu1,dfv1,dfw1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dmask1,dt,dx1,dxs,dy1,dys,dzn,dzs_F4_cas,f,fold,fx,fy,fz,g,gold,h,hold,n,n0,nmax,nou1,nou2,nou3,nou4,nou5,nou6,nou7,nou8,nou9,p,rhs,ro,sm,u,uspd,usum,v,vn,vspd,vsum,w_F4_cas,wsum,z2)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = jp 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4) :: aaa,bbb,uout,gaaa,gbbb
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1), intent(In) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: cmask1
      real(4) :: cn1,cn2l,cn2s,cn3l,cn3s,cn4l,cn4s,dz1,dz2
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov1
      real(4) :: cov1_i,cov2_j,cov3_k,cov4_i,cov5_j,cov6_k,cov7_i,cov8_j,cov9_k
      real(4) :: cov1_ip1,cov2_jp1,cov3_kp1,cov4_ip1,cov5_jp1,cov6_kp1,cov7_ip1,cov8_jp1,cov9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov9
      real(4) :: covc,covx1,covy1,covz1
      real(4) :: csx1
      character*70, intent(In) :: data21
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(kp), intent(Out) :: delx1
      real(4), dimension(0:ip,jp,kp), intent(Out) :: dfu1
      real(4), dimension(ip,0:jp,kp), intent(Out) :: dfv1
      real(4), dimension(ip,jp,kp), intent(Out) :: dfw1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu1
      real(4) :: diu1_,diu2_,diu3_,diu4_,diu5_,diu6_,diu7_,diu8_,diu9_
      real(4) :: diu1_ip1,diu2_jp1,diu3_kp1,diu4_ip1,diu5_jp1,diu6_kp1,diu7_ip1,diu8_jp1,diu9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu9
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1,dudyx1,dudzx1,dvdxx1,dvdyx1,dvdzx1,dwdxx1,dwdyx1,dwdzx1
      real(4), dimension(-1:ip+1), intent(In) :: dx1
      real(4), dimension(0:ip), intent(In) :: dxs
      real(4), dimension(0:jp+1), intent(In) :: dy1
      real(4), dimension(0:jp), intent(In) :: dys
      real(4), dimension(-1:kp+2), intent(In) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(-1:kp+2), intent(In) :: dzs_F4_cas
      real(4) :: evsx2,evsx1,evsy2,evsy1,evsz2,evsz1
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: f
      real(4) :: f1x,f1y,f1z,f2x,f2y,f2z
      real(4) :: fd,gd,hd
      real(4), dimension(ip,jp,kp), intent(InOut) :: fold
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fx
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fy
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fz
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: g
      real(4), dimension(ip,jp,kp), intent(InOut) :: gold
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: h
      real(4), dimension(ip,jp,kp), intent(InOut) :: hold
      integer :: i,j,k
      integer, intent(In) :: n,n0
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou1
      real(4) :: nou1_,nou2_,nou3_,nou4_,nou5_,nou6_,nou7_,nou8_,nou9_
      real(4) :: nou1_ip1,nou2_jp1,nou3_kp1,nou4_ip1,nou5_jp1,nou6_kp1,nou7_ip1,nou8_jp1,nou9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4) :: pz
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(Out) :: rhs
      real(4) :: rhsav,pav,area,pco,sor,reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1), intent(Out) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: u
      real(4) :: u_val
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: uspd
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: usum
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: v
      real(4) :: vfu,vfv,vfw
      real(4) :: visux2,visux1,visuy2,visuy1,visuz2,visuz1
      real(4) :: visvx2,visvx1,visvy2,visvy1,visvz2,visvz1
      real(4) :: viswx2,viswx1,viswy2,viswy1,viswz2,viswz1
      real(4), intent(In) :: vn
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: vspd
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(In) :: w
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(InOut) :: w_F4_cas
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: wsum
      real(4), dimension(0:kp+2), intent(In) :: z2
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                pz = (-p(0,i,j,k)+p(0,i+1,j,k))/ro/dxs(i)
                                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
                end do
        end do
    end do
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                pz = (-p(0,i,j,k)+p(0,i,j+1,k))/ro/dys(j)
                                v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
                end do
        end do
    end do
    do k = 1, 79, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                pz = (-p(0,i,j,k)+p(0,i,j,k+1))/ro/dzs_F4_cas(k)
                                w_F4_cas(i,j,k) = w_F4_cas(i,j,k)+dt*(h(i,j,k)-pz)
                end do
        end do
    end do
    return 
    do i = 0, 1, 1
        do k = 1, 78, 1
                do j = 1, 300.0, 1
                                u_val = 5.*((z2(k)+0.5*dzn(k))/600.)**0.2
                                u(i,j,k) = u_val
                                v(i,j,k) = 0.0
                                w_F4_cas(i,j,k) = 0.0
                end do
        end do
    end do
    do i = 0, 1, 1
        do k = 79, 80.0, 1
                do j = 1, 300.0, 1
                                u(i,j,k) = u(i,j,77)
                                v(i,j,k) = 0.0
                                w_F4_cas(i,j,k) = 0.0
                end do
        end do
    end do
    if (n==n0) then
        do k = 1, 80.0, 1
                do j = 1, 300.0, 1
                                do i = 2, 300.0, 1
                                                                u(i,j,k) = u(1,j,k)
                                                                v(i,j,k) = v(1,j,k)
                                                                w_F4_cas(i,j,k) = w_F4_cas(1,j,k)
                                end do
                end do
        end do
    end if
    aaa = 0.0
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                aaa = amax1(aaa,u(300.0,j,k))
        end do
    end do
    gaaa = aaa
    bbb = 1e38
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                bbb = amin1(bbb,u(300.0,j,k))
        end do
    end do
    gbbb = bbb
    uout = (gaaa+gbbb)/2.
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                u(300.0,j,k) = u(300.0,j,k)-dt*uout*(u(300.0,j,k)-u(299,j,k))/dxs(300.0)
        end do
    end do
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                v(301,j,k) = v(301,j,k)-dt*uout*(v(301,j,k)-v(300.0,j,k))/dxs(300.0)
        end do
    end do
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                w_F4_cas(301,j,k) = w_F4_cas(301,j,k)-dt*uout*(w_F4_cas(301,j,k)-w_F4_cas(300.0,j,k))/dxs(300.0)
        end do
    end do
    do k = 0, 81, 1
        do i = 0, 301, 1
                u(i,0,k) = u(i,300.0,k)
                u(i,301,k) = u(i,1,k)
        end do
    end do
    do k = 0, 81, 1
        do i = 0, 301, 1
                v(i,0,k) = v(i,300.0,k)
                v(i,301,k) = v(i,1,k)
        end do
    end do
    do k = 0, 80.0, 1
        do i = 0, 301, 1
                w_F4_cas(i,0,k) = w_F4_cas(i,300.0,k)
                w_F4_cas(i,301,k) = w_F4_cas(i,1,k)
        end do
    end do
    do j = 0, 301, 1
        do i = 0, 301, 1
                u(i,j,0) = -u(i,j,1)
                u(i,j,81) = u(i,j,80.0)
        end do
    end do
    do j = 0, 301, 1
        do i = 0, 301, 1
                v(i,j,0) = -v(i,j,1)
                v(i,j,81) = v(i,j,80.0)
        end do
    end do
    do j = -1, 301, 1
        do i = 0, 301, 1
                w_F4_cas(i,j,0) = 0.0
                w_F4_cas(i,j,80.0) = 0.0
        end do
    end do
    call vel2(nou1, nou5, nou9, nou2, nou3, nou4, nou6, nou7, nou8, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, u, v, w_F4_cas, dx1, dy1, dzn, dzs_F4_cas, uspd, vspd)
    do j = 1, 300.0, 1
        do i = 1, 300.0, 1
                uspd(i,j) = (u(i,j,1)**2+((0.5*(v(i,j-1,1)+v(i,j,1))*dx1(i+1)+0.5*(v(i+1,j-1,1)+v(i+1,j,1))*dx1(i))/(dx1(i)+dx1(i+1)))**2)**0.5
        end do
    end do
    do j = 1, 300.0, 1
        do i = 1, 300.0, 1
                vspd(i,j) = (v(i,j,1)**2+((0.5*(u(i-1,j,1)+u(i,j,1))*dy1(j+1)+0.5*(u(i-1,j+1,1)+u(i,j+1,1))*dy1(j))/(dy1(j)+dy1(j+1)))**2)**0.5
        end do
    end do
    write(6, *)('CHK_uspd_vspd=', uspd(ip/2,jp/2), vspd(ip/2,jp/2))
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                covx1 = (dx1(i+1)*cov1(i,j,k)+dx1(i)*cov1(i+1,j,k))/(dx1(i)+dx1(i+1))
                                covy1 = (cov2(i,j,k)+cov2(i,j+1,k))/2.
                                covz1 = (cov3(i,j,k)+cov3(i,j,k+1))/2.
                                covc = covx1+covy1+covz1
                                f(i,j,k) = (-covc)
                end do
        end do
    end do
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                covx1 = (cov4(i,j,k)+cov4(i+1,j,k))/2.
                                covy1 = (dy1(j+1)*cov5(i,j,k)+dy1(j)*cov5(i,j+1,k))/(dy1(j)+dy1(j+1))
                                covz1 = (cov6(i,j,k)+cov6(i,j,k+1))/2.
                                covc = covx1+covy1+covz1
                                g(i,j,k) = (-covc)
                end do
        end do
    end do
    do k = 1, 79, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                covx1 = (cov7(i,j,k)+cov7(i+1,j,k))/2.
                                covy1 = (cov8(i,j,k)+cov8(i,j+1,k))/2.
                                covz1 = (dzn(k+1)*cov9(i,j,k)+dzn(k)*cov9(i,j,k+1))/(dzn(k)+dzn(k+1))
                                covc = covx1+covy1+covz1
                                h(i,j,k) = (-covc)
                end do
        end do
    end do
    return 
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
                                vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
                                wsum(i,j,k) = (wsum(i,j,k)+w_F4_cas(i,j,k))*dmask1(i,j,k)
                                f1x = alpha*usum(i,j,k)*dt
                                f1y = alpha*vsum(i,j,k)*dt
                                f1z = alpha*wsum(i,j,k)*dt
                                f2x = beta*u(i,j,k)*bmask1(i,j,k)
                                f2y = beta*v(i,j,k)*cmask1(i,j,k)
                                f2z = beta*w_F4_cas(i,j,k)*dmask1(i,j,k)
                                fx(i,j,k) = f1x+f2x
                                fy(i,j,k) = f1y+f2y
                                fz(i,j,k) = f1z+f2z
                end do
        end do
    end do
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                f(i,j,k) = f(i,j,k)+fx(i,j,k)
                                g(i,j,k) = g(i,j,k)+fy(i,j,k)
                                h(i,j,k) = h(i,j,k)+fz(i,j,k)
                end do
        end do
    end do
    do k = 1, 80.0, 1
        delx1(k) = (dx1(0)*dy1(0)*dzn(k))**(1./3.)
    end do
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                dudxx1 = diu1(i,j,k)
                                dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
                                dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
                                dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
                                dvdyx1 = diu5(i,j,k)
                                dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
                                dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
                                dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
                                dwdzx1 = diu9(i,j,k)
                                csx1 = 0.14
                                sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
                end do
        end do
    end do
    do k = 0, 81, 1
        do j = -1, 301, 1
                sm(0,j,k) = sm(1,j,k)
                sm(301,j,k) = sm(300.0,j,k)
        end do
    end do
    do k = 0, 81, 1
        do i = 0, 301, 1
                sm(i,301,k) = sm(i,300.0,k)
                sm(i,0,k) = sm(i,1,k)
        end do
    end do
    do j = -1, 301, 1
        do i = 0, 301, 1
                sm(i,j,0) = -sm(i,j,1)
                sm(i,j,81) = sm(i,j,80.0)
        end do
    end do
    do k = 2, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                evsx2 = sm(i+1,j,k)
                                evsx1 = sm(i,j,k)
                                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                                visux2 = (evsx2)*2.*diu1(i+1,j,k)
                                visux1 = (evsx1)*2.*diu1(i,j,k)
                                visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                                visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
                                visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                                visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
                                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
                                f(i,j,k) = (f(i,j,k)+vfu)
                end do
        end do
    end do
    do j = 1, 300.0, 1
        do i = 1, 300.0, 1
                evsx2 = sm(i+1,j,1)
                evsx1 = sm(i,j,1)
                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,1)+dx1(i)*sm(i+1,j-1,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
                visux2 = (evsx2)*2.*diu1(i+1,j,1)
                visux1 = (evsx1)*2.*diu1(i,j,1)
                visuy2 = (evsy2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
                visuy1 = (evsy1)*(diu2(i,j,1)+diu4(i+1,j-1,1))
                visuz2 = (evsz2)*(diu3(i,j,2)+diu7(i+1,j,1))
                visuz1 = (0.4*uspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(u(i,j,1)/uspd(i,j))
                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(1)
                f(i,j,1) = (f(i,j,1)+vfu)
        end do
    end do
    do k = 2, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                evsy2 = sm(i,j+1,k)
                                evsy1 = sm(i,j,k)
                                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                                visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                                visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
                                visvy2 = (evsy2)*2.*diu5(i,j+1,k)
                                visvy1 = (evsy1)*2.*diu5(i,j,k)
                                visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                                visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
                                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
                                g(i,j,k) = (g(i,j,k)+vfv)
                end do
        end do
    end do
    do j = 1, 300.0, 1
        do i = 1, 300.0, 1
                evsy2 = sm(i,j+1,1)
                evsy1 = sm(i,j,1)
                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,1)+dx1(i-1)*sm(i,j,1))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,1)+dx1(i-1)*sm(i,j+1,1))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
                visvx2 = (evsx2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
                visvx1 = (evsx1)*(diu2(i-1,j+1,1)+diu4(i,j,1))
                visvy2 = (evsy2)*2.*diu5(i,j+1,1)
                visvy1 = (evsy1)*2.*diu5(i,j,1)
                visvz2 = (evsz2)*(diu6(i,j,2)+diu8(i,j+1,1))
                visvz1 = (0.4*vspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(v(i,j,1)/vspd(i,j))
                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(1)
                g(i,j,1) = (g(i,j,1)+vfv)
        end do
    end do
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                evsz2 = sm(i,j,k+1)
                                evsz1 = sm(i,j,k)
                                evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                                evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
                                evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
                                evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
                                viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                                viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
                                viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                                viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
                                viswz2 = (evsz2)*2.*diu9(i,j,k+1)
                                viswz1 = (evsz1)*2.*diu9(i,j,k)
                                vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
                                h(i,j,k) = (h(i,j,k)+vfw)
                end do
        end do
    end do
    return 
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                fd = f(i,j,k)
                                gd = g(i,j,k)
                                hd = h(i,j,k)
                                f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
                                g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
                                h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
                                fold(i,j,k) = fd
                                gold(i,j,k) = gd
                                hold(i,j,k) = hd
                end do
        end do
    end do
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                f(0,j,k) = f(1,j,k)
        end do
    end do
    do k = 1, 80.0, 1
        do i = 1, 300.0, 1
                g(i,0,k) = g(i,300.0,k)
        end do
    end do
    do j = 1, 300.0, 1
        do i = 1, 300.0, 1
                h(i,j,0) = 0.0
                h(i,j,80.0) = 0.0
        end do
    end do
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w_F4_cas(i,j,k-1)+w_F4_cas(i,j,k))/dzn(k)
                                rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
                end do
        end do
    end do
    rhsav = 0.0
    area = 0.0
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
                                area = area+dx1(i)*dy1(j)*dzn(k)
                end do
        end do
    end do
    rhsav = rhsav/area
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                rhs(i,j,k) = rhs(i,j,k)-rhsav
                end do
        end do
    end do
    do l = 1, 50.0, 1
        sor = 0.0
        do nrd = 0, 1, 1
                do k = 1, 80.0, 1
                                do j = 1, 300.0, 1
                                                                do i = 1, 300.0, 1
                                                                                                                                dz1 = dzs_F4_cas(k-1)
                                                                                                                                dz2 = dzs_F4_cas(k)
                                                                                                                                cn4s = 2./(dz1*(dz1+dz2))
                                                                                                                                cn4l = 2./(dz2*(dz1+dz2))
                                                                                                                                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                                                                                                                                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                                                                                                                                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                                                                                                                                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                                                                                                                                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                                                                                                                                if (nrd==0) then
                                                                                                                                                                                                                                                                reltmp = 1.0*(cn1*(cn2l*p(0,i+1,j,k)+cn2s*p(0,i-1,j,k)+cn3l*p(0,i,j+1,k)+cn3s*p(0,i,j-1,k)+cn4l*p(0,i,j,k+1)+cn4s*p(0,i,j,k-1)-rhs(i,j,k))-p(0,i,j,k))
                                                                                                                                                                                                                                                                p(1,i,j,k) = p(0,i,j,k)+reltmp
                                                                                                                                else
                                                                                                                                                                                                                                                                reltmp = 1.0*(cn1*(cn2l*p(1,i+1,j,k)+cn2s*p(1,i-1,j,k)+cn3l*p(1,i,j+1,k)+cn3s*p(1,i,j-1,k)+cn4l*p(1,i,j,k+1)+cn4s*p(1,i,j,k-1)-rhs(i,j,k))-p(1,i,j,k))
                                                                                                                                                                                                                                                                p(0,i,j,k) = p(1,i,j,k)+reltmp
                                                                                                                                end if
                                                                end do
                                end do
                end do
                do k = 0, 81, 1
                                do j = 0, 301, 1
                                                                p(0,0,j,k) = p(0,1,j,k)
                                                                p(0,301,j,k) = p(0,300.0,j,k)
                                end do
                end do
                do k = 0, 81, 1
                                do i = 0, 301, 1
                                                                p(0,i,0,k) = p(0,i,300.0,k)
                                                                p(0,i,301,k) = p(0,i,1,k)
                                end do
                end do
        end do
        do j = 0, 301, 1
                do i = 0, 301, 1
                                p(0,i,j,0) = p(0,i,j,1)
                                p(0,i,j,81) = p(0,i,j,80.0)
                end do
        end do
    end do
    pav = 0.0
    pco = 0.0
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                pav = pav+p(0,i,j,k)*dx1(i)*dy1(j)*dzn(k)
                                pco = pco+dx1(i)*dy1(j)*dzn(k)
                end do
        end do
    end do
    pav = pav/pco
    do k = 1, 80.0, 1
        do j = 1, 300.0, 1
                do i = 1, 300.0, 1
                                p(0,i,j,k) = p(0,i,j,k)-pav
                end do
        end do
    end do
    do k = 0, 81, 1
        do j = 0, 301, 1
                p(0,0,j,k) = p(0,1,j,k)
                p(0,301,j,k) = p(0,300.0,j,k)
        end do
    end do
    do k = 0, 81, 1
        do i = 0, 301, 1
                p(0,i,0,k) = p(0,i,300.0,k)
                p(0,i,301,k) = p(0,i,1,k)
        end do
    end do
    do j = 0, 301, 1
        do i = 0, 301, 1
                p(0,i,j,0) = p(0,i,j,1)
                p(0,i,j,81) = p(0,i,j,80.0)
        end do
    end do
end subroutine velnw_bondv1_velfg_feedbf_les_adam_press_merged

end module module_velnw_bondv1_velfg_feedbf_les_adam_press_merged
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Map + Fold Detection 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: velnw_bondv1_velfg_feedbf_les_adam_press_merged
Filename: 
Source:
module module_velnw_bondv1_velfg_feedbf_les_adam_press_merged
contains
subroutine velnw_bondv1_velfg_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,cov1,cov2,cov3,cov4,cov5,cov6,cov7,cov8,cov9,data21,delx1,dfu1,dfv1,dfw1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dmask1,dt,dx1,dxs,dy1,dys,dzn,dzs_F4_cas,f,fold,fx,fy,fz,g,gold,h,hold,n,n0,nmax,nou1,nou2,nou3,nou4,nou5,nou6,nou7,nou8,nou9,p,rhs,ro,sm,u,uspd,usum,v,vn,vspd,vsum,w_F4_cas,wsum,z2)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = jp 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4) :: aaa,bbb,uout,gaaa,gbbb
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1), intent(In) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: cmask1
      real(4) :: cn1,cn2l,cn2s,cn3l,cn3s,cn4l,cn4s,dz1,dz2
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov1
      real(4) :: cov1_i,cov2_j,cov3_k,cov4_i,cov5_j,cov6_k,cov7_i,cov8_j,cov9_k
      real(4) :: cov1_ip1,cov2_jp1,cov3_kp1,cov4_ip1,cov5_jp1,cov6_kp1,cov7_ip1,cov8_jp1,cov9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov9
      real(4) :: covc,covx1,covy1,covz1
      real(4) :: csx1
      character*70, intent(In) :: data21
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(kp), intent(Out) :: delx1
      real(4), dimension(0:ip,jp,kp), intent(Out) :: dfu1
      real(4), dimension(ip,0:jp,kp), intent(Out) :: dfv1
      real(4), dimension(ip,jp,kp), intent(Out) :: dfw1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu1
      real(4) :: diu1_,diu2_,diu3_,diu4_,diu5_,diu6_,diu7_,diu8_,diu9_
      real(4) :: diu1_ip1,diu2_jp1,diu3_kp1,diu4_ip1,diu5_jp1,diu6_kp1,diu7_ip1,diu8_jp1,diu9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu9
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1,dudyx1,dudzx1,dvdxx1,dvdyx1,dvdzx1,dwdxx1,dwdyx1,dwdzx1
      real(4), dimension(-1:ip+1), intent(In) :: dx1
      real(4), dimension(0:ip), intent(In) :: dxs
      real(4), dimension(0:jp+1), intent(In) :: dy1
      real(4), dimension(0:jp), intent(In) :: dys
      real(4), dimension(-1:kp+2), intent(In) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(-1:kp+2), intent(In) :: dzs_F4_cas
      real(4) :: evsx2,evsx1,evsy2,evsy1,evsz2,evsz1
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: f
      real(4) :: f1x,f1y,f1z,f2x,f2y,f2z
      real(4) :: fd,gd,hd
      real(4), dimension(ip,jp,kp), intent(InOut) :: fold
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fx
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fy
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fz
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: g
      real(4), dimension(ip,jp,kp), intent(InOut) :: gold
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: h
      real(4), dimension(ip,jp,kp), intent(InOut) :: hold
      integer :: i,j,k
      integer, intent(In) :: n,n0
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou1
      real(4) :: nou1_,nou2_,nou3_,nou4_,nou5_,nou6_,nou7_,nou8_,nou9_
      real(4) :: nou1_ip1,nou2_jp1,nou3_kp1,nou4_ip1,nou5_jp1,nou6_kp1,nou7_ip1,nou8_jp1,nou9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4) :: pz
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(Out) :: rhs
      real(4) :: rhsav,pav,area,pco,sor,reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1), intent(Out) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: u
      real(4) :: u_val
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: uspd
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: usum
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: v
      real(4) :: vfu,vfv,vfw
      real(4) :: visux2,visux1,visuy2,visuy1,visuz2,visuz1
      real(4) :: visvx2,visvx1,visvy2,visvy1,visvz2,visvz1
      real(4) :: viswx2,viswx1,viswy2,viswy1,viswz2,viswz1
      real(4), intent(In) :: vn
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: vspd
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(In) :: w
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(InOut) :: w_F4_cas
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: wsum
      real(4), dimension(0:kp+2), intent(In) :: z2
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dxs","u","dt"],["u"],["(i,1,300.0,1)"],[]) {
    pz = (-p(0,i,j,k)+p(0,i+1,j,k))/ro/dxs(i)
    u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
!}
!}
!}
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dys","dt"],["v"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dys","dt"],["v"],["(i,1,300.0,1)"],[]) {
    pz = (-p(0,i,j,k)+p(0,i,j+1,k))/ro/dys(j)
    v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
!}
!}
!}
! OpenCLMap ( ["ro","dzs_F4_cas","dt"],["w_F4_cas"],["(k,1,79,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dzs_F4_cas","dt"],["w_F4_cas"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dzs_F4_cas","dt"],["w_F4_cas"],["(i,1,300.0,1)"],[]) {
    pz = (-p(0,i,j,k)+p(0,i,j,k+1))/ro/dzs_F4_cas(k)
    w_F4_cas(i,j,k) = w_F4_cas(i,j,k)+dt*(h(i,j,k)-pz)
!}
!}
!}
    return 
! OpenCLMap ( [],["u"],["(i,0,1,1)","(k,1,78,1)","(j,1,300.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],["u","w_F4_cas"],["(k,1,78,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(j,1,300.0,1)"],[]) {
    u_val = 5.*((z2(k)+0.5*dzn(k))/600.)**0.2
    u(i,j,k) = u_val
    v(i,j,k) = 0.0
    w_F4_cas(i,j,k) = 0.0
!}
!}
!}
! OpenCLMap ( [],["u","v","w_F4_cas"],["(i,0,1,1)","(k,79,80.0,1)","(j,1,300.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(k,79,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(j,1,300.0,1)"],[]) {
    u(i,j,k) = u(i,j,77)
    v(i,j,k) = 0.0
    w_F4_cas(i,j,k) = 0.0
!}
!}
!}
    if (n==n0) then
! OpenCLMap ( [],["u","v","w_F4_cas"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,2,300.0,1)","(i,2,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(j,1,300.0,1)","(i,2,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(i,2,300.0,1)"],[]) {
        u(i,j,k) = u(1,j,k)
        v(i,j,k) = v(1,j,k)
        w_F4_cas(i,j,k) = w_F4_cas(1,j,k)
!}
!}
!}
    end if
    aaa = 0.0
! OpenCLReduce ( ["u"],["aaa"],["(k,1,80.0,1)","(j,1,300.0,1)"],[],["(aaa,0.0)"]) {
! OpenCLReduce ( ["u"],["aaa"],["(j,1,300.0,1)"],[],["(aaa,0.0)"]) {
    aaa = amax1(aaa,u(300.0,j,k))
!}
!}
    gaaa = aaa
    bbb = 1e38
! OpenCLReduce ( ["u"],["bbb"],["(k,1,80.0,1)","(j,1,300.0,1)"],[],["(bbb,1e38)"]) {
! OpenCLReduce ( ["u"],["bbb"],["(j,1,300.0,1)"],[],["(bbb,1e38)"]) {
    bbb = amin1(bbb,u(300.0,j,k))
!}
!}
    gbbb = bbb
    uout = (gaaa+gbbb)/2.
! OpenCLMap ( ["dt","uout","dxs"],["u"],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( ["dt","uout","dxs"],["u"],["(j,1,300.0,1)"],[]) {
    u(300.0,j,k) = u(300.0,j,k)-dt*uout*(u(300.0,j,k)-u(299,j,k))/dxs(300.0)
!}
!}
! OpenCLMap ( ["dt","uout","dxs"],["v"],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( ["dt","uout","dxs"],["v"],["(j,1,300.0,1)"],[]) {
    v(301,j,k) = v(301,j,k)-dt*uout*(v(301,j,k)-v(300.0,j,k))/dxs(300.0)
!}
!}
! OpenCLMap ( ["dt","uout","dxs"],["w_F4_cas"],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( ["dt","uout","dxs"],["w_F4_cas"],["(j,1,300.0,1)"],[]) {
    w_F4_cas(301,j,k) = w_F4_cas(301,j,k)-dt*uout*(w_F4_cas(301,j,k)-w_F4_cas(300.0,j,k))/dxs(300.0)
!}
!}
! OpenCLMap ( [],["u"],["(k,0,81,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["u"],["(i,0,301,1)"],[]) {
    u(i,0,k) = u(i,300.0,k)
    u(i,301,k) = u(i,1,k)
!}
!}
! OpenCLMap ( [],["v"],["(k,0,81,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["v"],["(i,0,301,1)"],[]) {
    v(i,0,k) = v(i,300.0,k)
    v(i,301,k) = v(i,1,k)
!}
!}
! OpenCLMap ( [],[],["(k,0,80.0,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    w_F4_cas(i,0,k) = w_F4_cas(i,300.0,k)
    w_F4_cas(i,301,k) = w_F4_cas(i,1,k)
!}
!}
! OpenCLMap ( [],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    u(i,j,0) = -u(i,j,1)
    u(i,j,81) = u(i,j,80.0)
!}
!}
! OpenCLMap ( [],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    v(i,j,0) = -v(i,j,1)
    v(i,j,81) = v(i,j,80.0)
!}
!}
! OpenCLMap ( [],[],["(j,-1,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    w_F4_cas(i,j,0) = 0.0
    w_F4_cas(i,j,80.0) = 0.0
!}
!}
    call vel2(nou1, nou5, nou9, nou2, nou3, nou4, nou6, nou7, nou8, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, u, v, w_F4_cas, dx1, dy1, dzn, dzs_F4_cas, uspd, vspd)
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    uspd(i,j) = (u(i,j,1)**2+((0.5*(v(i,j-1,1)+v(i,j,1))*dx1(i+1)+0.5*(v(i+1,j-1,1)+v(i+1,j,1))*dx1(i))/(dx1(i)+dx1(i+1)))**2)**0.5
!}
!}
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    vspd(i,j) = (v(i,j,1)**2+((0.5*(u(i-1,j,1)+u(i,j,1))*dy1(j+1)+0.5*(u(i-1,j+1,1)+u(i,j+1,1))*dy1(j))/(dy1(j)+dy1(j+1)))**2)**0.5
!}
!}
    write(6, *)('CHK_uspd_vspd=', uspd(ip/2,jp/2), vspd(ip/2,jp/2))
! OpenCLMap ( [],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    covx1 = (dx1(i+1)*cov1(i,j,k)+dx1(i)*cov1(i+1,j,k))/(dx1(i)+dx1(i+1))
    covy1 = (cov2(i,j,k)+cov2(i,j+1,k))/2.
    covz1 = (cov3(i,j,k)+cov3(i,j,k+1))/2.
    covc = covx1+covy1+covz1
    f(i,j,k) = (-covc)
!}
!}
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    covx1 = (cov4(i,j,k)+cov4(i+1,j,k))/2.
    covy1 = (dy1(j+1)*cov5(i,j,k)+dy1(j)*cov5(i,j+1,k))/(dy1(j)+dy1(j+1))
    covz1 = (cov6(i,j,k)+cov6(i,j,k+1))/2.
    covc = covx1+covy1+covz1
    g(i,j,k) = (-covc)
!}
!}
!}
! OpenCLMap ( [],[],["(k,1,79,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    covx1 = (cov7(i,j,k)+cov7(i+1,j,k))/2.
    covy1 = (cov8(i,j,k)+cov8(i,j+1,k))/2.
    covz1 = (dzn(k+1)*cov9(i,j,k)+dzn(k)*cov9(i,j,k+1))/(dzn(k)+dzn(k+1))
    covc = covx1+covy1+covz1
    h(i,j,k) = (-covc)
!}
!}
!}
    return 
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta"],["fx","fy","fz"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta"],["fx","fy","fz"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta"],["fx","fy","fz"],["(i,1,300.0,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w_F4_cas(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w_F4_cas(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
!}
!}
!}
! OpenCLMap ( ["fx","fy","fz"],["g"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],["g"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],["g"],["(i,1,300.0,1)"],[]) {
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
!}
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)"],[]) {
    delx1(k) = (dx1(0)*dy1(0)*dzn(k))**(1./3.)
!}
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(i,1,300.0,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}
!}
!}
! OpenCLMap ( [],["sm"],["(k,0,81,1)","(j,-1,301,1)"],[]) {
! OpenCLMap ( [],["sm"],["(j,-1,301,1)"],[]) {
    sm(0,j,k) = sm(1,j,k)
    sm(301,j,k) = sm(300.0,j,k)
!}
!}
! OpenCLMap ( [],["sm"],["(k,0,81,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["sm"],["(i,0,301,1)"],[]) {
    sm(i,301,k) = sm(i,300.0,k)
    sm(i,0,k) = sm(i,1,k)
!}
!}
! OpenCLMap ( [],["sm"],["(j,-1,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["sm"],["(i,0,301,1)"],[]) {
    sm(i,j,0) = -sm(i,j,1)
    sm(i,j,81) = sm(i,j,80.0)
!}
!}
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}
!}
!}
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsx2 = sm(i+1,j,1)
    evsx1 = sm(i,j,1)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,1)+dx1(i)*sm(i+1,j-1,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
    visux2 = (evsx2)*2.*diu1(i+1,j,1)
    visux1 = (evsx1)*2.*diu1(i,j,1)
    visuy2 = (evsy2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
    visuy1 = (evsy1)*(diu2(i,j,1)+diu4(i+1,j-1,1))
    visuz2 = (evsz2)*(diu3(i,j,2)+diu7(i+1,j,1))
    visuz1 = (0.4*uspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(u(i,j,1)/uspd(i,j))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(1)
    f(i,j,1) = (f(i,j,1)+vfu)
!}
!}
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}
!}
!}
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsy2 = sm(i,j+1,1)
    evsy1 = sm(i,j,1)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,1)+dx1(i-1)*sm(i,j,1))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,1)+dx1(i-1)*sm(i,j+1,1))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
    visvx2 = (evsx2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
    visvx1 = (evsx1)*(diu2(i-1,j+1,1)+diu4(i,j,1))
    visvy2 = (evsy2)*2.*diu5(i,j+1,1)
    visvy1 = (evsy1)*2.*diu5(i,j,1)
    visvz2 = (evsz2)*(diu6(i,j,2)+diu8(i,j+1,1))
    visvz1 = (0.4*vspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(v(i,j,1)/vspd(i,j))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(1)
    g(i,j,1) = (g(i,j,1)+vfv)
!}
!}
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}
!}
!}
    return 
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(i,1,300.0,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
!}
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(j,1,300.0,1)"],[]) {
    f(0,j,k) = f(1,j,k)
!}
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    g(i,0,k) = g(i,300.0,k)
!}
!}
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    h(i,j,0) = 0.0
    h(i,j,80.0) = 0.0
!}
!}
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(i,1,300.0,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w_F4_cas(i,j,k-1)+w_F4_cas(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}
!}
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["rhs"],["rhsav","area"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(j,1,300.0,1)","(i,1,300.0,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(i,1,300.0,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(i,1,300.0,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
!}
!}
    do l = 1, 50.0, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLMap ( ["dzs_F4_cas","nrd"],["p"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs_F4_cas","nrd"],["p"],["(j,1,300.0,1)","(i,1,300.0,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs_F4_cas","nrd"],["p"],["(i,1,300.0,1)"],["nrd","l"]) {
                dz1 = dzs_F4_cas(k-1)
                dz2 = dzs_F4_cas(k)
                cn4s = 2./(dz1*(dz1+dz2))
                cn4l = 2./(dz2*(dz1+dz2))
                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                if (nrd==0) then
                                reltmp = 1.0*(cn1*(cn2l*p(0,i+1,j,k)+cn2s*p(0,i-1,j,k)+cn3l*p(0,i,j+1,k)+cn3s*p(0,i,j-1,k)+cn4l*p(0,i,j,k+1)+cn4s*p(0,i,j,k-1)-rhs(i,j,k))-p(0,i,j,k))
                                p(1,i,j,k) = p(0,i,j,k)+reltmp
                else
                                reltmp = 1.0*(cn1*(cn2l*p(1,i+1,j,k)+cn2s*p(1,i-1,j,k)+cn3l*p(1,i,j+1,k)+cn3s*p(1,i,j-1,k)+cn4l*p(1,i,j,k+1)+cn4s*p(1,i,j,k-1)-rhs(i,j,k))-p(1,i,j,k))
                                p(0,i,j,k) = p(1,i,j,k)+reltmp
                end if
!}
!}
!}
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(j,0,301,1)"],["nrd","l"]) {
                p(0,0,j,k) = p(0,1,j,k)
                p(0,301,j,k) = p(0,300.0,j,k)
!}
!}
! OpenCLMap ( [],["p"],["(k,0,81,1)","(i,0,301,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(i,0,301,1)"],["nrd","l"]) {
                p(0,i,0,k) = p(0,i,300.0,k)
                p(0,i,301,k) = p(0,i,1,k)
!}
!}
        end do
! OpenCLMap ( [],["p"],["(j,0,301,1)","(i,0,301,1)"],["l"]) {
! OpenCLMap ( [],["p"],["(i,0,301,1)"],["l"]) {
        p(0,i,j,0) = p(0,i,j,1)
        p(0,i,j,81) = p(0,i,j,80.0)
!}
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["p","dx1","dy1","dzn"],["pav","pco"],["(j,1,300.0,1)","(i,1,300.0,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["p","dx1","dy1","dzn"],["pav","pco"],["(i,1,300.0,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    pav = pav+p(0,i,j,k)*dx1(i)*dy1(j)*dzn(k)
    pco = pco+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(i,1,300.0,1)"],[]) {
    p(0,i,j,k) = p(0,i,j,k)-pav
!}
!}
!}
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)"],[]) {
! OpenCLMap ( [],["p"],["(j,0,301,1)"],[]) {
    p(0,0,j,k) = p(0,1,j,k)
    p(0,301,j,k) = p(0,300.0,j,k)
!}
!}
! OpenCLMap ( [],["p"],["(k,0,81,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["p"],["(i,0,301,1)"],[]) {
    p(0,i,0,k) = p(0,i,300.0,k)
    p(0,i,301,k) = p(0,i,1,k)
!}
!}
! OpenCLMap ( [],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    p(0,i,j,0) = p(0,i,j,1)
    p(0,i,j,81) = p(0,i,j,80.0)
!}
!}
end subroutine velnw_bondv1_velfg_feedbf_les_adam_press_merged

end module module_velnw_bondv1_velfg_feedbf_les_adam_press_merged
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Stencil Detection 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: ./src/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character*70 :: data10
      character*70 :: data11
      character*70 :: data12
      character*70 :: data13
      character*70 :: data14
      character*70 :: data15
      character*70 :: data20
      character*70 :: data21
      character*70 :: data22
      character*70 :: data23
      character*70 :: data24
      character*70 :: data25
      character*70 :: data26
      character*70 :: data27
      character*70 :: data30
      character*70 :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: cov1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: cov5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov9
      real(4), dimension(kp) :: delx1
      real(4), dimension(0:ip,jp,kp) :: dfu1
      real(4), dimension(ip,0:jp,kp) :: dfv1
      real(4), dimension(ip,jp,kp) :: dfw1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      real(4), dimension(0:ip+1,0:jp+1) :: uspd
      real(4), dimension(0:ip+1,0:jp+1) :: vspd
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dfu1, dfv1, dfw1, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dmask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call bondv1(u, z2, dzn, v, w, n, n0, dt, dxs)
        call velfg(dx1, dy1, dzn, f, g, h, u, v, w, dfu1, dfv1, dfw1, vn, dzs, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, uspd, vspd)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	bondv1->
	    call bondv1(u, z2, dzn, v, w, n, n0, dt, dxs)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "z2", argument = VarName (fromList []) "z2"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "n0", argument = VarName (fromList []) "n0"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velfg->
	    call velfg(dx1, dy1, dzn, f, g, h, u, v, w, dfu1, dfv1, dfw1, vn, dzs, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, uspd, vspd)
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dfu1", argument = VarName (fromList []) "dfu1"}
	ArgTrans {parameter = ArgName (fromList []) "dfv1", argument = VarName (fromList []) "dfv1"}
	ArgTrans {parameter = ArgName (fromList []) "dfw1", argument = VarName (fromList []) "dfw1"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "cov1", argument = VarName (fromList []) "cov1"}
	ArgTrans {parameter = ArgName (fromList []) "cov2", argument = VarName (fromList []) "cov2"}
	ArgTrans {parameter = ArgName (fromList []) "cov3", argument = VarName (fromList []) "cov3"}
	ArgTrans {parameter = ArgName (fromList []) "cov4", argument = VarName (fromList []) "cov4"}
	ArgTrans {parameter = ArgName (fromList []) "cov5", argument = VarName (fromList []) "cov5"}
	ArgTrans {parameter = ArgName (fromList []) "cov6", argument = VarName (fromList []) "cov6"}
	ArgTrans {parameter = ArgName (fromList []) "cov7", argument = VarName (fromList []) "cov7"}
	ArgTrans {parameter = ArgName (fromList []) "cov8", argument = VarName (fromList []) "cov8"}
	ArgTrans {parameter = ArgName (fromList []) "cov9", argument = VarName (fromList []) "cov9"}
	ArgTrans {parameter = ArgName (fromList []) "nou1", argument = VarName (fromList []) "nou1"}
	ArgTrans {parameter = ArgName (fromList []) "nou2", argument = VarName (fromList []) "nou2"}
	ArgTrans {parameter = ArgName (fromList []) "nou3", argument = VarName (fromList []) "nou3"}
	ArgTrans {parameter = ArgName (fromList []) "nou4", argument = VarName (fromList []) "nou4"}
	ArgTrans {parameter = ArgName (fromList []) "nou5", argument = VarName (fromList []) "nou5"}
	ArgTrans {parameter = ArgName (fromList []) "nou6", argument = VarName (fromList []) "nou6"}
	ArgTrans {parameter = ArgName (fromList []) "nou7", argument = VarName (fromList []) "nou7"}
	ArgTrans {parameter = ArgName (fromList []) "nou8", argument = VarName (fromList []) "nou8"}
	ArgTrans {parameter = ArgName (fromList []) "nou9", argument = VarName (fromList []) "nou9"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw_bondv1_velfg_feedbf_les_adam_press_merged
Filename: 
Source:
module module_velnw_bondv1_velfg_feedbf_les_adam_press_merged
contains
subroutine velnw_bondv1_velfg_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,cov1,cov2,cov3,cov4,cov5,cov6,cov7,cov8,cov9,data21,delx1,dfu1,dfv1,dfw1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dmask1,dt,dx1,dxs,dy1,dys,dzn,dzs_F4_cas,f,fold,fx,fy,fz,g,gold,h,hold,n,n0,nmax,nou1,nou2,nou3,nou4,nou5,nou6,nou7,nou8,nou9,p,rhs,ro,sm,u,uspd,usum,v,vn,vspd,vsum,w_F4_cas,wsum,z2)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = jp 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4) :: aaa,bbb,uout,gaaa,gbbb
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1), intent(In) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: cmask1
      real(4) :: cn1,cn2l,cn2s,cn3l,cn3s,cn4l,cn4s,dz1,dz2
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov1
      real(4) :: cov1_i,cov2_j,cov3_k,cov4_i,cov5_j,cov6_k,cov7_i,cov8_j,cov9_k
      real(4) :: cov1_ip1,cov2_jp1,cov3_kp1,cov4_ip1,cov5_jp1,cov6_kp1,cov7_ip1,cov8_jp1,cov9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov9
      real(4) :: covc,covx1,covy1,covz1
      real(4) :: csx1
      character*70, intent(In) :: data21
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(kp), intent(Out) :: delx1
      real(4), dimension(0:ip,jp,kp), intent(Out) :: dfu1
      real(4), dimension(ip,0:jp,kp), intent(Out) :: dfv1
      real(4), dimension(ip,jp,kp), intent(Out) :: dfw1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu1
      real(4) :: diu1_,diu2_,diu3_,diu4_,diu5_,diu6_,diu7_,diu8_,diu9_
      real(4) :: diu1_ip1,diu2_jp1,diu3_kp1,diu4_ip1,diu5_jp1,diu6_kp1,diu7_ip1,diu8_jp1,diu9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu9
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1,dudyx1,dudzx1,dvdxx1,dvdyx1,dvdzx1,dwdxx1,dwdyx1,dwdzx1
      real(4), dimension(-1:ip+1), intent(In) :: dx1
      real(4), dimension(0:ip), intent(In) :: dxs
      real(4), dimension(0:jp+1), intent(In) :: dy1
      real(4), dimension(0:jp), intent(In) :: dys
      real(4), dimension(-1:kp+2), intent(In) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(-1:kp+2), intent(In) :: dzs_F4_cas
      real(4) :: evsx2,evsx1,evsy2,evsy1,evsz2,evsz1
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: f
      real(4) :: f1x,f1y,f1z,f2x,f2y,f2z
      real(4) :: fd,gd,hd
      real(4), dimension(ip,jp,kp), intent(InOut) :: fold
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fx
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fy
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fz
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: g
      real(4), dimension(ip,jp,kp), intent(InOut) :: gold
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: h
      real(4), dimension(ip,jp,kp), intent(InOut) :: hold
      integer :: i,j,k
      integer, intent(In) :: n,n0
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou1
      real(4) :: nou1_,nou2_,nou3_,nou4_,nou5_,nou6_,nou7_,nou8_,nou9_
      real(4) :: nou1_ip1,nou2_jp1,nou3_kp1,nou4_ip1,nou5_jp1,nou6_kp1,nou7_ip1,nou8_jp1,nou9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4) :: pz
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(Out) :: rhs
      real(4) :: rhsav,pav,area,pco,sor,reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1), intent(Out) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: u
      real(4) :: u_val
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: uspd
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: usum
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: v
      real(4) :: vfu,vfv,vfw
      real(4) :: visux2,visux1,visuy2,visuy1,visuz2,visuz1
      real(4) :: visvx2,visvx1,visvy2,visvy1,visvz2,visvz1
      real(4) :: viswx2,viswx1,viswy2,viswy1,viswz2,viswz1
      real(4), intent(In) :: vn
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: vspd
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(In) :: w
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(InOut) :: w_F4_cas
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: wsum
      real(4), dimension(0:kp+2), intent(In) :: z2
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,1,0,0],[C=0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dxs","u","dt"],["u"],["(i,1,300.0,1)"],[]) {
    pz = (-p(0,i,j,k)+p(0,i+1,j,k))/ro/dxs(i)
    u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
!}
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,0,1,0],[C=0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dys","dt"],["v"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dys","dt"],["v"],["(i,1,300.0,1)"],[]) {
    pz = (-p(0,i,j,k)+p(0,i,j+1,k))/ro/dys(j)
    v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
!}
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,0,0,0],[C=0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs_F4_cas","dt"],["w_F4_cas"],["(k,1,79,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dzs_F4_cas","dt"],["w_F4_cas"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["ro","dzs_F4_cas","dt"],["w_F4_cas"],["(i,1,300.0,1)"],[]) {
    pz = (-p(0,i,j,k)+p(0,i,j,k+1))/ro/dzs_F4_cas(k)
    w_F4_cas(i,j,k) = w_F4_cas(i,j,k)+dt*(h(i,j,k)-pz)
!}
!}
!}    
!}
    return 
! OpenCLMap ( [],["u"],["(i,0,1,1)","(k,1,78,1)","(j,1,300.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],["u","w_F4_cas"],["(k,1,78,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(j,1,300.0,1)"],[]) {
    u_val = 5.*((z2(k)+0.5*dzn(k))/600.)**0.2
    u(i,j,k) = u_val
    v(i,j,k) = 0.0
    w_F4_cas(i,j,k) = 0.0
!}
!}
!}
! OpenCLMap ( [],["u","v","w_F4_cas"],["(i,0,1,1)","(k,79,80.0,1)","(j,1,300.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(k,79,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(j,1,300.0,1)"],[]) {
    u(i,j,k) = u(i,j,77)
    v(i,j,k) = 0.0
    w_F4_cas(i,j,k) = 0.0
!}
!}
!}
    if (n==n0) then
! OpenCLMap ( [],["u","v","w_F4_cas"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,2,300.0,1)","(i,2,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(j,1,300.0,1)","(i,2,300.0,1)"],[]) {
! OpenCLMap ( [],["u","v","w_F4_cas"],["(i,2,300.0,1)"],[]) {
        u(i,j,k) = u(1,j,k)
        v(i,j,k) = v(1,j,k)
        w_F4_cas(i,j,k) = w_F4_cas(1,j,k)
!}
!}
!}
    end if
    aaa = 0.0
! OpenCLReduce ( ["u"],["aaa"],["(k,1,80.0,1)","(j,1,300.0,1)"],[],["(aaa,0.0)"]) {
! OpenCLReduce ( ["u"],["aaa"],["(j,1,300.0,1)"],[],["(aaa,0.0)"]) {
    aaa = amax1(aaa,u(300.0,j,k))
!}
!}
    gaaa = aaa
    bbb = 1e38
! OpenCLReduce ( ["u"],["bbb"],["(k,1,80.0,1)","(j,1,300.0,1)"],[],["(bbb,1e38)"]) {
! OpenCLReduce ( ["u"],["bbb"],["(j,1,300.0,1)"],[],["(bbb,1e38)"]) {
    bbb = amin1(bbb,u(300.0,j,k))
!}
!}
    gbbb = bbb
    uout = (gaaa+gbbb)/2.
! OpenCLStencil (
!        2 point stencil on 3D array u: [[C=299,0,0],[C=300,0,0]]
!    ){
! OpenCLMap ( ["dt","uout","dxs"],["u"],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( ["dt","uout","dxs"],["u"],["(j,1,300.0,1)"],[]) {
    u(300.0,j,k) = u(300.0,j,k)-dt*uout*(u(300.0,j,k)-u(299,j,k))/dxs(300.0)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array v: [[C=300,0,0],[C=301,0,0]]
!    ){
! OpenCLMap ( ["dt","uout","dxs"],["v"],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( ["dt","uout","dxs"],["v"],["(j,1,300.0,1)"],[]) {
    v(301,j,k) = v(301,j,k)-dt*uout*(v(301,j,k)-v(300.0,j,k))/dxs(300.0)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array w_F4_cas: [[C=300,0,0],[C=301,0,0]]
!    ){
! OpenCLMap ( ["dt","uout","dxs"],["w_F4_cas"],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( ["dt","uout","dxs"],["w_F4_cas"],["(j,1,300.0,1)"],[]) {
    w_F4_cas(301,j,k) = w_F4_cas(301,j,k)-dt*uout*(w_F4_cas(301,j,k)-w_F4_cas(300.0,j,k))/dxs(300.0)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array u: [[0,C=1,0],[0,C=300,0]]
!    ){
! OpenCLMap ( [],["u"],["(k,0,81,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["u"],["(i,0,301,1)"],[]) {
    u(i,0,k) = u(i,300.0,k)
    u(i,301,k) = u(i,1,k)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array v: [[0,C=1,0],[0,C=300,0]]
!    ){
! OpenCLMap ( [],["v"],["(k,0,81,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["v"],["(i,0,301,1)"],[]) {
    v(i,0,k) = v(i,300.0,k)
    v(i,301,k) = v(i,1,k)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array w_F4_cas: [[0,C=1,0],[0,C=300,0]]
!    ){
! OpenCLMap ( [],[],["(k,0,80.0,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    w_F4_cas(i,0,k) = w_F4_cas(i,300.0,k)
    w_F4_cas(i,301,k) = w_F4_cas(i,1,k)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array u: [[0,0,C=1],[0,0,C=80]]
!    ){
! OpenCLMap ( [],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    u(i,j,0) = -u(i,j,1)
    u(i,j,81) = u(i,j,80.0)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array v: [[0,0,C=1],[0,0,C=80]]
!    ){
! OpenCLMap ( [],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    v(i,j,0) = -v(i,j,1)
    v(i,j,81) = v(i,j,80.0)
!}
!}    
!}
! OpenCLMap ( [],[],["(j,-1,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    w_F4_cas(i,j,0) = 0.0
    w_F4_cas(i,j,80.0) = 0.0
!}
!}
    call vel2(nou1, nou5, nou9, nou2, nou3, nou4, nou6, nou7, nou8, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, u, v, w_F4_cas, dx1, dy1, dzn, dzs_F4_cas, uspd, vspd)
! OpenCLStencil (
!        2 point stencil on 1D array dx1: [[0],[1]]
!        4 point stencil on 3D array v: [[1,0,C=1],[1,-1,C=1],[0,0,C=1],[0,-1,C=1]]
!    ){
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    uspd(i,j) = (u(i,j,1)**2+((0.5*(v(i,j-1,1)+v(i,j,1))*dx1(i+1)+0.5*(v(i+1,j-1,1)+v(i+1,j,1))*dx1(i))/(dx1(i)+dx1(i+1)))**2)**0.5
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 1D array dy1: [[0],[1]]
!        4 point stencil on 3D array u: [[0,1,C=1],[0,0,C=1],[-1,1,C=1],[-1,0,C=1]]
!    ){
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    vspd(i,j) = (v(i,j,1)**2+((0.5*(u(i-1,j,1)+u(i,j,1))*dy1(j+1)+0.5*(u(i-1,j+1,1)+u(i,j+1,1))*dy1(j))/(dy1(j)+dy1(j+1)))**2)**0.5
!}
!}    
!}
    write(6, *)('CHK_uspd_vspd=', uspd(ip/2,jp/2), vspd(ip/2,jp/2))
! OpenCLStencil (
!        2 point stencil on 3D array cov1: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array cov2: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array cov3: [[0,0,0],[0,0,1]]
!        2 point stencil on 1D array dx1: [[0],[1]]
!    ){
! OpenCLMap ( [],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    covx1 = (dx1(i+1)*cov1(i,j,k)+dx1(i)*cov1(i+1,j,k))/(dx1(i)+dx1(i+1))
    covy1 = (cov2(i,j,k)+cov2(i,j+1,k))/2.
    covz1 = (cov3(i,j,k)+cov3(i,j,k+1))/2.
    covc = covx1+covy1+covz1
    f(i,j,k) = (-covc)
!}
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array cov4: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array cov5: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array cov6: [[0,0,0],[0,0,1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!    ){
! OpenCLMap ( [],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    covx1 = (cov4(i,j,k)+cov4(i+1,j,k))/2.
    covy1 = (dy1(j+1)*cov5(i,j,k)+dy1(j)*cov5(i,j+1,k))/(dy1(j)+dy1(j+1))
    covz1 = (cov6(i,j,k)+cov6(i,j,k+1))/2.
    covc = covx1+covy1+covz1
    g(i,j,k) = (-covc)
!}
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array cov7: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array cov8: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array cov9: [[0,0,0],[0,0,1]]
!        2 point stencil on 1D array dzn: [[0],[1]]
!    ){
! OpenCLMap ( [],[],["(k,1,79,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    covx1 = (cov7(i,j,k)+cov7(i+1,j,k))/2.
    covy1 = (cov8(i,j,k)+cov8(i,j+1,k))/2.
    covz1 = (dzn(k+1)*cov9(i,j,k)+dzn(k)*cov9(i,j,k+1))/(dzn(k)+dzn(k+1))
    covc = covx1+covy1+covz1
    h(i,j,k) = (-covc)
!}
!}
!}    
!}
    return 
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta"],["fx","fy","fz"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta"],["fx","fy","fz"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta"],["fx","fy","fz"],["(i,1,300.0,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w_F4_cas(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w_F4_cas(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
!}
!}
!}
! OpenCLMap ( ["fx","fy","fz"],["g"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],["g"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],["g"],["(i,1,300.0,1)"],[]) {
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
!}
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)"],[]) {
    delx1(k) = (dx1(0)*dy1(0)*dzn(k))**(1./3.)
!}
! OpenCLStencil (
!        4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!        4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!        4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!        4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!        4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!        4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(i,1,300.0,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array sm: [[C=1,0,0],[C=300,0,0]]
!    ){
! OpenCLMap ( [],["sm"],["(k,0,81,1)","(j,-1,301,1)"],[]) {
! OpenCLMap ( [],["sm"],["(j,-1,301,1)"],[]) {
    sm(0,j,k) = sm(1,j,k)
    sm(301,j,k) = sm(300.0,j,k)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array sm: [[0,C=1,0],[0,C=300,0]]
!    ){
! OpenCLMap ( [],["sm"],["(k,0,81,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["sm"],["(i,0,301,1)"],[]) {
    sm(i,301,k) = sm(i,300.0,k)
    sm(i,0,k) = sm(i,1,k)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array sm: [[0,0,C=1],[0,0,C=80]]
!    ){
! OpenCLMap ( [],["sm"],["(j,-1,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["sm"],["(i,0,301,1)"],[]) {
    sm(i,j,0) = -sm(i,j,1)
    sm(i,j,81) = sm(i,j,80.0)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!        2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!        2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!        2 point stencil on 1D array dx1: [[0],[1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!        3 point stencil on 1D array dzn: [[0],[1],[-1]]
!        10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu1: [[1,0,C=1],[0,0,C=1]]
!        2 point stencil on 3D array diu2: [[0,1,C=1],[0,0,C=1]]
!        2 point stencil on 3D array diu4: [[1,0,C=1],[1,-1,C=1]]
!        2 point stencil on 1D array dx1: [[0],[1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!        2 point stencil on 1D array dzn: [[C=1],[C=2]]
!        8 point stencil on 3D array sm: [[1,1,C=1],[1,0,C=1],[1,0,C=2],[1,-1,C=1],[0,1,C=1],[0,0,C=1],[0,0,C=2],[0,-1,C=1]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsx2 = sm(i+1,j,1)
    evsx1 = sm(i,j,1)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,1)+dx1(i)*sm(i+1,j-1,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
    visux2 = (evsx2)*2.*diu1(i+1,j,1)
    visux1 = (evsx1)*2.*diu1(i,j,1)
    visuy2 = (evsy2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
    visuy1 = (evsy1)*(diu2(i,j,1)+diu4(i+1,j-1,1))
    visuz2 = (evsz2)*(diu3(i,j,2)+diu7(i+1,j,1))
    visuz1 = (0.4*uspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(u(i,j,1)/uspd(i,j))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(1)
    f(i,j,1) = (f(i,j,1)+vfu)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!        2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!        2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!        3 point stencil on 1D array dx1: [[0],[1],[-1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!        3 point stencil on 1D array dzn: [[0],[1],[-1]]
!        10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu2: [[0,1,C=1],[-1,1,C=1]]
!        2 point stencil on 3D array diu4: [[1,0,C=1],[0,0,C=1]]
!        2 point stencil on 3D array diu5: [[0,1,C=1],[0,0,C=1]]
!        3 point stencil on 1D array dx1: [[0],[1],[-1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!        2 point stencil on 1D array dzn: [[C=1],[C=2]]
!        8 point stencil on 3D array sm: [[1,1,C=1],[1,0,C=1],[1,0,C=2],[0,1,C=1],[0,0,C=1],[0,0,C=2],[-1,1,C=1],[-1,0,C=1]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsy2 = sm(i,j+1,1)
    evsy1 = sm(i,j,1)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,1)+dx1(i-1)*sm(i,j,1))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,1)+dx1(i-1)*sm(i,j+1,1))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
    visvx2 = (evsx2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
    visvx1 = (evsx1)*(diu2(i-1,j+1,1)+diu4(i,j,1))
    visvy2 = (evsy2)*2.*diu5(i,j+1,1)
    visvy1 = (evsy1)*2.*diu5(i,j,1)
    visvz2 = (evsz2)*(diu6(i,j,2)+diu8(i,j+1,1))
    visvz1 = (0.4*vspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(v(i,j,1)/vspd(i,j))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(1)
    g(i,j,1) = (g(i,j,1)+vfv)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!        2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!        2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!        3 point stencil on 1D array dx1: [[0],[1],[-1]]
!        3 point stencil on 1D array dy1: [[0],[1],[-1]]
!        2 point stencil on 1D array dzn: [[0],[1]]
!        10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(i,1,300.0,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}
!}
!}    
!}
    return 
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(i,1,300.0,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
!}
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(j,1,300.0,1)"],[]) {
    f(0,j,k) = f(1,j,k)
!}
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    g(i,0,k) = g(i,300.0,k)
!}
!}
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( [],[],["(i,1,300.0,1)"],[]) {
    h(i,j,0) = 0.0
    h(i,j,80.0) = 0.0
!}
!}
! OpenCLStencil (
!        2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!        2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!        2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!        2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!        2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!        2 point stencil on 3D array w_F4_cas: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(i,1,300.0,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w_F4_cas(i,j,k-1)+w_F4_cas(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}
!}
!}    
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["rhs"],["rhsav","area"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(j,1,300.0,1)","(i,1,300.0,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(i,1,300.0,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(i,1,300.0,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
!}
!}
    do l = 1, 50.0, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!                                2 point stencil on 1D array dxs: [[0],[-1]]
!                                2 point stencil on 1D array dys: [[0],[-1]]
!                                2 point stencil on 1D array dzs_F4_cas: [[0],[-1]]
!                                14 point stencil on 4D array p: [[C=0,1,0,0],[C=0,0,1,0],[C=0,0,0,0],[C=0,0,0,1],[C=0,0,0,-1],[C=0,0,-1,0],[C=0,-1,0,0],[C=1,1,0,0],[C=1,0,1,0],[C=1,0,0,0],[C=1,0,0,1],[C=1,0,0,-1],[C=1,0,-1,0],[C=1,-1,0,0]]
!                ){
! OpenCLMap ( ["dzs_F4_cas","nrd"],["p"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs_F4_cas","nrd"],["p"],["(j,1,300.0,1)","(i,1,300.0,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs_F4_cas","nrd"],["p"],["(i,1,300.0,1)"],["nrd","l"]) {
                dz1 = dzs_F4_cas(k-1)
                dz2 = dzs_F4_cas(k)
                cn4s = 2./(dz1*(dz1+dz2))
                cn4l = 2./(dz2*(dz1+dz2))
                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                if (nrd==0) then
                                reltmp = 1.0*(cn1*(cn2l*p(0,i+1,j,k)+cn2s*p(0,i-1,j,k)+cn3l*p(0,i,j+1,k)+cn3s*p(0,i,j-1,k)+cn4l*p(0,i,j,k+1)+cn4s*p(0,i,j,k-1)-rhs(i,j,k))-p(0,i,j,k))
                                p(1,i,j,k) = p(0,i,j,k)+reltmp
                else
                                reltmp = 1.0*(cn1*(cn2l*p(1,i+1,j,k)+cn2s*p(1,i-1,j,k)+cn3l*p(1,i,j+1,k)+cn3s*p(1,i,j-1,k)+cn4l*p(1,i,j,k+1)+cn4s*p(1,i,j,k-1)-rhs(i,j,k))-p(1,i,j,k))
                                p(0,i,j,k) = p(1,i,j,k)+reltmp
                end if
!}
!}
!}                
!}
! OpenCLStencil (
!                                2 point stencil on 4D array p: [[C=0,C=1,0,0],[C=0,C=300,0,0]]
!                ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(j,0,301,1)"],["nrd","l"]) {
                p(0,0,j,k) = p(0,1,j,k)
                p(0,301,j,k) = p(0,300.0,j,k)
!}
!}                
!}
! OpenCLStencil (
!                                2 point stencil on 4D array p: [[C=0,0,C=1,0],[C=0,0,C=300,0]]
!                ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(i,0,301,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(i,0,301,1)"],["nrd","l"]) {
                p(0,i,0,k) = p(0,i,300.0,k)
                p(0,i,301,k) = p(0,i,1,k)
!}
!}                
!}
        end do
! OpenCLStencil (
!                2 point stencil on 4D array p: [[C=0,0,0,C=1],[C=0,0,0,C=80]]
!        ){
! OpenCLMap ( [],["p"],["(j,0,301,1)","(i,0,301,1)"],["l"]) {
! OpenCLMap ( [],["p"],["(i,0,301,1)"],["l"]) {
        p(0,i,j,0) = p(0,i,j,1)
        p(0,i,j,81) = p(0,i,j,80.0)
!}
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["p","dx1","dy1","dzn"],["pav","pco"],["(j,1,300.0,1)","(i,1,300.0,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["p","dx1","dy1","dzn"],["pav","pco"],["(i,1,300.0,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    pav = pav+p(0,i,j,k)*dx1(i)*dy1(j)*dzn(k)
    pco = pco+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(i,1,300.0,1)"],[]) {
    p(0,i,j,k) = p(0,i,j,k)-pav
!}
!}
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,C=1,0,0],[C=0,C=300,0,0]]
!    ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)"],[]) {
! OpenCLMap ( [],["p"],["(j,0,301,1)"],[]) {
    p(0,0,j,k) = p(0,1,j,k)
    p(0,301,j,k) = p(0,300.0,j,k)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,0,C=1,0],[C=0,0,C=300,0]]
!    ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],["p"],["(i,0,301,1)"],[]) {
    p(0,i,0,k) = p(0,i,300.0,k)
    p(0,i,301,k) = p(0,i,1,k)
!}
!}    
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,0,0,C=1],[C=0,0,0,C=80]]
!    ){
! OpenCLMap ( [],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
! OpenCLMap ( [],[],["(i,0,301,1)"],[]) {
    p(0,i,j,0) = p(0,i,j,1)
    p(0,i,j,81) = p(0,i,j,80.0)
!}
!}    
!}
end subroutine velnw_bondv1_velfg_feedbf_les_adam_press_merged

end module module_velnw_bondv1_velfg_feedbf_les_adam_press_merged
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Combined 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: ./src/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character*70 :: data10
      character*70 :: data11
      character*70 :: data12
      character*70 :: data13
      character*70 :: data14
      character*70 :: data15
      character*70 :: data20
      character*70 :: data21
      character*70 :: data22
      character*70 :: data23
      character*70 :: data24
      character*70 :: data25
      character*70 :: data26
      character*70 :: data27
      character*70 :: data30
      character*70 :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: cov1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: cov5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: cov9
      real(4), dimension(kp) :: delx1
      real(4), dimension(0:ip,jp,kp) :: dfu1
      real(4), dimension(ip,0:jp,kp) :: dfv1
      real(4), dimension(ip,jp,kp) :: dfw1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      real(4), dimension(0:ip+1,0:jp+1) :: uspd
      real(4), dimension(0:ip+1,0:jp+1) :: vspd
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dfu1, dfv1, dfw1, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dmask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call bondv1(u, z2, dzn, v, w, n, n0, dt, dxs)
        call velfg(dx1, dy1, dzn, f, g, h, u, v, w, dfu1, dfv1, dfw1, vn, dzs, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, uspd, vspd)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	bondv1->
	    call bondv1(u, z2, dzn, v, w, n, n0, dt, dxs)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "z2", argument = VarName (fromList []) "z2"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "n0", argument = VarName (fromList []) "n0"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velfg->
	    call velfg(dx1, dy1, dzn, f, g, h, u, v, w, dfu1, dfv1, dfw1, vn, dzs, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, uspd, vspd)
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dfu1", argument = VarName (fromList []) "dfu1"}
	ArgTrans {parameter = ArgName (fromList []) "dfv1", argument = VarName (fromList []) "dfv1"}
	ArgTrans {parameter = ArgName (fromList []) "dfw1", argument = VarName (fromList []) "dfw1"}
	ArgTrans {parameter = ArgName (fromList []) "vn", argument = VarName (fromList []) "vn"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "cov1", argument = VarName (fromList []) "cov1"}
	ArgTrans {parameter = ArgName (fromList []) "cov2", argument = VarName (fromList []) "cov2"}
	ArgTrans {parameter = ArgName (fromList []) "cov3", argument = VarName (fromList []) "cov3"}
	ArgTrans {parameter = ArgName (fromList []) "cov4", argument = VarName (fromList []) "cov4"}
	ArgTrans {parameter = ArgName (fromList []) "cov5", argument = VarName (fromList []) "cov5"}
	ArgTrans {parameter = ArgName (fromList []) "cov6", argument = VarName (fromList []) "cov6"}
	ArgTrans {parameter = ArgName (fromList []) "cov7", argument = VarName (fromList []) "cov7"}
	ArgTrans {parameter = ArgName (fromList []) "cov8", argument = VarName (fromList []) "cov8"}
	ArgTrans {parameter = ArgName (fromList []) "cov9", argument = VarName (fromList []) "cov9"}
	ArgTrans {parameter = ArgName (fromList []) "nou1", argument = VarName (fromList []) "nou1"}
	ArgTrans {parameter = ArgName (fromList []) "nou2", argument = VarName (fromList []) "nou2"}
	ArgTrans {parameter = ArgName (fromList []) "nou3", argument = VarName (fromList []) "nou3"}
	ArgTrans {parameter = ArgName (fromList []) "nou4", argument = VarName (fromList []) "nou4"}
	ArgTrans {parameter = ArgName (fromList []) "nou5", argument = VarName (fromList []) "nou5"}
	ArgTrans {parameter = ArgName (fromList []) "nou6", argument = VarName (fromList []) "nou6"}
	ArgTrans {parameter = ArgName (fromList []) "nou7", argument = VarName (fromList []) "nou7"}
	ArgTrans {parameter = ArgName (fromList []) "nou8", argument = VarName (fromList []) "nou8"}
	ArgTrans {parameter = ArgName (fromList []) "nou9", argument = VarName (fromList []) "nou9"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw_bondv1_velfg_feedbf_les_adam_press_merged
Filename: 
Source:
module module_velnw_bondv1_velfg_feedbf_les_adam_press_merged
contains
subroutine velnw_bondv1_velfg_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,cov1,cov2,cov3,cov4,cov5,cov6,cov7,cov8,cov9,data21,delx1,dfu1,dfv1,dfw1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dmask1,dt,dx1,dxs,dy1,dys,dzn,dzs_F4_cas,f,fold,fx,fy,fz,g,gold,h,hold,n,n0,nmax,nou1,nou2,nou3,nou4,nou5,nou6,nou7,nou8,nou9,p,rhs,ro,sm,u,uspd,usum,v,vn,vspd,vsum,w_F4_cas,wsum,z2)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = jp 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4) :: aaa,bbb,uout,gaaa,gbbb
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1), intent(In) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(In) :: cmask1
      real(4) :: cn1,cn2l,cn2s,cn3l,cn3s,cn4l,cn4s,dz1,dz2
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov1
      real(4) :: cov1_i,cov2_j,cov3_k,cov4_i,cov5_j,cov6_k,cov7_i,cov8_j,cov9_k
      real(4) :: cov1_ip1,cov2_jp1,cov3_kp1,cov4_ip1,cov5_jp1,cov6_kp1,cov7_ip1,cov8_jp1,cov9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: cov9
      real(4) :: covc,covx1,covy1,covz1
      real(4) :: csx1
      character*70, intent(In) :: data21
      character*300 :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(kp), intent(Out) :: delx1
      real(4), dimension(0:ip,jp,kp), intent(Out) :: dfu1
      real(4), dimension(ip,0:jp,kp), intent(Out) :: dfv1
      real(4), dimension(ip,jp,kp), intent(Out) :: dfw1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu1
      real(4) :: diu1_,diu2_,diu3_,diu4_,diu5_,diu6_,diu7_,diu8_,diu9_
      real(4) :: diu1_ip1,diu2_jp1,diu3_kp1,diu4_ip1,diu5_jp1,diu6_kp1,diu7_ip1,diu8_jp1,diu9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: diu9
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1,dudyx1,dudzx1,dvdxx1,dvdyx1,dvdzx1,dwdxx1,dwdyx1,dwdzx1
      real(4), dimension(-1:ip+1), intent(In) :: dx1
      real(4), dimension(0:ip), intent(In) :: dxs
      real(4), dimension(0:jp+1), intent(In) :: dy1
      real(4), dimension(0:jp), intent(In) :: dys
      real(4), dimension(-1:kp+2), intent(In) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(-1:kp+2), intent(In) :: dzs_F4_cas
      real(4) :: evsx2,evsx1,evsy2,evsy1,evsz2,evsz1
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: f
      real(4) :: f1x,f1y,f1z,f2x,f2y,f2z
      real(4) :: fd,gd,hd
      real(4), dimension(ip,jp,kp), intent(InOut) :: fold
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fx
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fy
      real(4), dimension(0:ip,0:jp,0:kp), intent(Out) :: fz
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: g
      real(4), dimension(ip,jp,kp), intent(InOut) :: gold
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: h
      real(4), dimension(ip,jp,kp), intent(InOut) :: hold
      integer :: i,j,k
      integer, intent(In) :: n,n0
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou1
      real(4) :: nou1_,nou2_,nou3_,nou4_,nou5_,nou6_,nou7_,nou8_,nou9_
      real(4) :: nou1_ip1,nou2_jp1,nou3_kp1,nou4_ip1,nou5_jp1,nou6_kp1,nou7_ip1,nou8_jp1,nou9_kp1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2), intent(Out) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4) :: pz
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1), intent(Out) :: rhs
      real(4) :: rhsav,pav,area,pco,sor,reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1), intent(Out) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: u
      real(4) :: u_val
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: uspd
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: usum
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1), intent(InOut) :: v
      real(4) :: vfu,vfv,vfw
      real(4) :: visux2,visux1,visuy2,visuy1,visuz2,visuz1
      real(4) :: visvx2,visvx1,visvy2,visvy1,visvz2,visvz1
      real(4) :: viswx2,viswx1,viswy2,viswy1,viswz2,viswz1
      real(4), intent(In) :: vn
      real(4), dimension(0:ip+1,0:jp+1), intent(Out) :: vspd
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(In) :: w
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1), intent(InOut) :: w_F4_cas
      real(4), dimension(0:ip,0:jp,0:kp), intent(InOut) :: wsum
      real(4), dimension(0:kp+2), intent(In) :: z2
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,1,0,0],[C=0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt","u"],["u"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    pz = (-p(0,i,j,k)+p(0,i+1,j,k))/ro/dxs(i)
    u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,0,1,0],[C=0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","dt"],["v"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    pz = (-p(0,i,j,k)+p(0,i,j+1,k))/ro/dys(j)
    v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,0,0,0],[C=0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs_F4_cas","dt"],["w_F4_cas"],["(k,1,79,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    pz = (-p(0,i,j,k)+p(0,i,j,k+1))/ro/dzs_F4_cas(k)
    w_F4_cas(i,j,k) = w_F4_cas(i,j,k)+dt*(h(i,j,k)-pz)
!}    
!}
    return 
! OpenCLMap ( [],["u","w_F4_cas","v"],["(i,0,1,1)","(k,1,78,1)","(j,1,300.0,1)"],[]) {
    u_val = 5.*((z2(k)+0.5*dzn(k))/600.)**0.2
    u(i,j,k) = u_val
    v(i,j,k) = 0.0
    w_F4_cas(i,j,k) = 0.0
!}
! OpenCLMap ( [],["u","v","w_F4_cas"],["(i,0,1,1)","(k,79,80.0,1)","(j,1,300.0,1)"],[]) {
    u(i,j,k) = u(i,j,77)
    v(i,j,k) = 0.0
    w_F4_cas(i,j,k) = 0.0
!}
    if (n==n0) then
! OpenCLMap ( [],["u","v","w_F4_cas"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,2,300.0,1)"],[]) {
        u(i,j,k) = u(1,j,k)
        v(i,j,k) = v(1,j,k)
        w_F4_cas(i,j,k) = w_F4_cas(1,j,k)
!}
    end if
    aaa = 0.0
! OpenCLReduce ( ["u"],["aaa"],["(k,1,80.0,1)","(j,1,300.0,1)"],[],["(aaa,0.0)"]) {
    aaa = amax1(aaa,u(300.0,j,k))
!}
    gaaa = aaa
    bbb = 1e38
! OpenCLReduce ( ["u"],["bbb"],["(k,1,80.0,1)","(j,1,300.0,1)"],[],["(bbb,1e38)"]) {
    bbb = amin1(bbb,u(300.0,j,k))
!}
    gbbb = bbb
    uout = (gaaa+gbbb)/2.
! OpenCLStencil (
!        2 point stencil on 3D array u: [[C=299,0,0],[C=300,0,0]]
!    ){
! OpenCLMap ( ["dt","uout","dxs"],["u"],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
    u(300.0,j,k) = u(300.0,j,k)-dt*uout*(u(300.0,j,k)-u(299,j,k))/dxs(300.0)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array v: [[C=300,0,0],[C=301,0,0]]
!    ){
! OpenCLMap ( ["dt","uout","dxs"],["v"],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
    v(301,j,k) = v(301,j,k)-dt*uout*(v(301,j,k)-v(300.0,j,k))/dxs(300.0)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array w_F4_cas: [[C=300,0,0],[C=301,0,0]]
!    ){
! OpenCLMap ( ["dt","uout","dxs"],["w_F4_cas"],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
    w_F4_cas(301,j,k) = w_F4_cas(301,j,k)-dt*uout*(w_F4_cas(301,j,k)-w_F4_cas(300.0,j,k))/dxs(300.0)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array u: [[0,C=1,0],[0,C=300,0]]
!    ){
! OpenCLMap ( [],["u"],["(k,0,81,1)","(i,0,301,1)"],[]) {
    u(i,0,k) = u(i,300.0,k)
    u(i,301,k) = u(i,1,k)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array v: [[0,C=1,0],[0,C=300,0]]
!    ){
! OpenCLMap ( [],["v"],["(k,0,81,1)","(i,0,301,1)"],[]) {
    v(i,0,k) = v(i,300.0,k)
    v(i,301,k) = v(i,1,k)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array w_F4_cas: [[0,C=1,0],[0,C=300,0]]
!    ){
! OpenCLMap ( [],[],["(k,0,80.0,1)","(i,0,301,1)"],[]) {
    w_F4_cas(i,0,k) = w_F4_cas(i,300.0,k)
    w_F4_cas(i,301,k) = w_F4_cas(i,1,k)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array u: [[0,0,C=1],[0,0,C=80]]
!    ){
! OpenCLMap ( [],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
    u(i,j,0) = -u(i,j,1)
    u(i,j,81) = u(i,j,80.0)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array v: [[0,0,C=1],[0,0,C=80]]
!    ){
! OpenCLMap ( [],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
    v(i,j,0) = -v(i,j,1)
    v(i,j,81) = v(i,j,80.0)
!}    
!}
! OpenCLMap ( [],[],["(j,-1,301,1)","(i,0,301,1)"],[]) {
    w_F4_cas(i,j,0) = 0.0
    w_F4_cas(i,j,80.0) = 0.0
!}
    call vel2(nou1, nou5, nou9, nou2, nou3, nou4, nou6, nou7, nou8, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, cov1, cov2, cov3, cov4, cov5, cov6, cov7, cov8, cov9, u, v, w_F4_cas, dx1, dy1, dzn, dzs_F4_cas, uspd, vspd)
! OpenCLStencil (
!        2 point stencil on 1D array dx1: [[0],[1]]
!        4 point stencil on 3D array v: [[1,0,C=1],[1,-1,C=1],[0,0,C=1],[0,-1,C=1]]
!    ){
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    uspd(i,j) = (u(i,j,1)**2+((0.5*(v(i,j-1,1)+v(i,j,1))*dx1(i+1)+0.5*(v(i+1,j-1,1)+v(i+1,j,1))*dx1(i))/(dx1(i)+dx1(i+1)))**2)**0.5
!}    
!}
! OpenCLStencil (
!        2 point stencil on 1D array dy1: [[0],[1]]
!        4 point stencil on 3D array u: [[0,1,C=1],[0,0,C=1],[-1,1,C=1],[-1,0,C=1]]
!    ){
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    vspd(i,j) = (v(i,j,1)**2+((0.5*(u(i-1,j,1)+u(i,j,1))*dy1(j+1)+0.5*(u(i-1,j+1,1)+u(i,j+1,1))*dy1(j))/(dy1(j)+dy1(j+1)))**2)**0.5
!}    
!}
    write(6, *)('CHK_uspd_vspd=', uspd(ip/2,jp/2), vspd(ip/2,jp/2))
! OpenCLStencil (
!        2 point stencil on 3D array cov1: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array cov2: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array cov3: [[0,0,0],[0,0,1]]
!        2 point stencil on 1D array dx1: [[0],[1]]
!    ){
! OpenCLMap ( [],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    covx1 = (dx1(i+1)*cov1(i,j,k)+dx1(i)*cov1(i+1,j,k))/(dx1(i)+dx1(i+1))
    covy1 = (cov2(i,j,k)+cov2(i,j+1,k))/2.
    covz1 = (cov3(i,j,k)+cov3(i,j,k+1))/2.
    covc = covx1+covy1+covz1
    f(i,j,k) = (-covc)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array cov4: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array cov5: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array cov6: [[0,0,0],[0,0,1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!    ){
! OpenCLMap ( [],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    covx1 = (cov4(i,j,k)+cov4(i+1,j,k))/2.
    covy1 = (dy1(j+1)*cov5(i,j,k)+dy1(j)*cov5(i,j+1,k))/(dy1(j)+dy1(j+1))
    covz1 = (cov6(i,j,k)+cov6(i,j,k+1))/2.
    covc = covx1+covy1+covz1
    g(i,j,k) = (-covc)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array cov7: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array cov8: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array cov9: [[0,0,0],[0,0,1]]
!        2 point stencil on 1D array dzn: [[0],[1]]
!    ){
! OpenCLMap ( [],[],["(k,1,79,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    covx1 = (cov7(i,j,k)+cov7(i+1,j,k))/2.
    covy1 = (cov8(i,j,k)+cov8(i,j+1,k))/2.
    covz1 = (dzn(k+1)*cov9(i,j,k)+dzn(k)*cov9(i,j,k+1))/(dzn(k)+dzn(k+1))
    covc = covx1+covy1+covz1
    h(i,j,k) = (-covc)
!}    
!}
    return 
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","fx","fy","fz"],["fx","fy","fz","g"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w_F4_cas(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w_F4_cas(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)"],[]) {
    delx1(k) = (dx1(0)*dy1(0)*dzn(k))**(1./3.)
!}
! OpenCLStencil (
!        4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!        4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!        4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!        4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!        4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!        4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array sm: [[C=1,0,0],[C=300,0,0]]
!    ){
! OpenCLMap ( [],["sm"],["(k,0,81,1)","(j,-1,301,1)"],[]) {
    sm(0,j,k) = sm(1,j,k)
    sm(301,j,k) = sm(300.0,j,k)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array sm: [[0,C=1,0],[0,C=300,0]]
!    ){
! OpenCLMap ( [],["sm"],["(k,0,81,1)","(i,0,301,1)"],[]) {
    sm(i,301,k) = sm(i,300.0,k)
    sm(i,0,k) = sm(i,1,k)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array sm: [[0,0,C=1],[0,0,C=80]]
!    ){
! OpenCLMap ( [],["sm"],["(j,-1,301,1)","(i,0,301,1)"],[]) {
    sm(i,j,0) = -sm(i,j,1)
    sm(i,j,81) = sm(i,j,80.0)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!        2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!        2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!        2 point stencil on 1D array dx1: [[0],[1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!        3 point stencil on 1D array dzn: [[0],[1],[-1]]
!        10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu1: [[1,0,C=1],[0,0,C=1]]
!        2 point stencil on 3D array diu2: [[0,1,C=1],[0,0,C=1]]
!        2 point stencil on 3D array diu4: [[1,0,C=1],[1,-1,C=1]]
!        2 point stencil on 1D array dx1: [[0],[1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!        2 point stencil on 1D array dzn: [[C=1],[C=2]]
!        8 point stencil on 3D array sm: [[1,1,C=1],[1,0,C=1],[1,0,C=2],[1,-1,C=1],[0,1,C=1],[0,0,C=1],[0,0,C=2],[0,-1,C=1]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    evsx2 = sm(i+1,j,1)
    evsx1 = sm(i,j,1)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,1)+dx1(i)*sm(i+1,j-1,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
    visux2 = (evsx2)*2.*diu1(i+1,j,1)
    visux1 = (evsx1)*2.*diu1(i,j,1)
    visuy2 = (evsy2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
    visuy1 = (evsy1)*(diu2(i,j,1)+diu4(i+1,j-1,1))
    visuz2 = (evsz2)*(diu3(i,j,2)+diu7(i+1,j,1))
    visuz1 = (0.4*uspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(u(i,j,1)/uspd(i,j))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(1)
    f(i,j,1) = (f(i,j,1)+vfu)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!        2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!        2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!        3 point stencil on 1D array dx1: [[0],[1],[-1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!        3 point stencil on 1D array dzn: [[0],[1],[-1]]
!        10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu2: [[0,1,C=1],[-1,1,C=1]]
!        2 point stencil on 3D array diu4: [[1,0,C=1],[0,0,C=1]]
!        2 point stencil on 3D array diu5: [[0,1,C=1],[0,0,C=1]]
!        3 point stencil on 1D array dx1: [[0],[1],[-1]]
!        2 point stencil on 1D array dy1: [[0],[1]]
!        2 point stencil on 1D array dzn: [[C=1],[C=2]]
!        8 point stencil on 3D array sm: [[1,1,C=1],[1,0,C=1],[1,0,C=2],[0,1,C=1],[0,0,C=1],[0,0,C=2],[-1,1,C=1],[-1,0,C=1]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    evsy2 = sm(i,j+1,1)
    evsy1 = sm(i,j,1)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,1)+dx1(i)*sm(i+1,j+1,1))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,1)+dx1(i-1)*sm(i,j,1))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,1)+dx1(i-1)*sm(i,j+1,1))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(2)*((dx1(i+1)*sm(i,j,1)+dx1(i)*sm(i+1,j,1))/(dx1(i)+dx1(i+1)))+dzn(1)*((dx1(i+1)*sm(i,j,2)+dx1(i)*sm(i+1,j,2))/(dx1(i)+dx1(i+1))))/(dzn(1)+dzn(2))
    visvx2 = (evsx2)*(diu2(i,j+1,1)+diu4(i+1,j,1))
    visvx1 = (evsx1)*(diu2(i-1,j+1,1)+diu4(i,j,1))
    visvy2 = (evsy2)*2.*diu5(i,j+1,1)
    visvy1 = (evsy1)*2.*diu5(i,j,1)
    visvz2 = (evsz2)*(diu6(i,j,2)+diu8(i,j+1,1))
    visvz1 = (0.4*vspd(i,j)/alog(0.5*dzn(1)/0.1))**2*(v(i,j,1)/vspd(i,j))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(1)
    g(i,j,1) = (g(i,j,1)+vfv)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!        2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!        2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!        2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!        2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!        3 point stencil on 1D array dx1: [[0],[1],[-1]]
!        3 point stencil on 1D array dy1: [[0],[1],[-1]]
!        2 point stencil on 1D array dzn: [[0],[1]]
!        10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}    
!}
    return 
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)","(j,1,300.0,1)"],[]) {
    f(0,j,k) = f(1,j,k)
!}
! OpenCLMap ( [],[],["(k,1,80.0,1)","(i,1,300.0,1)"],[]) {
    g(i,0,k) = g(i,300.0,k)
!}
! OpenCLMap ( [],[],["(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    h(i,j,0) = 0.0
    h(i,j,80.0) = 0.0
!}
! OpenCLStencil (
!        2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!        2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!        2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!        2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!        2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!        2 point stencil on 3D array w_F4_cas: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w_F4_cas(i,j,k-1)+w_F4_cas(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}    
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["rhs","dx1","dy1","dzn"],["rhsav","area"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
    do l = 1, 50.0, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!                                2 point stencil on 1D array dxs: [[0],[-1]]
!                                2 point stencil on 1D array dys: [[0],[-1]]
!                                2 point stencil on 1D array dzs_F4_cas: [[0],[-1]]
!                                14 point stencil on 4D array p: [[C=0,1,0,0],[C=0,0,1,0],[C=0,0,0,0],[C=0,0,0,1],[C=0,0,0,-1],[C=0,0,-1,0],[C=0,-1,0,0],[C=1,1,0,0],[C=1,0,1,0],[C=1,0,0,0],[C=1,0,0,1],[C=1,0,0,-1],[C=1,0,-1,0],[C=1,-1,0,0]]
!                ){
! OpenCLMap ( ["dzs_F4_cas","nrd"],["p"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],["nrd","l"]) {
                dz1 = dzs_F4_cas(k-1)
                dz2 = dzs_F4_cas(k)
                cn4s = 2./(dz1*(dz1+dz2))
                cn4l = 2./(dz2*(dz1+dz2))
                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                if (nrd==0) then
                                reltmp = 1.0*(cn1*(cn2l*p(0,i+1,j,k)+cn2s*p(0,i-1,j,k)+cn3l*p(0,i,j+1,k)+cn3s*p(0,i,j-1,k)+cn4l*p(0,i,j,k+1)+cn4s*p(0,i,j,k-1)-rhs(i,j,k))-p(0,i,j,k))
                                p(1,i,j,k) = p(0,i,j,k)+reltmp
                else
                                reltmp = 1.0*(cn1*(cn2l*p(1,i+1,j,k)+cn2s*p(1,i-1,j,k)+cn3l*p(1,i,j+1,k)+cn3s*p(1,i,j-1,k)+cn4l*p(1,i,j,k+1)+cn4s*p(1,i,j,k-1)-rhs(i,j,k))-p(1,i,j,k))
                                p(0,i,j,k) = p(1,i,j,k)+reltmp
                end if
!}                
!}
! OpenCLStencil (
!                                2 point stencil on 4D array p: [[C=0,C=1,0,0],[C=0,C=300,0,0]]
!                ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)"],["nrd","l"]) {
                p(0,0,j,k) = p(0,1,j,k)
                p(0,301,j,k) = p(0,300.0,j,k)
!}                
!}
! OpenCLStencil (
!                                2 point stencil on 4D array p: [[C=0,0,C=1,0],[C=0,0,C=300,0]]
!                ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(i,0,301,1)"],["nrd","l"]) {
                p(0,i,0,k) = p(0,i,300.0,k)
                p(0,i,301,k) = p(0,i,1,k)
!}                
!}
        end do
! OpenCLStencil (
!                2 point stencil on 4D array p: [[C=0,0,0,C=1],[C=0,0,0,C=80]]
!        ){
! OpenCLMap ( [],["p"],["(j,0,301,1)","(i,0,301,1)"],["l"]) {
        p(0,i,j,0) = p(0,i,j,1)
        p(0,i,j,81) = p(0,i,j,80.0)
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    pav = pav+p(0,i,j,k)*dx1(i)*dy1(j)*dzn(k)
    pco = pco+dx1(i)*dy1(j)*dzn(k)
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80.0,1)","(j,1,300.0,1)","(i,1,300.0,1)"],[]) {
    p(0,i,j,k) = p(0,i,j,k)-pav
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,C=1,0,0],[C=0,C=300,0,0]]
!    ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)"],[]) {
    p(0,0,j,k) = p(0,1,j,k)
    p(0,301,j,k) = p(0,300.0,j,k)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,0,C=1,0],[C=0,0,C=300,0]]
!    ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(i,0,301,1)"],[]) {
    p(0,i,0,k) = p(0,i,300.0,k)
    p(0,i,301,k) = p(0,i,1,k)
!}    
!}
! OpenCLStencil (
!        2 point stencil on 4D array p: [[C=0,0,0,C=1],[C=0,0,0,C=80]]
!    ){
! OpenCLMap ( [],[],["(j,0,301,1)","(i,0,301,1)"],[]) {
    p(0,i,j,0) = p(0,i,j,1)
    p(0,i,j,81) = p(0,i,j,80.0)
!}    
!}
end subroutine velnw_bondv1_velfg_feedbf_les_adam_press_merged

end module module_velnw_bondv1_velfg_feedbf_les_adam_press_merged
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

