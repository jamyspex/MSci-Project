
================================================================================
F4: Finite-element Fortran for FPGAs
This compiler allows Fortran finite element codes to be compiled
for execution on FPGA devices via OpenCL
================================================================================

The following command line values were parsed:

Files with subroutines to be parallelised:
	adam
	bondv1
	feedbf
	les
	press
	velfg
	velnw
File containing main subroutine: 
	main.f95
Source directory:
	./src
Fixed form: False
Loop fusion bound: Nothing
CPP Defines: WV_OPENCL, WV_NEW, WV_NEW_VELFG, NO_GLOBAL_SOR, INLINE_BOUND_CALCS, WV_TEST, TWINNED_BUFFER, NO_IO, IFBF=1, IADAM=0, 
CPP Excludes:

"Executing compiler main..."
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/main_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/init_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbfm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/grid_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/set_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/aveflow_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/ifdata_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondv1_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundsm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundp_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbfm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/velnw_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondv1_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundsm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/press_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondFG_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundp_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/adam_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
Parsing ./src/main.f95
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/adam_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundsm_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/press_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/bondFG_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/boundp_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/velnw_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 ./src/params_common_sn_tmp.f95 | grep -v -E '^\s*$' 
Parsing ./src/adam.f95
Parsing ./src/feedbf.f95
Parsing ./src/les.f95
Parsing ./src/press.f95
Parsing ./src/velnw.f95
Writing to consts/adam.f95
Writing to consts/feedbf.f95
Writing to consts/les.f95
Writing to consts/main.f95
Writing to consts/press.f95
Writing to consts/velnw.f95
Writing to scratch/adam.f95
Writing to scratch/feedbf.f95
Writing to scratch/les.f95
Writing to scratch/main.f95
Writing to scratch/press.f95
Writing to scratch/velnw.f95
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/main_tmp.f95 | grep -v -E '^\s*$' 
Parsing scratch/main.f95
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/adam_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/feedbf_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/les_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/press_tmp.f95 | grep -v -E '^\s*$' 
cpp -Wno-invalid-pp-token -P -DWV_OPENCL -DWV_NEW -DWV_NEW_VELFG -DNO_GLOBAL_SOR -DINLINE_BOUND_CALCS -DWV_TEST -DTWINNED_BUFFER -DNO_IO -DIFBF=1 -DIADAM=0 scratch/velnw_tmp.f95 | grep -v -E '^\s*$' 
Parsing scratch/adam.f95
Parsing scratch/feedbf.f95
Parsing scratch/les.f95
Parsing scratch/press.f95
Parsing scratch/velnw.f95

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines not for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: scratch/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character(70) :: data10
      character(70) :: data11
      character(70) :: data12
      character(70) :: data13
      character(70) :: data14
      character(70) :: data15
      character(70) :: data20
      character(70) :: data21
      character(70) :: data22
      character(70) :: data23
      character(70) :: data24
      character(70) :: data25
      character(70) :: data26
      character(70) :: data27
      character(70) :: data30
      character(70) :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(kp) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax&
&, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, d&
&iu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dm&
&ask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys&
&, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main

AST not shown.
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines for offload 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: adam
Filename: scratch/adam.f95
Source:
subroutine adam(n,nmax,data21,fold,gold,hold,f,g,h)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      character(70), intent(In) :: data21
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      integer :: i,j,k
      real(4) :: fd,gd,hd
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                fd = f(i,j,k)
                gd = g(i,j,k)
                hd = h(i,j,k)
                f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
                g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
                h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
                fold(i,j,k) = fd
                gold(i,j,k) = gd
                hold(i,j,k) = hd
            end do
        end do
    end do
end subroutine adam

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: feedbf
Filename: scratch/feedbf.f95
Source:
subroutine feedbf(usum,u,bmask1,vsum,v,cmask1,wsum,w,dmask1,alpha,dt,beta,fx,fy,fz,f,g,h,n)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      integer, intent(In) :: n
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(In) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
      integer :: i,j,k
      real(4) :: f1x,f1y,f1z,f2x,f2y,f2z
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
                vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
                wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
                f1x = alpha*usum(i,j,k)*dt
                f1y = alpha*vsum(i,j,k)*dt
                f1z = alpha*wsum(i,j,k)*dt
                f2x = beta*u(i,j,k)*bmask1(i,j,k)
                f2y = beta*v(i,j,k)*cmask1(i,j,k)
                f2z = beta*w(i,j,k)*dmask1(i,j,k)
                fx(i,j,k) = f1x+f2x
                fy(i,j,k) = f1y+f2y
                fz(i,j,k) = f1z+f2z
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                f(i,j,k) = f(i,j,k)+fx(i,j,k)
                g(i,j,k) = g(i,j,k)+fy(i,j,k)
                h(i,j,k) = h(i,j,k)+fz(i,j,k)
            end do
        end do
    end do
end subroutine feedbf

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: les
Filename: scratch/les.f95
Source:
subroutine les(delx1,dx1,dy1,dzn,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm,f,g,h,u,v,uspd,vspd,dxs,dys,n)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      integer, intent(In) :: n
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: v
      real(4), dimension(0:301,0:301), intent(In) :: uspd
      real(4), dimension(0:301,0:301), intent(In) :: vspd
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      integer :: i,j,k
      real(4) :: csx1
      real(4) :: dudxx1,dudyx1,dudzx1,dvdxx1,dvdyx1,dvdzx1,dwdxx1,dwdyx1,dwdzx1
      real(4) :: visux2,visux1,visuy2,visuy1,visuz2,visuz1
      real(4) :: visvx2,visvx1,visvy2,visvy1,visvz2,visvz1
      real(4) :: viswx2,viswx1,viswy2,viswy1,viswz2,viswz1
      real(4) :: evsx2,evsx1,evsy2,evsy1,evsz2,evsz1
      real(4) :: vfu,vfv,vfw
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                dudxx1 = diu1(i,j,k)
                dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
                dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
                dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
                dvdyx1 = diu5(i,j,k)
                dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
                dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
                dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
                dwdzx1 = diu9(i,j,k)
                csx1 = 0.14
                sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1&
&+dwdxx1)**2)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsx2 = sm(i+1,j,k)
                evsx1 = sm(i,j,k)
                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visux2 = (evsx2)*2.*diu1(i+1,j,k)
                visux1 = (evsx1)*2.*diu1(i,j,k)
                visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
                visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
                f(i,j,k) = (f(i,j,k)+vfu)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsy2 = sm(i,j+1,k)
                evsy1 = sm(i,j,k)
                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)&
&*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
                visvy2 = (evsy2)*2.*diu5(i,j+1,k)
                visvy1 = (evsy1)*2.*diu5(i,j,k)
                visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
                g(i,j,k) = (g(i,j,k)+vfv)
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsz2 = sm(i,j,k+1)
                evsz1 = sm(i,j,k)
                evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)&
&*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
                evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*s&
&m(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
                evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)&
&*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
                viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
                viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
                viswz2 = (evsz2)*2.*diu9(i,j,k+1)
                viswz1 = (evsz1)*2.*diu9(i,j,k)
                vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
                h(i,j,k) = (h(i,j,k)+vfw)
            end do
        end do
    end do
    return 
end subroutine les

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: press
Filename: scratch/press.f95
Source:
subroutine press(u,v,w,p,rhs,f,g,h,dx1,dy1,dzn,dxs,dys,dzs,dt,n,nmax)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: cn1,cn2l,cn2s,cn3l,cn3s,cn4l,cn4s,dz1,dz2
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(In) :: w
      integer :: nn
      integer :: i,j,k,l,nrd
      real(4) :: rhsav,pav,area,pco,sor,reltmp
      real, parameter :: pjuge = 0.0001 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
                rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
            end do
        end do
    end do
    rhsav = 0.0
    area = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
                area = area+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
    rhsav = rhsav/area
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = rhs(i,j,k)-rhsav
            end do
        end do
    end do
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
            do k = 1, 80, 1
                do j = 1, 300, 1
                    do i = 1, 300, 1
                        do synthIdx3 = 0, 1, 1
                            dz1 = dzs(k-1)
                            dz2 = dzs(k)
                            cn4s = 2./(dz1*(dz1+dz2))
                            cn4l = 2./(dz2*(dz1+dz2))
                            cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                            cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                            cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                            cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                            cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                            if (nrd==0) then
                                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3&
&s*p(synthIdx3,i,j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
                            else
                                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,&
&k)+cn3s*p(synthIdx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                                p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
                            end if
                        end do
                    end do
                end do
            end do
            do k = 0, 81, 1
                do j = 0, 301, 1
                    do synthIdx2 = 0, 302, 1
                        do synthIdx3 = 0, 1, 1
                            if (synthIdx2==0 .and. synthIdx3==0) then
                                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                            end if
                            if (synthIdx3==0 .and. synthIdx2==301) then
                                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                            end if
                        end do
                    end do
                end do
            end do
            do k = 0, 81, 1
                do synthIdx1 = 0, 302, 1
                    do i = 0, 301, 1
                        do synthIdx3 = 0, 1, 1
                            if (synthIdx1==0 .and. synthIdx3==0) then
                                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                            end if
                            if (synthIdx3==0 .and. synthIdx1==301) then
                                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                            end if
                        end do
                    end do
                end do
            end do
        end do
        do synthIdx0 = 0, 81, 1
            do j = 0, 301, 1
                do i = 0, 301, 1
                    do synthIdx3 = 0, 1, 1
                        if (synthIdx0==0 .and. synthIdx3==0) then
                            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
                        end if
                        if (synthIdx3==0 .and. synthIdx0==81) then
                            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
                        end if
                    end do
                end do
            end do
        end do
    end do
    pav = 0.0
    pco = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
                        pco = pco+dx1(i)*dy1(j)*dzn(k)
                    end if
                end do
            end do
        end do
    end do
    pav = pav/pco
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
                    end if
                end do
            end do
        end do
    end do
    do k = 0, 81, 1
        do j = 0, 301, 1
            do synthIdx2 = 0, 302, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx2==0 .and. synthIdx3==0) then
                        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                    end if
                    if (synthIdx3==0 .and. synthIdx2==301) then
                        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                    end if
                end do
            end do
        end do
    end do
    do k = 0, 81, 1
        do synthIdx1 = 0, 302, 1
            do i = 0, 301, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx1==0 .and. synthIdx3==0) then
                        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                    end if
                    if (synthIdx3==0 .and. synthIdx1==301) then
                        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                    end if
                end do
            end do
        end do
    end do
    do synthIdx0 = 0, 81, 1
        do j = 0, 301, 1
            do i = 0, 301, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx0==0 .and. synthIdx3==0) then
                        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
                    end if
                    if (synthIdx3==0 .and. synthIdx0==81) then
                        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
                    end if
                end do
            end do
        end do
    end do
end subroutine press

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw
Filename: scratch/velnw.f95
Source:
subroutine velnw(p,ro,dxs,u,dt,f,dys,v,g,dzs,w,h)
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jpmax = 300 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(In) :: f
      real(4), dimension(0:300,0:300,0:80), intent(In) :: g
      real(4), dimension(0:300,0:300,0:80), intent(In) :: h
      real(4), dimension(0:1,0:302,0:302,0:81), intent(In) :: p
      real(4), intent(In) :: ro
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      integer :: i,j,k
      real(4) :: pz
      integer :: synthIdx3
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
                        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
                    end if
                end do
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
                        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
                    end if
                end do
            end do
        end do
    end do
    do k = 1, 79, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
                        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
                    end if
                end do
            end do
        end do
    end do
    return 
end subroutine velnw

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Subroutines for offload merged 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: scratch/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character(70) :: data10
      character(70) :: data11
      character(70) :: data12
      character(70) :: data13
      character(70) :: data14
      character(70) :: data15
      character(70) :: data20
      character(70) :: data21
      character(70) :: data22
      character(70) :: data23
      character(70) :: data24
      character(70) :: data25
      character(70) :: data26
      character(70) :: data27
      character(70) :: data30
      character(70) :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(kp) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax&
&, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, d&
&iu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dm&
&ask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys&
&, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main

AST not shown.
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw_feedbf_les_adam_press_merged
Filename: 
Source:
subroutine velnw_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,data21,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dma&
&sk1,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,n,nmax,p,rhs,ro,sm,u,uspd,usum,v,vspd,vsum,w,wsum)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = 300 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4) :: csx1
      character(70), intent(In) :: data21
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: pav
      real(4) :: area
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,0:301), intent(In) :: uspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:301,0:301), intent(In) :: vspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
                        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
                    end if
                end do
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
                        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
                    end if
                end do
            end do
        end do
    end do
    do k = 1, 79, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
                        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
                    end if
                end do
            end do
        end do
    end do
!}
! Original Subroutine Name: feedbf {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
                vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
                wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
                f1x = alpha*usum(i,j,k)*dt
                f1y = alpha*vsum(i,j,k)*dt
                f1z = alpha*wsum(i,j,k)*dt
                f2x = beta*u(i,j,k)*bmask1(i,j,k)
                f2y = beta*v(i,j,k)*cmask1(i,j,k)
                f2z = beta*w(i,j,k)*dmask1(i,j,k)
                fx(i,j,k) = f1x+f2x
                fy(i,j,k) = f1y+f2y
                fz(i,j,k) = f1z+f2z
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                f(i,j,k) = f(i,j,k)+fx(i,j,k)
                g(i,j,k) = g(i,j,k)+fy(i,j,k)
                h(i,j,k) = h(i,j,k)+fz(i,j,k)
            end do
        end do
    end do
!}
! Original Subroutine Name: les {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                dudxx1 = diu1(i,j,k)
                dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
                dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
                dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
                dvdyx1 = diu5(i,j,k)
                dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
                dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
                dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
                dwdzx1 = diu9(i,j,k)
                csx1 = 0.14
                sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1&
&+dwdxx1)**2)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsx2 = sm(i+1,j,k)
                evsx1 = sm(i,j,k)
                evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visux2 = (evsx2)*2.*diu1(i+1,j,k)
                visux1 = (evsx1)*2.*diu1(i,j,k)
                visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
                visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
                vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
                f(i,j,k) = (f(i,j,k)+vfu)
            end do
        end do
    end do
    do k = 2, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsy2 = sm(i,j+1,k)
                evsy1 = sm(i,j,k)
                evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*s&
&m(i+1,j+1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
                evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)&
&*sm(i,j+1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
                evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)&
&*sm(i+1,j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
                visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
                visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
                visvy2 = (evsy2)*2.*diu5(i,j+1,k)
                visvy1 = (evsy1)*2.*diu5(i,j,k)
                visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
                vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
                g(i,j,k) = (g(i,j,k)+vfv)
            end do
        end do
    end do
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                evsz2 = sm(i,j,k+1)
                evsz1 = sm(i,j,k)
                evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*s&
&m(i+1,j,k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
                evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)&
&*sm(i,j,k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
                evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*s&
&m(i,j+1,k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
                evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)&
&*sm(i,j,k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
                viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
                viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
                viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
                viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
                viswz2 = (evsz2)*2.*diu9(i,j,k+1)
                viswz1 = (evsz1)*2.*diu9(i,j,k)
                vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
                h(i,j,k) = (h(i,j,k)+vfw)
            end do
        end do
    end do
!}
! Original Subroutine Name: adam {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                fd = f(i,j,k)
                gd = g(i,j,k)
                hd = h(i,j,k)
                f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
                g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
                h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
                fold(i,j,k) = fd
                gold(i,j,k) = gd
                hold(i,j,k) = hd
            end do
        end do
    end do
!}
! Original Subroutine Name: press {
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
                rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
            end do
        end do
    end do
    rhsav = 0.0
    area = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
                area = area+dx1(i)*dy1(j)*dzn(k)
            end do
        end do
    end do
    rhsav = rhsav/area
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                rhs(i,j,k) = rhs(i,j,k)-rhsav
            end do
        end do
    end do
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
            do k = 1, 80, 1
                do j = 1, 300, 1
                    do i = 1, 300, 1
                        do synthIdx3 = 0, 1, 1
                            dz1 = dzs(k-1)
                            dz2 = dzs(k)
                            cn4s = 2./(dz1*(dz1+dz2))
                            cn4l = 2./(dz2*(dz1+dz2))
                            cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                            cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                            cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                            cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                            cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                            if (nrd==0) then
                                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3&
&s*p(synthIdx3,i,j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
                            else
                                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,&
&k)+cn3s*p(synthIdx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                                p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
                            end if
                        end do
                    end do
                end do
            end do
            do k = 0, 81, 1
                do j = 0, 301, 1
                    do synthIdx2 = 0, 302, 1
                        do synthIdx3 = 0, 1, 1
                            if (synthIdx2==0 .and. synthIdx3==0) then
                                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                            end if
                            if (synthIdx3==0 .and. synthIdx2==301) then
                                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                            end if
                        end do
                    end do
                end do
            end do
            do k = 0, 81, 1
                do synthIdx1 = 0, 302, 1
                    do i = 0, 301, 1
                        do synthIdx3 = 0, 1, 1
                            if (synthIdx1==0 .and. synthIdx3==0) then
                                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                            end if
                            if (synthIdx3==0 .and. synthIdx1==301) then
                                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                            end if
                        end do
                    end do
                end do
            end do
        end do
        do synthIdx0 = 0, 81, 1
            do j = 0, 301, 1
                do i = 0, 301, 1
                    do synthIdx3 = 0, 1, 1
                        if (synthIdx0==0 .and. synthIdx3==0) then
                            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
                        end if
                        if (synthIdx3==0 .and. synthIdx0==81) then
                            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
                        end if
                    end do
                end do
            end do
        end do
    end do
    pav = 0.0
    pco = 0.0
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
                        pco = pco+dx1(i)*dy1(j)*dzn(k)
                    end if
                end do
            end do
        end do
    end do
    pav = pav/pco
    do k = 1, 80, 1
        do j = 1, 300, 1
            do i = 1, 300, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx3==0) then
                        p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
                    end if
                end do
            end do
        end do
    end do
    do k = 0, 81, 1
        do j = 0, 301, 1
            do synthIdx2 = 0, 302, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx2==0 .and. synthIdx3==0) then
                        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                    end if
                    if (synthIdx3==0 .and. synthIdx2==301) then
                        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                    end if
                end do
            end do
        end do
    end do
    do k = 0, 81, 1
        do synthIdx1 = 0, 302, 1
            do i = 0, 301, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx1==0 .and. synthIdx3==0) then
                        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                    end if
                    if (synthIdx3==0 .and. synthIdx1==301) then
                        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                    end if
                end do
            end do
        end do
    end do
    do synthIdx0 = 0, 81, 1
        do j = 0, 301, 1
            do i = 0, 301, 1
                do synthIdx3 = 0, 1, 1
                    if (synthIdx0==0 .and. synthIdx3==0) then
                        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
                    end if
                    if (synthIdx3==0 .and. synthIdx0==81) then
                        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
                    end if
                end do
            end do
        end do
    end do
!}
end subroutine velnw_feedbf_les_adam_press_merged

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Stencil Constant Removal 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Map + Fold Detection 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: velnw_feedbf_les_adam_press_merged
Filename: 
Source:
subroutine velnw_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,data21,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dma&
&sk1,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,n,nmax,p,rhs,ro,sm,u,uspd,usum,v,vspd,vsum,w,wsum)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = 300 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4) :: csx1
      character(70), intent(In) :: data21
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: pav
      real(4) :: area
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,0:301), intent(In) :: uspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:301,0:301), intent(In) :: vspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
    if (synthIdx3==0) then
        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}
!}
!}
!}
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dys","v","dt"],[],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dys","v","dt"],[],["(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dys","v","dt"],[],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx3==0) then
        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}
!}
!}
!}
! OpenCLMap ( ["ro","dzs","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dzs","dt"],[],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dzs","dt"],[],["(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dzs","dt"],[],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx3==0) then
        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}
!}
!}
!}
!}
! Original Subroutine Name: feedbf {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","v","w"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","v","w"],["fx","fy","fz"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","v","w"],["fx","fy","fz"],["(i,1,300,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
!}
!}
!}
! OpenCLMap ( ["fx","fy","fz"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],[],["(i,1,300,1)"],[]) {
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
!}
!}
!}
! Original Subroutine Name: les {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(i,1,300,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}
!}
!}
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(i,1,300,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}
!}
!}
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(i,1,300,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k)&
&)/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}
!}
!}
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(i,1,300,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1)&
&)/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1)&
&)/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1)&
&)/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}
!}
!}
!}
! Original Subroutine Name: adam {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(i,1,300,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
!}
!}
!}
! Original Subroutine Name: press {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(i,1,300,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}
!}
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(i,1,300,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
!}
!}
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLMap ( ["dzs","nrd"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs","nrd"],["p"],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs","nrd"],["p"],["(i,1,300,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs","nrd"],["p"],["(synthIdx3,0,1,1)"],["nrd","l"]) {
            dz1 = dzs(k-1)
            dz2 = dzs(k)
            cn4s = 2./(dz1*(dz1+dz2))
            cn4l = 2./(dz2*(dz1+dz2))
            cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
            cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
            cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
            cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
            cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
            if (nrd==0) then
                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3s*p(synthIdx3,i,&
&j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
            else
                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,k)+cn3s*p(synthI&
&dx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
            end if
!}
!}
!}
!}
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["synthIdx2"],["p"],["(synthIdx3,0,1,1)"],["nrd","l"]) {
            if (synthIdx2==0 .and. synthIdx3==0) then
                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
            end if
            if (synthIdx3==0 .and. synthIdx2==301) then
                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
            end if
!}
!}
!}
!}
! OpenCLMap ( [],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["synthIdx1"],["p"],["(i,0,301,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["synthIdx1"],["p"],["(synthIdx3,0,1,1)"],["nrd","l"]) {
            if (synthIdx1==0 .and. synthIdx3==0) then
                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
            end if
            if (synthIdx3==0 .and. synthIdx1==301) then
                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
            end if
!}
!}
!}
!}
        end do
! OpenCLMap ( [],["p"],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["l"]) {
! OpenCLMap ( ["synthIdx0"],["p"],["(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["l"]) {
! OpenCLMap ( ["synthIdx0"],["p"],["(i,0,301,1)","(synthIdx3,0,1,1)"],["l"]) {
! OpenCLMap ( ["synthIdx0"],["p"],["(synthIdx3,0,1,1)"],["l"]) {
        if (synthIdx0==0 .and. synthIdx3==0) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
        end if
        if (synthIdx3==0 .and. synthIdx0==81) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
        end if
!}
!}
!}
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(i,1,300,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if (synthIdx3==0) then
        pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
!}
!}
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx3==0) then
        p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
    end if
!}
!}
!}
!}
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( [],["p"],["(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( [],["p"],["(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx2"],["p"],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx2==0 .and. synthIdx3==0) then
        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
    end if
    if (synthIdx3==0 .and. synthIdx2==301) then
        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
    end if
!}
!}
!}
!}
! OpenCLMap ( [],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( [],["p"],["(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx1"],["p"],["(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx1"],["p"],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx1==0 .and. synthIdx3==0) then
        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
    end if
    if (synthIdx3==0 .and. synthIdx1==301) then
        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
    end if
!}
!}
!}
!}
! OpenCLMap ( [],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx0==0 .and. synthIdx3==0) then
        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
    end if
    if (synthIdx3==0 .and. synthIdx0==81) then
        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
    end if
!}
!}
!}
!}
!}
end subroutine velnw_feedbf_les_adam_press_merged

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Stencil Detection 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: scratch/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character(70) :: data10
      character(70) :: data11
      character(70) :: data12
      character(70) :: data13
      character(70) :: data14
      character(70) :: data15
      character(70) :: data20
      character(70) :: data21
      character(70) :: data22
      character(70) :: data23
      character(70) :: data24
      character(70) :: data25
      character(70) :: data26
      character(70) :: data27
      character(70) :: data30
      character(70) :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(kp) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax&
&, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, d&
&iu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dm&
&ask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys&
&, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main

AST not shown.
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw_feedbf_les_adam_press_merged
Filename: 
Source:
subroutine velnw_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,data21,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dma&
&sk1,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,n,nmax,p,rhs,ro,sm,u,uspd,usum,v,vspd,vsum,w,wsum)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = 300 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4) :: csx1
      character(70), intent(In) :: data21
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: pav
      real(4) :: area
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,0:301), intent(In) :: uspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:301,0:301), intent(In) :: vspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
    if (synthIdx3==0) then
        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dys","v","dt"],[],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dys","v","dt"],[],["(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dys","v","dt"],[],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx3==0) then
        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dzs","dt"],[],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dzs","dt"],[],["(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["ro","dzs","dt"],[],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx3==0) then
        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}
!}
!}
!}    
!}
!}
! Original Subroutine Name: feedbf {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","v","w"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","v","w"],["fx","fy","fz"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","u","v","w"],["fx","fy","fz"],["(i,1,300,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
!}
!}
!}
! OpenCLMap ( ["fx","fy","fz"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["fx","fy","fz"],[],["(i,1,300,1)"],[]) {
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
!}
!}
!}
! Original Subroutine Name: les {
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(i,1,300,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(i,1,300,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(i,1,300,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k)&
&)/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(i,1,300,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1)&
&)/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1)&
&)/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1)&
&)/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}
!}
!}    
!}
!}
! Original Subroutine Name: adam {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(i,1,300,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
!}
!}
!}
! Original Subroutine Name: press {
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(i,1,300,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}
!}
!}    
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
!}
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(j,1,300,1)","(i,1,300,1)"],[]) {
! OpenCLMap ( ["rhsav"],[],["(i,1,300,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
!}
!}
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["dzs","nrd"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs","nrd"],["p"],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs","nrd"],["p"],["(i,1,300,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["dzs","nrd"],["p"],["(synthIdx3,0,1,1)"],["nrd","l"]) {
            dz1 = dzs(k-1)
            dz2 = dzs(k)
            cn4s = 2./(dz1*(dz1+dz2))
            cn4l = 2./(dz2*(dz1+dz2))
            cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
            cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
            cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
            cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
            cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
            if (nrd==0) then
                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3s*p(synthIdx3,i,&
&j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
            else
                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,k)+cn3s*p(synthI&
&dx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
            end if
!}
!}
!}
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["synthIdx2"],["p"],["(synthIdx3,0,1,1)"],["nrd","l"]) {
            if (synthIdx2==0 .and. synthIdx3==0) then
                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
            end if
            if (synthIdx3==0 .and. synthIdx2==301) then
                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
            end if
!}
!}
!}
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!            ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( [],["p"],["(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["synthIdx1"],["p"],["(i,0,301,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
! OpenCLMap ( ["synthIdx1"],["p"],["(synthIdx3,0,1,1)"],["nrd","l"]) {
            if (synthIdx1==0 .and. synthIdx3==0) then
                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
            end if
            if (synthIdx3==0 .and. synthIdx1==301) then
                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
            end if
!}
!}
!}
!}            
!}
        end do
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!        ){
! OpenCLMap ( [],["p"],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["l"]) {
! OpenCLMap ( ["synthIdx0"],["p"],["(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],["l"]) {
! OpenCLMap ( ["synthIdx0"],["p"],["(i,0,301,1)","(synthIdx3,0,1,1)"],["l"]) {
! OpenCLMap ( ["synthIdx0"],["p"],["(synthIdx3,0,1,1)"],["l"]) {
        if (synthIdx0==0 .and. synthIdx3==0) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
        end if
        if (synthIdx3==0 .and. synthIdx0==81) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
        end if
!}
!}
!}
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(i,1,300,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if (synthIdx3==0) then
        pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
!}
!}
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["pav"],["p"],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx3==0) then
        p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
    end if
!}
!}
!}
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!    ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( [],["p"],["(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( [],["p"],["(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx2"],["p"],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx2==0 .and. synthIdx3==0) then
        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
    end if
    if (synthIdx3==0 .and. synthIdx2==301) then
        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
    end if
!}
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!    ){
! OpenCLMap ( [],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( [],["p"],["(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx1"],["p"],["(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx1"],["p"],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx1==0 .and. synthIdx3==0) then
        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
    end if
    if (synthIdx3==0 .and. synthIdx1==301) then
        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
    end if
!}
!}
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!    ){
! OpenCLMap ( [],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx3,0,1,1)"],[]) {
    if (synthIdx0==0 .and. synthIdx3==0) then
        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
    end if
    if (synthIdx3==0 .and. synthIdx0==81) then
        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
    end if
!}
!}
!}
!}    
!}
!}
end subroutine velnw_feedbf_les_adam_press_merged

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Combined 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: scratch/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character(70) :: data10
      character(70) :: data11
      character(70) :: data12
      character(70) :: data13
      character(70) :: data14
      character(70) :: data15
      character(70) :: data20
      character(70) :: data21
      character(70) :: data22
      character(70) :: data23
      character(70) :: data24
      character(70) :: data25
      character(70) :: data26
      character(70) :: data27
      character(70) :: data30
      character(70) :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(kp) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax&
&, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, d&
&iu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dm&
&ask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys&
&, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main

AST not shown.
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw_feedbf_les_adam_press_merged
Filename: 
Source:
subroutine velnw_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,data21,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dma&
&sk1,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,n,nmax,p,rhs,ro,sm,u,uspd,usum,v,vspd,vsum,w,wsum)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = 300 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4) :: csx1
      character(70), intent(In) :: data21
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: pav
      real(4) :: area
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,0:301), intent(In) :: uspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:301,0:301), intent(In) :: vspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
    if (synthIdx3==0) then
        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
        u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
    end if
!}
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if (synthIdx3==0) then
        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
        v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if (synthIdx3==0) then
        pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
        w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
    end if
!}    
!}
!}
! Original Subroutine Name: feedbf {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","v","w","u","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
    vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
    wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
    f1x = alpha*usum(i,j,k)*dt
    f1y = alpha*vsum(i,j,k)*dt
    f1z = alpha*wsum(i,j,k)*dt
    f2x = beta*u(i,j,k)*bmask1(i,j,k)
    f2y = beta*v(i,j,k)*cmask1(i,j,k)
    f2z = beta*w(i,j,k)*dmask1(i,j,k)
    fx(i,j,k) = f1x+f2x
    fy(i,j,k) = f1y+f2y
    fz(i,j,k) = f1z+f2z
    f(i,j,k) = f(i,j,k)+fx(i,j,k)
    g(i,j,k) = g(i,j,k)+fy(i,j,k)
    h(i,j,k) = h(i,j,k)+fz(i,j,k)
!}
!}
! Original Subroutine Name: les {
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    dudxx1 = diu1(i,j,k)
    dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
    dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
    dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
    dvdyx1 = diu5(i,j,k)
    dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
    dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
    dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
    dwdzx1 = diu9(i,j,k)
    csx1 = 0.14
    sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)**2)
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsx2 = sm(i+1,j,k)
    evsx1 = sm(i,j,k)
    evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visux2 = (evsx2)*2.*diu1(i+1,j,k)
    visux1 = (evsx1)*2.*diu1(i,j,k)
    visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
    visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
    vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
    f(i,j,k) = (f(i,j,k)+vfu)
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsy2 = sm(i,j+1,k)
    evsy1 = sm(i,j,k)
    evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+1,k)&
&)/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
    evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+1,k)&
&)/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
    evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
    visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
    visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
    visvy2 = (evsy2)*2.*diu5(i,j+1,k)
    visvy1 = (evsy1)*2.*diu5(i,j,k)
    visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
    vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
    g(i,j,k) = (g(i,j,k)+vfv)
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    evsz2 = sm(i,j,k+1)
    evsz1 = sm(i,j,k)
    evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,k+1)&
&)/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
    evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,k+1)&
&)/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
    evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,k+1)&
&)/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
    evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,k+1)&
&)/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
    viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
    viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
    viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
    viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
    viswz2 = (evsz2)*2.*diu9(i,j,k+1)
    viswz1 = (evsz1)*2.*diu9(i,j,k)
    vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
    h(i,j,k) = (h(i,j,k)+vfw)
!}    
!}
!}
! Original Subroutine Name: adam {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    fd = f(i,j,k)
    gd = g(i,j,k)
    hd = h(i,j,k)
    f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
    g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
    h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
    fold(i,j,k) = fd
    gold(i,j,k) = gd
    hold(i,j,k) = hd
!}
!}
! Original Subroutine Name: press {
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
    rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
!}    
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
    area = area+dx1(i)*dy1(j)*dzn(k)
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    rhs(i,j,k) = rhs(i,j,k)-rhsav
!}
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["dzs","nrd"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            dz1 = dzs(k-1)
            dz2 = dzs(k)
            cn4s = 2./(dz1*(dz1+dz2))
            cn4l = 2./(dz2*(dz1+dz2))
            cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
            cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
            cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
            cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
            cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
            if (nrd==0) then
                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3s*p(synthIdx3,i,&
&j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
            else
                reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,k)+cn3s*p(synthI&
&dx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if (synthIdx2==0 .and. synthIdx3==0) then
                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
            end if
            if (synthIdx3==0 .and. synthIdx2==301) then
                p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!            ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if (synthIdx1==0 .and. synthIdx3==0) then
                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
            end if
            if (synthIdx3==0 .and. synthIdx1==301) then
                p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
            end if
!}            
!}
        end do
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!        ){
! OpenCLMap ( ["synthIdx0"],["p"],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["l"]) {
        if (synthIdx0==0 .and. synthIdx3==0) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
        end if
        if (synthIdx3==0 .and. synthIdx0==81) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
        end if
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if (synthIdx3==0) then
        pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
        pco = pco+dx1(i)*dy1(j)*dzn(k)
    end if
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if (synthIdx3==0) then
        p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
    end if
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!    ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],[]) {
    if (synthIdx2==0 .and. synthIdx3==0) then
        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
    end if
    if (synthIdx3==0 .and. synthIdx2==301) then
        p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if (synthIdx1==0 .and. synthIdx3==0) then
        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
    end if
    if (synthIdx3==0 .and. synthIdx1==301) then
        p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if (synthIdx0==0 .and. synthIdx3==0) then
        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
    end if
    if (synthIdx3==0 .and. synthIdx0==81) then
        p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
    end if
!}    
!}
!}
end subroutine velnw_feedbf_les_adam_press_merged

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Loop Guards 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================================================================
Subroutine name: main
Filename: scratch/main.f95
Source:
program main
      integer, parameter :: kp = 80 
      integer, parameter :: ip = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: ipmax = ip 
      integer, parameter :: jpmax = jp 
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      real, parameter :: cs0 = 0.14 
      integer, parameter :: i_anime = 1 
      integer, parameter :: avetime = 2 
      integer, parameter :: km_sl = 80 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      real, parameter :: dt_orig = 0.05 
      real(4) :: alpha
      integer :: ical
      integer :: im
      integer :: jm
      integer :: km
      integer :: n
      integer :: n0
      integer :: n1
      integer :: nif
      integer :: nmax
      real(4) :: beta
      character(70) :: data10
      character(70) :: data11
      character(70) :: data12
      character(70) :: data13
      character(70) :: data14
      character(70) :: data15
      character(70) :: data20
      character(70) :: data21
      character(70) :: data22
      character(70) :: data23
      character(70) :: data24
      character(70) :: data25
      character(70) :: data26
      character(70) :: data27
      character(70) :: data30
      character(70) :: data31
      real(4) :: dt
      real(4) :: ro
      real(4) :: time
      real(4) :: vn
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: amask1
      real(4), dimension(-1:ip+1,0:jp+1,0:kp+1) :: bmask1
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: cmask1
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: dmask1
      real(4), dimension(ip,jp,kp) :: cn1
      real(4), dimension(ip) :: cn2l
      real(4), dimension(ip) :: cn2s
      real(4), dimension(jp) :: cn3l
      real(4), dimension(jp) :: cn3s
      real(4), dimension(kp) :: cn4l
      real(4), dimension(kp) :: cn4s
      real(4), dimension(kp) :: delx1
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: diu5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: diu9
      real(4), dimension(-1:ip+1) :: dx1
      real(4), dimension(0:ip) :: dxl
      real(4), dimension(0:ip) :: dxs
      real(4), dimension(0:jp+1) :: dy1
      real(4), dimension(0:jp) :: dyl
      real(4), dimension(0:jp) :: dys
      real(4), dimension(-1:kp+2) :: dzn
      real(4), dimension(-1:kp+2) :: dzs
      real(4), dimension(0:ip,0:jp,0:kp) :: f
      real(4), dimension(ip,jp,kp) :: fold
      real(4), dimension(0:ip,0:jp,0:kp) :: fx
      real(4), dimension(0:ip,0:jp,0:kp) :: fy
      real(4), dimension(0:ip,0:jp,0:kp) :: fz
      real(4), dimension(0:ip,0:jp,0:kp) :: g
      real(4), dimension(ip,jp,kp) :: gold
      real(4), dimension(0:ip,0:jp,0:kp) :: h
      real(4), dimension(ip,jp,kp) :: hold
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou1
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou2
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou3
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou4
      real(4), dimension(-1:ip+2,0:jp+2,0:kp+2) :: nou5
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou6
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou7
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou8
      real(4), dimension(0:ip+2,0:jp+2,0:kp+2) :: nou9
      real(4), dimension(0:1,0:ip+2,0:jp+2,0:kp+1) :: p
      real(4), dimension(0:ip+1,0:jp+1,0:kp+1) :: rhs
      real(4), dimension(-1:ip+1,-1:jp+1,0:kp+1) :: sm
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: u
      real(4), dimension(0:ip,0:jp,0:kp) :: usum
      real(4), dimension(ip,jp,kp) :: uwfx
      real(4), dimension(ip,kp) :: uwfxs
      real(4), dimension(0:ip+1,-1:jp+1,0:kp+1) :: v
      real(4), dimension(0:ip,0:jp,0:kp) :: vsum
      real(4), dimension(0:ip+1,-1:jp+1,-1:kp+1) :: w
      real(4), dimension(0:ip,0:jp,0:kp) :: wsum
      real(4), dimension(0:kp+2) :: z2
      real(4), dimension(-1:ipmax+1,-1:jpmax+1) :: zbm
      integer :: clock_rate
      integer(4), dimension(0:9) :: timestamp
      integer(4) :: i
    call set(data10, data11, data20, data21, data22, data23, data24, data25, data26, data27, data30, data31, ical, nif, n0, n1, nmax&
&, dt, ro, vn, alpha, beta, data12, data13, data14, data15)
    call grid(dx1, dxl, dy1, dyl, z2, dzn, dzs, dxs, dys)
    call init(u, v, w, p, cn2s, dxs, cn2l, cn3s, dys, cn3l, dzs, cn4s, cn4l, cn1, amask1, bmask1, cmask1, dmask1, zbm, z2, dzn)
    call ifdata(fold, gold, hold, time, n, u, v, w, p, usum, vsum, wsum, delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, d&
&iu7, diu8, diu9, sm, f, g, h, z2, dt, dxs, vn, dzs, nou1, nou2, nou3, nou4, nou5, nou6, nou7, nou8, nou9, amask1, bmask1, cmask1, dm&
&ask1, alpha, beta, fx, fy, fz, zbm, ical, nif)
    do n = n0, nmax, 1
        time = float(n-n0)*dt
        call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
        call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
        call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys&
&, n)
        call adam(n, nmax, data21, fold, gold, hold, f, g, h)
        call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
    end do

end program main

AST not shown.
Argument translations:
	adam->
	    call adam(n, nmax, data21, fold, gold, hold, f, g, h)
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	ArgTrans {parameter = ArgName (fromList []) "data21", argument = VarName (fromList []) "data21"}
	ArgTrans {parameter = ArgName (fromList []) "fold", argument = VarName (fromList []) "fold"}
	ArgTrans {parameter = ArgName (fromList []) "gold", argument = VarName (fromList []) "gold"}
	ArgTrans {parameter = ArgName (fromList []) "hold", argument = VarName (fromList []) "hold"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	feedbf->
	    call feedbf(usum, u, bmask1, vsum, v, cmask1, wsum, w, dmask1, alpha, dt, beta, fx, fy, fz, f, g, h, n)
	ArgTrans {parameter = ArgName (fromList []) "usum", argument = VarName (fromList []) "usum"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "bmask1", argument = VarName (fromList []) "bmask1"}
	ArgTrans {parameter = ArgName (fromList []) "vsum", argument = VarName (fromList []) "vsum"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "cmask1", argument = VarName (fromList []) "cmask1"}
	ArgTrans {parameter = ArgName (fromList []) "wsum", argument = VarName (fromList []) "wsum"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "dmask1", argument = VarName (fromList []) "dmask1"}
	ArgTrans {parameter = ArgName (fromList []) "alpha", argument = VarName (fromList []) "alpha"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "beta", argument = VarName (fromList []) "beta"}
	ArgTrans {parameter = ArgName (fromList []) "fx", argument = VarName (fromList []) "fx"}
	ArgTrans {parameter = ArgName (fromList []) "fy", argument = VarName (fromList []) "fy"}
	ArgTrans {parameter = ArgName (fromList []) "fz", argument = VarName (fromList []) "fz"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	les->
	    call les(delx1, dx1, dy1, dzn, diu1, diu2, diu3, diu4, diu5, diu6, diu7, diu8, diu9, sm, f, g, h, u, v, uspd, vspd, dxs, dys, n)
	ArgTrans {parameter = ArgName (fromList []) "delx1", argument = VarName (fromList []) "delx1"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "diu1", argument = VarName (fromList []) "diu1"}
	ArgTrans {parameter = ArgName (fromList []) "diu2", argument = VarName (fromList []) "diu2"}
	ArgTrans {parameter = ArgName (fromList []) "diu3", argument = VarName (fromList []) "diu3"}
	ArgTrans {parameter = ArgName (fromList []) "diu4", argument = VarName (fromList []) "diu4"}
	ArgTrans {parameter = ArgName (fromList []) "diu5", argument = VarName (fromList []) "diu5"}
	ArgTrans {parameter = ArgName (fromList []) "diu6", argument = VarName (fromList []) "diu6"}
	ArgTrans {parameter = ArgName (fromList []) "diu7", argument = VarName (fromList []) "diu7"}
	ArgTrans {parameter = ArgName (fromList []) "diu8", argument = VarName (fromList []) "diu8"}
	ArgTrans {parameter = ArgName (fromList []) "diu9", argument = VarName (fromList []) "diu9"}
	ArgTrans {parameter = ArgName (fromList []) "sm", argument = VarName (fromList []) "sm"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "uspd", argument = VarName (fromList []) "uspd"}
	ArgTrans {parameter = ArgName (fromList []) "vspd", argument = VarName (fromList []) "vspd"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	press->
	    call press(u, v, w, p, rhs, f, g, h, dx1, dy1, dzn, dxs, dys, dzs, dt, n, nmax)
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "rhs", argument = VarName (fromList []) "rhs"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}
	ArgTrans {parameter = ArgName (fromList []) "dx1", argument = VarName (fromList []) "dx1"}
	ArgTrans {parameter = ArgName (fromList []) "dy1", argument = VarName (fromList []) "dy1"}
	ArgTrans {parameter = ArgName (fromList []) "dzn", argument = VarName (fromList []) "dzn"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "n", argument = VarName (fromList []) "n"}
	ArgTrans {parameter = ArgName (fromList []) "nmax", argument = VarName (fromList []) "nmax"}
	velnw->
	    call velnw(p, ro, dxs, u, dt, f, dys, v, g, dzs, w, h)
	ArgTrans {parameter = ArgName (fromList []) "p", argument = VarName (fromList []) "p"}
	ArgTrans {parameter = ArgName (fromList []) "ro", argument = VarName (fromList []) "ro"}
	ArgTrans {parameter = ArgName (fromList []) "dxs", argument = VarName (fromList []) "dxs"}
	ArgTrans {parameter = ArgName (fromList []) "u", argument = VarName (fromList []) "u"}
	ArgTrans {parameter = ArgName (fromList []) "dt", argument = VarName (fromList []) "dt"}
	ArgTrans {parameter = ArgName (fromList []) "f", argument = VarName (fromList []) "f"}
	ArgTrans {parameter = ArgName (fromList []) "dys", argument = VarName (fromList []) "dys"}
	ArgTrans {parameter = ArgName (fromList []) "v", argument = VarName (fromList []) "v"}
	ArgTrans {parameter = ArgName (fromList []) "g", argument = VarName (fromList []) "g"}
	ArgTrans {parameter = ArgName (fromList []) "dzs", argument = VarName (fromList []) "dzs"}
	ArgTrans {parameter = ArgName (fromList []) "w", argument = VarName (fromList []) "w"}
	ArgTrans {parameter = ArgName (fromList []) "h", argument = VarName (fromList []) "h"}

This subroutine will not be offloaded to the FPGA
================================================================================

================================================================================
Subroutine name: velnw_feedbf_les_adam_press_merged
Filename: 
Source:
subroutine velnw_feedbf_les_adam_press_merged(alpha,beta,bmask1,cmask1,data21,delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,dma&
&sk1,dt,dx1,dxs,dy1,dys,dzn,dzs,f,fold,fx,fy,fz,g,gold,h,hold,n,nmax,p,rhs,ro,sm,u,uspd,usum,v,vspd,vsum,w,wsum)
      integer, parameter :: avetime = 2 
      real, parameter :: cs0 = 0.14 
      real, parameter :: dt_orig = 0.05 
      real, parameter :: dxgrid = 4. 
      real, parameter :: dygrid = 4. 
      integer, parameter :: i_anime = 1 
      integer, parameter :: i_aveflow = 0 
      integer, parameter :: i_ifdata_out = 0 
      integer, parameter :: ip = 300 
      integer, parameter :: ipmax = 300 
      integer, parameter :: jp = 300 
      integer, parameter :: jpmax = 300 
      integer, parameter :: km_sl = 80 
      integer, parameter :: kp = 80 
      integer, parameter :: nmaxp = 50 
      real, parameter :: omega = 1. 
      real, parameter :: pjuge = 0.0001 
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4) :: csx1
      character(70), intent(In) :: data21
      character(300) :: datafile = '../GIS/Kyoto_1km2_4m_with_buffer.txt' 
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
      integer, intent(In) :: n
      integer, intent(In) :: nmax
      integer :: nn
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: pav
      real(4) :: area
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      real(4), intent(In) :: ro
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,0:301), intent(In) :: uspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4) :: vfu
      real(4) :: vfv
      real(4) :: vfw
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
      real(4), dimension(0:301,0:301), intent(In) :: vspd
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! Original Subroutine Name: velnw {
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
        if ((synthIdx3>=0) .and. (synthIdx3<=1)) then
            if (synthIdx3==0) then
                pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end if
        end if
!}
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
            v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
        end if
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
            w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
        end if
    end if
!}    
!}
!}
! Original Subroutine Name: feedbf {
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","v","w","u","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
!}
! Original Subroutine Name: les {
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
!}
! Original Subroutine Name: adam {
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
!}
! Original Subroutine Name: press {
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["dzs","nrd"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=&
&1)) then
                dz1 = dzs(k-1)
                dz2 = dzs(k)
                cn4s = 2./(dz1*(dz1+dz2))
                cn4l = 2./(dz2*(dz1+dz2))
                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                if (nrd==0) then
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3s*p(synthIdx&
&3,i,j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
                else
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,k)+cn3s*p(sy&
&nthIdx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                    p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx2==0 .and. synthIdx3==0) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                end if
                if (synthIdx3==0 .and. synthIdx2==301) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!            ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx1==0 .and. synthIdx3==0) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                end if
                if (synthIdx3==0 .and. synthIdx1==301) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                end if
            end if
!}            
!}
        end do
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!        ){
! OpenCLMap ( ["synthIdx0"],["p"],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["l"]) {
        if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. &
&(synthIdx3<=1)) then
            if (synthIdx0==0 .and. synthIdx3==0) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
            end if
            if (synthIdx3==0 .and. synthIdx0==81) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
            end if
        end if
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
            pco = pco+dx1(i)*dy1(j)*dzn(k)
        end if
    end if
!}
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
        end if
    end if
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!    ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],[]) {
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx2==0 .and. synthIdx3==0) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
        end if
        if (synthIdx3==0 .and. synthIdx2==301) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
        end if
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx1==0 .and. synthIdx3==0) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
        end if
        if (synthIdx3==0 .and. synthIdx1==301) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
        end if
    end if
!}    
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx0==0 .and. synthIdx3==0) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
        end if
        if (synthIdx3==0 .and. synthIdx0==81) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
        end if
    end if
!}    
!}
!}
end subroutine velnw_feedbf_les_adam_press_merged

AST not shown.
Argument translations:

This subroutine will be offloaded to the FPGA
================================================================================


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Kernels 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


--------------------
velnw
--------------------
subroutine velnw_0(dt,dxs,f,p,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
        if ((synthIdx3>=0) .and. (synthIdx3<=1)) then
            if (synthIdx3==0) then
                pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end if
        end if
!}
    end if
!}    
!}
end subroutine velnw_0

======================


--------------------
velnw
--------------------
subroutine velnw_1(dt,dys,g,p,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
            v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_1

======================


--------------------
velnw
--------------------
subroutine velnw_2(dt,dzs,h,p,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
            w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_2

======================


--------------------
feedbf
--------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","v","w","u","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf

======================


--------------------
les
--------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0

======================


--------------------
les
--------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1

======================


--------------------
les
--------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2

======================


--------------------
les
--------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3

======================


--------------------
adam
--------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam

======================


--------------------
press
--------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0

======================


--------------------
press
--------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1

======================


--------------------
press
--------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2

======================


--------------------
press
--------------------
subroutine press_3(dx1,dxs,dy1,dys,dzn,dzs,p,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: pav
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["dzs","nrd"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=&
&1)) then
                dz1 = dzs(k-1)
                dz2 = dzs(k)
                cn4s = 2./(dz1*(dz1+dz2))
                cn4l = 2./(dz2*(dz1+dz2))
                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                if (nrd==0) then
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3s*p(synthIdx&
&3,i,j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
                else
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,k)+cn3s*p(sy&
&nthIdx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                    p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx2==0 .and. synthIdx3==0) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                end if
                if (synthIdx3==0 .and. synthIdx2==301) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!            ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx1==0 .and. synthIdx3==0) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                end if
                if (synthIdx3==0 .and. synthIdx1==301) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                end if
            end if
!}            
!}
        end do
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!        ){
! OpenCLMap ( ["synthIdx0"],["p"],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["l"]) {
        if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. &
&(synthIdx3<=1)) then
            if (synthIdx0==0 .and. synthIdx3==0) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
            end if
            if (synthIdx3==0 .and. synthIdx0==81) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
            end if
        end if
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
            pco = pco+dx1(i)*dy1(j)*dzn(k)
        end if
    end if
!}
end subroutine press_3

======================


--------------------
press
--------------------
subroutine press_4(p)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pav
      real(4) :: pco
      integer :: synthIdx3
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
        end if
    end if
!}
end subroutine press_4

======================


--------------------
press
--------------------
subroutine press_5(p)
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx2
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!    ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],[]) {
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx2==0 .and. synthIdx3==0) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
        end if
        if (synthIdx3==0 .and. synthIdx2==301) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_5

======================


--------------------
press
--------------------
subroutine press_6(p)
      integer :: i
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx1
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx1==0 .and. synthIdx3==0) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
        end if
        if (synthIdx3==0 .and. synthIdx1==301) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_6

======================


--------------------
press
--------------------
subroutine press_7(p)
      integer :: i
      integer :: j
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx0
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx0==0 .and. synthIdx3==0) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
        end if
        if (synthIdx3==0 .and. synthIdx0==81) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_7

======================

no. of kernels: 17
 ! ==============================================
 ! Name: velnw_0 Order: 0
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"u"
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,p,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
        if ((synthIdx3>=0) .and. (synthIdx3<=1)) then
            if (synthIdx3==0) then
                pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end if
        end if
!}
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================

 ! ==============================================
 ! Name: velnw_1 Order: 1
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,p,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
            v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================

 ! ==============================================
 ! Name: velnw_2 Order: 2
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,p,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
            w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_2
 ! ==============================================

 ! ==============================================
 ! Name: feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","v","w","u","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf
 ! ==============================================

 ! ==============================================
 ! Name: les_0 Order: 4
 ! Input streams:
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 ! Output streams:
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0
 ! ==============================================

 ! ==============================================
 ! Name: les_1 Order: 5
 ! Input streams:
 !	StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1
 ! ==============================================

 ! ==============================================
 ! Name: les_2 Order: 6
 ! Input streams:
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
 !	StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2
 ! ==============================================

 ! ==============================================
 ! Name: les_3 Order: 7
 ! Input streams:
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
 !	StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3
 ! ==============================================

 ! ==============================================
 ! Name: adam Order: 8
 ! Input streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam
 ! ==============================================

 ! ==============================================
 ! Name: press_0 Order: 9
 ! Input streams:
 !	StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
 !	StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
 !	StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
 !	StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
 !	StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
 !	StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0
 ! ==============================================

 ! ==============================================
 ! Name: press_1 Order: 10
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1
 ! ==============================================

 ! ==============================================
 ! Name: press_2 Order: 11
 ! Input streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2
 ! ==============================================

 ! ==============================================
 ! Name: press_3 Order: 12
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_3(dx1,dxs,dy1,dys,dzn,dzs,p,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: pav
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["dzs","nrd"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=&
&1)) then
                dz1 = dzs(k-1)
                dz2 = dzs(k)
                cn4s = 2./(dz1*(dz1+dz2))
                cn4l = 2./(dz2*(dz1+dz2))
                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                if (nrd==0) then
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3s*p(synthIdx&
&3,i,j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
                else
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,k)+cn3s*p(sy&
&nthIdx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                    p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx2==0 .and. synthIdx3==0) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                end if
                if (synthIdx3==0 .and. synthIdx2==301) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!            ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx1==0 .and. synthIdx3==0) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                end if
                if (synthIdx3==0 .and. synthIdx1==301) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                end if
            end if
!}            
!}
        end do
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!        ){
! OpenCLMap ( ["synthIdx0"],["p"],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["l"]) {
        if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. &
&(synthIdx3<=1)) then
            if (synthIdx0==0 .and. synthIdx3==0) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
            end if
            if (synthIdx3==0 .and. synthIdx0==81) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
            end if
        end if
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
            pco = pco+dx1(i)*dy1(j)*dzn(k)
        end if
    end if
!}
end subroutine press_3
 ! ==============================================

 ! ==============================================
 ! Name: press_4 Order: 13
 ! Input streams:
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4(p)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pav
      real(4) :: pco
      integer :: synthIdx3
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
        end if
    end if
!}
end subroutine press_4
 ! ==============================================

 ! ==============================================
 ! Name: press_5 Order: 14
 ! Input streams:
 !	StencilStream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
 ! Output streams:
 !	Stream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_5(p)
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx2
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!    ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],[]) {
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx2==0 .and. synthIdx3==0) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
        end if
        if (synthIdx3==0 .and. synthIdx2==301) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_5
 ! ==============================================

 ! ==============================================
 ! Name: press_6 Order: 15
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
 ! Output streams:
 !	Stream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_6(p)
      integer :: i
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx1
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx1==0 .and. synthIdx3==0) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
        end if
        if (synthIdx3==0 .and. synthIdx1==301) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_6
 ! ==============================================

 ! ==============================================
 ! Name: press_7 Order: 16
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_7(p)
      integer :: i
      integer :: j
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx0
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx0==0 .and. synthIdx3==0) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
        end if
        if (synthIdx3==0 .and. synthIdx0==81) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_7
 ! ==============================================


p_synthIdx3_i_j_synthIdx0 is largest stream size = 15056676
BEFORE
velnw_1 requires:
StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
velnw_1 requires:
Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
velnw_1 requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
velnw_1 requires:
Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
velnw_2 requires:
StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
velnw_2 requires:
Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
velnw_2 requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
velnw_2 requires:
Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
feedbf requires:
Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
feedbf requires:
Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
feedbf requires:
Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
feedbf requires:
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
feedbf requires:
Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
feedbf requires:
Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
feedbf requires:
Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
feedbf requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
feedbf requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
feedbf requires:
Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
feedbf requires:
Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
feedbf requires:
Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
feedbf requires:
Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
feedbf requires:
Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
feedbf requires:
Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
les_0 requires:
StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
les_0 requires:
StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
les_0 requires:
StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
les_0 requires:
StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
les_0 requires:
StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
les_0 requires:
StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
les_0 requires:
Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
les_0 requires:
Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
les_0 requires:
Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
les_0 requires:
Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
les_1 requires:
StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
les_1 requires:
StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
les_1 requires:
StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
les_1 requires:
StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
les_1 requires:
StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
les_1 requires:
StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
les_1 requires:
StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
les_1 requires:
StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
les_1 requires:
StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
les_1 requires:
Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
les_1 requires:
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
les_2 requires:
StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
les_2 requires:
StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
les_2 requires:
StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
les_2 requires:
StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
les_2 requires:
StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
les_2 requires:
StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
les_2 requires:
StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
les_2 requires:
StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
les_2 requires:
StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
les_2 requires:
Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
les_2 requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
les_3 requires:
StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
les_3 requires:
StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
les_3 requires:
StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
les_3 requires:
StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
les_3 requires:
StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
les_3 requires:
StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
les_3 requires:
StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
les_3 requires:
StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
les_3 requires:
StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
les_3 requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
adam requires:
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
adam requires:
Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
adam requires:
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
adam requires:
Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
adam requires:
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
adam requires:
Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
press_0 requires:
StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
press_0 requires:
StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
press_0 requires:
StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
press_0 requires:
StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
press_0 requires:
StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
press_0 requires:
StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
press_0 requires:
Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
press_0 requires:
Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
press_0 requires:
Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
press_0 requires:
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
press_1 requires:
Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
press_1 requires:
Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
press_1 requires:
Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
press_1 requires:
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
press_2 requires:
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
press_3 requires:
StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
press_3 requires:
StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
press_3 requires:
StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
press_3 requires:
StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
press_3 requires:
StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
press_3 requires:
StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
press_3 requires:
StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
press_3 requires:
Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
press_3 requires:
Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
press_3 requires:
Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
press_3 requires:
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
press_4 requires:
Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
press_5 requires:
StencilStream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
press_6 requires:
StencilStream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
press_7 requires:
StencilStream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]


--------------------------------------------------------------------------------

Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: velnw_0
Consumed at: feedbf
Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: velnw_1
Consumed at: feedbf
Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
Produced at: velnw_2
Consumed at: feedbf
TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
Produced at: les_0
Consumed at: les_1
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: feedbf
Consumed at: les_1
TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
Produced at: les_0
Consumed at: les_2
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: feedbf
Consumed at: les_2
TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
Produced at: les_0
Consumed at: les_3
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: feedbf
Consumed at: les_3
Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: les_1
Consumed at: adam
Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: les_2
Consumed at: adam
Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: les_3
Consumed at: adam
TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: adam
Consumed at: press_0
TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: adam
Consumed at: press_0
TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
Produced at: adam
Consumed at: press_0
TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: velnw_0
Consumed at: press_0
TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
Produced at: velnw_1
Consumed at: press_0
TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
Produced at: velnw_2
Consumed at: press_0
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
Produced at: press_0
Consumed at: press_1
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
Produced at: press_0
Consumed at: press_2
Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
Produced at: press_2
Consumed at: press_3
Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
Produced at: press_3
Consumed at: press_4
TransitStream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
Produced at: press_4
Consumed at: press_5
TransitStream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
Produced at: press_5
Consumed at: press_6
TransitStream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
Produced at: press_6
Consumed at: press_7

Transit Streams Added
 ! ==============================================
 ! Name: velnw_0 Order: 0
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"u"
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,p,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
        if ((synthIdx3>=0) .and. (synthIdx3<=1)) then
            if (synthIdx3==0) then
                pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end if
        end if
!}
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================


 ! ==============================================
 ! Name: velnw_1 Order: 1
 ! Input streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,p,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
            v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================


 ! ==============================================
 ! Name: velnw_2 Order: 2
 ! Input streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,p,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
            w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_2
 ! ==============================================


 ! ==============================================
 ! Name: feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","v","w","u","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf
 ! ==============================================


 ! ==============================================
 ! Name: les_0 Order: 4
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0
 ! ==============================================


 ! ==============================================
 ! Name: les_1 Order: 5
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1
 ! ==============================================


 ! ==============================================
 ! Name: les_2 Order: 6
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
 !	StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2
 ! ==============================================


 ! ==============================================
 ! Name: les_3 Order: 7
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
 !	StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3
 ! ==============================================


 ! ==============================================
 ! Name: adam Order: 8
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam
 ! ==============================================


 ! ==============================================
 ! Name: press_0 Order: 9
 ! Input streams:
 !	StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
 !	StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
 !	StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
 !	StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
 !	StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
 !	StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0
 ! ==============================================


 ! ==============================================
 ! Name: press_1 Order: 10
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1
 ! ==============================================


 ! ==============================================
 ! Name: press_2 Order: 11
 ! Input streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2
 ! ==============================================


 ! ==============================================
 ! Name: press_3 Order: 12
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_3(dx1,dxs,dy1,dys,dzn,dzs,p,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: pav
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["dzs","nrd"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=&
&1)) then
                dz1 = dzs(k-1)
                dz2 = dzs(k)
                cn4s = 2./(dz1*(dz1+dz2))
                cn4l = 2./(dz2*(dz1+dz2))
                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                if (nrd==0) then
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3s*p(synthIdx&
&3,i,j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
                else
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,k)+cn3s*p(sy&
&nthIdx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                    p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx2==0 .and. synthIdx3==0) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                end if
                if (synthIdx3==0 .and. synthIdx2==301) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!            ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx1==0 .and. synthIdx3==0) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                end if
                if (synthIdx3==0 .and. synthIdx1==301) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                end if
            end if
!}            
!}
        end do
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!        ){
! OpenCLMap ( ["synthIdx0"],["p"],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["l"]) {
        if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. &
&(synthIdx3<=1)) then
            if (synthIdx0==0 .and. synthIdx3==0) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
            end if
            if (synthIdx3==0 .and. synthIdx0==81) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
            end if
        end if
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
            pco = pco+dx1(i)*dy1(j)*dzn(k)
        end if
    end if
!}
end subroutine press_3
 ! ==============================================


 ! ==============================================
 ! Name: press_4 Order: 13
 ! Input streams:
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4(p)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pav
      real(4) :: pco
      integer :: synthIdx3
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
        end if
    end if
!}
end subroutine press_4
 ! ==============================================


 ! ==============================================
 ! Name: press_5 Order: 14
 ! Input streams:
 !	StencilStream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
 ! Output streams:
 !	Stream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_5(p)
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx2
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!    ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],[]) {
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx2==0 .and. synthIdx3==0) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
        end if
        if (synthIdx3==0 .and. synthIdx2==301) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_5
 ! ==============================================


 ! ==============================================
 ! Name: press_6 Order: 15
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
 ! Output streams:
 !	Stream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_6(p)
      integer :: i
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx1
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx1==0 .and. synthIdx3==0) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
        end if
        if (synthIdx3==0 .and. synthIdx1==301) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_6
 ! ==============================================


 ! ==============================================
 ! Name: press_7 Order: 16
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_7(p)
      integer :: i
      integer :: j
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx0
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx0==0 .and. synthIdx3==0) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
        end if
        if (synthIdx3==0 .and. synthIdx0==81) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_7
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Reduction Vars Linked 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: velnw_0 Order: 0
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"u"
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,p,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
        if ((synthIdx3>=0) .and. (synthIdx3<=1)) then
            if (synthIdx3==0) then
                pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end if
        end if
!}
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================


 ! ==============================================
 ! Name: velnw_1 Order: 1
 ! Input streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,p,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
            v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================


 ! ==============================================
 ! Name: velnw_2 Order: 2
 ! Input streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,p,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
            w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_2
 ! ==============================================


 ! ==============================================
 ! Name: feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
! 	"u"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","v","w","u","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf
 ! ==============================================


 ! ==============================================
 ! Name: les_0 Order: 4
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0
 ! ==============================================


 ! ==============================================
 ! Name: les_1 Order: 5
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1
 ! ==============================================


 ! ==============================================
 ! Name: les_2 Order: 6
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
 !	StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2
 ! ==============================================


 ! ==============================================
 ! Name: les_3 Order: 7
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
 !	StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3
 ! ==============================================


 ! ==============================================
 ! Name: adam Order: 8
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam
 ! ==============================================


 ! ==============================================
 ! Name: press_0 Order: 9
 ! Input streams:
 !	StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
 !	StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
 !	StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
 !	StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
 !	StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
 !	StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
! 	"u"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0
 ! ==============================================


 ! ==============================================
 ! Name: press_1 Order: 10
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1
 ! ==============================================


 ! ==============================================
 ! Name: press_2 Order: 11
 ! Input streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
! 	"area"
! 	"rhsav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2
 ! ==============================================


 ! ==============================================
 ! Name: press_3 Order: 12
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_3(dx1,dxs,dy1,dys,dzn,dzs,p,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: pav
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["dzs","nrd"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=&
&1)) then
                dz1 = dzs(k-1)
                dz2 = dzs(k)
                cn4s = 2./(dz1*(dz1+dz2))
                cn4l = 2./(dz2*(dz1+dz2))
                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                if (nrd==0) then
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3s*p(synthIdx&
&3,i,j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
                else
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,k)+cn3s*p(sy&
&nthIdx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                    p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx2==0 .and. synthIdx3==0) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                end if
                if (synthIdx3==0 .and. synthIdx2==301) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!            ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx1==0 .and. synthIdx3==0) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                end if
                if (synthIdx3==0 .and. synthIdx1==301) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                end if
            end if
!}            
!}
        end do
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!        ){
! OpenCLMap ( ["synthIdx0"],["p"],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["l"]) {
        if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. &
&(synthIdx3<=1)) then
            if (synthIdx0==0 .and. synthIdx3==0) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
            end if
            if (synthIdx3==0 .and. synthIdx0==81) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
            end if
        end if
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
            pco = pco+dx1(i)*dy1(j)*dzn(k)
        end if
    end if
!}
end subroutine press_3
 ! ==============================================


 ! ==============================================
 ! Name: press_4 Order: 13
 ! Input streams:
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
! 	"pco"
! 	"pav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4(p)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pav
      real(4) :: pco
      integer :: synthIdx3
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
        end if
    end if
!}
end subroutine press_4
 ! ==============================================


 ! ==============================================
 ! Name: press_5 Order: 14
 ! Input streams:
 !	StencilStream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
 ! Output streams:
 !	Stream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_5(p)
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx2
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!    ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],[]) {
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx2==0 .and. synthIdx3==0) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
        end if
        if (synthIdx3==0 .and. synthIdx2==301) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_5
 ! ==============================================


 ! ==============================================
 ! Name: press_6 Order: 15
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
 ! Output streams:
 !	Stream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_6(p)
      integer :: i
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx1
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx1==0 .and. synthIdx3==0) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
        end if
        if (synthIdx3==0 .and. synthIdx1==301) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_6
 ! ==============================================


 ! ==============================================
 ! Name: press_7 Order: 16
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_7(p)
      integer :: i
      integer :: j
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx0
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx0==0 .and. synthIdx3==0) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
        end if
        if (synthIdx3==0 .and. synthIdx0==81) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_7
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Synthesised Loop Vars 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 ! ==============================================
 ! Name: velnw_0 Order: 0
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"u"
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,p,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    i = mod(count/2, 301)
    j = mod(count/162, 301)
    k = count/48762
    synthIdx3 = mod(count, 2)
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
        i = mod(count/2, 301)
        j = mod(count/162, 301)
        k = count/48762
        synthIdx3 = mod(count, 2)
        if ((synthIdx3>=0) .and. (synthIdx3<=1)) then
            if (synthIdx3==0) then
                pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end if
        end if
!}
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================


 ! ==============================================
 ! Name: velnw_1 Order: 1
 ! Input streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,p,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    i = mod(count/2, 301)
    j = mod(count/162, 301)
    k = count/48762
    synthIdx3 = mod(count, 2)
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
            v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================


 ! ==============================================
 ! Name: velnw_2 Order: 2
 ! Input streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
 !	Stream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Output streams:
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_2(dt,dzs,h,p,ro,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:82), intent(In) :: dzs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,0],[0,0,0,1]]
!    ){
! OpenCLMap ( ["ro","dzs","dt"],[],["(k,1,79,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    i = mod(count/2, 301)
    j = mod(count/168, 301)
    k = count/50568
    synthIdx3 = mod(count, 2)
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=79) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j,k+1))/ro/dzs(k)
            w(i,j,k) = w(i,j,k)+dt*(h(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_2
 ! ==============================================


 ! ==============================================
 ! Name: feedbf Order: 3
 ! Input streams:
 !	Stream: bmask1_i_j_k array name: bmask1 type: Float dimensions: [(-1,301),(0,301),(0,81)]
 !	Stream: cmask1_i_j_k array name: cmask1 type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: dmask1_i_j_k array name: dmask1 type: Float dimensions: [(0,301),(0,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fx_i_j_k array name: fx type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fy_i_j_k array name: fy type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fz_i_j_k array name: fz type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: usum_i_j_k array name: usum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: vsum_i_j_k array name: vsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: wsum_i_j_k array name: wsum type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
! 	"u"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine feedbf(alpha,beta,bmask1,cmask1,dmask1,dt,f,fx,fy,fz,g,h,u,usum,v,vsum,w,wsum)
      real(4), intent(In) :: alpha
      real(4), intent(In) :: beta
      real(4), dimension(-1:301,0:301,0:81), intent(In) :: bmask1
      real(4), dimension(0:301,-1:301,0:81), intent(In) :: cmask1
      real(4), dimension(0:301,0:301,0:81), intent(In) :: dmask1
      real(4), intent(In) :: dt
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: f1x
      real(4) :: f1y
      real(4) :: f1z
      real(4) :: f2x
      real(4) :: f2y
      real(4) :: f2z
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fx
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fy
      real(4), dimension(0:300,0:300,0:80), intent(Out) :: fz
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: usum
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: vsum
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: wsum
! OpenCLMap ( ["bmask1","cmask1","dmask1","alpha","dt","beta","v","w","u","fx","fy","fz"],["fx","fy","fz"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/82, 302)
    k = count/24764
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        usum(i,j,k) = (usum(i,j,k)+u(i,j,k))*bmask1(i,j,k)
        vsum(i,j,k) = (vsum(i,j,k)+v(i,j,k))*cmask1(i,j,k)
        wsum(i,j,k) = (wsum(i,j,k)+w(i,j,k))*dmask1(i,j,k)
        f1x = alpha*usum(i,j,k)*dt
        f1y = alpha*vsum(i,j,k)*dt
        f1z = alpha*wsum(i,j,k)*dt
        f2x = beta*u(i,j,k)*bmask1(i,j,k)
        f2y = beta*v(i,j,k)*cmask1(i,j,k)
        f2z = beta*w(i,j,k)*dmask1(i,j,k)
        fx(i,j,k) = f1x+f2x
        fy(i,j,k) = f1y+f2y
        fz(i,j,k) = f1z+f2z
        f(i,j,k) = f(i,j,k)+fx(i,j,k)
        g(i,j,k) = g(i,j,k)+fy(i,j,k)
        h(i,j,k) = h(i,j,k)+fz(i,j,k)
    end if
!}
end subroutine feedbf
 ! ==============================================


 ! ==============================================
 ! Name: les_0 Order: 4
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
 !	Stream: delx1_k array name: delx1 type: Float dimensions: [(1,80)]
 !	Stream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]
 !	Stream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_0(delx1,diu1,diu2,diu3,diu4,diu5,diu6,diu7,diu8,diu9,sm)
      real(4) :: csx1
      real(4), dimension(80), intent(Out) :: delx1
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4) :: dudxx1
      real(4) :: dudyx1
      real(4) :: dudzx1
      real(4) :: dvdxx1
      real(4) :: dvdyx1
      real(4) :: dvdzx1
      real(4) :: dwdxx1
      real(4) :: dwdyx1
      real(4) :: dwdzx1
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
! OpenCLStencil (
!	4 point stencil on 3D array diu2: [[0,1,0],[0,0,0],[-1,1,0],[-1,0,0]]
!	4 point stencil on 3D array diu3: [[0,0,0],[0,0,1],[-1,0,0],[-1,0,1]]
!	4 point stencil on 3D array diu4: [[1,0,0],[1,-1,0],[0,0,0],[0,-1,0]]
!	4 point stencil on 3D array diu6: [[0,0,0],[0,0,1],[0,-1,0],[0,-1,1]]
!	4 point stencil on 3D array diu7: [[1,0,0],[1,0,-1],[0,0,0],[0,0,-1]]
!	4 point stencil on 3D array diu8: [[0,1,0],[0,1,-1],[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["diu1","diu5","diu9"],["sm"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/80, 303)
    k = count/24240
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        dudxx1 = diu1(i,j,k)
        dudyx1 = (diu2(i-1,j,k)+diu2(i-1,j+1,k)+diu2(i,j,k)+diu2(i,j+1,k))*.25
        dudzx1 = (diu3(i-1,j,k)+diu3(i-1,j,k+1)+diu3(i,j,k)+diu3(i,j,k+1))*.25
        dvdxx1 = (diu4(i,j,k)+diu4(i,j-1,k)+diu4(i+1,j,k)+diu4(i+1,j-1,k))*.25
        dvdyx1 = diu5(i,j,k)
        dvdzx1 = (diu6(i,j-1,k)+diu6(i,j-1,k+1)+diu6(i,j,k)+diu6(i,j,k+1))*.25
        dwdxx1 = (diu7(i,j,k)+diu7(i,j,k-1)+diu7(i+1,j,k)+diu7(i+1,j,k-1))*.25
        dwdyx1 = (diu8(i,j,k)+diu8(i,j,k-1)+diu8(i,j+1,k)+diu8(i,j+1,k-1))*.25
        dwdzx1 = diu9(i,j,k)
        csx1 = 0.14
        sm(i,j,k) = (csx1*delx1(k))**2*sqrt(2.*(dudxx1**2+dvdyx1**2+dwdzx1**2)+(dudyx1+dvdxx1)**2+(dwdyx1+dvdzx1)**2+(dudzx1+dwdxx1)&
&**2)
    end if
!}    
!}
end subroutine les_0
 ! ==============================================


 ! ==============================================
 ! Name: les_1 Order: 5
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu1_i_j_k array name: diu1 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	2 point stencil on 1D array dx1: [[0],[1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_1(diu1,diu2,diu3,diu4,diu7,dx1,dxs,dy1,dzn,f,sm)
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu1
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfu
      real(4) :: visux2
      real(4) :: visux1
      real(4) :: visuy2
      real(4) :: visuy1
      real(4) :: visuz2
      real(4) :: visuz1
! OpenCLStencil (
!	2 point stencil on 3D array diu1: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu2: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu3: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu4: [[1,0,0],[1,-1,0]]
!	2 point stencil on 3D array diu7: [[1,0,0],[1,0,-1]]
!	2 point stencil on 1D array dx1: [[0],[1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[1,-1,0],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[0,-1,0]]
!    ){
! OpenCLMap ( ["sm","diu1","dxs","dy1","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 304)
    j = mod(count/83, 303)
    k = count/25149
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsx2 = sm(i+1,j,k)
        evsx1 = sm(i,j,k)
        evsy2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsy1 = (dy1(j+1)*((dx1(i+1)*sm(i,j-1,k)+dx1(i)*sm(i+1,j-1,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visux2 = (evsx2)*2.*diu1(i+1,j,k)
        visux1 = (evsx1)*2.*diu1(i,j,k)
        visuy2 = (evsy2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visuy1 = (evsy1)*(diu2(i,j,k)+diu4(i+1,j-1,k))
        visuz2 = (evsz2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        visuz1 = (evsz1)*(diu3(i,j,k)+diu7(i+1,j,k-1))
        vfu = (visux2-visux1)/dxs(i)+(visuy2-visuy1)/dy1(j)+(visuz2-visuz1)/dzn(k)
        f(i,j,k) = (f(i,j,k)+vfu)
    end if
!}    
!}
end subroutine les_1
 ! ==============================================


 ! ==============================================
 ! Name: les_2 Order: 6
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu2_i_j_k array name: diu2 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
 !	StencilStream: diu4_i_j_k array name: diu4 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
 !	StencilStream: diu5_i_j_k array name: diu5 type: Float dimensions: [(-1,302),(0,302),(0,82)]!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	2 point stencil on 1D array dy1: [[0],[1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_2(diu2,diu4,diu5,diu6,diu8,dx1,dy1,dys,dzn,g,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu2
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu4
      real(4), dimension(-1:302,0:302,0:82), intent(In) :: diu5
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfv
      real(4) :: visvx2
      real(4) :: visvx1
      real(4) :: visvy2
      real(4) :: visvy1
      real(4) :: visvz2
      real(4) :: visvz1
! OpenCLStencil (
!	2 point stencil on 3D array diu2: [[0,1,0],[-1,1,0]]
!	2 point stencil on 3D array diu4: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu5: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu6: [[0,0,0],[0,0,1]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,1,-1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	2 point stencil on 1D array dy1: [[0],[1]]
!	3 point stencil on 1D array dzn: [[0],[1],[-1]]
!	10 point stencil on 3D array sm: [[1,1,0],[1,0,0],[1,0,1],[1,0,-1],[0,1,0],[0,0,0],[0,0,1],[0,0,-1],[-1,1,0],[-1,0,0]]
!    ){
! OpenCLMap ( ["sm","diu5","dx1","dys","dzn"],[],["(k,2,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/83, 303)
    k = count/25149
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=2) .and. (k<=80)) then
        evsy2 = sm(i,j+1,k)
        evsy1 = sm(i,j,k)
        evsx2 = (dy1(j+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dy1(j)*((dx1(i+1)*sm(i,j+1,k)+dx1(i)*sm(i+1,j+&
&1,k))/(dx1(i)+dx1(i+1))))/(dy1(j)+dy1(j+1))
        evsx1 = (dy1(j+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dy1(j)*((dx1(i)*sm(i-1,j+1,k)+dx1(i-1)*sm(i,j+&
&1,k))/(dx1(i-1)+dx1(i))))/(dy1(j)+dy1(j+1))
        evsz2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsz1 = (dzn(k)*((dx1(i+1)*sm(i,j,k-1)+dx1(i)*sm(i+1,j,k-1))/(dx1(i)+dx1(i+1)))+dzn(k-1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,&
&j,k))/(dx1(i)+dx1(i+1))))/(dzn(k-1)+dzn(k))
        visvx2 = (evsx2)*(diu2(i,j+1,k)+diu4(i+1,j,k))
        visvx1 = (evsx1)*(diu2(i-1,j+1,k)+diu4(i,j,k))
        visvy2 = (evsy2)*2.*diu5(i,j+1,k)
        visvy1 = (evsy1)*2.*diu5(i,j,k)
        visvz2 = (evsz2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        visvz1 = (evsz1)*(diu6(i,j,k)+diu8(i,j+1,k-1))
        vfv = (visvx2-visvx1)/dx1(i)+(visvy2-visvy1)/dys(j)+(visvz2-visvz1)/dzn(k)
        g(i,j,k) = (g(i,j,k)+vfv)
    end if
!}    
!}
end subroutine les_2
 ! ==============================================


 ! ==============================================
 ! Name: les_3 Order: 7
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	StencilStream: diu3_i_j_k array name: diu3 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
 !	StencilStream: diu6_i_j_k array name: diu6 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
 !	StencilStream: diu7_i_j_k array name: diu7 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
 !	StencilStream: diu8_i_j_k array name: diu8 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
 !	StencilStream: diu9_i_j_k array name: diu9 type: Float dimensions: [(0,302),(0,302),(0,82)]!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
 !	StencilStream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
 !	StencilStream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
 !	StencilStream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzn: [[0],[1]]
 !	StencilStream: sm_i_j_k array name: sm type: Float dimensions: [(-1,301),(-1,301),(0,81)]!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	TransitStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine les_3(diu3,diu6,diu7,diu8,diu9,dx1,dy1,dzn,h,sm)
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu3
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu6
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu7
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu8
      real(4), dimension(0:302,0:302,0:82), intent(In) :: diu9
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4) :: evsx2
      real(4) :: evsx1
      real(4) :: evsy2
      real(4) :: evsy1
      real(4) :: evsz2
      real(4) :: evsz1
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(-1:301,-1:301,0:81), intent(Out) :: sm
      real(4) :: vfw
      real(4) :: viswx2
      real(4) :: viswx1
      real(4) :: viswy2
      real(4) :: viswy1
      real(4) :: viswz2
      real(4) :: viswz1
! OpenCLStencil (
!	2 point stencil on 3D array diu3: [[0,0,1],[-1,0,1]]
!	2 point stencil on 3D array diu6: [[0,0,1],[0,-1,1]]
!	2 point stencil on 3D array diu7: [[1,0,0],[0,0,0]]
!	2 point stencil on 3D array diu8: [[0,1,0],[0,0,0]]
!	2 point stencil on 3D array diu9: [[0,0,0],[0,0,1]]
!	3 point stencil on 1D array dx1: [[0],[1],[-1]]
!	3 point stencil on 1D array dy1: [[0],[1],[-1]]
!	2 point stencil on 1D array dzn: [[0],[1]]
!	10 point stencil on 3D array sm: [[1,0,0],[1,0,1],[0,1,0],[0,1,1],[0,0,0],[0,0,1],[0,-1,0],[0,-1,1],[-1,0,0],[-1,0,1]]
!    ){
! OpenCLMap ( ["sm","diu9","dx1","dy1","dzn"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/83, 303)
    k = count/25149
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        evsz2 = sm(i,j,k+1)
        evsz1 = sm(i,j,k)
        evsx2 = (dzn(k+1)*((dx1(i+1)*sm(i,j,k)+dx1(i)*sm(i+1,j,k))/(dx1(i)+dx1(i+1)))+dzn(k)*((dx1(i+1)*sm(i,j,k+1)+dx1(i)*sm(i+1,j,&
&k+1))/(dx1(i)+dx1(i+1))))/(dzn(k)+dzn(k+1))
        evsx1 = (dzn(k+1)*((dx1(i)*sm(i-1,j,k)+dx1(i-1)*sm(i,j,k))/(dx1(i-1)+dx1(i)))+dzn(k)*((dx1(i)*sm(i-1,j,k+1)+dx1(i-1)*sm(i,j,&
&k+1))/(dx1(i-1)+dx1(i))))/(dzn(k)+dzn(k+1))
        evsy2 = (dzn(k+1)*((dy1(j+1)*sm(i,j,k)+dy1(j)*sm(i,j+1,k))/(dy1(j)+dy1(j+1)))+dzn(k)*((dy1(j+1)*sm(i,j,k+1)+dy1(j)*sm(i,j+1,&
&k+1))/(dy1(j)+dy1(j+1))))/(dzn(k)+dzn(k+1))
        evsy1 = (dzn(k+1)*((dy1(j)*sm(i,j-1,k)+dy1(j-1)*sm(i,j,k))/(dy1(j-1)+dy1(j)))+dzn(k)*((dy1(j)*sm(i,j-1,k+1)+dy1(j-1)*sm(i,j,&
&k+1))/(dy1(j-1)+dy1(j))))/(dzn(k)+dzn(k+1))
        viswx2 = (evsx2)*(diu3(i,j,k+1)+diu7(i+1,j,k))
        viswx1 = (evsx1)*(diu3(i-1,j,k+1)+diu7(i,j,k))
        viswy2 = (evsy2)*(diu6(i,j,k+1)+diu8(i,j+1,k))
        viswy1 = (evsy1)*(diu6(i,j-1,k+1)+diu8(i,j,k))
        viswz2 = (evsz2)*2.*diu9(i,j,k+1)
        viswz1 = (evsz1)*2.*diu9(i,j,k)
        vfw = (viswx2-viswx1)/dx1(i)+(viswy2-viswy1)/dy1(j)+(viswz2-viswz1)/dzn(k)
        h(i,j,k) = (h(i,j,k)+vfw)
    end if
!}    
!}
end subroutine les_3
 ! ==============================================


 ! ==============================================
 ! Name: adam Order: 8
 ! Input streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Output streams:
 !	TransitStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]
 !	TransitStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: fold_i_j_k array name: fold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: gold_i_j_k array name: gold type: Float dimensions: [(1,300),(1,300),(1,80)]
 !	Stream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: hold_i_j_k array name: hold type: Float dimensions: [(1,300),(1,300),(1,80)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine adam(f,fold,g,gold,h,hold)
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4) :: fd
      real(4) :: gd
      real(4) :: hd
      real(4), dimension(300,300,80), intent(InOut) :: fold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(300,300,80), intent(InOut) :: gold
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      real(4), dimension(300,300,80), intent(InOut) :: hold
      integer :: i
      integer :: j
      integer :: k
! OpenCLMap ( ["f","g","h","fold","gold","hold"],["f","g","h"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 301)
    j = mod(count/81, 301)
    k = count/24381
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        fd = f(i,j,k)
        gd = g(i,j,k)
        hd = h(i,j,k)
        f(i,j,k) = 1.5*f(i,j,k)-0.5*fold(i,j,k)
        g(i,j,k) = 1.5*g(i,j,k)-0.5*gold(i,j,k)
        h(i,j,k) = 1.5*h(i,j,k)-0.5*hold(i,j,k)
        fold(i,j,k) = fd
        gold(i,j,k) = gd
        hold(i,j,k) = hd
    end if
!}
end subroutine adam
 ! ==============================================


 ! ==============================================
 ! Name: press_0 Order: 9
 ! Input streams:
 !	StencilStream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
 !	StencilStream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
 !	StencilStream: h_i_j_k array name: h type: Float dimensions: [(0,300),(0,300),(0,80)]!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
 !	StencilStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
 !	StencilStream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
 !	StencilStream: w_i_j_k array name: w type: Float dimensions: [(0,301),(-1,301),(-1,81)]!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
! 	"u"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_0(dt,dx1,dy1,dzn,f,g,h,rhs,u,v,w)
      real(4), intent(In) :: dt
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: h
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
      real(4), dimension(0:301,-1:301,-1:81), intent(InOut) :: w
! OpenCLStencil (
!	2 point stencil on 3D array f: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array g: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array h: [[0,0,0],[0,0,-1]]
!	2 point stencil on 3D array u: [[0,0,0],[-1,0,0]]
!	2 point stencil on 3D array v: [[0,0,0],[0,-1,0]]
!	2 point stencil on 3D array w: [[0,0,0],[0,0,-1]]
!    ){
! OpenCLMap ( ["dx1","dy1","dzn","dt"],["rhs"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    i = mod(count, 303)
    j = mod(count/84, 302)
    k = count/25368
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = (-u(i-1,j,k)+u(i,j,k))/dx1(i)+(-v(i,j-1,k)+v(i,j,k))/dy1(j)+(-w(i,j,k-1)+w(i,j,k))/dzn(k)
        rhs(i,j,k) = (f(i,j,k)-f(i-1,j,k))/dx1(i)+(g(i,j,k)-g(i,j-1,k))/dy1(j)+(h(i,j,k)-h(i,j,k-1))/dzn(k)+rhs(i,j,k)/dt
    end if
!}    
!}
end subroutine press_0
 ! ==============================================


 ! ==============================================
 ! Name: press_1 Order: 10
 ! Input streams:
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	TransitStream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"rhsav"
! 	"area"
 ! --------------------------------------------
subroutine press_1(dx1,dy1,dzn,rhs)
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(-1:82), intent(In) :: dzn
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = 0.0
    area = 0.0
! OpenCLReduce ( ["dx1","dy1","dzn","rhs"],["rhsav","area"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[],["(rhsav,0.0)","(area,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhsav = rhsav+dx1(i)*dy1(j)*dzn(k)*rhs(i,j,k)
        area = area+dx1(i)*dy1(j)*dzn(k)
    end if
!}
end subroutine press_1
 ! ==============================================


 ! ==============================================
 ! Name: press_2 Order: 11
 ! Input streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Input Reduction Variables:
! 	"area"
! 	"rhsav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_2(rhs)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: rhsav
      real(4) :: area
    rhsav = rhsav/area
! OpenCLMap ( ["rhsav"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80)) then
        rhs(i,j,k) = rhs(i,j,k)-rhsav
    end if
!}
end subroutine press_2
 ! ==============================================


 ! ==============================================
 ! Name: press_3 Order: 12
 ! Input streams:
 !	StencilStream: dxs_i array name: dxs type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dxs: [[0],[-1]]
 !	StencilStream: dys_j array name: dys type: Float dimensions: [(0,300)]!	2 point stencil on 1D array dys: [[0],[-1]]
 !	StencilStream: dzs_k array name: dzs type: Float dimensions: [(-1,82)]!	2 point stencil on 1D array dzs: [[0],[-1]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
 !	StencilStream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
 !	Stream: dx1_i array name: dx1 type: Float dimensions: [(-1,301)]
 !	Stream: dy1_j array name: dy1 type: Float dimensions: [(0,301)]
 !	Stream: dzn_k array name: dzn type: Float dimensions: [(-1,82)]
 !	Stream: rhs_i_j_k array name: rhs type: Float dimensions: [(0,301),(0,301),(0,81)]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"pav"
! 	"pco"
 ! --------------------------------------------
subroutine press_3(dx1,dxs,dy1,dys,dzn,dzs,p,rhs)
      real(4) :: cn1
      real(4) :: cn2l
      real(4) :: cn2s
      real(4) :: cn3l
      real(4) :: cn3s
      real(4) :: cn4l
      real(4) :: cn4s
      real(4) :: dz1
      real(4) :: dz2
      real(4), dimension(-1:301), intent(In) :: dx1
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:301), intent(In) :: dy1
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(-1:82), intent(In) :: dzn
      real(4), dimension(-1:82), intent(In) :: dzs
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4), dimension(0:301,0:301,0:81), intent(Out) :: rhs
      real(4) :: pav
      real(4) :: pco
      real(4) :: sor
      real(4) :: reltmp
      integer :: synthIdx0
      integer :: synthIdx1
      integer :: synthIdx2
      integer :: synthIdx3
    do l = 1, 50, 1
        sor = 0.0
        do nrd = 0, 1, 1
! OpenCLStencil (
!	2 point stencil on 1D array dxs: [[0],[-1]]
!	2 point stencil on 1D array dys: [[0],[-1]]
!	2 point stencil on 1D array dzs: [[0],[-1]]
!	14 point stencil on 4D array p: [[1,1,0,0],[1,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,-1],[1,0,-1,0],[1,-1,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0],[0,0,0,1],[0,0,0,-1],[0,0,-1,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["dzs","nrd"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=&
&1)) then
                dz1 = dzs(k-1)
                dz2 = dzs(k)
                cn4s = 2./(dz1*(dz1+dz2))
                cn4l = 2./(dz2*(dz1+dz2))
                cn3s = 2./(dys(j-1)*(dys(j-1)+dys(j)))
                cn3l = 2./(dys(j)*(dys(j-1)+dys(j)))
                cn2s = 2./(dxs(i-1)*(dxs(i-1)+dxs(i)))
                cn2l = 2./(dxs(i)*(dxs(i-1)+dxs(i)))
                cn1 = 1./(2./(dxs(i-1)*dxs(i))+2./(dys(j-1)*dys(j))+2./(dz1*dz2))
                if (nrd==0) then
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3,i+1,j,k)+cn2s*p(synthIdx3,i-1,j,k)+cn3l*p(synthIdx3,i,j+1,k)+cn3s*p(synthIdx&
&3,i,j-1,k)+cn4l*p(synthIdx3,i,j,k+1)+cn4s*p(synthIdx3,i,j,k-1)-rhs(i,j,k))-p(synthIdx3,i,j,k))
                else
                    reltmp = 1.0*(cn1*(cn2l*p(synthIdx3+1,i+1,j,k)+cn2s*p(synthIdx3+1,i-1,j,k)+cn3l*p(synthIdx3+1,i,j+1,k)+cn3s*p(sy&
&nthIdx3+1,i,j-1,k)+cn4l*p(synthIdx3+1,i,j,k+1)+cn4s*p(synthIdx3+1,i,j,k-1)-rhs(i,j,k))-p(synthIdx3+1,i,j,k))
                    p(synthIdx3,i,j,k) = p(synthIdx3+1,i,j,k)+reltmp
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!            ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx2==0 .and. synthIdx3==0) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
                end if
                if (synthIdx3==0 .and. synthIdx2==301) then
                    p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
                end if
            end if
!}            
!}
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!            ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["nrd","l"]) {
            if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .a&
&nd. (synthIdx3<=1)) then
                if (synthIdx1==0 .and. synthIdx3==0) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
                end if
                if (synthIdx3==0 .and. synthIdx1==301) then
                    p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
                end if
            end if
!}            
!}
        end do
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!        ){
! OpenCLMap ( ["synthIdx0"],["p"],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],["l"]) {
        if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. &
&(synthIdx3<=1)) then
            if (synthIdx0==0 .and. synthIdx3==0) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
            end if
            if (synthIdx3==0 .and. synthIdx0==81) then
                p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
            end if
        end if
!}        
!}
    end do
    pav = 0.0
    pco = 0.0
! OpenCLReduce ( ["synthIdx3","p","dx1","dy1","dzn"],["pav","pco"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[],["(pav,0.0)","(pco,0.0)"]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pav = pav+p(synthIdx3,i,j,k)*dx1(i)*dy1(j)*dzn(k)
            pco = pco+dx1(i)*dy1(j)*dzn(k)
        end if
    end if
!}
end subroutine press_3
 ! ==============================================


 ! ==============================================
 ! Name: press_4 Order: 13
 ! Input streams:
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
! 	"pco"
! 	"pav"
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_4(p)
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pav
      real(4) :: pco
      integer :: synthIdx3
    pav = pav/pco
! OpenCLMap ( ["pav"],["p"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            p(synthIdx3,i,j,k) = p(synthIdx3,i,j,k)-pav
        end if
    end if
!}
end subroutine press_4
 ! ==============================================


 ! ==============================================
 ! Name: press_5 Order: 14
 ! Input streams:
 !	StencilStream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
 ! Output streams:
 !	Stream: p_synthIdx3_synthIdx2_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_5(p)
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx2
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,-1,0,0]]
!    ){
! OpenCLMap ( ["synthIdx2"],["p"],["(k,0,81,1)","(j,0,301,1)","(synthIdx2,0,302,1)","(synthIdx3,0,1,1)"],[]) {
    j = mod(count/606, 303)
    k = count/49692
    synthIdx2 = mod(count/2, 303)
    synthIdx3 = mod(count, 2)
    if ((j>=0) .and. (j<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx2>=0) .and. (synthIdx2<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx2==0 .and. synthIdx3==0) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2+1,j,k)
        end if
        if (synthIdx3==0 .and. synthIdx2==301) then
            p(synthIdx3,synthIdx2,j,k) = p(synthIdx3,synthIdx2-1,j,k)
        end if
    end if
!}    
!}
end subroutine press_5
 ! ==============================================


 ! ==============================================
 ! Name: press_6 Order: 15
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
 ! Output streams:
 !	Stream: p_synthIdx3_i_synthIdx1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_6(p)
      integer :: i
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx1
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,300,0],[0,0,-300,0]]
!    ){
! OpenCLMap ( ["synthIdx1"],["p"],["(k,0,81,1)","(synthIdx1,0,302,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    i = mod(count/2, 303)
    k = count/49692
    synthIdx1 = mod(count/606, 303)
    synthIdx3 = mod(count, 2)
    if ((i>=0) .and. (i<=301) .and. (k>=0) .and. (k<=81) .and. (synthIdx1>=0) .and. (synthIdx1<=302) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx1==0 .and. synthIdx3==0) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1+300,k)
        end if
        if (synthIdx3==0 .and. synthIdx1==301) then
            p(synthIdx3,i,synthIdx1,k) = p(synthIdx3,i,synthIdx1-300,k)
        end if
    end if
!}    
!}
end subroutine press_6
 ! ==============================================


 ! ==============================================
 ! Name: press_7 Order: 16
 ! Input streams:
 !	StencilStream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
 ! Output streams:
 !	Stream: p_synthIdx3_i_j_synthIdx0 array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine press_7(p)
      integer :: i
      integer :: j
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      integer :: synthIdx0
      integer :: synthIdx3
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,0,1],[0,0,0,-1]]
!    ){
! OpenCLMap ( ["synthIdx0"],[],["(synthIdx0,0,81,1)","(j,0,301,1)","(i,0,301,1)","(synthIdx3,0,1,1)"],[]) {
    i = mod(count/2, 303)
    j = mod(count/164, 303)
    synthIdx0 = count/49692
    synthIdx3 = mod(count, 2)
    if ((i>=0) .and. (i<=301) .and. (j>=0) .and. (j<=301) .and. (synthIdx0>=0) .and. (synthIdx0<=81) .and. (synthIdx3>=0) .and. (syn&
&thIdx3<=1)) then
        if (synthIdx0==0 .and. synthIdx3==0) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0+1)
        end if
        if (synthIdx3==0 .and. synthIdx0==81) then
            p(synthIdx3,i,j,synthIdx0) = p(synthIdx3,i,j,synthIdx0-1)
        end if
    end if
!}    
!}
end subroutine press_7
 ! ==============================================



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 With Smart Caches 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

"------------------------------------------"
 ! ==============================================
 ! Name: velnw_0 Order: 0
 ! Input streams:
 !	Stream: dxs_i array name: dxs type: Float dimensions: [(0,300)]
 !	Stream: f_i_j_k array name: f type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: p_synthIdx3_ip1_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Output streams:
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
! 	"u"
 ! --------------------------------------------
subroutine velnw_0(dt,dxs,f,p,ro,u)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dxs
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: f
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: u
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,1,0,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dxs","dt"],["u"],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    i = mod(count/2, 301)
    j = mod(count/162, 301)
    k = count/48762
    synthIdx3 = mod(count, 2)
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
! OpenCLReduce ( ["synthIdx3","ro","dxs","dt"],["u"],["(synthIdx3,0,1,1)"],[],["(u,)"]) {
        i = mod(count/2, 301)
        j = mod(count/162, 301)
        k = count/48762
        synthIdx3 = mod(count, 2)
        if ((synthIdx3>=0) .and. (synthIdx3<=1)) then
            if (synthIdx3==0) then
                pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i+1,j,k))/ro/dxs(i)
                u(i,j,k) = u(i,j,k)+dt*(f(i,j,k)-pz)
            end if
        end if
!}
    end if
!}    
!}
end subroutine velnw_0
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
 ! ==============================================
 ! Name: velnw_1 Order: 1
 ! Input streams:
 !	Stream: dys_j array name: dys type: Float dimensions: [(0,300)]
 !	Stream: g_i_j_k array name: g type: Float dimensions: [(0,300),(0,300),(0,80)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: p_synthIdx3_i_jp1_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 !	Stream: p_synthIdx3_i_j_k array name: p type: Float dimensions: [(0,1),(0,302),(0,302),(0,81)]
 ! Output streams:
 !	TransitStream: u_i_j_k array name: u type: Float dimensions: [(0,301),(-1,301),(0,81)]
 !	Stream: v_i_j_k array name: v type: Float dimensions: [(0,301),(-1,301),(0,81)]
 ! Input Reduction Variables:
 ! Output Reduction Variables:
 ! --------------------------------------------
subroutine velnw_1(dt,dys,g,p,ro,v)
      real(4), intent(In) :: dt
      real(4), dimension(0:300), intent(In) :: dys
      real(4), dimension(0:300,0:300,0:80), intent(InOut) :: g
      integer :: i
      integer :: j
      integer :: k
      real(4), dimension(0:1,0:302,0:302,0:81) :: p
      real(4) :: pz
      real(4), intent(In) :: ro
      integer :: synthIdx3
      real(4), dimension(0:301,-1:301,0:81), intent(InOut) :: v
! OpenCLStencil (
!	2 point stencil on 4D array p: [[0,0,1,0],[0,0,0,0]]
!    ){
! OpenCLMap ( ["ro","dys","v","dt"],[],["(k,1,80,1)","(j,1,300,1)","(i,1,300,1)","(synthIdx3,0,1,1)"],[]) {
    i = mod(count/2, 301)
    j = mod(count/162, 301)
    k = count/48762
    synthIdx3 = mod(count, 2)
    if ((i>=1) .and. (i<=300) .and. (j>=1) .and. (j<=300) .and. (k>=1) .and. (k<=80) .and. (synthIdx3>=0) .and. (synthIdx3<=1)) then
        if (synthIdx3==0) then
            pz = (-p(synthIdx3,i,j,k)+p(synthIdx3,i,j+1,k))/ro/dys(j)
            v(i,j,k) = v(i,j,k)+dt*(g(i,j,k)-pz)
        end if
    end if
!}    
!}
end subroutine velnw_1
 ! ==============================================


"------------------------------------------"
"------------------------------------------"
