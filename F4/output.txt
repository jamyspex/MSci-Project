parseFile:       program wave2d
parseFile: integer(4), parameter :: nx=500
parseFile: integer(4), parameter :: ny=500
parseFile:       real :: dt
parseFile:       real :: dx
parseFile:       real :: dy
parseFile:       real :: eps
parseFile:       real, dimension(0:ny+1,0:nx+1) :: eta
parseFile:       real, dimension(0:ny+1,0:nx+1) :: etan
parseFile:       real :: g
parseFile:       real, dimension(0:ny+1,0:nx+1) :: h
parseFile:       real :: hmin
parseFile:       real, dimension(0:ny+1,0:nx+1) :: hzero
parseFile:       integer :: j
parseFile:       integer :: k
parseFile:       real, dimension(0:ny+1,0:nx+1) :: u
parseFile:       real, dimension(0:ny+1,0:nx+1) :: un
parseFile:       real, dimension(0:ny+1,0:nx+1) :: v
parseFile:       real, dimension(0:ny+1,0:nx+1) :: vn
parseFile:       integer, dimension(0:ny+1,0:nx+1) :: wet
parseFile: real :: hmax
parseFile: real :: time
parseFile: real :: dtmax
parseFile: real :: c
parseFile: real :: lambda
parseFile: integer :: n
parseFile: integer :: ntot
parseFile: integer :: nout
parseFile: integer :: dummy
parseFile: ntot = 10000
parseFile: eps = 0.05
parseFile: call init(hmin,dx,dy,dt,g,j,k,hzero,eta,etan,h,wet,u,un,v,vn)
parseFile: open(90,file ='debug.dat',form='formatted')
parseFile: open(10,file ='eta0.dat',form='formatted')
parseFile:   do j = 0,ny+1
parseFile:     write(10,'(101F12.6)')(eta(j,k),k=0,nx+1)
parseFile:   end do
parseFile: close(10)
parseFile: open(10,file ='h0.dat',form='formatted')
parseFile:   do j = 0,ny+1
parseFile:     write(10,'(101F12.6)')(hzero(j,k),k=0,nx+1)
parseFile:   end do
parseFile: close(10)
parseFile: hmax = 0.
parseFile: do j = 1,ny
parseFile: do k = 1,nx
parseFile:   hmax = max(hmax,h(j,k))
parseFile: end do
parseFile: end do
parseFile: dummy = 0
parseFile: c = sqrt(2*g*hmax)
parseFile: write(6,*)"c = ",c
parseFile: lambda = dt*sqrt(g*hmax)/min(dx,dy)
parseFile: write(6,*)"lambda = ",lambda
parseFile: if(lambda > 1)then
parseFile:   write(6,*) "This will not work. Do you know why?"
parseFile:   stop
parseFile: end if
parseFile: open(10,file ='eta.dat',form='formatted')
parseFile: open(20,file ='h.dat',form='formatted')
parseFile: open(30,file ='u.dat',form='formatted')
parseFile: open(40,file ='v.dat',form='formatted')
parseFile: do j = 26,26
parseFile: do k = 26,26
parseFile: eta(j,k) = 1.0
parseFile: end do
parseFile: end do
parseFile: do n = 1,ntot
parseFile: time = real(n)*dt
parseFile:   call dyn(j,k,dx,g,eta,dt,dy,un,u,wet,v,vn,h,etan)
parseFile:   call shapiro(j,k,wet,etan,eps,eta)
parseFile:       call vernieuw(dt,dx,dy,eps,eta,etan,g,h,hmin,hzero,j,k,u,un,v,vn,wet)
parseFile: end do
parseFile: do j = 0,ny+1
parseFile:   write(10,'(101F12.6)')(eta(j,k),k=0,nx+1)
parseFile:   write(20,'(101F12.6)')(h(j,k) ,k=0,nx+1)
parseFile:   write(30,'(101F12.6)')(u(j,k) ,k=0,nx+1)
parseFile:   write(40,'(101F12.6)')(v(j,k) ,k=0,nx+1)
parseFile: end do
parseFile: write(6,*)"Data output at time = ",time/60.0," min"
parseFile: end program wave2d
Parsing Shallow-Water-2D/main.f95
AST: [Main (fromList []) ({<unknown>, line = 1, col = 5},{<unknown>, line = 82, col = 0}) (SubName (fromList []) "wave2d") (Arg (fromList []) (NullArg (fromList [])) ({<unknown>, line = 1, col = 19},{<unknown>, line = 1, col = 19})) (Block (fromList []) (UseBlock (UseNil (fromList [])) {<unknown>, line = 2, col = 0}) (ImplicitNull (fromList [])) ({<unknown>, line = 2, col = 0},{<unknown>, line = 82, col = 0}) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 2, col = 0},{<unknown>, line = 2, col = 31}) [(Var (fromList []) ({<unknown>, line = 2, col = 25},{<unknown>, line = 2, col = 27}) [(VarName (fromList []) "nx",[])],Con (fromList []) ({<unknown>, line = 2, col = 28},{<unknown>, line = 2, col = 31}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 2, col = 8},{<unknown>, line = 2, col = 9}) "4") (NullExpr (fromList []) ({<unknown>, line = 2, col = 10},{<unknown>, line = 2, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 3, col = 0},{<unknown>, line = 3, col = 31}) [(Var (fromList []) ({<unknown>, line = 3, col = 25},{<unknown>, line = 3, col = 27}) [(VarName (fromList []) "ny",[])],Con (fromList []) ({<unknown>, line = 3, col = 28},{<unknown>, line = 3, col = 31}) "500",Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Parameter (fromList [])] (Con (fromList []) ({<unknown>, line = 3, col = 8},{<unknown>, line = 3, col = 9}) "4") (NullExpr (fromList []) ({<unknown>, line = 3, col = 10},{<unknown>, line = 3, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 4, col = 6},{<unknown>, line = 4, col = 16}) [(Var (fromList []) ({<unknown>, line = 4, col = 14},{<unknown>, line = 4, col = 16}) [(VarName (fromList []) "dt",[])],NullExpr (fromList []) ({<unknown>, line = 4, col = 16},{<unknown>, line = 4, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 4, col = 11},{<unknown>, line = 4, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 4, col = 11},{<unknown>, line = 4, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 5, col = 6},{<unknown>, line = 5, col = 16}) [(Var (fromList []) ({<unknown>, line = 5, col = 14},{<unknown>, line = 5, col = 16}) [(VarName (fromList []) "dx",[])],NullExpr (fromList []) ({<unknown>, line = 5, col = 16},{<unknown>, line = 5, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 5, col = 11},{<unknown>, line = 5, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 5, col = 11},{<unknown>, line = 5, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 6, col = 6},{<unknown>, line = 6, col = 16}) [(Var (fromList []) ({<unknown>, line = 6, col = 14},{<unknown>, line = 6, col = 16}) [(VarName (fromList []) "dy",[])],NullExpr (fromList []) ({<unknown>, line = 6, col = 16},{<unknown>, line = 6, col = 16}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 6, col = 11},{<unknown>, line = 6, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 7, col = 6},{<unknown>, line = 7, col = 17}) [(Var (fromList []) ({<unknown>, line = 7, col = 14},{<unknown>, line = 7, col = 17}) [(VarName (fromList []) "eps",[])],NullExpr (fromList []) ({<unknown>, line = 7, col = 17},{<unknown>, line = 7, col = 17}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 7, col = 11},{<unknown>, line = 7, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 8, col = 6},{<unknown>, line = 8, col = 43}) [(Var (fromList []) ({<unknown>, line = 8, col = 40},{<unknown>, line = 8, col = 43}) [(VarName (fromList []) "eta",[])],NullExpr (fromList []) ({<unknown>, line = 8, col = 43},{<unknown>, line = 8, col = 43}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 8, col = 22},{<unknown>, line = 8, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 8, col = 24},{<unknown>, line = 8, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 8, col = 24},{<unknown>, line = 8, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 8, col = 27},{<unknown>, line = 8, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 8, col = 29},{<unknown>, line = 8, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 8, col = 31},{<unknown>, line = 8, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 8, col = 31},{<unknown>, line = 8, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 8, col = 34},{<unknown>, line = 8, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 8, col = 10},{<unknown>, line = 8, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 9, col = 6},{<unknown>, line = 9, col = 44}) [(Var (fromList []) ({<unknown>, line = 9, col = 40},{<unknown>, line = 9, col = 44}) [(VarName (fromList []) "etan",[])],NullExpr (fromList []) ({<unknown>, line = 9, col = 44},{<unknown>, line = 9, col = 44}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 9, col = 22},{<unknown>, line = 9, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 9, col = 24},{<unknown>, line = 9, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 9, col = 24},{<unknown>, line = 9, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 9, col = 27},{<unknown>, line = 9, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 9, col = 29},{<unknown>, line = 9, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 9, col = 31},{<unknown>, line = 9, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 9, col = 31},{<unknown>, line = 9, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 9, col = 34},{<unknown>, line = 9, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 9, col = 10},{<unknown>, line = 9, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 10, col = 6},{<unknown>, line = 10, col = 15}) [(Var (fromList []) ({<unknown>, line = 10, col = 14},{<unknown>, line = 10, col = 15}) [(VarName (fromList []) "g",[])],NullExpr (fromList []) ({<unknown>, line = 10, col = 15},{<unknown>, line = 10, col = 15}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 10, col = 11},{<unknown>, line = 10, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 10, col = 11},{<unknown>, line = 10, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 11, col = 6},{<unknown>, line = 11, col = 41}) [(Var (fromList []) ({<unknown>, line = 11, col = 40},{<unknown>, line = 11, col = 41}) [(VarName (fromList []) "h",[])],NullExpr (fromList []) ({<unknown>, line = 11, col = 41},{<unknown>, line = 11, col = 41}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 11, col = 22},{<unknown>, line = 11, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 24},{<unknown>, line = 11, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 27},{<unknown>, line = 11, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 11, col = 29},{<unknown>, line = 11, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 11, col = 31},{<unknown>, line = 11, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 11, col = 34},{<unknown>, line = 11, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 11, col = 10},{<unknown>, line = 11, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 12, col = 6},{<unknown>, line = 12, col = 18}) [(Var (fromList []) ({<unknown>, line = 12, col = 14},{<unknown>, line = 12, col = 18}) [(VarName (fromList []) "hmin",[])],NullExpr (fromList []) ({<unknown>, line = 12, col = 18},{<unknown>, line = 12, col = 18}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})) (NullExpr (fromList []) ({<unknown>, line = 12, col = 11},{<unknown>, line = 12, col = 11})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 13, col = 6},{<unknown>, line = 13, col = 45}) [(Var (fromList []) ({<unknown>, line = 13, col = 40},{<unknown>, line = 13, col = 45}) [(VarName (fromList []) "hzero",[])],NullExpr (fromList []) ({<unknown>, line = 13, col = 45},{<unknown>, line = 13, col = 45}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 13, col = 22},{<unknown>, line = 13, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 24},{<unknown>, line = 13, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 27},{<unknown>, line = 13, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 13, col = 29},{<unknown>, line = 13, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 13, col = 31},{<unknown>, line = 13, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 13, col = 34},{<unknown>, line = 13, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 13, col = 10},{<unknown>, line = 13, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 14, col = 6},{<unknown>, line = 14, col = 18}) [(Var (fromList []) ({<unknown>, line = 14, col = 17},{<unknown>, line = 14, col = 18}) [(VarName (fromList []) "j",[])],NullExpr (fromList []) ({<unknown>, line = 14, col = 18},{<unknown>, line = 14, col = 18}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 14, col = 14},{<unknown>, line = 14, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 14, col = 14},{<unknown>, line = 14, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 15, col = 6},{<unknown>, line = 15, col = 18}) [(Var (fromList []) ({<unknown>, line = 15, col = 17},{<unknown>, line = 15, col = 18}) [(VarName (fromList []) "k",[])],NullExpr (fromList []) ({<unknown>, line = 15, col = 18},{<unknown>, line = 15, col = 18}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 15, col = 14},{<unknown>, line = 15, col = 14})) (NullExpr (fromList []) ({<unknown>, line = 15, col = 14},{<unknown>, line = 15, col = 14})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 16, col = 6},{<unknown>, line = 16, col = 41}) [(Var (fromList []) ({<unknown>, line = 16, col = 40},{<unknown>, line = 16, col = 41}) [(VarName (fromList []) "u",[])],NullExpr (fromList []) ({<unknown>, line = 16, col = 41},{<unknown>, line = 16, col = 41}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 16, col = 22},{<unknown>, line = 16, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 24},{<unknown>, line = 16, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 27},{<unknown>, line = 16, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 16, col = 29},{<unknown>, line = 16, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 16, col = 31},{<unknown>, line = 16, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 16, col = 34},{<unknown>, line = 16, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 16, col = 10},{<unknown>, line = 16, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 17, col = 6},{<unknown>, line = 17, col = 42}) [(Var (fromList []) ({<unknown>, line = 17, col = 40},{<unknown>, line = 17, col = 42}) [(VarName (fromList []) "un",[])],NullExpr (fromList []) ({<unknown>, line = 17, col = 42},{<unknown>, line = 17, col = 42}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 17, col = 22},{<unknown>, line = 17, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 24},{<unknown>, line = 17, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 27},{<unknown>, line = 17, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 17, col = 29},{<unknown>, line = 17, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 17, col = 31},{<unknown>, line = 17, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 17, col = 34},{<unknown>, line = 17, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 17, col = 10},{<unknown>, line = 17, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 18, col = 6},{<unknown>, line = 18, col = 41}) [(Var (fromList []) ({<unknown>, line = 18, col = 40},{<unknown>, line = 18, col = 41}) [(VarName (fromList []) "v",[])],NullExpr (fromList []) ({<unknown>, line = 18, col = 41},{<unknown>, line = 18, col = 41}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 18, col = 22},{<unknown>, line = 18, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 24},{<unknown>, line = 18, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 27},{<unknown>, line = 18, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 18, col = 29},{<unknown>, line = 18, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 18, col = 31},{<unknown>, line = 18, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 18, col = 34},{<unknown>, line = 18, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 18, col = 10},{<unknown>, line = 18, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 19, col = 6},{<unknown>, line = 19, col = 42}) [(Var (fromList []) ({<unknown>, line = 19, col = 40},{<unknown>, line = 19, col = 42}) [(VarName (fromList []) "vn",[])],NullExpr (fromList []) ({<unknown>, line = 19, col = 42},{<unknown>, line = 19, col = 42}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 19, col = 22},{<unknown>, line = 19, col = 23}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 28}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 24},{<unknown>, line = 19, col = 26}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 27},{<unknown>, line = 19, col = 28}) "1")),(Con (fromList []) ({<unknown>, line = 19, col = 29},{<unknown>, line = 19, col = 30}) "0",Bin (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 35}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 19, col = 31},{<unknown>, line = 19, col = 33}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 19, col = 34},{<unknown>, line = 19, col = 35}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})) (NullExpr (fromList []) ({<unknown>, line = 19, col = 10},{<unknown>, line = 19, col = 10})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 20, col = 6},{<unknown>, line = 20, col = 46}) [(Var (fromList []) ({<unknown>, line = 20, col = 43},{<unknown>, line = 20, col = 46}) [(VarName (fromList []) "wet",[])],NullExpr (fromList []) ({<unknown>, line = 20, col = 46},{<unknown>, line = 20, col = 46}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [Dimension (fromList []) [(Con (fromList []) ({<unknown>, line = 20, col = 25},{<unknown>, line = 20, col = 26}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 31}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 27},{<unknown>, line = 20, col = 29}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 30},{<unknown>, line = 20, col = 31}) "1")),(Con (fromList []) ({<unknown>, line = 20, col = 32},{<unknown>, line = 20, col = 33}) "0",Bin (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 38}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 20, col = 34},{<unknown>, line = 20, col = 36}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 20, col = 37},{<unknown>, line = 20, col = 38}) "1"))]] (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})) (NullExpr (fromList []) ({<unknown>, line = 20, col = 13},{<unknown>, line = 20, col = 13})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 21, col = 0},{<unknown>, line = 21, col = 12}) [(Var (fromList []) ({<unknown>, line = 21, col = 8},{<unknown>, line = 21, col = 12}) [(VarName (fromList []) "hmax",[])],NullExpr (fromList []) ({<unknown>, line = 21, col = 12},{<unknown>, line = 21, col = 12}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 21, col = 5},{<unknown>, line = 21, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 21, col = 5},{<unknown>, line = 21, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 22, col = 0},{<unknown>, line = 22, col = 12}) [(Var (fromList []) ({<unknown>, line = 22, col = 8},{<unknown>, line = 22, col = 12}) [(VarName (fromList []) "time",[])],NullExpr (fromList []) ({<unknown>, line = 22, col = 12},{<unknown>, line = 22, col = 12}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 22, col = 5},{<unknown>, line = 22, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 23, col = 0},{<unknown>, line = 23, col = 13}) [(Var (fromList []) ({<unknown>, line = 23, col = 8},{<unknown>, line = 23, col = 13}) [(VarName (fromList []) "dtmax",[])],NullExpr (fromList []) ({<unknown>, line = 23, col = 13},{<unknown>, line = 23, col = 13}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 23, col = 5},{<unknown>, line = 23, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 24, col = 0},{<unknown>, line = 24, col = 9}) [(Var (fromList []) ({<unknown>, line = 24, col = 8},{<unknown>, line = 24, col = 9}) [(VarName (fromList []) "c",[])],NullExpr (fromList []) ({<unknown>, line = 24, col = 9},{<unknown>, line = 24, col = 9}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 24, col = 5},{<unknown>, line = 24, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 25, col = 0},{<unknown>, line = 25, col = 14}) [(Var (fromList []) ({<unknown>, line = 25, col = 8},{<unknown>, line = 25, col = 14}) [(VarName (fromList []) "lambda",[])],NullExpr (fromList []) ({<unknown>, line = 25, col = 14},{<unknown>, line = 25, col = 14}),Nothing)] (BaseType (fromList []) (Real (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})) (NullExpr (fromList []) ({<unknown>, line = 25, col = 5},{<unknown>, line = 25, col = 5})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 26, col = 0},{<unknown>, line = 26, col = 12}) [(Var (fromList []) ({<unknown>, line = 26, col = 11},{<unknown>, line = 26, col = 12}) [(VarName (fromList []) "n",[])],NullExpr (fromList []) ({<unknown>, line = 26, col = 12},{<unknown>, line = 26, col = 12}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 26, col = 8},{<unknown>, line = 26, col = 8})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 27, col = 0},{<unknown>, line = 27, col = 15}) [(Var (fromList []) ({<unknown>, line = 27, col = 11},{<unknown>, line = 27, col = 15}) [(VarName (fromList []) "ntot",[])],NullExpr (fromList []) ({<unknown>, line = 27, col = 15},{<unknown>, line = 27, col = 15}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 27, col = 8},{<unknown>, line = 27, col = 8})))) (DSeq (fromList []) (Decl (fromList []) ({<unknown>, line = 28, col = 0},{<unknown>, line = 28, col = 15}) [(Var (fromList []) ({<unknown>, line = 28, col = 11},{<unknown>, line = 28, col = 15}) [(VarName (fromList []) "nout",[])],NullExpr (fromList []) ({<unknown>, line = 28, col = 15},{<unknown>, line = 28, col = 15}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 28, col = 8},{<unknown>, line = 28, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 28, col = 8},{<unknown>, line = 28, col = 8})))) (Decl (fromList []) ({<unknown>, line = 29, col = 0},{<unknown>, line = 29, col = 16}) [(Var (fromList []) ({<unknown>, line = 29, col = 11},{<unknown>, line = 29, col = 16}) [(VarName (fromList []) "dummy",[])],NullExpr (fromList []) ({<unknown>, line = 29, col = 16},{<unknown>, line = 29, col = 16}),Nothing)] (BaseType (fromList []) (Integer (fromList [])) [] (NullExpr (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 8})) (NullExpr (fromList []) ({<unknown>, line = 29, col = 8},{<unknown>, line = 29, col = 8}))))))))))))))))))))))))))))))) (FSeq (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 30, col = 12}) (Var (fromList []) ({<unknown>, line = 30, col = 0},{<unknown>, line = 30, col = 5}) [(VarName (fromList []) "ntot",[])]) (Con (fromList []) ({<unknown>, line = 30, col = 7},{<unknown>, line = 30, col = 12}) "10000")) (FSeq (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 31, col = 10}) (Var (fromList []) ({<unknown>, line = 31, col = 0},{<unknown>, line = 31, col = 4}) [(VarName (fromList []) "eps",[])]) (Con (fromList []) ({<unknown>, line = 31, col = 6},{<unknown>, line = 31, col = 10}) "0.05")) (FSeq (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 80, col = 51}) (Call (fromList []) ({<unknown>, line = 32, col = 0},{<unknown>, line = 32, col = 61}) (Var (fromList []) ({<unknown>, line = 32, col = 5},{<unknown>, line = 32, col = 9}) [(VarName (fromList []) "init",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 60}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 57}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 55}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 52}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 50}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 46}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 44}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 39}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 35}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 29}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 27}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 25}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 23}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 20}) (ESeq (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 17}) (Var (fromList []) ({<unknown>, line = 32, col = 10},{<unknown>, line = 32, col = 14}) [(VarName (fromList []) "hmin",[])]) (Var (fromList []) ({<unknown>, line = 32, col = 15},{<unknown>, line = 32, col = 17}) [(VarName (fromList []) "dx",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 18},{<unknown>, line = 32, col = 20}) [(VarName (fromList []) "dy",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 21},{<unknown>, line = 32, col = 23}) [(VarName (fromList []) "dt",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 24},{<unknown>, line = 32, col = 25}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 26},{<unknown>, line = 32, col = 27}) [(VarName (fromList []) "j",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 28},{<unknown>, line = 32, col = 29}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 30},{<unknown>, line = 32, col = 35}) [(VarName (fromList []) "hzero",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 36},{<unknown>, line = 32, col = 39}) [(VarName (fromList []) "eta",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 40},{<unknown>, line = 32, col = 44}) [(VarName (fromList []) "etan",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 45},{<unknown>, line = 32, col = 46}) [(VarName (fromList []) "h",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 47},{<unknown>, line = 32, col = 50}) [(VarName (fromList []) "wet",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 51},{<unknown>, line = 32, col = 52}) [(VarName (fromList []) "u",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 53},{<unknown>, line = 32, col = 55}) [(VarName (fromList []) "un",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 56},{<unknown>, line = 32, col = 57}) [(VarName (fromList []) "v",[])])) (Var (fromList []) ({<unknown>, line = 32, col = 58},{<unknown>, line = 32, col = 60}) [(VarName (fromList []) "vn",[])])))) (FSeq (fromList []) ({<unknown>, line = 33, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 33, col = 0},{<unknown>, line = 33, col = 43}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 33, col = 5},{<unknown>, line = 33, col = 7}) "90"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 33, col = 14},{<unknown>, line = 33, col = 25}) "'debug.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 33, col = 31},{<unknown>, line = 33, col = 42}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 34, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 34, col = 0},{<unknown>, line = 34, col = 42}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 34, col = 5},{<unknown>, line = 34, col = 7}) "10"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 34, col = 14},{<unknown>, line = 34, col = 24}) "'eta0.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 34, col = 30},{<unknown>, line = 34, col = 41}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 35, col = 2},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 35, col = 2},{<unknown>, line = 37, col = 8}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 35, col = 9},{<unknown>, line = 35, col = 10}) "0") (Bin (fromList []) ({<unknown>, line = 35, col = 11},{<unknown>, line = 35, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 35, col = 11},{<unknown>, line = 35, col = 13}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 35, col = 14},{<unknown>, line = 35, col = 15}) "1")) (Con (fromList []) ({<unknown>, line = 35, col = 15},{<unknown>, line = 35, col = 15}) "1") (FSeq (fromList []) ({<unknown>, line = 36, col = 45},{<unknown>, line = 37, col = 8}) (Write (fromList []) ({<unknown>, line = 36, col = 45},{<unknown>, line = 36, col = 45}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 36, col = 12},{<unknown>, line = 36, col = 12}) "10"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 36, col = 27},{<unknown>, line = 36, col = 44}) (ESeq (fromList []) ({<unknown>, line = 36, col = 27},{<unknown>, line = 36, col = 39}) (Var (fromList []) ({<unknown>, line = 36, col = 27},{<unknown>, line = 36, col = 35}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 36, col = 31},{<unknown>, line = 36, col = 32}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 36, col = 33},{<unknown>, line = 36, col = 34}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 36, col = 36},{<unknown>, line = 36, col = 39}) "k" (Con (fromList []) ({<unknown>, line = 36, col = 38},{<unknown>, line = 36, col = 39}) "0"))) (Bin (fromList []) ({<unknown>, line = 36, col = 40},{<unknown>, line = 36, col = 44}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 36, col = 40},{<unknown>, line = 36, col = 42}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 36, col = 43},{<unknown>, line = 36, col = 44}) "1"))]) (NullStmt (fromList []) ({<unknown>, line = 37, col = 8},{<unknown>, line = 37, col = 8})))) (FSeq (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 80, col = 51}) (Close (fromList []) ({<unknown>, line = 38, col = 0},{<unknown>, line = 38, col = 9}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 38, col = 6},{<unknown>, line = 38, col = 8}) "10")]) (FSeq (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 39, col = 0},{<unknown>, line = 39, col = 40}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 39, col = 5},{<unknown>, line = 39, col = 7}) "10"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 39, col = 14},{<unknown>, line = 39, col = 22}) "'h0.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 39, col = 28},{<unknown>, line = 39, col = 39}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 40, col = 2},{<unknown>, line = 42, col = 8}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 40, col = 9},{<unknown>, line = 40, col = 10}) "0") (Bin (fromList []) ({<unknown>, line = 40, col = 11},{<unknown>, line = 40, col = 15}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 40, col = 11},{<unknown>, line = 40, col = 13}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 40, col = 14},{<unknown>, line = 40, col = 15}) "1")) (Con (fromList []) ({<unknown>, line = 40, col = 15},{<unknown>, line = 40, col = 15}) "1") (FSeq (fromList []) ({<unknown>, line = 41, col = 47},{<unknown>, line = 42, col = 8}) (Write (fromList []) ({<unknown>, line = 41, col = 47},{<unknown>, line = 41, col = 47}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 41, col = 12},{<unknown>, line = 41, col = 12}) "10"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 46}) (ESeq (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 41}) (Var (fromList []) ({<unknown>, line = 41, col = 27},{<unknown>, line = 41, col = 37}) [(VarName (fromList []) "hzero",[Var (fromList []) ({<unknown>, line = 41, col = 33},{<unknown>, line = 41, col = 34}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 41, col = 35},{<unknown>, line = 41, col = 36}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 41, col = 38},{<unknown>, line = 41, col = 41}) "k" (Con (fromList []) ({<unknown>, line = 41, col = 40},{<unknown>, line = 41, col = 41}) "0"))) (Bin (fromList []) ({<unknown>, line = 41, col = 42},{<unknown>, line = 41, col = 46}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 41, col = 42},{<unknown>, line = 41, col = 44}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 41, col = 45},{<unknown>, line = 41, col = 46}) "1"))]) (NullStmt (fromList []) ({<unknown>, line = 42, col = 8},{<unknown>, line = 42, col = 8})))) (FSeq (fromList []) ({<unknown>, line = 43, col = 0},{<unknown>, line = 80, col = 51}) (Close (fromList []) ({<unknown>, line = 43, col = 0},{<unknown>, line = 43, col = 9}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 43, col = 6},{<unknown>, line = 43, col = 8}) "10")]) (FSeq (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 44, col = 9}) (Var (fromList []) ({<unknown>, line = 44, col = 0},{<unknown>, line = 44, col = 5}) [(VarName (fromList []) "hmax",[])]) (Con (fromList []) ({<unknown>, line = 44, col = 7},{<unknown>, line = 44, col = 9}) "0.")) (FSeq (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 45, col = 0},{<unknown>, line = 49, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 45, col = 7},{<unknown>, line = 45, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 45, col = 9},{<unknown>, line = 45, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 45, col = 11},{<unknown>, line = 45, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 49, col = 6}) (For (fromList []) ({<unknown>, line = 46, col = 0},{<unknown>, line = 48, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 46, col = 7},{<unknown>, line = 46, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 46, col = 9},{<unknown>, line = 46, col = 11}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 46, col = 11},{<unknown>, line = 46, col = 11}) "1") (FSeq (fromList []) ({<unknown>, line = 47, col = 2},{<unknown>, line = 48, col = 6}) (Assg (fromList []) ({<unknown>, line = 47, col = 2},{<unknown>, line = 47, col = 25}) (Var (fromList []) ({<unknown>, line = 47, col = 2},{<unknown>, line = 47, col = 7}) [(VarName (fromList []) "hmax",[])]) (Var (fromList []) ({<unknown>, line = 47, col = 9},{<unknown>, line = 47, col = 25}) [(VarName (fromList []) "max",[Var (fromList []) ({<unknown>, line = 47, col = 13},{<unknown>, line = 47, col = 17}) [(VarName (fromList []) "hmax",[])],Var (fromList []) ({<unknown>, line = 47, col = 18},{<unknown>, line = 47, col = 24}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 47, col = 20},{<unknown>, line = 47, col = 21}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 47, col = 22},{<unknown>, line = 47, col = 23}) [(VarName (fromList []) "k",[])]])]])])) (NullStmt (fromList []) ({<unknown>, line = 48, col = 6},{<unknown>, line = 48, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 49, col = 6},{<unknown>, line = 49, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 50, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 50, col = 0},{<unknown>, line = 50, col = 9}) (Var (fromList []) ({<unknown>, line = 50, col = 0},{<unknown>, line = 50, col = 6}) [(VarName (fromList []) "dummy",[])]) (Con (fromList []) ({<unknown>, line = 50, col = 8},{<unknown>, line = 50, col = 9}) "0")) (FSeq (fromList []) ({<unknown>, line = 51, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 51, col = 0},{<unknown>, line = 51, col = 18}) (Var (fromList []) ({<unknown>, line = 51, col = 0},{<unknown>, line = 51, col = 2}) [(VarName (fromList []) "c",[])]) (Sqrt (fromList []) ({<unknown>, line = 51, col = 4},{<unknown>, line = 51, col = 18}) (Bin (fromList []) ({<unknown>, line = 51, col = 9},{<unknown>, line = 51, col = 17}) (Mul (fromList [])) (Bin (fromList []) ({<unknown>, line = 51, col = 9},{<unknown>, line = 51, col = 12}) (Mul (fromList [])) (Con (fromList []) ({<unknown>, line = 51, col = 9},{<unknown>, line = 51, col = 10}) "2") (Var (fromList []) ({<unknown>, line = 51, col = 11},{<unknown>, line = 51, col = 12}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 51, col = 13},{<unknown>, line = 51, col = 17}) [(VarName (fromList []) "hmax",[])])))) (FSeq (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 80, col = 51}) (Write (fromList []) ({<unknown>, line = 52, col = 18},{<unknown>, line = 52, col = 18}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 52, col = 7},{<unknown>, line = 52, col = 7}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 52, col = 9},{<unknown>, line = 52, col = 9}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 52, col = 10},{<unknown>, line = 52, col = 16}) "\"c = \"",Var (fromList []) ({<unknown>, line = 52, col = 17},{<unknown>, line = 52, col = 18}) [(VarName (fromList []) "c",[])]]) (FSeq (fromList []) ({<unknown>, line = 53, col = 0},{<unknown>, line = 80, col = 51}) (Assg (fromList []) ({<unknown>, line = 53, col = 0},{<unknown>, line = 53, col = 35}) (Var (fromList []) ({<unknown>, line = 53, col = 0},{<unknown>, line = 53, col = 7}) [(VarName (fromList []) "lambda",[])]) (Bin (fromList []) ({<unknown>, line = 53, col = 9},{<unknown>, line = 53, col = 35}) (Div (fromList [])) (Bin (fromList []) ({<unknown>, line = 53, col = 9},{<unknown>, line = 53, col = 24}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 53, col = 9},{<unknown>, line = 53, col = 11}) [(VarName (fromList []) "dt",[])]) (Sqrt (fromList []) ({<unknown>, line = 53, col = 12},{<unknown>, line = 53, col = 24}) (Bin (fromList []) ({<unknown>, line = 53, col = 17},{<unknown>, line = 53, col = 23}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 53, col = 17},{<unknown>, line = 53, col = 18}) [(VarName (fromList []) "g",[])]) (Var (fromList []) ({<unknown>, line = 53, col = 19},{<unknown>, line = 53, col = 23}) [(VarName (fromList []) "hmax",[])])))) (Var (fromList []) ({<unknown>, line = 53, col = 25},{<unknown>, line = 53, col = 35}) [(VarName (fromList []) "min",[Var (fromList []) ({<unknown>, line = 53, col = 29},{<unknown>, line = 53, col = 31}) [(VarName (fromList []) "dx",[])],Var (fromList []) ({<unknown>, line = 53, col = 32},{<unknown>, line = 53, col = 34}) [(VarName (fromList []) "dy",[])]])]))) (FSeq (fromList []) ({<unknown>, line = 54, col = 28},{<unknown>, line = 80, col = 51}) (Write (fromList []) ({<unknown>, line = 54, col = 28},{<unknown>, line = 54, col = 28}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 54, col = 7},{<unknown>, line = 54, col = 7}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 54, col = 9},{<unknown>, line = 54, col = 9}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 54, col = 10},{<unknown>, line = 54, col = 21}) "\"lambda = \"",Var (fromList []) ({<unknown>, line = 54, col = 22},{<unknown>, line = 54, col = 28}) [(VarName (fromList []) "lambda",[])]]) (FSeq (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 80, col = 51}) (If (fromList []) ({<unknown>, line = 55, col = 0},{<unknown>, line = 58, col = 6}) (Bin (fromList []) ({<unknown>, line = 55, col = 3},{<unknown>, line = 55, col = 13}) (RelGT (fromList [])) (Var (fromList []) ({<unknown>, line = 55, col = 3},{<unknown>, line = 55, col = 10}) [(VarName (fromList []) "lambda",[])]) (Con (fromList []) ({<unknown>, line = 55, col = 12},{<unknown>, line = 55, col = 13}) "1")) (FSeq (fromList []) ({<unknown>, line = 56, col = 51},{<unknown>, line = 57, col = 6}) (Write (fromList []) ({<unknown>, line = 56, col = 51},{<unknown>, line = 56, col = 51}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 56, col = 9},{<unknown>, line = 56, col = 9}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 56, col = 11},{<unknown>, line = 56, col = 11}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 56, col = 13},{<unknown>, line = 56, col = 51}) "\"This will not work. Do you know why?\""]) (Stop (fromList []) ({<unknown>, line = 57, col = 2},{<unknown>, line = 57, col = 6}) (NullExpr (fromList []) ({<unknown>, line = 57, col = 2},{<unknown>, line = 57, col = 6})))) [] Nothing) (FSeq (fromList []) ({<unknown>, line = 59, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 59, col = 0},{<unknown>, line = 59, col = 41}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 59, col = 5},{<unknown>, line = 59, col = 7}) "10"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 59, col = 14},{<unknown>, line = 59, col = 23}) "'eta.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 59, col = 29},{<unknown>, line = 59, col = 40}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 60, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 60, col = 0},{<unknown>, line = 60, col = 39}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 60, col = 5},{<unknown>, line = 60, col = 7}) "20"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 60, col = 14},{<unknown>, line = 60, col = 21}) "'h.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 60, col = 27},{<unknown>, line = 60, col = 38}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 61, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 61, col = 0},{<unknown>, line = 61, col = 39}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 61, col = 5},{<unknown>, line = 61, col = 7}) "30"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 61, col = 14},{<unknown>, line = 61, col = 21}) "'u.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 61, col = 27},{<unknown>, line = 61, col = 38}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 62, col = 0},{<unknown>, line = 80, col = 51}) (Open (fromList []) ({<unknown>, line = 62, col = 0},{<unknown>, line = 62, col = 39}) [NoSpec (fromList []) (Con (fromList []) ({<unknown>, line = 62, col = 5},{<unknown>, line = 62, col = 7}) "40"),File (fromList []) (ConS (fromList []) ({<unknown>, line = 62, col = 14},{<unknown>, line = 62, col = 21}) "'v.dat'"),Form (fromList []) (ConS (fromList []) ({<unknown>, line = 62, col = 27},{<unknown>, line = 62, col = 38}) "'formatted'")]) (FSeq (fromList []) ({<unknown>, line = 63, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 63, col = 0},{<unknown>, line = 67, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 63, col = 7},{<unknown>, line = 63, col = 9}) "26") (Con (fromList []) ({<unknown>, line = 63, col = 10},{<unknown>, line = 63, col = 12}) "26") (Con (fromList []) ({<unknown>, line = 63, col = 12},{<unknown>, line = 63, col = 12}) "1") (FSeq (fromList []) ({<unknown>, line = 64, col = 0},{<unknown>, line = 67, col = 6}) (For (fromList []) ({<unknown>, line = 64, col = 0},{<unknown>, line = 66, col = 6}) (VarName (fromList []) "k") (Con (fromList []) ({<unknown>, line = 64, col = 7},{<unknown>, line = 64, col = 9}) "26") (Con (fromList []) ({<unknown>, line = 64, col = 10},{<unknown>, line = 64, col = 12}) "26") (Con (fromList []) ({<unknown>, line = 64, col = 12},{<unknown>, line = 64, col = 12}) "1") (FSeq (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 66, col = 6}) (Assg (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 65, col = 14}) (Var (fromList []) ({<unknown>, line = 65, col = 0},{<unknown>, line = 65, col = 14}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 65, col = 4},{<unknown>, line = 65, col = 5}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 65, col = 6},{<unknown>, line = 65, col = 7}) [(VarName (fromList []) "k",[])]])]) (Con (fromList []) ({<unknown>, line = 65, col = 11},{<unknown>, line = 65, col = 14}) "1.0")) (NullStmt (fromList []) ({<unknown>, line = 66, col = 6},{<unknown>, line = 66, col = 6})))) (NullStmt (fromList []) ({<unknown>, line = 67, col = 6},{<unknown>, line = 67, col = 6})))) (FSeq (fromList []) ({<unknown>, line = 68, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 68, col = 0},{<unknown>, line = 73, col = 6}) (VarName (fromList []) "n") (Con (fromList []) ({<unknown>, line = 68, col = 7},{<unknown>, line = 68, col = 8}) "1") (Var (fromList []) ({<unknown>, line = 68, col = 9},{<unknown>, line = 68, col = 13}) [(VarName (fromList []) "ntot",[])]) (Con (fromList []) ({<unknown>, line = 68, col = 13},{<unknown>, line = 68, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 69, col = 0},{<unknown>, line = 73, col = 6}) (Assg (fromList []) ({<unknown>, line = 69, col = 0},{<unknown>, line = 69, col = 17}) (Var (fromList []) ({<unknown>, line = 69, col = 0},{<unknown>, line = 69, col = 5}) [(VarName (fromList []) "time",[])]) (Bin (fromList []) ({<unknown>, line = 69, col = 7},{<unknown>, line = 69, col = 17}) (Mul (fromList [])) (Var (fromList []) ({<unknown>, line = 69, col = 7},{<unknown>, line = 69, col = 14}) [(VarName (fromList []) "REAL",[Var (fromList []) ({<unknown>, line = 69, col = 12},{<unknown>, line = 69, col = 13}) [(VarName (fromList []) "n",[])]])]) (Var (fromList []) ({<unknown>, line = 69, col = 15},{<unknown>, line = 69, col = 17}) [(VarName (fromList []) "dt",[])]))) (FSeq (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 73, col = 6}) (Call (fromList []) ({<unknown>, line = 70, col = 2},{<unknown>, line = 70, col = 51}) (Var (fromList []) ({<unknown>, line = 70, col = 7},{<unknown>, line = 70, col = 10}) [(VarName (fromList []) "dyn",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 50}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 45}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 43}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 40}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 38}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 34}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 32}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 29}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 26}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 23}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 19}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 17}) (ESeq (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 14}) (Var (fromList []) ({<unknown>, line = 70, col = 11},{<unknown>, line = 70, col = 12}) [(VarName (fromList []) "j",[])]) (Var (fromList []) ({<unknown>, line = 70, col = 13},{<unknown>, line = 70, col = 14}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 15},{<unknown>, line = 70, col = 17}) [(VarName (fromList []) "dx",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 18},{<unknown>, line = 70, col = 19}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 20},{<unknown>, line = 70, col = 23}) [(VarName (fromList []) "eta",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 24},{<unknown>, line = 70, col = 26}) [(VarName (fromList []) "dt",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 27},{<unknown>, line = 70, col = 29}) [(VarName (fromList []) "dy",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 30},{<unknown>, line = 70, col = 32}) [(VarName (fromList []) "un",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 33},{<unknown>, line = 70, col = 34}) [(VarName (fromList []) "u",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 35},{<unknown>, line = 70, col = 38}) [(VarName (fromList []) "wet",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 39},{<unknown>, line = 70, col = 40}) [(VarName (fromList []) "v",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 41},{<unknown>, line = 70, col = 43}) [(VarName (fromList []) "vn",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 44},{<unknown>, line = 70, col = 45}) [(VarName (fromList []) "h",[])])) (Var (fromList []) ({<unknown>, line = 70, col = 46},{<unknown>, line = 70, col = 50}) [(VarName (fromList []) "etan",[])])))) (FSeq (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 73, col = 6}) (Call (fromList []) ({<unknown>, line = 71, col = 2},{<unknown>, line = 71, col = 36}) (Var (fromList []) ({<unknown>, line = 71, col = 7},{<unknown>, line = 71, col = 14}) [(VarName (fromList []) "shapiro",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 35}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 31}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 27}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 22}) (ESeq (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 18}) (Var (fromList []) ({<unknown>, line = 71, col = 15},{<unknown>, line = 71, col = 16}) [(VarName (fromList []) "j",[])]) (Var (fromList []) ({<unknown>, line = 71, col = 17},{<unknown>, line = 71, col = 18}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 19},{<unknown>, line = 71, col = 22}) [(VarName (fromList []) "wet",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 23},{<unknown>, line = 71, col = 27}) [(VarName (fromList []) "etan",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 28},{<unknown>, line = 71, col = 31}) [(VarName (fromList []) "eps",[])])) (Var (fromList []) ({<unknown>, line = 71, col = 32},{<unknown>, line = 71, col = 35}) [(VarName (fromList []) "eta",[])])))) (FSeq (fromList []) ({<unknown>, line = 72, col = 6},{<unknown>, line = 73, col = 6}) (Call (fromList []) ({<unknown>, line = 72, col = 6},{<unknown>, line = 72, col = 75}) (Var (fromList []) ({<unknown>, line = 72, col = 11},{<unknown>, line = 72, col = 19}) [(VarName (fromList []) "vernieuw",[])]) (ArgList (fromList []) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 74}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 70}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 67}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 65}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 62}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 60}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 58}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 56}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 50}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 45}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 43}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 41}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 36}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 32}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 28}) (ESeq (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 25}) (Var (fromList []) ({<unknown>, line = 72, col = 20},{<unknown>, line = 72, col = 22}) [(VarName (fromList []) "dt",[])]) (Var (fromList []) ({<unknown>, line = 72, col = 23},{<unknown>, line = 72, col = 25}) [(VarName (fromList []) "dx",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 26},{<unknown>, line = 72, col = 28}) [(VarName (fromList []) "dy",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 29},{<unknown>, line = 72, col = 32}) [(VarName (fromList []) "eps",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 33},{<unknown>, line = 72, col = 36}) [(VarName (fromList []) "eta",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 37},{<unknown>, line = 72, col = 41}) [(VarName (fromList []) "etan",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 42},{<unknown>, line = 72, col = 43}) [(VarName (fromList []) "g",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 44},{<unknown>, line = 72, col = 45}) [(VarName (fromList []) "h",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 46},{<unknown>, line = 72, col = 50}) [(VarName (fromList []) "hmin",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 51},{<unknown>, line = 72, col = 56}) [(VarName (fromList []) "hzero",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 57},{<unknown>, line = 72, col = 58}) [(VarName (fromList []) "j",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 59},{<unknown>, line = 72, col = 60}) [(VarName (fromList []) "k",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 61},{<unknown>, line = 72, col = 62}) [(VarName (fromList []) "u",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 63},{<unknown>, line = 72, col = 65}) [(VarName (fromList []) "un",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 66},{<unknown>, line = 72, col = 67}) [(VarName (fromList []) "v",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 68},{<unknown>, line = 72, col = 70}) [(VarName (fromList []) "vn",[])])) (Var (fromList []) ({<unknown>, line = 72, col = 71},{<unknown>, line = 72, col = 74}) [(VarName (fromList []) "wet",[])])))) (NullStmt (fromList []) ({<unknown>, line = 73, col = 6},{<unknown>, line = 73, col = 6}))))))) (FSeq (fromList []) ({<unknown>, line = 74, col = 0},{<unknown>, line = 80, col = 51}) (For (fromList []) ({<unknown>, line = 74, col = 0},{<unknown>, line = 79, col = 6}) (VarName (fromList []) "j") (Con (fromList []) ({<unknown>, line = 74, col = 7},{<unknown>, line = 74, col = 8}) "0") (Bin (fromList []) ({<unknown>, line = 74, col = 9},{<unknown>, line = 74, col = 13}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 74, col = 9},{<unknown>, line = 74, col = 11}) [(VarName (fromList []) "ny",[])]) (Con (fromList []) ({<unknown>, line = 74, col = 12},{<unknown>, line = 74, col = 13}) "1")) (Con (fromList []) ({<unknown>, line = 74, col = 13},{<unknown>, line = 74, col = 13}) "1") (FSeq (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 75, col = 43},{<unknown>, line = 75, col = 43}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 75, col = 10},{<unknown>, line = 75, col = 10}) "10"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 75, col = 25},{<unknown>, line = 75, col = 42}) (ESeq (fromList []) ({<unknown>, line = 75, col = 25},{<unknown>, line = 75, col = 37}) (Var (fromList []) ({<unknown>, line = 75, col = 25},{<unknown>, line = 75, col = 33}) [(VarName (fromList []) "eta",[Var (fromList []) ({<unknown>, line = 75, col = 29},{<unknown>, line = 75, col = 30}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 75, col = 31},{<unknown>, line = 75, col = 32}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 75, col = 34},{<unknown>, line = 75, col = 37}) "k" (Con (fromList []) ({<unknown>, line = 75, col = 36},{<unknown>, line = 75, col = 37}) "0"))) (Bin (fromList []) ({<unknown>, line = 75, col = 38},{<unknown>, line = 75, col = 42}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 75, col = 38},{<unknown>, line = 75, col = 40}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 75, col = 41},{<unknown>, line = 75, col = 42}) "1"))]) (FSeq (fromList []) ({<unknown>, line = 76, col = 42},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 76, col = 42},{<unknown>, line = 76, col = 42}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 76, col = 10},{<unknown>, line = 76, col = 10}) "20"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 76, col = 25},{<unknown>, line = 76, col = 41}) (ESeq (fromList []) ({<unknown>, line = 76, col = 25},{<unknown>, line = 76, col = 36}) (Var (fromList []) ({<unknown>, line = 76, col = 25},{<unknown>, line = 76, col = 32}) [(VarName (fromList []) "h",[Var (fromList []) ({<unknown>, line = 76, col = 27},{<unknown>, line = 76, col = 28}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 76, col = 29},{<unknown>, line = 76, col = 30}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 76, col = 33},{<unknown>, line = 76, col = 36}) "k" (Con (fromList []) ({<unknown>, line = 76, col = 35},{<unknown>, line = 76, col = 36}) "0"))) (Bin (fromList []) ({<unknown>, line = 76, col = 37},{<unknown>, line = 76, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 76, col = 37},{<unknown>, line = 76, col = 39}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 76, col = 40},{<unknown>, line = 76, col = 41}) "1"))]) (FSeq (fromList []) ({<unknown>, line = 77, col = 42},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 77, col = 42},{<unknown>, line = 77, col = 42}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 77, col = 10},{<unknown>, line = 77, col = 10}) "30"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 77, col = 25},{<unknown>, line = 77, col = 41}) (ESeq (fromList []) ({<unknown>, line = 77, col = 25},{<unknown>, line = 77, col = 36}) (Var (fromList []) ({<unknown>, line = 77, col = 25},{<unknown>, line = 77, col = 32}) [(VarName (fromList []) "u",[Var (fromList []) ({<unknown>, line = 77, col = 27},{<unknown>, line = 77, col = 28}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 77, col = 29},{<unknown>, line = 77, col = 30}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 77, col = 33},{<unknown>, line = 77, col = 36}) "k" (Con (fromList []) ({<unknown>, line = 77, col = 35},{<unknown>, line = 77, col = 36}) "0"))) (Bin (fromList []) ({<unknown>, line = 77, col = 37},{<unknown>, line = 77, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 77, col = 37},{<unknown>, line = 77, col = 39}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 77, col = 40},{<unknown>, line = 77, col = 41}) "1"))]) (FSeq (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 79, col = 6}) (Write (fromList []) ({<unknown>, line = 78, col = 42},{<unknown>, line = 78, col = 42}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 78, col = 10},{<unknown>, line = 78, col = 10}) "40"),StringLit (fromList []) "'(101F12.6)'"] [ESeq (fromList []) ({<unknown>, line = 78, col = 25},{<unknown>, line = 78, col = 41}) (ESeq (fromList []) ({<unknown>, line = 78, col = 25},{<unknown>, line = 78, col = 36}) (Var (fromList []) ({<unknown>, line = 78, col = 25},{<unknown>, line = 78, col = 32}) [(VarName (fromList []) "v",[Var (fromList []) ({<unknown>, line = 78, col = 27},{<unknown>, line = 78, col = 28}) [(VarName (fromList []) "j",[])],Var (fromList []) ({<unknown>, line = 78, col = 29},{<unknown>, line = 78, col = 30}) [(VarName (fromList []) "k",[])]])]) (AssgExpr (fromList []) ({<unknown>, line = 78, col = 33},{<unknown>, line = 78, col = 36}) "k" (Con (fromList []) ({<unknown>, line = 78, col = 35},{<unknown>, line = 78, col = 36}) "0"))) (Bin (fromList []) ({<unknown>, line = 78, col = 37},{<unknown>, line = 78, col = 41}) (Plus (fromList [])) (Var (fromList []) ({<unknown>, line = 78, col = 37},{<unknown>, line = 78, col = 39}) [(VarName (fromList []) "nx",[])]) (Con (fromList []) ({<unknown>, line = 78, col = 40},{<unknown>, line = 78, col = 41}) "1"))]) (NullStmt (fromList []) ({<unknown>, line = 79, col = 6},{<unknown>, line = 79, col = 6}))))))) (Write (fromList []) ({<unknown>, line = 80, col = 51},{<unknown>, line = 80, col = 51}) [Number (fromList []) (Con (fromList []) ({<unknown>, line = 80, col = 7},{<unknown>, line = 80, col = 7}) "6"),NoSpec (fromList []) (Var (fromList []) ({<unknown>, line = 80, col = 9},{<unknown>, line = 80, col = 9}) [(VarName (fromList []) "*",[])])] [ConS (fromList []) ({<unknown>, line = 80, col = 10},{<unknown>, line = 80, col = 34}) "\"Data output at time = \"",Bin (fromList []) ({<unknown>, line = 80, col = 35},{<unknown>, line = 80, col = 44}) (Div (fromList [])) (Var (fromList []) ({<unknown>, line = 80, col = 35},{<unknown>, line = 80, col = 39}) [(VarName (fromList []) "time",[])]) (Con (fromList []) ({<unknown>, line = 80, col = 40},{<unknown>, line = 80, col = 44}) "60.0"),ConS (fromList []) ({<unknown>, line = 80, col = 45},{<unknown>, line = 80, col = 51}) "\" min\""]))))))))))))))))))))))))))) []]
["j","j","j","k","j","k","n","j"]
Program lines:
	      program wave2d
	integer(4), parameter :: nx=500
	integer(4), parameter :: ny=500
	      real :: dt
	      real :: dx
	      real :: dy
	      real :: eps
	      real, dimension(0:ny+1,0:nx+1) :: eta
	      real, dimension(0:ny+1,0:nx+1) :: etan
	      real :: g
	      real, dimension(0:ny+1,0:nx+1) :: h
	      real :: hmin
	      real, dimension(0:ny+1,0:nx+1) :: hzero
	      integer :: j
	      integer :: k
	      real, dimension(0:ny+1,0:nx+1) :: u
	      real, dimension(0:ny+1,0:nx+1) :: un
	      real, dimension(0:ny+1,0:nx+1) :: v
	      real, dimension(0:ny+1,0:nx+1) :: vn
	      integer, dimension(0:ny+1,0:nx+1) :: wet
	real :: hmax
	real :: time
	real :: dtmax
	real :: c
	real :: lambda
	integer :: n
	integer :: ntot
	integer :: nout
	integer :: dummy
	ntot = 10000
	eps = 0.05
	call init(hmin,dx,dy,dt,g,j,k,hzero,eta,etan,h,wet,u,un,v,vn)
	open(90,file ='debug.dat',form='formatted')
	open(10,file ='eta0.dat',form='formatted')
	  do j = 0,ny+1
	    write(10,'(101F12.6)')(eta(j,k),k=0,nx+1)
	  end do
	close(10)
	open(10,file ='h0.dat',form='formatted')
	  do j = 0,ny+1
	    write(10,'(101F12.6)')(hzero(j,k),k=0,nx+1)
	  end do
	close(10)
	hmax = 0.
	do j = 1,ny
	do k = 1,nx
	  hmax = max(hmax,h(j,k))
	end do
	end do
	dummy = 0
	c = sqrt(2*g*hmax)
	write(6,*)"c = ",c
	lambda = dt*sqrt(g*hmax)/min(dx,dy)
	write(6,*)"lambda = ",lambda
	if(lambda > 1)then
	  write(6,*) "This will not work. Do you know why?"
	  stop
	end if
	open(10,file ='eta.dat',form='formatted')
	open(20,file ='h.dat',form='formatted')
	open(30,file ='u.dat',form='formatted')
	open(40,file ='v.dat',form='formatted')
	do j = 26,26
	do k = 26,26
	eta(j,k) = 1.0
	end do
	end do
	do n = 1,ntot
	time = real(n)*dt
	  call dyn(j,k,dx,g,eta,dt,dy,un,u,wet,v,vn,h,etan)
	  call shapiro(j,k,wet,etan,eps,eta)
	      call vernieuw(dt,dx,dy,eps,eta,etan,g,h,hmin,hzero,j,k,u,un,v,vn,wet)
	end do
	do j = 0,ny+1
	  write(10,'(101F12.6)')(eta(j,k),k=0,nx+1)
	  write(20,'(101F12.6)')(h(j,k) ,k=0,nx+1)
	  write(30,'(101F12.6)')(u(j,k) ,k=0,nx+1)
	  write(40,'(101F12.6)')(v(j,k) ,k=0,nx+1)
	end do
	write(6,*)"Data output at time = ",time/60.0," min"
	end program wave2d
Code stash name: Shallow-Water-2D/main.f95
program wave2d
()      integer(4), parameter :: nx = 500 
      integer(4), parameter :: ny = 500 
      real :: dt
      real :: dx
      real :: dy
      real :: eps
      real, dimension(0:ny+1,0:nx+1) :: eta
      real, dimension(0:ny+1,0:nx+1) :: etan
      real :: g
      real, dimension(0:ny+1,0:nx+1) :: h
      real :: hmin
      real, dimension(0:ny+1,0:nx+1) :: hzero
      integer :: j
      integer :: k
      real, dimension(0:ny+1,0:nx+1) :: u
      real, dimension(0:ny+1,0:nx+1) :: un
      real, dimension(0:ny+1,0:nx+1) :: v
      real, dimension(0:ny+1,0:nx+1) :: vn
      integer, dimension(0:ny+1,0:nx+1) :: wet
      real :: hmax
      real :: time
      real :: dtmax
      real :: c
      real :: lambda
      integer :: n
      integer :: ntot
      integer :: nout
      integer :: dummy
    ntot = 10000
    eps = 0.05
    call init(hmin, dx, dy, dt, g, j, k, hzero, eta, etan, h, wet, u, un, v, vn)
    open(90, file='debug.dat', form='formatted')
    open(10, file='eta0.dat', form='formatted')
    do j = 0, ny+1, 1
        write(10, '(101F12.6)')(eta(j,k), k = 0, nx+1)
    end do
    close(10)
    open(10, file='h0.dat', form='formatted')
    do j = 0, ny+1, 1
        write(10, '(101F12.6)')(hzero(j,k), k = 0, nx+1)
    end do
    close(10)
    hmax = 0.
    do j = 1, ny, 1
        do k = 1, nx, 1
                hmax = max(hmax,h(j,k))
        end do
    end do
    dummy = 0
    c = sqrt(2*g*hmax)
    write(6, *)("c = ", c)
    lambda = dt*sqrt(g*hmax)/min(dx,dy)
    write(6, *)("lambda = ", lambda)
    if (lambda>1) then
        write(6, *)("This will not work. Do you know why?")
        stop 
    end if
    open(10, file='eta.dat', form='formatted')
    open(20, file='h.dat', form='formatted')
    open(30, file='u.dat', form='formatted')
    open(40, file='v.dat', form='formatted')
    do j = 26, 26, 1
        do k = 26, 26, 1
                eta(j,k) = 1.0
        end do
    end do
    do n = 1, ntot, 1
        time = REAL(n)*dt
        call dyn(j, k, dx, g, eta, dt, dy, un, u, wet, v, vn, h, etan)
        call shapiro(j, k, wet, etan, eps, eta)
        call vernieuw(dt, dx, dy, eps, eta, etan, g, h, hmin, hzero, j, k, u, un, v, vn, wet)
    end do
    do j = 0, ny+1, 1
        write(10, '(101F12.6)')(eta(j,k), k = 0, nx+1)
        write(20, '(101F12.6)')(h(j,k), k = 0, nx+1)
        write(30, '(101F12.6)')(u(j,k), k = 0, nx+1)
        write(40, '(101F12.6)')(v(j,k), k = 0, nx+1)
    end do
    write(6, *)("Data output at time = ", time/60.0, " min")

end program wave2d
No entries in code stash
No entries in module var table
