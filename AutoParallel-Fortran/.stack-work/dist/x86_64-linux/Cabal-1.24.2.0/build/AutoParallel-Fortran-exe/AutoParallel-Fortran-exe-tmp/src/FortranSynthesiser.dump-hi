
==================== FINAL INTERFACE ====================
2018-12-03 15:55:13.341531 UTC

interface main@main:FortranSynthesiser 8002
  interface hash: 0605886eb8111e1fef06ad0b60634f24
  ABI hash: fde25ebc70bfac1e62d1c68155225ba2
  export-list hash: 4b57163b5858fd662aef731f0a0307a2
  orphan hash: 2378dbf8871c4c391be56d35128089ef
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  FortranSynthesiser.checkForImplicitNone
  FortranSynthesiser.defaultFilename
  FortranSynthesiser.extractParamDecls
  FortranSynthesiser.generateKernelName
  FortranSynthesiser.generateKernelNameOLD
  FortranSynthesiser.generateOriginalFileName
  FortranSynthesiser.generateRangeRelDecls
  FortranSynthesiser.generateStateName
  FortranSynthesiser.getArgsAndLocalVarsForLoopBody
  FortranSynthesiser.getLocalDeclStrs
  FortranSynthesiser.getLocalDeclStrs_OLD
  FortranSynthesiser.getMissingArgDeclStrs
  FortranSynthesiser.isImplicitNone
  FortranSynthesiser.matchParameterDecl
  FortranSynthesiser.matchVarNameInDecl
  FortranSynthesiser.produceCodeBlock
  FortranSynthesiser.produceCode_fortran
  FortranSynthesiser.produceCode_prog
  FortranSynthesiser.produceCode_progUnit
  FortranSynthesiser.readOriginalFileLines
  FortranSynthesiser.removeIntent
  FortranSynthesiser.restoreUsedModuleDecls
  FortranSynthesiser.restoreUsedModuleDecls'
  FortranSynthesiser.synthesisElses
  FortranSynthesiser.synthesisUses
  FortranSynthesiser.synthesiseArgList
  FortranSynthesiser.synthesiseAssg
  FortranSynthesiser.synthesiseAttr
  FortranSynthesiser.synthesiseAttrList
  FortranSynthesiser.synthesiseBaseType
  FortranSynthesiser.synthesiseBufferAccess
  FortranSynthesiser.synthesiseBufferDeclaration
  FortranSynthesiser.synthesiseBufferIndexNames
  FortranSynthesiser.synthesiseBufferLoads
  FortranSynthesiser.synthesiseBufferLoads_kernel
  FortranSynthesiser.synthesiseBufferMake
  FortranSynthesiser.synthesiseBufferStores
  FortranSynthesiser.synthesiseCall
  FortranSynthesiser.synthesiseDecl
  FortranSynthesiser.synthesiseDeclList
  FortranSynthesiser.synthesiseDecl_Acc
  FortranSynthesiser.synthesiseDecls
  FortranSynthesiser.synthesiseDecls_Acc
  FortranSynthesiser.synthesiseESeq
  FortranSynthesiser.synthesiseFor
  FortranSynthesiser.synthesiseIf
  FortranSynthesiser.synthesiseInitModule
  FortranSynthesiser.synthesiseKernelCall
  FortranSynthesiser.synthesiseKernelCaseAlternative
  FortranSynthesiser.synthesiseKernels
  FortranSynthesiser.synthesiseOpenCLBufferRead
  FortranSynthesiser.synthesiseOpenCLBufferWrite
  FortranSynthesiser.synthesiseOpenCLMap
  FortranSynthesiser.synthesiseOpenCLReduce
  FortranSynthesiser.synthesiseRangeExpr
  FortranSynthesiser.synthesiseSetOclArg
  FortranSynthesiser.synthesiseSizeStatements
  FortranSynthesiser.synthesiseSizeStatements_kernel
  FortranSynthesiser.synthesiseStateDefinitions
  FortranSynthesiser.synthesiseSuperKernel
  FortranSynthesiser.synthesiseSuperKernelModule
  FortranSynthesiser.synthesiseSuperKernelName
  FortranSynthesiser.synthesiseType
  FortranSynthesiser.synthesiseUse
  FortranSynthesiser.traverseDSeq
module dependencies: CodeEmitterUtils F95IntrinsicFunctions
                     FortranGenerator Language.Fortran Language.Fortran.Lexer
                     Language.Fortran.Parser Language.Fortran.PreProcess
                     LanguageFortranTools MiniPP Platform PreProcessor SubroutineTable
                     Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskell-src-1.0.2.0@haskell-src-1.0.2.0-3zoaErItXGVA1GHC7t3Glx
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      process-1.4.3.0@process-1.4.3.0
                      syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Instances
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Data da440c60016500822a3d4307ca5dea66
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base 192db525847d66243089501d3ee84714
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 8ff5ebd6a93811413df021d2be39a158
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  CodeEmitterUtils bc5edf6436e6c4432e181644ac03bb99
  exports: 83fe22c4657035c778433521c92d60d5
  KernelArgsIndexMap 32eeb7238c1c2d1b6fbb6ca51eafc592
  adaptForReadScalarDecls de398df24fad9f9c9e9cb768903e9ddb
  anyChildGenerated fa96c7a52065e60afb4139fc3d308818
  collectDecls 5bfb790661e0d0d18efd8855b4cce735
  convertScalarToOneDimArray 004d1a83f0a22a1d5dd2203ed8c6760b
  emitDeclStr 437ad53a0bf52d305b126d9fa710b5a5
  extractDeclaration_varname 5e51623c06e01a7934c63c29decab351
  extractKernelArguments 8a51a82120e8c5a66888f7f0b98202f0
  extractOriginalCode 4fffa1d891ea746078291b940fcc92f6
  extractOriginalCode_Offset e21f9c801f2e6cf92bfdbdd1ff276b00
  extractOriginalCode_Offset1 64bf49781a653e511b820f304dd0448b
  generateGlobalReductionArray bd1fe4e2f9c02f08002418b87d5c56f6
  generateLocalReductionArray 9c7027bb67e0091189ab577f5376dd33
  generateLocalReductionVar 3089c04576291768bc10865525ba3b81
  generateReductionIterator 911add31d709e17496f7bbee951e4374
  getDeclRank 14faafc3f7927d6ff0d38f3fea1f967a
  getFirstFortranSrc 918749b7efba212e0830f938d1724982
  getGlobalID d7d987943d2913337ce5caba5b88e19e
  getGroupID 085d36ba5217923e425512d6fbc17448
  getLocalId 8eae6420e9868126a87492084f4bcf6d
  getModuleName 45ba41629b3d79a0c19ad48abdd18a96
  initModuleName 8c78f7a77000f8a28abd025cc880f498
  isGenerated 352f087527f7a91024bf50cc290e9467
  localChunkSize 9eb3c09ea3a1a57bd1e6ae6b06905953
  localMemBarrier d493bfafecac4fb81fed995fca52bc95
  localMemSpaceAcc 26c2fbca837cf8e44c347afd92af586a
  nthVar 4be3efde0ac9fd79ffb2b51036cf19fe
  nunitsVar 37826a33d2e23abfd938eaf089ad3a5f
  paramCheck_attr bc09b63290f050b1b40de98cb9cf65d0
  reductionIteratorDecl a83487fd7ac7b529db6cfec4eeec9189
  removeIntentFromDecl 372bb4e47633376329d04994118d74ac
  scalarPointerVarName d013d83e4dcac452d9df51601df98ee8
  startPosition c7ddc82e2adb7ee6615512874e82ebd0
  statePtrDecl e319a632453c4f1fddcbc17983b02acc
  statePtrVarName 1c7236253ae0fb64990b57aacd257837
  stateVarDecl 3e7d5739d9778b8636da730cd4b59ab7
  stateVarName d529ff6d7ecbaafe1bc46cd1a4d6886f
  stripDeclAttrs a4ef372481f6748c59d7a28a01534e19
  varBufVarName 0e35dc8558d45ffbb56628b7fa95d986
  varSizeVarName f6ce06a64604c8a077bb514dc04d4c7f
import  -/  FortranGenerator f3b40b4219f7c9e53bba52b4614b9c03
  exports: fe08451cbc1f1d63e1c4b9cd9ce5b2b7
  adaptOriginalDeclaration_varname 300513dd3cf020a37052b0514ede1d41
  declareGlobalReductionArray 0b9f4149e9e10ef992bbd890495d4d55
  declareLocalReductionArray 9daecd23e794fdeffd5e58e3aab3762b
  declareScalarPointer 0dce9126996140b37099d0141a5ec541
  generateArgList 4e3da5d6f771a1c545b241707be1e358
  generateFinalHostReduction 224fb96d4f7ea8ab5bb02a041c3a6205
  generateGlobalWorkItemsExpr 17af276ba72548c348de5f4df90b74d2
  generateIfNoElse dcb734958ca0025a273eff11a5569b42
  generateKernelDeclarations 65a7c788e6220177495ec93812460800
  generateLoop 4ecf2556692bca38268fe0c354d3131d
  generateLoopInitialisers 056a6160e4696a6c47675ae334b341a2
  generateReductionArrayAssignment e096dbd2432768cebbbea139d6c00b12
  generateSizeStatements_decls ff34c931a2d5d7ed6b910be87896d9c9
  generateWorkGroupReduction e2a29e236c53df2628a69345fbe58445
import  -/  Language.Fortran c957d8f93581b3ce2cc521df25110d11
  exports: cb4e2f808f933bd0493dcd95204741d0
  ArgList cd4377d5409f1d69d31cc63bf9624407
  ArgList fd45c3abbcc1cd23ca18c96ee1403b96
  ArgName b4db00709e962bb265fdd46af8204459
  Assg e4ff0447498349c3e2879e1af28dc289
  Attr cd26706e4e94cf728d05a3d7b1b9056d
  BaseType ca5d7487fbe699d664f7837b2f094048
  BaseType 6b45e4637f33ab3df335753afdb59e8d
  Bin 31bb1b9369e8820657f411d90ee9619c
  Block 961f7c2c989b091b59c58c09a763b797
  Block 00b5dcb26b4d8331f4d0a27afc418872
  Call 5dc8fc6a52ca566d9c8f8635b11363e5
  Character 5e9b0cdb987e492b0253f612efdd8917
  Con e9784612770372502a12b479082c4a0e
  DSeq 772b67a42edbea3be62c0cc83a34765a
  Decl d78489b6b11f87857f4ba3465cebf581
  Decl c4465a5758b20b0d6387c4cda8774a94
  Dimension 80d338f2485dd9dba4658e44ba6c92c2
  ESeq 61c466a4f3e2f7ae4bd9f94819dbe388
  Expr fd45c3abbcc1cd23ca18c96ee1403b96
  FSeq 66c58ad61465e02006618848a2dea986
  For 8eaaf1a59a9e6e9d8f36eff8caf7c991
  Fortran 7ef8d1883356542a2e7829f1c3512bc2
  If 2ebe473c51363820c571e0150fe25882
  In c3152ec7476c9052d5df452d36158bd3
  Integer 247d786a49e53a070207e400ccb2363d
  Intent b995ba2ebcb7e909c60733562878a23e
  Main 24417b8faf0e470d209fd162bfce3027
  Module 31d7f44313bcc4246ea1edced284a19c
  NullDecl 556c1a1fea20eb2b2390caa747283126
  NullExpr d53181ba59030b4ed334d3840cb5eea1
  NullStmt 4b8e91715bb30324591f7bab6148c0f6
  OpenCLBufferRead 7062856698f9bec8c015dbffd83f3cd0
  OpenCLBufferWrite 4bb6fbfda0c948d2b7b329fa92eecc3b
  OpenCLMap f735cdb4fcfce00b0cd641aaa6255a4b
  OpenCLReduce 811a5024d542e78a43320fc6af66c91a
  Out cec654c84d9ddc57389477346da890e9
  Parameter e57fc45f50a252e608f4c6688c7391dc
  ProgUnit dd0d2763607dbd5a6f6c1c5d85fe76dd
  Program 61c057161e42f4aa29fb8dd8afb17b21
  Real 1f5e3d6d1fce569b7e0ec8170f09616e
  RelLT 4a6ed8a832e87679ad5328c766213c64
  SrcLoc a58d61bb9404a2380d0de8c4177e198c
  SrcSpan a18da1424c2a105ac654e1e8b2930f03
  Sub 8f2551e4abe55f51167501d014d55bee
  SubName ef668be18c70f035fc2c52ca19281445
  Type cac90f1d6845827f0c2780e86e10c606
  Use 8a7dc7b8366e35090672c54debf5617f
  Uses 22a7293c3f9ba679ea60d591f21568e8
  VarName 64af05f1c71bcd1dfd571ca0d5218f1b
  VarName d4d45769399fe3ed8e0615e3282cf5b7
  srcSpan fbf339ac9b9eae31a89ba940dccb0289
import  -/  Language.Fortran.Parser 59e506b7f9b623442ab6ce146631eefb
  exports: 83a6073254db4377feeca61632e25716
  context_parse b959fe7cb84447e1537ed3764b0d8de2
import  -/  LanguageFortranTools 7890a5e96ab51325aa3603dbd4691bf4
  exports: 83b35210801e0c6fe3fd2a2c2ff1ecd0
  Anno e22809b44b97ccfdb28bfb19047d139f
  ModuleVarsTable 2d3509d9190540c2ff64d7aa77e642a6
  appendFortran_recursive 4a73f638f4b7d944226ec9c29c89a7cb
  applyGeneratedSrcSpans abc3393b31513f41cb818c5f6e8c39dc
  commentSeparator 72ed49229ad21cb8bafd41ea1e6fde9a
  compilerName af3b337e7deea7084cf6d3ad27314e83
  extractAllVarNames 86e7bb58fcd61ba1c9214f48532a0256
  extractArgName 728f6b1c6133de24ee1492ed5361a216
  extractAssigneeFromDecl 39645f5b02a3ff61a46cb5621de8142e
  extractBaseType 62eed54c3078de2b4d8bb649e98ffba1
  extractBufferReads a3f45d5b6a53414ae1cd35b025a54b81
  extractBufferWrites e3a1ededa940a53183ac1f5fa3a96f92
  extractIndent d8e2a14d2b7cfef4629470f7d77c909a
  extractKernels c6339b05bbe16f67d59f5f4f7d0b4085
  extractOpenCLReduces d1130492fa858966c0cb10b7dee661d8
  extractReductionVarNames a1a04805dacf1581947cd1681b1ca40b
  extractVarNames 0c06747830f37e92c31e4dbe6aedfd6f
  findDeclLine e8b676942df107f42b46480250f50c8e
  generateAdditionExpr 1a1fe3b617c314f3472027164db13694
  generateAssgCode baf053e0f63bff8c8b8bcc6c48d141a9
  generateDivisionExpr 24a25c778d2b1977fea1f354cc126b8f
  generateIntConstant 15603276f1aca276b29ee11bb7132c17
  generateProductExpr a2e3d57ac97eb4661f84c829507ede93
  generateSubtractionExpr 6075eabbf6676385f0a6855cf8e61901
  generateVar 9d0fea224f278c04fc62fa0745c0e6f6
  getLoopVars 1f9f90cde5eb615120c1a938b5f46b1b
  getSrcSpanNonIntersection 15196d5082254ff05b5a3fe9fb1bdaf1
  getUses a038a990529caacbbdbd30d93408e59e
  listConcatUnique 71a2194601dc95d4bf102289f5a59052
  listIntersection ea4660c5c67b37d7a94bfd3c2305858a
  listRemoveDuplications 4378f4b10536dcf8634c95685ebad55d
  listSubtract b3c64f9bf63909177406c8d10e99ecef
  nullAnno e3239ac8aba218af15f945a652936cc8
  nullSrcSpan 088997d0b27116160aebfa68704495fa
  outputExprFormatting 94304bd749d8576e2241b877c8b68b4d
  outputTab 7dd6e0a389efe481cc10a3751b3f709f
  replaceAllOccurences_varnamePairs 9a1831c74d4c247eb16a05eec1ca6ee1
  runCpp e6ab286fec3b727fb10dbb7d2480caa7
  split d45ed0f999da8561ce6795b7e0ff509e
  tabInc 985de88de6d4578495764b5eb5c13f4c
  varNameStr 95ac032c44f5687eb820ca35335877d7
import  -/  MiniPP f16ed7e5a39853044388f8480999b1a1
  exports: 7578fb79964ca180f8c5942d9032d1f5
  miniPPD 8c5e36707cbdd670e4f19cea6c9c67f1
  showSubName 71ae792c89776f5d714d5671278bce8a
import  -/  Platform 68ee714015ddeec7ef5b38f1b1229aea
  exports: faf9de2f15d0e1cf9065a7f78566814c
  CPU de0318ff9db1d29a04bbdd34c7c66c55
  GPU 7d2a1930399c599b55b38ea18c4a3687
  Platform 06b607c6896cb24eacacbc624d07dfa1
import  -/  SubroutineTable 478a2d1f7dd1c241949a1b63a72c1af8
  exports: 36e92c4145b6d54c4036b21148e09ac1
  ArgumentTranslation 95f628b4ba32577003f1cb86af696189
  SubroutineArgumentTranslationMap cfad5044b89ccfb7a793ac7497738c50
  SubroutineTable 875efe6d79ce808ce2e029d4077f36df
  emptyArgumentTranslation 9e17a11a747dad86ef16e0ee10c70b6b
  extractSubroutines e75847f94dc57e867c92455b6af4f6ae
  getSubroutineArgumentTranslation bae18c9faec679bffe6850f55f8021df
  subAst ffc672553e5614ff97f91fc9495e2abb
  translateArguments 3d9a7e6b45678d37d17b29d1380ad5e3
import  -/  Warning 37568988846bf7dc0ef160b198d03155
  exports: 66d1a373648e452607e9cbdbd4f3a821
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics ea99a8062a9608312218ffd7309b5391
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Aliases 09d594ec9a31e3c858478cc583771648
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Schemes 4b69980d384f37e61fe24ae708a71220
e3a7b4e04c35f41a0a72c87987d40299
  $s$fDataArg ::
    Data.Data.Data
      (Language.Fortran.Arg
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Arg
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataArg_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataArg_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataArg_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  FortranSynthesiser.$s$fDataArg3
                  FortranSynthesiser.$s$fDataArg2
                  (Language.Fortran.$fDataArg_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  FortranSynthesiser.$s$fDataArg1
                  (Language.Fortran.$fDataArg_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataArg_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataArg_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataArg_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataArg_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataArg_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataArg_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataArg_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData) -}
f8f413438bdf67715bebdf3bbcbc8419
  $s$fDataArg1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Arg
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds16 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Arg
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
34869ef347cfd95973cae55071fb4a28
  $s$fDataArg2 ::
    Language.Fortran.Arg
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds16 :: Language.Fortran.Arg
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$t1qnG2e03wKqFUA1PtIEn7e) -}
739966950816bd26b490a5e67aea1466
  $s$fDataArg3 ::
    Language.Fortran.Arg
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds16 :: Language.Fortran.Arg
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case ds16 of wild { Language.Fortran.Arg ds17 ds18 ds19 ->
                 Language.Fortran.$c1qnG2e03wKqFUA1PtIEn7e }) -}
666252b2f354df3fce24bd5654bd0282
  $s$fDataArg4 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds16 :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Base.Nothing
                   @ (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))) -}
8e35f7b2f712546710a5124ccf7d52a9
  $s$fDataArg5 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds16 :: Data.Map.Base.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.mapDataType) -}
48b51ec86491a44c3eb735af094e4aba
  $s$fDataArg6 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds16 :: Data.Map.Base.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.fromListConstr) -}
3e3c7b6046a2670a8d2afffe580b1cad
  $s$fDataArg7 :: Data.Data.Data [GHC.Base.String]
  {- Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.$s$fDataArg_$s$fData[] -}
614659f6a61017134e1e4fa28efae47d
  $s$fDataArg_$dData ::
    Data.Data.Data
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.$s$fDataArg_$s$fDataMap -}
0eee3d5f109ca6abb232fb00ed0b0bf7
  $s$fDataArg_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fDataMap_$cp1Data
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  FortranSynthesiser.$s$fDataArg6
                  FortranSynthesiser.$s$fDataArg5
                  FortranSynthesiser.$s$fDataArg4
                  (Data.Map.Base.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapT
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
b8117c3f15368cbc9ecdc4429af2184d
  $s$fDataArg_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Data.$fData[]_$cp1Data
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  FortranSynthesiser.$s$fDataArg_$s$fData[]_$ctoConstr
                  FortranSynthesiser.$s$fDataArg_$s$fData[]_$cdataTypeOf
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  FortranSynthesiser.$s$fDataArg_$s$fData[]_$cdataCast2
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
fbaacd3866348db425cbe49b47e70828
  $s$fDataArg_$s$fData[]_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds16 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing @ (c [[GHC.Types.Char]])) -}
9600ad7186a7dcee40a20b191fbc0df6
  $s$fDataArg_$s$fData[]_$cdataTypeOf ::
    [[GHC.Types.Char]] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds16 :: [[GHC.Types.Char]]) -> Data.Data.listDataType) -}
c888ab2cab378dfeb13de3160837d4bc
  $s$fDataArg_$s$fData[]_$ctoConstr ::
    [[GHC.Types.Char]] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds16 :: [[GHC.Types.Char]]) ->
                 case ds16 of wild {
                   [] -> Data.Data.nilConstr : ds17 ds18 -> Data.Data.consConstr }) -}
40cf33e590baf2dde0f939a30d095275
  $s$fDataBlock ::
    Data.Data.Data
      (Language.Fortran.Block
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Block
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataBlock_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataBlock_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataBlock_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  FortranSynthesiser.$s$fDataBlock3
                  FortranSynthesiser.$s$fDataBlock2
                  (Language.Fortran.$fDataBlock_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  FortranSynthesiser.$s$fDataBlock1
                  (Language.Fortran.$fDataBlock_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData) -}
10df7112e24c15060c38f0c20d291959
  $s$fDataBlock1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Block
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds16 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Block
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
b37e673ac87223eb794ed5b8f2890c3e
  $s$fDataBlock2 ::
    Language.Fortran.Block
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds16 :: Language.Fortran.Block
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$tGkmznj2VlO42PYwprZUrCU) -}
281fcd0fcb5d66328d5616c07aa14ff4
  $s$fDataBlock3 ::
    Language.Fortran.Block
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds16 :: Language.Fortran.Block
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case ds16 of wild { Language.Fortran.Block ds17 ds18 ds19 ds20 ds21 ds22 ->
                 Language.Fortran.$cGkmznj2VlO42PYwprZUrCU }) -}
eb33647b9f5499e891e788e1be48fdcb
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataFortran_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  FortranSynthesiser.$s$fDataFortran2
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  FortranSynthesiser.$s$fDataFortran1
                  (Language.Fortran.$fDataFortran_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData) -}
b2912bcde5e5bffc317a69a25af746fa
  $s$fDataFortran1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Fortran
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds16 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Fortran
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
b2506cd3d435ee3c6a2dd3da9a03ad29
  $s$fDataFortran2 ::
    Language.Fortran.Fortran
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds16 :: Language.Fortran.Fortran
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$tD9QMegU2padFswPGA4PbPq) -}
b5b8acf06f5dcc2a5983d592e249b744
  $s$fDataProgUnit ::
    Data.Data.Data
      (Language.Fortran.ProgUnit
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ProgUnit
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataProgUnit_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cdataTypeOf
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cdataCast2
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$dData) -}
cdf1ffcfed7b29af8f559b59cac4b637
  $s$fData[] ::
    Data.Data.Data
      [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
                  (Data.Data.$fData[]_$cp1Data
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgfoldl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgunfold
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$ctoConstr
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cdataTypeOf
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cdataCast1
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cdataCast2
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgmapT
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgmapQl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgmapQr
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgmapQ
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgmapQi
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgmapM
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgmapMp
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1)
                  (Data.Data.$fData[]_$cgmapMo
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fData[]1) -}
1b3a1cfce56bb45aa647b8848c035f3b
  $s$fData[]1 ::
    Data.Data.Data
      (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
  {- Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.$s$fDataProgUnit -}
b24a3b91f0a252fefc87aae070a037bf
  $s$fEqDecl_$dEq ::
    GHC.Classes.Eq
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.$s$fEqDecl_$s$fEqMap -}
a10ec9593249b4dbce40c12e9af7b3af
  $s$fEqDecl_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  FortranSynthesiser.$s$fEqDecl_$s$fEqMap_$c/= -}
e5c0712341f5105b789dacd59892b32a
  $s$fEqDecl_$s$fEqMap_$c/= ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ [GHC.Types.Char]
                      @ [GHC.Base.String]
                      GHC.Classes.$fEq[]_$s$fEq[]1
                      GHC.Classes.$fEq[]_$s$fEq[]2
                      x
                      y)) -}
420986b86c9205ce2bb9ca532f47cf0e
  $s$fEqFortran ::
    GHC.Classes.Eq
      (Language.Fortran.Fortran
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqBlock_$c==1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqDecl_$dEq)
                  FortranSynthesiser.$s$fEqFortran_$s$fEqFortran_$c/= -}
b359e7addc1507af3c5bdee22f09728e
  $s$fEqFortran_$s$fEqFortran_$c/= ::
    Language.Fortran.Fortran
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.Fortran
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.Fortran.Fortran
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                   (b :: Language.Fortran.Fortran
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case Language.Fortran.$fEqBlock_$c==1
                        @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                        FortranSynthesiser.$s$fEqDecl_$dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
443f4c86a8f87adb89f6ee13f19a31fd
  $s$fEqUses ::
    GHC.Classes.Eq
      (Language.Fortran.Uses
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Uses
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqBlock_$c==4
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqDecl_$dEq)
                  (Language.Fortran.$fEqUses_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqDecl_$dEq) -}
2351f3487d9bf6b03d0ac00f2d1e2152
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqDecl_$dEq)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqDecl_$dEq) -}
7a0710cd45951c49a70f7a91767ef7c1
  $s$fOrdMap ::
    GHC.Classes.Ord
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  FortranSynthesiser.$s$fEqDecl_$dEq
                  (Data.Map.Base.$fOrdMap_$ccompare
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$c<
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$c<=
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$c>
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$c>=
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$cmax
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$cmin
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2) -}
88aeb072852a31e41708cb0b147d44c2
  $s$fOrdVarName ::
    GHC.Classes.Ord
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  FortranSynthesiser.$s$fOrdVarName_$dEq
                  (Language.Fortran.$fOrdVarName_$ccompare
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$c<
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$c<=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$c>
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$c>=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$cmax
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$cmin
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdVarName_$dOrd) -}
1ebef778d5d7aad6e0e4877830f41bc5
  $s$fOrdVarName_$dEq ::
    GHC.Classes.Eq (Language.Fortran.VarName LanguageFortranTools.Anno)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.$s$fEqVarName -}
6c237601f80fc4ca0b258e3db31ca1a1
  $s$fOrdVarName_$dOrd ::
    GHC.Classes.Ord
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.$s$fOrdMap -}
f6859acc51ae2921493101b4fc0d9f65
  $sfromList ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Data.Set.Base.Set
         (Language.Fortran.VarName LanguageFortranTools.Anno)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: [Language.Fortran.VarName
                               LanguageFortranTools.Anno]) ->
                 case ds16 of wild {
                   []
                   -> Data.Set.Base.Tip
                        @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                   : x ds17
                   -> case ds17 of wild1 {
                        []
                        -> case x of dt { Language.Fortran.VarName ipv ipv1 ->
                           Data.Set.Base.Bin
                             @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                             1#
                             dt
                             (Data.Set.Base.Tip
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                             (Data.Set.Base.Tip
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno)) }
                        : ipv ipv1
                        -> case x of ww { Language.Fortran.VarName ww1 ww2 ->
                           case ipv of ww3 { Language.Fortran.VarName ww4 ww5 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ ([GHC.Types.Char], [GHC.Base.String])
                                  FortranSynthesiser.$sfromList1
                                  (Data.Map.Base.toAscList1
                                     @ [GHC.Types.Char]
                                     @ [GHC.Base.String]
                                     (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                                     ww1)
                                  (Data.Map.Base.toAscList1
                                     @ [GHC.Types.Char]
                                     @ [GHC.Base.String]
                                     (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                                     ww4) of wild2 {
                             GHC.Types.LT
                             -> FortranSynthesiser.$sfromList_$s$wgo5
                                  ww4
                                  ww5
                                  ipv1
                                  (Data.Set.Base.Bin
                                     @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                     1#
                                     ww
                                     (Data.Set.Base.Tip
                                        @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                                     (Data.Set.Base.Tip
                                        @ (Language.Fortran.VarName LanguageFortranTools.Anno)))
                                  1#
                             GHC.Types.EQ
                             -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww2 ww5 of wild3 {
                                  DEFAULT
                                  -> FortranSynthesiser.$sfromList_$sgo5
                                       ww3
                                       ipv1
                                       (Data.Set.Base.Bin
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                          1#
                                          ww
                                          (Data.Set.Base.Tip
                                             @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                                          (Data.Set.Base.Tip
                                             @ (Language.Fortran.VarName
                                                  LanguageFortranTools.Anno)))
                                  GHC.Types.LT
                                  -> FortranSynthesiser.$sfromList_$s$wgo5
                                       ww4
                                       ww5
                                       ipv1
                                       (Data.Set.Base.Bin
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                          1#
                                          ww
                                          (Data.Set.Base.Tip
                                             @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                                          (Data.Set.Base.Tip
                                             @ (Language.Fortran.VarName
                                                  LanguageFortranTools.Anno)))
                                       1# }
                             GHC.Types.GT
                             -> FortranSynthesiser.$sfromList_$sgo5
                                  ww3
                                  ipv1
                                  (Data.Set.Base.Bin
                                     @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                     1#
                                     ww
                                     (Data.Set.Base.Tip
                                        @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                                     (Data.Set.Base.Tip
                                        @ (Language.Fortran.VarName
                                             LanguageFortranTools.Anno))) } } } } }) -}
d375bb3c5dd07364f7591c27005e5322
  $sfromList1 ::
    GHC.Classes.Ord ([GHC.Types.Char], [GHC.Base.String])
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   GHC.Classes.$fOrd[]_$s$fOrd[]1
                   GHC.Classes.$fOrd[]_$s$fOrd[]2) -}
f584465818e36525c7a49d5f5ad8cdd5
  $sfromList_$s$wgo5 ::
    Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]
    -> [GHC.Types.Char]
    -> [Language.Fortran.VarName
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Data.Set.Base.Set
         (Language.Fortran.VarName
            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]))
    -> GHC.Prim.Int#
    -> Data.Set.Base.Set
         (Language.Fortran.VarName LanguageFortranTools.Anno)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,1*U><L,U> -}
2bd035c47449b78215ac60910f8d5216
  $sfromList_$sgo5 ::
    Language.Fortran.VarName
      (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.VarName
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Data.Set.Base.Set
         (Language.Fortran.VarName
            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]))
    -> Data.Set.Base.Set
         (Language.Fortran.VarName LanguageFortranTools.Anno)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
e19a8ece155797fc8090a5e41dd97409
  $sinsert1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> a
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (eta1 :: a)
                   (eta2 :: Data.Map.Base.Map
                              (Language.Fortran.VarName LanguageFortranTools.Anno) a) ->
                 FortranSynthesiser.$sinsert_go10
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                   @ a
                   FortranSynthesiser.$s$fOrdVarName
                   eta
                   eta1
                   eta2) -}
b30456d7a8304d6303b1bc1bb88e03b6
  $sinsert_go10 ::
    GHC.Classes.Ord k1 =>
    k1 -> a1 -> Data.Map.Base.Map k1 a1 -> Data.Map.Base.Map k1 a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><L,U><S,1*U> -}
ffff0fcfb67284c275796dc64b50c98c
  $sinsert_go5 ::
    GHC.Classes.Ord a1 =>
    a1 -> Data.Set.Base.Set a1 -> Data.Set.Base.Set a1
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U> -}
4ff64b5e990047a3a84fc8868c893ec0
  $slookup1 ::
    Language.Fortran.Variable
    -> Data.Map.Base.Map Language.Fortran.Variable a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
521664be892750cec0823149dccc0cd1
  $stypeRep#10 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
687094592673e8b8deb24646d03c381c
  $stypeRep#11 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
0d7afc2dac0ceffc12ca7e7e4cd7f491
  $stypeRep#14 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#15
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tc[]
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
100c09fa24c3d7a621cf4b1a05a656df
  $stypeRep#15 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17730107610217102821##
                   9866972337190828755##) -}
ad913f76f1004694fcff1f8b80d30b06
  $stypeRep#18 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
5c67b4bb66335142ac2a20c8d8120433
  $stypeRep#19 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.$stypeRep#10
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
1f9b5c221556409eabfce6f28618cad0
  $stypeRep#2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
deaaa70af6002a6017eec5045dcde8ca
  $stypeRep#22 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#2 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
bb4835dbb6fcc1eef2ed8e787f096ceb
  $stypeRep#23 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.$stypeRep#18
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
98bc785591ddf09cfb0fb8c727cc0a34
  $stypeRep#26 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
3fd58086bec6e59beb8dabaafe0ddda0
  $stypeRep#29 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#22 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.$stypeRep#30
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
24028c819e30c167a2f9a779d04bcac9
  $stypeRep#3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17306070887558246498##
                   16032333906417739553##) -}
259e597c0b5f305e8d5c7ed07ef612d5
  $stypeRep#30 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.$stypeRep#26
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
87c26217f97ca71128d41a5c1c8ab473
  $stypeRep#33 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#34
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcBlock
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
62d0471652897e1eeba0c3e3dc5d3580
  $stypeRep#34 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8622183916436018781##
                   7917166659374511045##) -}
231aeaf6e0a1e44ea80a7daa8fc80921
  $stypeRep#37 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#38
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcProgUnit
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
22542e832fd6936f8741d6747ccb08bb
  $stypeRep#38 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   10056753431434216976##
                   6055604396548152995##) -}
d740c5036b0b3b32926f875273e7b2ca
  $stypeRep#41 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#42
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
5ae2c5a5fdac2741e208e7358f18d902
  $stypeRep#42 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6882220124880764793##
                   15271875958298145102##) -}
2596e9b037a41524042acaafb2990975
  $stypeRep#45 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#46
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcDecl
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
7157602443ed84b3d397cd90a09337cb
  $stypeRep#46 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1333565254055508066##
                   2348454038217729491##) -}
ee1acde449bfdebc06d8b464742fd1c2
  $stypeRep#49 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#50
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcArgName
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
9b10e24f58dc7d585267abaf6421c7fa
  $stypeRep#50 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   9242974714316311215##
                   9957090134460514018##) -}
eb9066cce39bd516e766a1322c6a6875
  $stypeRep#6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcUses
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
f6bb9dba507d2123dcdf8d2cb198f35f
  $stypeRep#7 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   4363150290659116846##
                   4164391352706304496##) -}
40b48645f99c1a7521d46957bcdd2f5b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FortranSynthesiser.$trModule2
                   FortranSynthesiser.$trModule1) -}
d050573a021fccb1e54d29d54cf48e97
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FortranSynthesiser"#) -}
8cd2dda01d2efe6af0b4b696a12d38c7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
e690e936d039e2ff0134a68879001315
  $wcheckForImplicitNone ::
    GHC.Base.String -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   ds16 :: ([GHC.Base.String], GHC.Base.String)
                   = case FortranSynthesiser.$wgo
                            (Data.OldList.lines w)
                            (GHC.Types.[] @ GHC.Base.String)
                            (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (# case ds16 of wild { (,) other_code_lines maybeImplicitNone ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Data.OldList.unlines other_code_lines)
                      FortranSynthesiser.checkForImplicitNone1 },
                    case ds16 of wild { (,) other_code_lines maybeImplicitNone ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      maybeImplicitNone
                      FortranSynthesiser.checkForImplicitNone1 } #)) -}
7915fca2dd0a385fad938259937800f9
  $wgenerateKernelName ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <L,1*U><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (ww :: GHC.Base.String)
                   (ww1 :: GHC.Types.Int) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (CodeEmitterUtils.getModuleName ww)
                   (GHC.CString.unpackAppendCString#
                      "_"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         w
                         (GHC.CString.unpackAppendCString#
                            "_"#
                            (case ww1 of ww2 { GHC.Types.I# ww3 ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    ww3
                                    (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))))) -}
15eec754515d00571db575ddb49b84a6
  $wgenerateKernelNameOLD ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <L,1*U><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (ww :: GHC.Base.String)
                   (ww1 :: GHC.Types.Int) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (CodeEmitterUtils.getModuleName ww)
                   (GHC.CString.unpackAppendCString#
                      "_"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         w
                         (GHC.CString.unpackAppendCString#
                            "_"#
                            (case ww1 of ww2 { GHC.Types.I# ww3 ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    ww3
                                    (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))))) -}
9a96eceb0753e6777b5a95f2ef08fe89
  $wgetArgsAndLocalVarsForLoopBody ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (# [GHC.Base.String], [GHC.Base.String] #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Language.Fortran.Fortran
                           LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 let {
                   origSubArgs_strs :: [GHC.Base.String]
                   = GHC.Base.map
                       @ (Language.Fortran.ArgName LanguageFortranTools.Anno)
                       @ [GHC.Types.Char]
                       FortranSynthesiser.getArgsAndLocalVarsForLoopBody9
                       (Data.Generics.Schemes.everything
                          @ [Language.Fortran.ArgName LanguageFortranTools.Anno]
                          (GHC.Base.++
                             @ (Language.Fortran.ArgName LanguageFortranTools.Anno))
                          FortranSynthesiser.getArgsAndLocalVarsForLoopBody2
                          @ (Language.Fortran.Arg LanguageFortranTools.Anno)
                          FortranSynthesiser.$s$fDataArg
                          (case Data.Generics.Schemes.everything
                                  @ [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
                                  (GHC.Base.++
                                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno))
                                  SubroutineTable.addToSubroutineTable1
                                  @ (Language.Fortran.Program LanguageFortranTools.Anno)
                                  SubroutineTable.$s$fData(,)_$s$fData[]1
                                  w1 of wild {
                             []
                             -> case GHC.List.badHead
                                ret_ty (Language.Fortran.Arg LanguageFortranTools.Anno)
                                of {}
                             : x ds16
                             -> case x of wild1 {
                                  DEFAULT
                                  -> case FortranSynthesiser.getArgsAndLocalVarsForLoopBody1
                                     ret_ty (Language.Fortran.Arg LanguageFortranTools.Anno)
                                     of {}
                                  Language.Fortran.Sub ds17 ds18 ds19 ds20 args ds21 -> args } }))
                 } in
                 let {
                   allVars_strs :: [GHC.Base.String]
                   = FortranSynthesiser.getArgsAndLocalVarsForLoopBody_go5
                       (GHC.Types.[] @ [GHC.Types.Char])
                       (FortranSynthesiser.$sfromList
                          (Data.Generics.Schemes.everything
                             @ [Language.Fortran.VarName LanguageFortranTools.Anno]
                             (GHC.Base.++
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                             LanguageFortranTools.extractAllVarNames1
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                             FortranSynthesiser.$s$fDataFortran
                             w))
                 } in
                 (# GHC.List.filter
                      @ [GHC.Types.Char]
                      (\ (v :: GHC.Base.String) ->
                       case GHC.List.elem
                              @ GHC.Base.String
                              GHC.Classes.$fEq[]_$s$fEq[]1
                              v
                              origSubArgs_strs of wild {
                         GHC.Types.False -> GHC.Types.True
                         GHC.Types.True -> GHC.Types.False })
                      allVars_strs,
                    GHC.List.filter
                      @ [GHC.Types.Char]
                      (\ (v :: GHC.Base.String) ->
                       GHC.List.elem
                         @ GHC.Base.String
                         GHC.Classes.$fEq[]_$s$fEq[]1
                         v
                         origSubArgs_strs)
                      allVars_strs #)) -}
fdca1cba6ccdc34a189ca35bbd3df459
  $wgetLocalDeclStrs ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (Language.Fortran.Decl LanguageFortranTools.Anno,
        Language.Fortran.Fortran LanguageFortranTools.Anno)
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (# GHC.Base.String, GHC.Base.String, GHC.Base.String #)
  {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U(A,1*U)><L,1*U><L,U>,
     Inline: [0] -}
bd180629af77c2dbff076b239140b74c
  $wgetLocalDeclStrs_OLD ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 4, Strictness: <L,1*U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (w :: [Language.Fortran.VarName
                            LanguageFortranTools.Anno])
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (w2 :: [GHC.Base.String])
                   (w3 :: GHC.Base.String) ->
                 let {
                   localVars_strs :: [GHC.Base.String]
                   = let {
                       allArgs_strs :: [GHC.Base.String]
                       = GHC.Base.map
                           @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                           @ [GHC.Types.Char]
                           LanguageFortranTools.varNameStr
                           w
                     } in
                     letrec {
                       go30 :: [[GHC.Types.Char]]
                               -> Data.Set.Base.Set
                                    (Language.Fortran.VarName LanguageFortranTools.Anno)
                               -> [[GHC.Types.Char]]
                         {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                       = \ (z' :: [[GHC.Types.Char]])
                           (ds16 :: Data.Set.Base.Set
                                      (Language.Fortran.VarName LanguageFortranTools.Anno)) ->
                         case ds16 of wild {
                           Data.Set.Base.Bin dt x l r
                           -> case x of wild1 { Language.Fortran.VarName ds17 str ->
                              go30
                                (case GHC.List.elem
                                        @ GHC.Base.String
                                        GHC.Classes.$fEq[]_$s$fEq[]1
                                        str
                                        allArgs_strs of wild2 {
                                   GHC.Types.False -> GHC.Types.: @ [GHC.Types.Char] str (go30 z' r)
                                   GHC.Types.True -> go30 z' r })
                                l }
                           Data.Set.Base.Tip -> z' }
                     } in
                     go30
                       (GHC.Types.[] @ [GHC.Types.Char])
                       (FortranSynthesiser.$sfromList
                          (Data.Generics.Schemes.everything
                             @ [Language.Fortran.VarName LanguageFortranTools.Anno]
                             (GHC.Base.++
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                             LanguageFortranTools.extractAllVarNames1
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                             FortranSynthesiser.$s$fDataFortran
                             w1))
                 } in
                 (# GHC.CString.unpackAppendCString#
                      "! Local vars: "#
                      (case localVars_strs of wild {
                         [] -> FortranSynthesiser.checkForImplicitNone1
                         : x xs1
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              (Data.OldList.intercalate_$spoly_go
                                 @ GHC.Types.Char
                                 x
                                 (Data.OldList.prependToAll
                                    @ [GHC.Types.Char]
                                    FortranSynthesiser.removeIntent4
                                    xs1))
                              FortranSynthesiser.checkForImplicitNone1 }),
                    let {
                      origDeclLines :: [GHC.Base.String]
                      = GHC.List.filter
                          @ [GHC.Types.Char]
                          LanguageFortranTools.findDeclLine
                          w2
                    } in
                    Data.OldList.unlines
                      (GHC.Base.map
                         @ [GHC.Types.Char]
                         @ [GHC.Types.Char]
                         (\ (x :: [GHC.Types.Char]) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            w3
                            (FortranSynthesiser.removeIntent
                               (Data.OldList.unlines
                                  (GHC.List.filter
                                     @ [GHC.Types.Char]
                                     (FortranSynthesiser.matchVarNameInDecl x)
                                     origDeclLines))))
                         localVars_strs) #)) -}
a9c1a1189490b024b51adb9215711fd2
  $wgetMissingArgDeclStrs ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> [GHC.Types.Char]
    -> (# [GHC.Types.Char], [GHC.Types.Char] #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (w2 :: [GHC.Types.Char]) ->
                 (# GHC.Base.++
                      @ GHC.Types.Char
                      w2
                      (GHC.CString.unpackAppendCString#
                         "! Missing args: "#
                         (case w of wild {
                            [] -> FortranSynthesiser.checkForImplicitNone1
                            : x xs1
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 (Data.OldList.intercalate_$spoly_go
                                    @ GHC.Types.Char
                                    x
                                    (Data.OldList.prependToAll
                                       @ [GHC.Types.Char]
                                       FortranSynthesiser.removeIntent4
                                       xs1))
                                 FortranSynthesiser.checkForImplicitNone1 })),
                    let {
                      origDeclLines :: [GHC.Base.String]
                      = GHC.List.filter
                          @ [GHC.Types.Char]
                          LanguageFortranTools.findDeclLine
                          w1
                    } in
                    case GHC.Base.map
                           @ [GHC.Types.Char]
                           @ [GHC.Types.Char]
                           (\ (var_name :: GHC.Base.String) ->
                            Data.OldList.unlines
                              (GHC.List.filter
                                 @ [GHC.Types.Char]
                                 (FortranSynthesiser.matchVarNameInDecl var_name)
                                 origDeclLines))
                           w of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : ds16 ds17
                      -> FortranSynthesiser.getMissingArgDeclStrs_go ds17 ds16 } #)) -}
5ac383e8d5b2ceaa2cca42e746fdd8e2
  $wgo ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (# [GHC.Base.String], GHC.Base.String #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
be0697fce7e910187f655a7e83aafead
  $wgo1 :: [GHC.Types.Char] -> GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
2d6ba9f8937d362f641a4906db29ead9
  $wisImplicitNone ::
    [GHC.Base.String]
    -> GHC.Base.String -> (# [GHC.Base.String], GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.String]) (w :: GHC.Base.String) ->
                 let {
                   chunks :: [GHC.Base.String] = Data.OldList.words w
                 } in
                 case GHC.List.elem
                        @ [GHC.Types.Char]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        FortranSynthesiser.isImplicitNone2
                        chunks of wild {
                   GHC.Types.False
                   -> (# GHC.Base.++
                           @ [GHC.Types.Char]
                           ww
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              w
                              (GHC.Types.[] @ [GHC.Types.Char])),
                         GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Types.True
                   -> case GHC.List.elem
                             @ [GHC.Types.Char]
                             GHC.Classes.$fEq[]_$s$fEq[]1
                             FortranSynthesiser.isImplicitNone1
                             chunks of wild1 {
                        GHC.Types.False
                        -> (# GHC.Base.++
                                @ [GHC.Types.Char]
                                ww
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   w
                                   (GHC.Types.[] @ [GHC.Types.Char])),
                              GHC.Types.[] @ GHC.Types.Char #)
                        GHC.Types.True -> (# ww, w #) } }) -}
3dbd8516d7b78eef8eed7ab781a5e87a
  $wpoly_go10 ::
    a
    -> LanguageFortranTools.Anno
    -> Language.Fortran.Variable
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a
    -> a
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><S,1*U>, Inline: [0] -}
5d085b4a9facb97c34ec76b018928030
  $wproduceCodeBlock ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> LanguageFortranTools.ModuleVarsTable
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.Maybe
         (Language.Fortran.Fortran LanguageFortranTools.Anno)
    -> LanguageFortranTools.Anno
    -> Language.Fortran.UseBlock LanguageFortranTools.Anno
    -> Language.Fortran.Implicit LanguageFortranTools.Anno
    -> Language.Fortran.SrcSpan
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 15,
     Strictness: <L,U><L,U><L,U(U,A)><L,U><L,U><S,U><L,1*U><L,1*U><L,1*U><L,U><L,U><L,U><L,1*U(U(U,U(U),U),U(U,U(U),U))><L,U><S,U>,
     Inline: [0] -}
99597b8cac3b30159aeb3d210ed52070
  $wproduceCode_prog ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.String
    -> LanguageFortranTools.ModuleVarsTable
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w1 :: [GHC.Base.String])
                   (w2 :: [GHC.Base.String])
                   (w3 :: GHC.Types.Bool)
                   (w4 :: GHC.Base.String)
                   (w5 :: GHC.Base.String)
                   (ww :: Language.Fortran.Program LanguageFortranTools.Anno)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: LanguageFortranTools.ModuleVarsTable)
                   (w6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case LanguageFortranTools.$wpreProcessingHelper
                        w1
                        w2
                        w3
                        ww1
                        w6 of ds16 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,,) preproc_inp ds17 ds18 ->
                 (# ipv,
                    let {
                      lvl339 :: (Language.Fortran.Program LanguageFortranTools.Anno,
                                 GHC.Base.String)
                        {- Strictness: m -}
                      = (ww, ww1)
                    } in
                    let {
                      originalLines :: [GHC.Base.String] = Data.OldList.lines preproc_inp
                    } in
                    letrec {
                      go30 :: [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
                              -> [GHC.Types.Char] -> [GHC.Types.Char]
                        {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                      = \ (ds19 :: [Language.Fortran.ProgUnit LanguageFortranTools.Anno])
                          (eta :: [GHC.Types.Char]) ->
                        case ds19 of wild1 {
                          [] -> eta
                          : y ys
                          -> go30
                               ys
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  eta
                                  (FortranSynthesiser.$wproduceCode_progUnit
                                     w
                                     (Data.Map.Base.Tip
                                        @ SubroutineTable.SubNameStr
                                        @ SubroutineTable.ArgumentTranslation)
                                     lvl339
                                     ww2
                                     w4
                                     w5
                                     originalLines
                                     y)) }
                    } in
                    go30 ww (GHC.Types.[] @ GHC.Types.Char) #) } }) -}
e88ef86de36f53d67ee7fdc653599b4e
  $wproduceCode_progUnit ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> LanguageFortranTools.ModuleVarsTable
    -> GHC.Base.String
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
0177b4e0ccd46b85078bd1899678e5ed
  $wrestoreUsedModuleDecls' ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> LanguageFortranTools.ModuleVarsTable
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0] -}
d65e5d5a5f828a142f37a867a9846144
  $wsynthesisElses ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 6, Strictness: <L,U(U,A)><L,U><L,U><S,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
5ec84bef05504f38103c1fa4f187666a
  $wsynthesiseArgList ::
    Language.Fortran.Expr LanguageFortranTools.Anno -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.Fortran.Expr
                            LanguageFortranTools.Anno) ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (FortranSynthesiser.synthesiseESeq ww)
                      FortranSynthesiser.synthesiseArgList1)) -}
d7b50a8a99b75ff6fb0f580d88a90c6e
  $wsynthesiseAssg ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: [GHC.Base.String])
                   (w2 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w2 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseAssg1
                   Language.Fortran.Assg anno src expr1 expr2
                   -> case CodeEmitterUtils.isGenerated wild of wild1 {
                        GHC.Types.False -> CodeEmitterUtils.extractOriginalCode w1 src
                        GHC.Types.True
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             w
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (LanguageFortranTools.outputExprFormatting expr1)
                                (GHC.CString.unpackAppendCString#
                                   " = "#
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      (LanguageFortranTools.outputExprFormatting expr2)
                                      FortranSynthesiser.checkForImplicitNone1))) } }) -}
6ccb2bad77356e1ef28514e6cce6468b
  $wsynthesiseBufferLoads ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
18b897070839215d744bc1a115f93610
  $wsynthesiseBufferLoads_kernel ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> Language.Fortran.Block LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseBufferLoads
                   w
                   w1
                   w2
                   (LanguageFortranTools.listRemoveDuplications
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                      FortranSynthesiser.$s$fEqVarName
                      (GHC.Types.:
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                         CodeEmitterUtils.statePtrVarName
                         (GHC.Base.++
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                            (LanguageFortranTools.listRemoveDuplications
                               @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                               FortranSynthesiser.$s$fEqVarName
                               (FortranSynthesiser.synthesiseBufferLoads_kernel_go
                                  (Data.Generics.Schemes.everything
                                     @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                     (GHC.Base.++
                                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                                     LanguageFortranTools.extractKernels1
                                     @ (Language.Fortran.Block LanguageFortranTools.Anno)
                                     FortranSynthesiser.$s$fDataBlock
                                     w3)
                                  (GHC.Types.[]
                                     @ (Language.Fortran.VarName LanguageFortranTools.Anno))))
                            (let {
                               z :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                               = GHC.Base.map
                                   @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                   @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                   FortranSynthesiser.synthesiseBufferLoads_kernel2
                                   (Data.Generics.Schemes.everything
                                      @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                      (GHC.Base.++
                                         @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                                      LanguageFortranTools.extractBufferReads1
                                      @ (Language.Fortran.Block LanguageFortranTools.Anno)
                                      FortranSynthesiser.$s$fDataBlock
                                      w3)
                             } in
                             letrec {
                               go30 :: [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                       -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds16 :: [Language.Fortran.Fortran
                                               LanguageFortranTools.Anno]) ->
                                 case ds16 of wild {
                                   [] -> z
                                   : y ys
                                   -> GHC.Types.:
                                        @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                        (case y of wild1 {
                                           DEFAULT
                                           -> FortranSynthesiser.synthesiseBufferLoads_kernel1
                                           Language.Fortran.OpenCLBufferWrite ds17 ds18 var
                                           -> var })
                                        (go30 ys) }
                             } in
                             go30
                               (Data.Generics.Schemes.everything
                                  @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                  (GHC.Base.++
                                     @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                                  LanguageFortranTools.extractBufferWrites1
                                  @ (Language.Fortran.Block LanguageFortranTools.Anno)
                                  FortranSynthesiser.$s$fDataBlock
                                  w3)))))) -}
3605e6e7223bb5a8a2e546ea305cdc9a
  $wsynthesiseBufferStores ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
00b293c61d7e3bc0d844df9c602b346d
  $wsynthesiseCall ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: [GHC.Base.String])
                   (w2 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w2 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseCall1
                   Language.Fortran.Call anno src expr args
                   -> let {
                        $j :: GHC.Prim.Void# -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ (w3 :: GHC.Prim.Void#)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            w
                            (GHC.CString.unpackAppendCString#
                               "call "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (LanguageFortranTools.outputExprFormatting expr)
                                  (case args of ww { Language.Fortran.ArgList ww1 ww2 ->
                                   GHC.Base.++
                                     @ GHC.Types.Char
                                     (FortranSynthesiser.$wsynthesiseArgList ww2)
                                     FortranSynthesiser.checkForImplicitNone1 })))
                      } in
                      case Data.Generics.Schemes.everything
                             @ GHC.Types.Bool
                             GHC.Classes.||
                             CodeEmitterUtils.anyChildGenerated1
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                             CodeEmitterUtils.$s$fDataFortran
                             wild of wild1 {
                        GHC.Types.False
                        -> case CodeEmitterUtils.isGenerated wild of wild2 {
                             GHC.Types.False
                             -> CodeEmitterUtils.$wextractOriginalCode_Offset
                                  CodeEmitterUtils.extractOriginalCode1
                                  CodeEmitterUtils.extractOriginalCode1
                                  w1
                                  src
                             GHC.Types.True -> $j GHC.Prim.void# }
                        GHC.Types.True -> $j GHC.Prim.void# } }) -}
8ba7c403dc4bb7e0dc7d9ee3acb70d73
  $wsynthesiseKernelCall ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.String
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,1*U>, Inline: [0] -}
cd4f2d2e1759fb1e4cf8efed0c8b0d20
  $wsynthesiseOpenCLBufferRead ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.String
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.Fortran.Program
                            LanguageFortranTools.Anno)
                   (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w1 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseOpenCLBufferRead3
                   Language.Fortran.OpenCLBufferRead anno src varName
                   -> case FortranGenerator.$wgenerateKernelDeclarations
                             ww
                             wild of ww1 { (#,,#) ww2 ww3 ww4 ->
                      case ww2 of wild1 {
                        []
                        -> case FortranSynthesiser.synthesiseOpenCLBufferRead2
                           ret_ty GHC.Base.String
                           of {}
                        : readDecl ds16
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (FortranSynthesiser.synthesiseBufferAccess
                                w
                                FortranSynthesiser.synthesiseOpenCLBufferRead1
                                readDecl)
                             FortranSynthesiser.checkForImplicitNone1 } } }) -}
fa96ddd3742fd8f4c64e2bf12ed9f9d2
  $wsynthesiseOpenCLBufferWrite ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.String
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.Fortran.Program
                            LanguageFortranTools.Anno)
                   (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w1 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseOpenCLBufferWrite3
                   Language.Fortran.OpenCLBufferWrite anno src varName
                   -> case FortranGenerator.$wgenerateKernelDeclarations
                             ww
                             wild of ww1 { (#,,#) ww2 ww3 ww4 ->
                      case ww3 of wild1 {
                        []
                        -> case FortranSynthesiser.synthesiseOpenCLBufferWrite2
                           ret_ty GHC.Base.String
                           of {}
                        : writeDecl ds16
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (FortranSynthesiser.synthesiseBufferAccess
                                w
                                FortranSynthesiser.synthesiseOpenCLBufferWrite1
                                writeDecl)
                             FortranSynthesiser.checkForImplicitNone1 } } }) -}
478a22f070451d3efb585c01b1d94cb3
  $wsynthesiseOpenCLMap ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,U(U,A)><S,1*U>,
     Inline: [0] -}
0bdf33c3e37caa96b02e4c7db3846233
  $wsynthesiseOpenCLReduce ::
    Platform.Platform
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,1*U><L,U(U,A)><S,1*U>,
     Inline: [0] -}
ebcb93c8c380ed857cd2a91cb11623fd
  $wsynthesiseSizeStatements ::
    GHC.Base.String
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
6710337499dfd340798485995e18935a
  $wsynthesiseSizeStatements_kernel ::
    GHC.Base.String
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseSizeStatements
                   w
                   (LanguageFortranTools.listRemoveDuplications
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                      FortranSynthesiser.$s$fEqVarName
                      (GHC.Base.++
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                         (LanguageFortranTools.listRemoveDuplications
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                            FortranSynthesiser.$s$fEqVarName
                            (FortranSynthesiser.synthesiseSizeStatements_kernel_go
                               (Data.Generics.Schemes.everything
                                  @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                  (GHC.Base.++
                                     @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                                  LanguageFortranTools.extractKernels1
                                  @ (Language.Fortran.Program LanguageFortranTools.Anno)
                                  FortranSynthesiser.$s$fData[]
                                  w1)
                               (GHC.Types.[]
                                  @ (Language.Fortran.VarName LanguageFortranTools.Anno))))
                         (let {
                            z :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                            = GHC.Base.map
                                @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                FortranSynthesiser.synthesiseSizeStatements_kernel2
                                (Data.Generics.Schemes.everything
                                   @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                   (GHC.Base.++
                                      @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                                   LanguageFortranTools.extractBufferReads1
                                   @ (Language.Fortran.Program LanguageFortranTools.Anno)
                                   FortranSynthesiser.$s$fData[]
                                   w1)
                          } in
                          letrec {
                            go30 :: [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds16 :: [Language.Fortran.Fortran
                                            LanguageFortranTools.Anno]) ->
                              case ds16 of wild {
                                [] -> z
                                : y ys
                                -> GHC.Types.:
                                     @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                     (case y of wild1 {
                                        DEFAULT
                                        -> FortranSynthesiser.synthesiseSizeStatements_kernel1
                                        Language.Fortran.OpenCLBufferWrite ds17 ds18 var -> var })
                                     (go30 ys) }
                          } in
                          go30
                            (Data.Generics.Schemes.everything
                               @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                               (GHC.Base.++
                                  @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                               LanguageFortranTools.extractBufferWrites1
                               @ (Language.Fortran.Program LanguageFortranTools.Anno)
                               FortranSynthesiser.$s$fData[]
                               w1))))
                   w1) -}
853bb2608eda9b94ee595659fca2d0ef
  $wsynthesiseSuperKernel ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(GHC.Base.String, GHC.Base.String)]
    -> (# GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap #)
  {- Arity: 5, Strictness: <L,1*U><L,U><L,U><L,1*U><S,1*U>,
     Inline: [0] -}
3be8feb08ae3c9f81384c71fed891a4a
  $wsynthesiseSuperKernelModule ::
    GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(GHC.Base.String, GHC.Base.String)]
    -> (# GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: [(Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String)])
                   (w3 :: [(GHC.Base.String, GHC.Base.String)]) ->
                 let {
                   ds16 :: (GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap)
                   = case FortranSynthesiser.$wsynthesiseSuperKernel
                            w
                            LanguageFortranTools.outputTab
                            w1
                            w2
                            w3 of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (# GHC.CString.unpackAppendCString#
                      "module "#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         w
                         (GHC.CString.unpackAppendCString#
                            "\n\
                            \\n"#
                            (GHC.CString.unpackAppendCString#
                               "\n"#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  LanguageFortranTools.tabInc
                                  (GHC.CString.unpackAppendCString#
                                     "contains\n\
                                     \\n"#
                                     (GHC.CString.unpackAppendCString#
                                        "\n"#
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           (FortranSynthesiser.synthesiseSuperKernelModule_go
                                              w3
                                              (GHC.Types.[] @ GHC.Types.Char))
                                           (case ds16 of wild { (,) superKernelCode allKernelArgsMap ->
                                            GHC.Base.++
                                              @ GHC.Types.Char
                                              superKernelCode
                                              (GHC.CString.unpackAppendCString#
                                                 "end module "#
                                                 w) })))))))),
                    case ds16 of wild { (,) superKernelCode allKernelArgsMap ->
                    allKernelArgsMap } #)) -}
4091735d41df1420f4a2309999866ec0
  $wsynthesiseUse ::
    GHC.Base.String
    -> Language.Fortran.Uses LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Uses LanguageFortranTools.Anno) ->
                 case w1 of wild {
                   Language.Fortran.Use ds16 ds17 ds18 ds19
                   -> case ds17 of wild1 { (,) moduleName ds20 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        w
                        (GHC.CString.unpackAppendCString#
                           "use "#
                           (GHC.Base.++
                              @ GHC.Types.Char
                              moduleName
                              FortranSynthesiser.checkForImplicitNone1)) }
                   Language.Fortran.UseNil ipv
                   -> FortranSynthesiser.synthesiseUse1 }) -}
6d01c111fa92166b369d6c91565b9644
  checkForImplicitNone ::
    GHC.Base.String -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case FortranSynthesiser.$wcheckForImplicitNone
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
3c5fc725bf7d08a48a98924e8402a453
  checkForImplicitNone1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
580ca52019a555fe9bd34180b839c352
  defaultFilename :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: [GHC.Base.String]) ->
                 case ds16 of wild {
                   [] -> FortranSynthesiser.defaultFilename1
                   : x ds17
                   -> case ds17 of wild1 {
                        [] -> GHC.CString.unpackAppendCString# "par_"# x
                        : ipv ipv1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             x
                             (GHC.CString.unpackAppendCString#
                                "/"#
                                (FortranSynthesiser.defaultFilename_$sdefaultFilename
                                   ipv
                                   ipv1)) } }) -}
adf088660cae32a797edb785b6d2e562
  defaultFilename1 :: GHC.Base.String
  {- Strictness: x -}
12ea4552b28b16d4b30c28f5e60918ef
  defaultFilename_$sdefaultFilename ::
    [GHC.Types.Char] -> [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U> -}
61c09b7240ce9999b2601ea05238edb0
  extractParamDecls ::
    Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 1,
     Unfolding: (Data.Generics.Schemes.everything
                   @ [Language.Fortran.Decl LanguageFortranTools.Anno]
                   (GHC.Base.++ @ (Language.Fortran.Decl LanguageFortranTools.Anno))
                   FortranSynthesiser.extractParamDecls1
                   @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   FortranSynthesiser.$s$fDataProgUnit) -}
04398300081628c21f3e4d95339df029
  extractParamDecls1 ::
    Data.Data.Data a =>
    a -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2,
     Strictness: <S(C(S(SLLLL))LLLLLLLLLLLLLL),1*U(1*C1(U(U,U,A,A,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ a ($dData :: Data.Data.Data a) (eta :: a) ->
                 case (Data.Data.$p1Data @ a $dData)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ a) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds16 ds17 ds18 ->
                 case FortranSynthesiser.extractParamDecls2 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds19 ds20 ds21 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt dt2) of wild2 {
                   GHC.Types.False
                   -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                        GHC.Types.False
                        -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        GHC.Types.True
                        -> case eta
                                  `cast`
                                (UnsafeCo representational a (Language.Fortran.Decl
                                                                LanguageFortranTools.Anno)) of wild7 {
                             DEFAULT
                             -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                             Language.Fortran.Decl ds22 ds23 ds24 ds25
                             -> case ds25 of wild8 {
                                  Language.Fortran.BaseType ds26 ds27 ds28 ds29 ds30
                                  -> case ds28 of wild9 {
                                       []
                                       -> GHC.Types.[]
                                            @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                       : ds31 ds32
                                       -> case ds31 of wild10 {
                                            DEFAULT
                                            -> GHC.Types.[]
                                                 @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                            Language.Fortran.Parameter ds33
                                            -> case ds32 of wild11 {
                                                 []
                                                 -> GHC.Types.:
                                                      @ (Language.Fortran.Decl
                                                           LanguageFortranTools.Anno)
                                                      wild7
                                                      (GHC.Types.[]
                                                         @ (Language.Fortran.Decl
                                                              LanguageFortranTools.Anno))
                                                 : ipv ipv1
                                                 -> GHC.Types.[]
                                                      @ (Language.Fortran.Decl
                                                           LanguageFortranTools.Anno) } } }
                                  Language.Fortran.ArrayT ipv ipv1 ipv2 ipv3 ipv4 ipv5
                                  -> GHC.Types.[]
                                       @ (Language.Fortran.Decl
                                            LanguageFortranTools.Anno) } } } } } }) -}
683240dfe2f2734ad7f13414c2b3a16e
  extractParamDecls2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#45 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.extractParamDecls_types
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
2693e6d4508399c699b920913135cc70
  extractParamDecls3 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        FortranSynthesiser.extractParamDecls_types2 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        FortranSynthesiser.extractParamDecls_types1 of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   FortranSynthesiser.extractParamDecls_types1 } } } } } }) -}
4cefbdad32b76543ae3d62dff59ad253
  extractParamDecls4 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.extractParamDecls5
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
49889b0880b049e3f5765fc89e77b0b0
  extractParamDecls5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.extractParamDecls_types2
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
87510bb5934a66faa114c969125e4d1c
  extractParamDecls6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
a3091d21fef7ba4588e281207aeb0a48
  extractParamDecls_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.extractParamDecls3
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
a5d9273f889bf323d81bfd7e1daff66a
  extractParamDecls_types1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.extractParamDecls_types2
                   FortranSynthesiser.extractParamDecls4) -}
a0eb71c7894f555cc43a41a0b1bf6d65
  extractParamDecls_types2 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.extractParamDecls6
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
67448f1c0c261c8e7206eae91ba569c2
  generateKernelName ::
    GHC.Base.String -> Language.Fortran.SrcSpan -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U><S(S(SLL)L),1*U(1*U(1*U,1*U(U),A),A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String) (w1 :: Language.Fortran.SrcSpan) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Language.Fortran.SrcLoc ww4 ww5 ww6 ->
                 FortranSynthesiser.$wgenerateKernelName w ww4 ww5 } }) -}
23d71ed284a6330b8a7ddb8b23c7f8f0
  generateKernelNameOLD ::
    GHC.Base.String
    -> Language.Fortran.SrcSpan
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U><S(S(SLL)L),1*U(1*U(1*U,1*U(U),A),A)><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.SrcSpan)
                   (w2 :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Language.Fortran.SrcLoc ww4 ww5 ww6 ->
                 FortranSynthesiser.$wgenerateKernelNameOLD w ww4 ww5 } }) -}
f9de395f77f6f3051467b06da9f0c4a8
  generateOriginalFileName :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: [GHC.Base.String]) ->
                 case ds16 of wild {
                   [] -> FortranSynthesiser.generateOriginalFileName1
                   : x ds17
                   -> case ds17 of wild1 {
                        [] -> GHC.CString.unpackAppendCString# "original_"# x
                        : ipv ipv1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             x
                             (GHC.CString.unpackAppendCString#
                                "/"#
                                (FortranSynthesiser.generateOriginalFileName_$sgenerateOriginalFileName
                                   ipv
                                   ipv1)) } }) -}
345aacc697be065db720b9d51c2be956
  generateOriginalFileName1 :: GHC.Base.String
  {- Strictness: x -}
9bd0515d6f298110d5d4cdae9d23114d
  generateOriginalFileName_$sgenerateOriginalFileName ::
    [GHC.Types.Char] -> [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U> -}
f63286fc09cdfdc070f64b36d51ff514
  generateRangeRelDecls ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (loopvartups :: [(Language.Fortran.VarName
                                       LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno)])
                   (tabs :: GHC.Base.String) ->
                 let {
                   loopvarnames :: [GHC.Base.String]
                   = Data.OldList.nubBy
                       @ GHC.Base.String
                       GHC.Base.eqString
                       (GHC.Base.map
                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno)
                          @ [GHC.Types.Char]
                          FortranSynthesiser.generateRangeRelDecls3
                          loopvartups)
                 } in
                 let {
                   z :: [[GHC.Types.Char]]
                   = GHC.Base.map
                       @ [GHC.Types.Char]
                       @ [GHC.Types.Char]
                       (\ (v :: [GHC.Types.Char]) ->
                        GHC.Base.++
                          @ GHC.Types.Char
                          tabs
                          (GHC.CString.unpackAppendCString#
                             "integer :: "#
                             (GHC.Base.++
                                @ GHC.Types.Char
                                v
                                FortranSynthesiser.generateRangeRelDecls2)))
                       loopvarnames
                 } in
                 letrec {
                   go30 :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds16 :: [[GHC.Types.Char]]) ->
                     case ds16 of wild {
                       [] -> z
                       : y ys
                       -> GHC.Types.:
                            @ [GHC.Types.Char]
                            (GHC.Base.++
                               @ GHC.Types.Char
                               tabs
                               (GHC.CString.unpackAppendCString#
                                  "integer :: "#
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     y
                                     FortranSynthesiser.generateRangeRelDecls1)))
                            (go30 ys) }
                 } in
                 Data.OldList.unlines (go30 loopvarnames)) -}
de378cc40e1e493b8e48372745e06bcf
  generateRangeRelDecls1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_range"#) -}
c204eabb8bd6cc6b6bd6f41403194862
  generateRangeRelDecls2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_rel"#) -}
3e874b3fc615b0c08207c8239333f102
  generateRangeRelDecls3 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno)
    -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LS)LLL),1*U(1*U(A,1*U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds16 :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno)) ->
                 case ds16 of wild { (,,,) v ds17 ds18 ds19 ->
                 LanguageFortranTools.varNameStr v }) -}
37c0326f9e27f34834cc4ef88e6f0b05
  generateStateName :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (kernelName :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   "ST_"#
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b1
                         (c :: GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ GHC.Types.Char
                            @ b1
                            @ GHC.Types.Char
                            c
                            GHC.Unicode.toUpper)
                         n
                         kernelName))) -}
e45035e6dee26165c3363647e8a71293
  getArgsAndLocalVarsForLoopBody ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> ([GHC.Base.String], [GHC.Base.String])
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wgetArgsAndLocalVarsForLoopBody
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
86dfd9766e40256b4cba62f9228ae472
  getArgsAndLocalVarsForLoopBody1 ::
    (Language.Fortran.Arg LanguageFortranTools.Anno)
  {- Strictness: x -}
9e4cdf0b39cf32349a7700694991975a
  getArgsAndLocalVarsForLoopBody2 ::
    Data.Data.Data a =>
    a -> [Language.Fortran.ArgName LanguageFortranTools.Anno]
  {- Arity: 2,
     Strictness: <S(C(S(SLLLL))LLLLLLLLLLLLLL),1*U(1*C1(U(U,U,A,A,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ a ($dData :: Data.Data.Data a) (eta :: a) ->
                 case (Data.Data.$p1Data @ a $dData)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ a) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds16 ds17 ds18 ->
                 case FortranSynthesiser.getArgsAndLocalVarsForLoopBody3 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds19 ds20 ds21 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt dt2) of wild2 {
                   GHC.Types.False
                   -> GHC.Types.[]
                        @ (Language.Fortran.ArgName LanguageFortranTools.Anno)
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                        GHC.Types.False
                        -> GHC.Types.[]
                             @ (Language.Fortran.ArgName LanguageFortranTools.Anno)
                        GHC.Types.True
                        -> LanguageFortranTools.extractArgName
                             eta
                               `cast`
                             (UnsafeCo representational a (Language.Fortran.ArgName
                                                             LanguageFortranTools.Anno)) } } } }) -}
711f816829028017e23660f73f4d182e
  getArgsAndLocalVarsForLoopBody3 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#49 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.getArgsAndLocalVarsForLoopBody4
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
82ba4062207bd12d8cff3ff7ea10bd1a
  getArgsAndLocalVarsForLoopBody4 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.getArgsAndLocalVarsForLoopBody5
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
ddfe0d28cb09f834c2f12782a7214645
  getArgsAndLocalVarsForLoopBody5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        FortranSynthesiser.getArgsAndLocalVarsForLoopBody_types1 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        FortranSynthesiser.getArgsAndLocalVarsForLoopBody_types of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranSynthesiser.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   FortranSynthesiser.getArgsAndLocalVarsForLoopBody_types } } } } } }) -}
f51b64f4e287d7015598c07fc6f9c97e
  getArgsAndLocalVarsForLoopBody6 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.getArgsAndLocalVarsForLoopBody7
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
b8def260cce95e2e38810bb2764b25d1
  getArgsAndLocalVarsForLoopBody7 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.getArgsAndLocalVarsForLoopBody_types1
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
849fa6d11a747813af2d42b1c7e13471
  getArgsAndLocalVarsForLoopBody8 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranSynthesiser.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranSynthesiser.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
1f9a705674f04b6ee8da47283bd75909
  getArgsAndLocalVarsForLoopBody9 ::
    Language.Fortran.ArgName LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: Language.Fortran.ArgName
                              LanguageFortranTools.Anno) ->
                 case ds16 of wild {
                   DEFAULT
                   -> Control.Exception.Base.patError
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.Base.String
                        "src/FortranSynthesiser.hs:984:73-92|lambda"#
                   Language.Fortran.ArgName ds17 an -> an }) -}
5efda1f4e2955360e776ca35380257fe
  getArgsAndLocalVarsForLoopBody_go5 ::
    [[GHC.Types.Char]]
    -> Data.Set.Base.Set
         (Language.Fortran.VarName LanguageFortranTools.Anno)
    -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
23784cbf87ac32393f44ad8cd9005560
  getArgsAndLocalVarsForLoopBody_types ::
    [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.getArgsAndLocalVarsForLoopBody_types1
                   FortranSynthesiser.getArgsAndLocalVarsForLoopBody6) -}
462b7c9ca7619e7a76ab59ae1ce393c4
  getArgsAndLocalVarsForLoopBody_types1 ::
    [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranSynthesiser.getArgsAndLocalVarsForLoopBody8
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
c02a07185e17e028a48e8d3b5cff4d90
  getLocalDeclStrs ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (Language.Fortran.Decl LanguageFortranTools.Anno,
        Language.Fortran.Fortran LanguageFortranTools.Anno)
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String, GHC.Base.String, GHC.Base.String)
  {- Arity: 6,
     Strictness: <L,1*U><L,1*U><L,1*U(A,1*U)><L,1*U><L,U><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w1 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w2 :: (Language.Fortran.Decl LanguageFortranTools.Anno,
                           Language.Fortran.Fortran LanguageFortranTools.Anno))
                   (w3 :: [GHC.Base.String])
                   (w4 :: GHC.Base.String)
                   (w5 :: GHC.Base.String) ->
                 case FortranSynthesiser.$wgetLocalDeclStrs
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
2152f3781d70fe89d284b9b25a07fa62
  getLocalDeclStrs_OLD ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 5, Strictness: <L,1*U><L,U><L,1*U><L,U><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (w2 :: [GHC.Base.String])
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Base.String) ->
                 case FortranSynthesiser.$wgetLocalDeclStrs_OLD
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d51ac11ddce40b1350d3ea73e6688a5d
  getMissingArgDeclStrs ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> [GHC.Types.Char]
    -> ([GHC.Types.Char], [GHC.Types.Char])
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (w2 :: [GHC.Types.Char]) ->
                 case FortranSynthesiser.$wgetMissingArgDeclStrs
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d4b4a5e57a4791703c20d20c9d1e16d0
  getMissingArgDeclStrs_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ae96d275bb33876d32664ef664d252a6
  isImplicitNone ::
    ([GHC.Base.String], GHC.Base.String)
    -> GHC.Base.String -> ([GHC.Base.String], GHC.Base.String)
  {- Arity: 2, Strictness: <S,1*U(U,A)><S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ([GHC.Base.String], GHC.Base.String))
                   (w1 :: GHC.Base.String) ->
                 case w of ww { (,) ww1 ww2 ->
                 case FortranSynthesiser.$wisImplicitNone
                        ww1
                        w1 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
cc3ca42808c9e825b9558ecd50e76b5d
  isImplicitNone1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "none"#) -}
229581cc2c2f8bbd3d212f4c4928a372
  isImplicitNone2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "implicit"#) -}
ca8e9af43493a80c8f7e74b9437cc27e
  matchParameterDecl :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (line :: GHC.Base.String) ->
                 GHC.List.elem
                   @ [GHC.Types.Char]
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   FortranSynthesiser.matchParameterDecl2
                   (Data.OldList.words
                      (GHC.List.filter
                         @ GHC.Types.Char
                         FortranSynthesiser.matchParameterDecl1
                         line))) -}
faf655bdc95da5329691ecaf1dc3d3ad
  matchParameterDecl1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds16 :: GHC.Types.Char) ->
                 case ds16 of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.True ','# -> GHC.Types.False } }) -}
3b7d4a43e4eaac10440c305eee606ca7
  matchParameterDecl2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "parameter"#) -}
f1f7e3a475031d133c574bfdbfda9426
  matchVarNameInDecl ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (var_name :: GHC.Base.String)
                   (line :: GHC.Base.String) ->
                 GHC.Base.eqString
                   (Data.OldList.wordsFB
                      @ (GHC.Base.String -> GHC.Base.String)
                      FortranSynthesiser.matchVarNameInDecl1
                      (GHC.Base.id @ GHC.Base.String)
                      line
                      (GHC.List.lastError @ GHC.Base.String))
                   var_name) -}
56ef94f514babcf13fa7f6581f99f488
  matchVarNameInDecl1 ::
    GHC.Base.String
    -> (GHC.Base.String -> GHC.Base.String)
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (ds16 :: GHC.Base.String)
                   (ds17 :: GHC.Base.String -> GHC.Base.String)[OneShot]
                   (tpl :: GHC.Base.String)[OneShot] ->
                 ds17 ds16) -}
a7100f136d3dec5b4385774000c5bd7e
  produceCodeBlock ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> LanguageFortranTools.ModuleVarsTable
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.Maybe
         (Language.Fortran.Fortran LanguageFortranTools.Anno)
    -> Language.Fortran.Block LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U(U,A)><L,U><L,U><S,U><L,1*U><L,1*U><L,1*U><S(LLLLLS),1*U(U,U,U,1*U(U(U,U(U),U),U(U,U(U),U)),U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (10, True, False)
                (\ (w :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w1 :: SubroutineTable.ArgumentTranslation)
                   (w2 :: (Language.Fortran.Program LanguageFortranTools.Anno,
                           GHC.Base.String))
                   (w3 :: LanguageFortranTools.ModuleVarsTable)
                   (w4 :: GHC.Base.String)
                   (w5 :: [GHC.Base.String])
                   (w6 :: GHC.Base.String)
                   (w7 :: GHC.Base.String)
                   (w8 :: GHC.Base.Maybe
                            (Language.Fortran.Fortran LanguageFortranTools.Anno))
                   (w9 :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                 case w9 of ww { Language.Fortran.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                 FortranSynthesiser.$wproduceCodeBlock
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
34750caa6ddb56cb547f7f555c792585
  produceCode_fortran ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U(U,A)><L,U><L,U><S,1*U> -}
4be2bbd857a2eff7128d794a1d0f1d21
  produceCode_prog ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> Platform.Platform
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
    -> ((Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String),
        LanguageFortranTools.ModuleVarsTable)
    -> GHC.Types.IO GHC.Base.String
  {- Arity: 10,
     Strictness: <L,U><L,A><L,U><L,U><L,A><L,U><L,U><L,U><S(SL),1*U(1*U(U,U),U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.produceCode_prog1
                  `cast`
                (<CodeEmitterUtils.KernelArgsIndexMap>_R
                 ->_R <SubroutineTable.SubroutineArgumentTranslationMap>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <Platform.Platform>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <((Language.Fortran.Program LanguageFortranTools.Anno,
                         GHC.Base.String),
                        LanguageFortranTools.ModuleVarsTable)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
432a1846b413b88fc16bbf150a9e35df
  produceCode_prog1 ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> Platform.Platform
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
    -> ((Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String),
        LanguageFortranTools.ModuleVarsTable)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 10,
     Strictness: <L,U><L,A><L,U><L,U><L,A><L,U><L,U><L,U><S(SL),1*U(1*U(U,U),U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (10, True, False)
                (\ (w :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w1 :: SubroutineTable.SubroutineArgumentTranslationMap)
                   (w2 :: [GHC.Base.String])
                   (w3 :: [GHC.Base.String])
                   (w4 :: Platform.Platform)
                   (w5 :: GHC.Types.Bool)
                   (w6 :: GHC.Base.String)
                   (w7 :: GHC.Base.String)
                   (w8 :: ((Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String),
                           LanguageFortranTools.ModuleVarsTable))
                   (w9 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w8 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 FortranSynthesiser.$wproduceCode_prog
                   w
                   w2
                   w3
                   w5
                   w6
                   w7
                   ww4
                   ww5
                   ww2
                   w9 } }) -}
2d36fc8056c8147f077b9f09dadf36db
  produceCode_progUnit ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> ((Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String),
        LanguageFortranTools.ModuleVarsTable)
    -> GHC.Base.String
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 7,
     Strictness: <L,U><L,U><S,1*U(U(U,U),U)><L,U><L,U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ (w :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w1 :: SubroutineTable.SubroutineArgumentTranslationMap)
                   (w2 :: ((Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String),
                           LanguageFortranTools.ModuleVarsTable))
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Base.String)
                   (w5 :: [GHC.Base.String])
                   (w6 :: Language.Fortran.ProgUnit LanguageFortranTools.Anno) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wproduceCode_progUnit
                   w
                   w1
                   ww1
                   ww2
                   w3
                   w4
                   w5
                   w6 }) -}
1470e1c2c8f5191ee424bbee0940af46
  readOriginalFileLines ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Types.IO [GHC.Base.String]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.readOriginalFileLines1
                  `cast`
                (<[GHC.Base.String]>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)) -}
a40951aa15920971702bd49e383efd7b
  readOriginalFileLines1 ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (cppDFlags :: [GHC.Base.String])
                   (cppXFlags :: [GHC.Base.String])
                   (fixedForm :: GHC.Types.Bool)
                   (filename :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case LanguageFortranTools.$wpreProcessingHelper
                        cppDFlags
                        cppXFlags
                        fixedForm
                        filename
                        eta of ds16 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,,) preproc_inp ds17 ds18 ->
                 (# ipv, Data.OldList.lines preproc_inp #) } }) -}
be8d7fbd8c541753627554f7b0072500
  removeIntent :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (line :: GHC.Base.String) ->
                 let {
                   chunks' :: [GHC.Base.String] = Data.OldList.words line
                 } in
                 case GHC.List.$wlenAcc
                        @ [GHC.Types.Char]
                        chunks'
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 3#) of wild {
                   GHC.Types.False
                   -> case chunks' of wild1 {
                        [] -> case GHC.List.init2 ret_ty GHC.Base.String of {}
                        : x xs
                        -> case GHC.List.init1 @ GHC.Base.String x xs of wild2 {
                             [] -> case GHC.List.init2 ret_ty GHC.Base.String of {}
                             : x1 xs1
                             -> let {
                                  n :: [GHC.Types.Char]
                                  = GHC.CString.unpackAppendCString#
                                      " :: "#
                                      (FortranSynthesiser.removeIntent_$sgo
                                         (GHC.List.lastError @ GHC.Base.String)
                                         x
                                         xs)
                                } in
                                case GHC.List.init1 @ GHC.Base.String x1 xs1 of wild3 {
                                  []
                                  -> case FortranSynthesiser.removeIntent5 of wild4 {
                                       [] -> n
                                       : x2 xs2
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            (Data.OldList.intercalate_$spoly_go
                                               @ GHC.Types.Char
                                               x2
                                               (Data.OldList.prependToAll
                                                  @ [GHC.Types.Char]
                                                  FortranSynthesiser.removeIntent4
                                                  xs2))
                                            n }
                                  : w ws
                                  -> case GHC.List.filter
                                            @ [GHC.Types.Char]
                                            FortranSynthesiser.removeIntent2
                                            (LanguageFortranTools.split
                                               FortranSynthesiser.removeIntent1
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  w
                                                  (Data.OldList.unwords_go ws))) of wild4 {
                                       [] -> n
                                       : x2 xs2
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            (Data.OldList.intercalate_$spoly_go
                                               @ GHC.Types.Char
                                               x2
                                               (Data.OldList.prependToAll
                                                  @ [GHC.Types.Char]
                                                  FortranSynthesiser.removeIntent4
                                                  xs2))
                                            n } } } }
                   GHC.Types.True -> line } }) -}
7d554d06d9a0acb25f67f847a333962a
  removeIntent1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ','#) -}
faba854ccd2a917eee6561e426a35ba7
  removeIntent2 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (chunk :: [GHC.Types.Char]) ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        chunk
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 10#) of wild {
                   GHC.Types.False
                   -> case GHC.Classes.$fEq[]_$s$c==1
                             (GHC.List.$wunsafeTake @ GHC.Types.Char 6# chunk)
                             FortranSynthesiser.removeIntent3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True -> GHC.Types.True } }) -}
15323bc77d8b6ad52e52fc08dc65f1ac
  removeIntent3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "intent"#) -}
caddc6594b31f654f1db0c66807af665
  removeIntent4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
271989db7bd8c474aaa1cdeef8118a09
  removeIntent5 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.List.filter
                   @ [GHC.Types.Char]
                   FortranSynthesiser.removeIntent2
                   FortranSynthesiser.removeIntent6) -}
2e9e807cbd12a0e8a35e96111268fdcd
  removeIntent6 :: [[GHC.Types.Char]]
  {- Unfolding: (LanguageFortranTools.split
                   FortranSynthesiser.removeIntent1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b2bb806ff3282ede7c5646403812587b
  removeIntent_$sgo ::
    [GHC.Types.Char]
    -> [GHC.Types.Char] -> [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><L,U> -}
7cb790cd6758034c987c449c37111de3
  restoreUsedModuleDecls ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> LanguageFortranTools.ModuleVarsTable
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <L,1*U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (blockDecl :: Language.Fortran.Decl LanguageFortranTools.Anno)
                   (modVarTable :: LanguageFortranTools.ModuleVarsTable) ->
                 FortranSynthesiser.restoreUsedModuleDecls'
                   (FortranSynthesiser.traverseDSeq
                      @ LanguageFortranTools.Anno
                      blockDecl
                      (GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)))
                   modVarTable) -}
8374fe610e9596b966d746df1de8c40c
  restoreUsedModuleDecls' ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> LanguageFortranTools.ModuleVarsTable
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <L,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (w1 :: LanguageFortranTools.ModuleVarsTable) ->
                 case FortranSynthesiser.$wrestoreUsedModuleDecls'
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
b1068cba7545c86ade895a59e71a4cec
  synthesisElses ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (Language.Fortran.Expr LanguageFortranTools.Anno,
        Language.Fortran.Fortran LanguageFortranTools.Anno)
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(U,A)><L,U><L,U><S,1*U><S,1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: GHC.Base.String)
                   (w4 :: (Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Fortran LanguageFortranTools.Anno)) ->
                 case w4 of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wsynthesisElses w w1 w2 w3 ww1 ww2 }) -}
3953a5b102af8b1ba5f5afb1f6294f49
  synthesisUses ::
    GHC.Base.String
    -> Language.Fortran.Uses LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><S,1*U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (ds16 :: Language.Fortran.Uses LanguageFortranTools.Anno) ->
                 case ds16 of wild {
                   Language.Fortran.Use ds17 ds18 ds19 ds20
                   -> case ds18 of wild1 { (,) str rename ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        tabs
                        (GHC.CString.unpackAppendCString#
                           "use "#
                           (GHC.Base.++
                              @ GHC.Types.Char
                              str
                              FortranSynthesiser.checkForImplicitNone1)) }
                   Language.Fortran.UseNil ipv -> GHC.Types.[] @ GHC.Types.Char }) -}
ba671c5f8e8824f0b2ff235049ffb51f
  synthesiseArgList ::
    Language.Fortran.ArgList LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(A,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.ArgList LanguageFortranTools.Anno) ->
                 case w of ww { Language.Fortran.ArgList ww1 ww2 ->
                 FortranSynthesiser.$wsynthesiseArgList ww2 }) -}
3c27cf5c08436d028a0d4171fdfea9dd
  synthesiseArgList1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
b1c5c7b31afdfb8473d636d9c77ba19d
  synthesiseAssg ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><L,1*U><L,U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseAssg w1 w2 w3) -}
12c69935ff2b552739d8f766bcc97e0a
  synthesiseAssg1 :: GHC.Base.String
  {- Strictness: x -}
1add90592c99a097c9d929a3c7c2986d
  synthesiseAttr ::
    Language.Fortran.Attr LanguageFortranTools.Anno -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: Language.Fortran.Attr
                              LanguageFortranTools.Anno) ->
                 case ds16 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseAttr7
                   Language.Fortran.Parameter ds17
                   -> FortranSynthesiser.matchParameterDecl2
                   Language.Fortran.Intent ds17 intentAttr
                   -> GHC.CString.unpackAppendCString#
                        "intent("#
                        (case intentAttr of wild1 {
                           Language.Fortran.In ds18 -> FortranSynthesiser.synthesiseAttr5
                           Language.Fortran.Out ds18 -> FortranSynthesiser.synthesiseAttr3
                           Language.Fortran.InOut ipv -> FortranSynthesiser.synthesiseAttr1 })
                   Language.Fortran.Dimension ds17 exprList
                   -> GHC.CString.unpackAppendCString#
                        "dimension("#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (FortranSynthesiser.synthesiseRangeExpr exprList)
                           FortranSynthesiser.synthesiseArgList1) }) -}
68d30488f50b1d38c352f2c7d26a15e1
  synthesiseAttr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranSynthesiser.synthesiseAttr2
                   FortranSynthesiser.synthesiseArgList1) -}
2d6795650a41faea275400b99e6fce01
  synthesiseAttr2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InOut"#) -}
1495dddb164e538483a516b69d49ab50
  synthesiseAttr3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranSynthesiser.synthesiseAttr4
                   FortranSynthesiser.synthesiseArgList1) -}
9acacecafcabef492a5856115e6b4f4b
  synthesiseAttr4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Out"#) -}
d162b178b1c755e1e8c0257421deacd1
  synthesiseAttr5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranSynthesiser.synthesiseAttr6
                   FortranSynthesiser.synthesiseArgList1) -}
53a484ff433d3b1df809a3254c006f47
  synthesiseAttr6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "In"#) -}
88b26428734b3a6f0b9bc65f91a169a3
  synthesiseAttr7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "[Incompatible attribute]"#) -}
aa3bad0e19c55ba16753264c6526ec36
  synthesiseAttrList ::
    [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: [Language.Fortran.Attr
                               LanguageFortranTools.Anno]) ->
                 case ds16 of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : attr ds17
                   -> case ds17 of wild1 {
                        []
                        -> case attr of wild2 {
                             DEFAULT -> FortranSynthesiser.synthesiseAttr7
                             Language.Fortran.Parameter ds18 -> GHC.Types.[] @ GHC.Types.Char
                             Language.Fortran.Intent ds18 intentAttr
                             -> GHC.CString.unpackAppendCString#
                                  "intent("#
                                  (case intentAttr of wild3 {
                                     Language.Fortran.In ds19 -> FortranSynthesiser.synthesiseAttr5
                                     Language.Fortran.Out ds19 -> FortranSynthesiser.synthesiseAttr3
                                     Language.Fortran.InOut ipv
                                     -> FortranSynthesiser.synthesiseAttr1 })
                             Language.Fortran.Dimension ds18 exprList
                             -> GHC.CString.unpackAppendCString#
                                  "dimension("#
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     (FortranSynthesiser.synthesiseRangeExpr exprList)
                                     FortranSynthesiser.synthesiseArgList1) }
                        : ipv ipv1
                        -> let {
                             attrStrList :: [GHC.Base.String]
                             = FortranSynthesiser.synthesiseAttrList_$sgo attr wild1
                           } in
                           case GHC.Classes.$fEq[]_$s$c==2
                                  attrStrList
                                  (GHC.Types.[] @ GHC.Base.String) of wild2 {
                             GHC.Types.False
                             -> case attrStrList of wild3 {
                                  [] -> case GHC.List.scanl2 ret_ty GHC.Base.String of {}
                                  : ds18 xs -> FortranSynthesiser.synthesiseAttrList_go xs ds18 }
                             GHC.Types.True -> FortranSynthesiser.synthesiseAttrList1 } } }) -}
bbda8fd5fe38451c2ead25afb141225b
  synthesiseAttrList1 :: GHC.Base.String
  {- Strictness: x -}
ff799009c747e8177f5122237328f090
  synthesiseAttrList_$sgo ::
    Language.Fortran.Attr
      (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.Attr
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> [[GHC.Types.Char]]
  {- Arity: 2, Strictness: <L,U><L,U> -}
7dfc4f09923d754acf7b9da568246491
  synthesiseAttrList_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
8188670ad01f6f134f587ae3c4862ae6
  synthesiseBaseType ::
    Language.Fortran.BaseType LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds16 :: Language.Fortran.BaseType LanguageFortranTools.Anno) ->
                 case ds16 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseBaseType4
                   Language.Fortran.Integer ds17
                   -> FortranSynthesiser.synthesiseBaseType3
                   Language.Fortran.Real ds17
                   -> FortranSynthesiser.synthesiseBaseType2
                   Language.Fortran.Character ds17
                   -> FortranSynthesiser.synthesiseBaseType1 }) -}
7f8def4b48c049d27c2cc08c953fdb11
  synthesiseBaseType1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "character"#) -}
2b274f9dd7327c935ba1b0f71e43f0e6
  synthesiseBaseType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "real"#) -}
2ebe8f8fc1bc6c7f638bb03a10f3d4d5
  synthesiseBaseType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "integer"#) -}
41f9fd466bf6ce80e755e2fd4408714d
  synthesiseBaseType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "[Incompatible type]"#) -}
92b937616d5df3216efae7e123c7f6c7
  synthesiseBufferAccess ::
    GHC.Base.String
    -> GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><S,1*U> -}
92e9473ad0223b164de2c6b21109605f
  synthesiseBufferDeclaration ::
    GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (decl :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   tabs
                   (GHC.CString.unpackAppendCString#
                      "integer(8) :: "#
                      (case LanguageFortranTools.$wextractAssigneeFromDecl
                              decl of ww { (#,#) ww1 ww2 ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         ww2
                         FortranSynthesiser.synthesiseBufferDeclaration1 }))) -}
f33b35be9cad30e5fa5e09e1110c593f
  synthesiseBufferDeclaration1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_buf"#) -}
ba03119497c85880e407aa1e3af957ad
  synthesiseBufferIndexNames ::
    (GHC.Show.Show b, GHC.Num.Num b) =>
    [GHC.Types.Char]
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) b
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,U(A,C(U),A)><L,U(A,A,A,C(U),A,A,C(U))><L,U><L,U><L,U><S,U> -}
60274f075e7a60f596f4e76ed73a401e
  synthesiseBufferIndexNames1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
7082d69fa19607d9d4be890f7e150997
  synthesiseBufferIndexNames_$ssynthesiseBufferIndexNames ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) GHC.Types.Int
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>,
     Unfolding: (\ (tabs :: [GHC.Types.Char])
                   (allKernelArgsMap :: Data.Map.Base.Map
                                          (Language.Fortran.VarName LanguageFortranTools.Anno)
                                          GHC.Types.Int)
                   (argTranslation :: SubroutineTable.ArgumentTranslation)
                   (vars :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 letrec {
                   go30 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                           -> [GHC.Types.Int] -> [[GHC.Types.Char]]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds16 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                       (_ys :: [GHC.Types.Int]) ->
                     case ds16 of wild {
                       [] -> GHC.Types.[] @ [GHC.Types.Char]
                       : ipv ipv1
                       -> case _ys of wild1 {
                            [] -> GHC.Types.[] @ [GHC.Types.Char]
                            : ipv2 ipv3
                            -> GHC.Types.:
                                 @ [GHC.Types.Char]
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    tabs
                                    (GHC.CString.unpackAppendCString#
                                       "integer, parameter ::"#
                                       (case ipv of ww { Language.Fortran.VarName ww1 ww2 ->
                                        let {
                                          z :: [GHC.Types.Char]
                                          = GHC.CString.unpackAppendCString#
                                              "_IDX = "#
                                              (case ipv2 of ww4 { GHC.Types.I# ww3 ->
                                               case GHC.Show.$wshowSignedInt
                                                      0#
                                                      ww3
                                                      (GHC.Types.[]
                                                         @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                                               GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                                        } in
                                        letrec {
                                          go31 :: [GHC.Types.Char] -> [GHC.Types.Char]
                                            {- Arity: 1, Strictness: <S,1*U> -}
                                          = \ (ds17 :: [GHC.Types.Char]) ->
                                            case ds17 of wild2 {
                                              [] -> z
                                              : y ys
                                              -> GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Unicode.toUpper y)
                                                   (go31 ys) }
                                        } in
                                        go31
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             ww2
                                             FortranSynthesiser.synthesiseBufferDeclaration1) })))
                                 (go30 ipv1 ipv3) } }
                 } in
                 Data.OldList.unlines
                   (go30
                      vars
                      (GHC.Base.map
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                         @ GHC.Types.Int
                         (\ (x :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                          case x of ww { Language.Fortran.VarName ww1 ww2 ->
                          case SubroutineTable.$wpoly_go10
                                 @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                 ww
                                 ww1
                                 ww2
                                 argTranslation of ww4 { Language.Fortran.VarName ww5 ww6 ->
                          FortranSynthesiser.$wpoly_go10
                            @ GHC.Types.Int
                            FortranSynthesiser.synthesiseBufferIndexNames1
                            ww5
                            ww6
                            allKernelArgsMap } })
                         vars))) -}
9586aedbcc9e9cab4e37b5a038264f0f
  synthesiseBufferLoads ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case FortranSynthesiser.$wsynthesiseBufferLoads
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d39420694b8a1f8929022afcaa0effa1
  synthesiseBufferLoads_kernel ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> Language.Fortran.Block LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseBufferLoads_kernel
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
dd28ca3e99b850889466ccf4aac05c7c
  synthesiseBufferLoads_kernel1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: x -}
9440e5f028c0545465724ffe30199a55
  synthesiseBufferLoads_kernel2 ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: Language.Fortran.Fortran
                              LanguageFortranTools.Anno) ->
                 case ds16 of wild {
                   DEFAULT
                   -> Control.Exception.Base.patError
                        @ 'GHC.Types.PtrRepLifted
                        @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                        "src/FortranSynthesiser.hs:650:35-68|lambda"#
                   Language.Fortran.OpenCLBufferRead ds17 ds18 var -> var }) -}
de26a26ffe42664d5ff21f70d8b63828
  synthesiseBufferLoads_kernel_go ::
    [Language.Fortran.Fortran LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
fd3fd591d4bc4720e408fbf5bcd9c7f9
  synthesiseBufferMake ::
    GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
efed8eeb8a7aa27938f47e7f9ff10e70
  synthesiseBufferStores ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case FortranSynthesiser.$wsynthesiseBufferStores
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
f4fd2b76673e95b8dc9815e068f25969
  synthesiseCall ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><L,1*U><L,U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseCall w1 w2 w3) -}
ef494f73de2bef449d60a1a37556c0de
  synthesiseCall1 :: GHC.Base.String
  {- Strictness: x -}
ca0d0f5e7ec167ef53719897c02636b3
  synthesiseDecl ::
    GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
cfc065ad911b8ca70065f1a0cfabb873
  synthesiseDeclList ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      GHC.Base.Maybe GHC.Types.Int)]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: [(Language.Fortran.Expr
                                LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno,
                              GHC.Base.Maybe GHC.Types.Int)]) ->
                 case ds16 of wild {
                   [] -> FortranSynthesiser.synthesiseDeclList1
                   : ds17 xs
                   -> case ds17 of wild1 { (,,) expr1 expr2 maybeInt ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (LanguageFortranTools.outputExprFormatting expr1)
                        (let {
                           n :: [GHC.Types.Char]
                           = let {
                               n1 :: [GHC.Types.Char]
                               = case xs of wild2 {
                                   [] -> GHC.Types.[] @ GHC.Types.Char
                                   : ipv ipv1
                                   -> GHC.CString.unpackAppendCString#
                                        ", "#
                                        (FortranSynthesiser.synthesiseDeclList_$ssynthesiseDeclList
                                           ipv
                                           ipv1) }
                             } in
                             case maybeInt of wild2 {
                               GHC.Base.Nothing -> n1
                               GHC.Base.Just a
                               -> GHC.CString.unpackAppendCString#
                                    ", "#
                                    (case a of ww2 { GHC.Types.I# ww3 ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            ww3
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                       n1 } }) }
                         } in
                         case expr2 of wild2 {
                           DEFAULT
                           -> GHC.CString.unpackAppendCString#
                                " = "#
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (LanguageFortranTools.outputExprFormatting wild2)
                                   n)
                           Language.Fortran.NullExpr ds18 ds19 -> n }) } }) -}
a200073fb626cb9b7de19a18f95306d4
  synthesiseDeclList1 :: GHC.Base.String
  {- Strictness: x -}
466bfbbe2c54f1a3527260c50ae44f36
  synthesiseDeclList_$ssynthesiseDeclList ::
    (Language.Fortran.Expr
       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
     Language.Fortran.Expr
       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
     GHC.Base.Maybe GHC.Types.Int)
    -> [(Language.Fortran.Expr
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         GHC.Base.Maybe GHC.Types.Int)]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U> -}
bdb6b5c73f8f6568c39c0c0496c84872
  synthesiseDecl_$ssynthesiseDecl ::
    Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]
    -> [(Language.Fortran.Expr
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         GHC.Base.Maybe GHC.Types.Int)]
    -> Language.Fortran.Type
         (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [GHC.Types.Char]
    -> [GHC.Types.Char]
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>,
     Unfolding: (\ (sc :: Data.Map.Base.Map
                            [GHC.Types.Char] [[GHC.Types.Char]])
                   (sc1 :: [(Language.Fortran.Expr
                               (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                             Language.Fortran.Expr
                               (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                             GHC.Base.Maybe GHC.Types.Int)])
                   (sc2 :: Language.Fortran.Type
                             (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]))
                   (sc3 :: [GHC.Types.Char]) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   sc3
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (FortranSynthesiser.synthesiseType sc2)
                      (GHC.CString.unpackAppendCString#
                         " :: "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            (FortranSynthesiser.synthesiseDeclList sc1)
                            FortranSynthesiser.checkForImplicitNone1)))) -}
010f2bbf1d25744f4b63a6cd209a59b5
  synthesiseDecl_Acc ::
    GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U> -}
69db2133b6968d8eb963edc05a7498cc
  synthesiseDecls ::
    GHC.Base.String
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (decls :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                 letrec {
                   go30 :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                           -> [GHC.Types.Char] -> [GHC.Types.Char]
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds16 :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                       (eta :: [GHC.Types.Char]) ->
                     case ds16 of wild {
                       [] -> eta
                       : y ys
                       -> go30
                            ys
                            (GHC.Base.++
                               @ GHC.Types.Char
                               eta
                               (FortranSynthesiser.synthesiseDecl tabs y)) }
                 } in
                 go30 decls (GHC.Types.[] @ GHC.Types.Char)) -}
01aa6fd6b91b2309bf66055b73be7e0e
  synthesiseDecls_Acc ::
    GHC.Base.String
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (decls :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (acc :: GHC.Base.String) ->
                 letrec {
                   go30 :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                           -> [GHC.Types.Char] -> [GHC.Types.Char]
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds16 :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                       (eta :: [GHC.Types.Char]) ->
                     case ds16 of wild {
                       [] -> eta
                       : y ys
                       -> go30
                            ys
                            (GHC.Base.++
                               @ GHC.Types.Char
                               eta
                               (FortranSynthesiser.synthesiseDecl_Acc tabs y acc)) }
                 } in
                 go30 decls (GHC.Types.[] @ GHC.Types.Char)) -}
6b877608d2dcfb701468027ed6981bd7
  synthesiseESeq ::
    Language.Fortran.Expr LanguageFortranTools.Anno -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
9157c9e31ee6a70b13f6f93d40f6f8ac
  synthesiseFor ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U(U,A)><L,U><L,U><S,1*U> -}
70a28940e6860c6b33c36d6b50631e4c
  synthesiseIf ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U(U,A)><L,U><L,U><S,1*U> -}
c245ebbd7d878f563b2900295533aa1b
  synthesiseInitModule ::
    GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> [(GHC.Base.String, GHC.Base.String)]
    -> SubroutineTable.SubroutineTable
    -> GHC.Base.String
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,1*U><L,1*U> -}
88fb4e261375e3dd4734fc8c3063b1fa
  synthesiseKernelCall ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SL),1*U(1*U,A)><L,U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wsynthesiseKernelCall ww1 w1 w2 }) -}
5aa44bc8e218c61bab904274792a1031
  synthesiseKernelCaseAlternative ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><S,1*U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (state :: GHC.Base.String)
                   (kernelName :: GHC.Base.String)
                   (ds16 :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case ds16 of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        "\n\
                        \! Skipped call to "#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           kernelName
                           FortranSynthesiser.synthesiseKernelCaseAlternative2)
                   : ipv ipv1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        tabs
                        (GHC.CString.unpackAppendCString#
                           "case ("#
                           (GHC.Base.++
                              @ GHC.Types.Char
                              state
                              (GHC.CString.unpackAppendCString#
                                 ")\n"#
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    tabs
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       LanguageFortranTools.outputTab
                                       (GHC.CString.unpackAppendCString#
                                          "call "#
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             kernelName
                                             (GHC.CString.unpackAppendCString#
                                                "("#
                                                (case ipv of wild1 { Language.Fortran.VarName ds17 str ->
                                                 GHC.Base.++
                                                   @ GHC.Types.Char
                                                   (FortranSynthesiser.synthesiseKernelCaseAlternative_go
                                                      ipv1
                                                      str)
                                                   FortranSynthesiser.synthesiseKernelCaseAlternative1 }))))))))) }) -}
44dac23597fd54796351770062fbee52
  synthesiseKernelCaseAlternative1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")\n"#) -}
13c6e008858ff5eed9aab0ec3d353da8
  synthesiseKernelCaseAlternative2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", has no args\n"#) -}
30f5145cd97c38984ab9e8554bcce195
  synthesiseKernelCaseAlternative_go ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
bff24166b852b6ca56157375ce6af78f
  synthesiseKernels ::
    Platform.Platform
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [(GHC.Base.String, GHC.Base.String)]
  {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,U(U,A)><S,1*U>,
     Unfolding: (\ (plat :: Platform.Platform)
                   (originalLines :: [GHC.Base.String])
                   (orig_ast :: Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   (prog :: (Language.Fortran.Program LanguageFortranTools.Anno,
                             GHC.Base.String))
                   (codeSeg :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case codeSeg of wild {
                   DEFAULT -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                   Language.Fortran.OpenCLMap ds16 src ds17 w ds18 ds19 ds20
                   -> GHC.Types.:
                        @ (GHC.Base.String, GHC.Base.String)
                        (case FortranSynthesiser.$wsynthesiseOpenCLMap
                                (GHC.Types.[] @ GHC.Types.Char)
                                originalLines
                                orig_ast
                                prog
                                wild of ww { (#,#) ww1 ww2 ->
                         (ww1, ww2) })
                        (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                   Language.Fortran.OpenCLReduce ds16 src ds17 ds18 ds19 ds20 rv ds21
                   -> GHC.Types.:
                        @ (GHC.Base.String, GHC.Base.String)
                        (case FortranSynthesiser.$wsynthesiseOpenCLReduce
                                plat
                                (GHC.Types.[] @ GHC.Types.Char)
                                originalLines
                                orig_ast
                                prog
                                wild of ww { (#,#) ww1 ww2 ->
                         (ww1, ww2) })
                        (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)) }) -}
8a9d1c8136f197fbf9a43b5d73e5cbc4
  synthesiseOpenCLBufferRead ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S(SL),1*U(1*U,A)><L,U><L,A><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wsynthesiseOpenCLBufferRead ww1 w1 w3 }) -}
4f7d1544c15e509c2f414fe8c32a68de
  synthesiseOpenCLBufferRead1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Read"#) -}
7ec4c4f637a8b1359af666ce365493a1
  synthesiseOpenCLBufferRead2 ::
    (Language.Fortran.Decl LanguageFortranTools.Anno)
  {- Strictness: x -}
8c0270f30579dd1b037d9d7159941994
  synthesiseOpenCLBufferRead3 :: GHC.Base.String
  {- Strictness: x -}
a58801474946e7afbfaf5b35981d421a
  synthesiseOpenCLBufferWrite ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S(SL),1*U(1*U,A)><L,U><L,A><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wsynthesiseOpenCLBufferWrite ww1 w1 w3 }) -}
ed0de5eb88a1dca469bbfd0e310f9702
  synthesiseOpenCLBufferWrite1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Write"#) -}
7e8375255ec9cc67cfb15ec249a9769d
  synthesiseOpenCLBufferWrite2 ::
    (Language.Fortran.Decl LanguageFortranTools.Anno)
  {- Strictness: x -}
8714e7a3dc7a510c1901cb16e50754e4
  synthesiseOpenCLBufferWrite3 :: GHC.Base.String
  {- Strictness: x -}
d10e6cd2aa64e114ce8a1f5e0aed9b38
  synthesiseOpenCLMap ::
    Platform.Platform
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 6, Strictness: <L,A><L,U><L,U><L,1*U><L,U(U,A)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Platform.Platform)
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   (w4 :: (Language.Fortran.Program LanguageFortranTools.Anno,
                           GHC.Base.String))
                   (w5 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseOpenCLMap
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
3be0ab9dbab1df6812884ee565bf3ffb
  synthesiseOpenCLReduce ::
    Platform.Platform
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,1*U><L,U(U,A)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Platform.Platform)
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   (w4 :: (Language.Fortran.Program LanguageFortranTools.Anno,
                           GHC.Base.String))
                   (w5 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseOpenCLReduce
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
3bb365db75875bfa212ee8cbd8b0ea8d
  synthesiseRangeExpr ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: [(Language.Fortran.Expr
                                LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno)]) ->
                 case ds16 of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ds17 ds18
                   -> case ds17 of wild1 { (,) ds19 expr2 ->
                      case ds19 of wild2 {
                        DEFAULT
                        -> case ds18 of wild3 {
                             []
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (LanguageFortranTools.outputExprFormatting wild2)
                                  (GHC.CString.unpackAppendCString#
                                     ":"#
                                     (LanguageFortranTools.outputExprFormatting expr2))
                             : ipv ipv1
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (LanguageFortranTools.outputExprFormatting wild2)
                                  (GHC.CString.unpackAppendCString#
                                     ":"#
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        (LanguageFortranTools.outputExprFormatting expr2)
                                        (GHC.CString.unpackAppendCString#
                                           ","#
                                           (FortranSynthesiser.synthesiseRangeExpr_$ssynthesiseRangeExpr
                                              ipv
                                              ipv1)))) }
                        Language.Fortran.NullExpr ds20 ds21
                        -> case ds18 of wild3 {
                             [] -> LanguageFortranTools.outputExprFormatting expr2
                             : ipv ipv1
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (LanguageFortranTools.outputExprFormatting expr2)
                                  (GHC.CString.unpackAppendCString#
                                     ","#
                                     (FortranSynthesiser.synthesiseRangeExpr_$ssynthesiseRangeExpr
                                        ipv
                                        ipv1)) } } } }) -}
5268ded6fae58aac326926ae309bac90
  synthesiseRangeExpr_$ssynthesiseRangeExpr ::
    (Language.Fortran.Expr
       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
     Language.Fortran.Expr
       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]))
    -> [(Language.Fortran.Expr
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]))]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U> -}
4c71663328c9f2dedede809140943425
  synthesiseSetOclArg ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,1*U> -}
0fac908acdd870aaef32808e2ff4b88d
  synthesiseSizeStatements ::
    GHC.Base.String
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w2 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseSizeStatements
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
6f7a9edd6ab66ff660f76b487f9c2227
  synthesiseSizeStatements_kernel ::
    GHC.Base.String
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseSizeStatements_kernel
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
7681722d4abdaaa7d8de82a1fa52f3dd
  synthesiseSizeStatements_kernel1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: x -}
285bfffd8cd6c81b016c607543661fab
  synthesiseSizeStatements_kernel2 ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: Language.Fortran.Fortran
                              LanguageFortranTools.Anno) ->
                 case ds16 of wild {
                   DEFAULT
                   -> Control.Exception.Base.patError
                        @ 'GHC.Types.PtrRepLifted
                        @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                        "src/FortranSynthesiser.hs:590:35-68|lambda"#
                   Language.Fortran.OpenCLBufferRead ds17 ds18 var -> var }) -}
b56048cd19b80c89cb978f07c7cb3f38
  synthesiseSizeStatements_kernel_go ::
    [Language.Fortran.Fortran LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
05d1e8956e820542024ec117c045005b
  synthesiseStateDefinitions ::
    [(GHC.Base.String, GHC.Base.String)]
    -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)>,
     Unfolding: (\ (ds16 :: [(GHC.Base.String, GHC.Base.String)])
                   (currentVal :: GHC.Types.Int) ->
                 case ds16 of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ds17 xs
                   -> case ds17 of wild1 { (,) kernel state ->
                      GHC.CString.unpackAppendCString#
                        "integer, parameter :: "#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           state
                           (GHC.CString.unpackAppendCString#
                              " = "#
                              (case currentVal of ww2 { GHC.Types.I# ww3 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww3
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                 (GHC.CString.unpackAppendCString#
                                    " !  "#
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       kernel
                                       (GHC.CString.unpackAppendCString#
                                          "\n"#
                                          (FortranSynthesiser.synthesiseStateDefinitions_$ssynthesiseStateDefinitions
                                             (GHC.Prim.+# ww3 1#)
                                             xs)))) } }))) } }) -}
1032822bb4cd855cd6732eb169f62c35
  synthesiseStateDefinitions_$ssynthesiseStateDefinitions ::
    GHC.Prim.Int#
    -> [([GHC.Types.Char], [GHC.Types.Char])] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
37d70b873e0c6a285a5e223a9abf4da9
  synthesiseSuperKernel ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(GHC.Base.String, GHC.Base.String)]
    -> (GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap)
  {- Arity: 5, Strictness: <L,1*U><L,U><L,U><L,1*U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: [(Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String)])
                   (w4 :: [(GHC.Base.String, GHC.Base.String)]) ->
                 case FortranSynthesiser.$wsynthesiseSuperKernel
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
09ddecfd649c6e7e6b700ef66992e96a
  synthesiseSuperKernelModule ::
    GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(GHC.Base.String, GHC.Base.String)]
    -> (GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: [(Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String)])
                   (w3 :: [(GHC.Base.String, GHC.Base.String)]) ->
                 case FortranSynthesiser.$wsynthesiseSuperKernelModule
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
187bb5d237b99c44f43e01b04ea79e86
  synthesiseSuperKernelModule_go ::
    [(GHC.Base.String, GHC.Base.String)]
    -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
2e5aae888023ead5949cd65c8f12e255
  synthesiseSuperKernelName :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (originalFilenames :: [GHC.Base.String]) ->
                 case originalFilenames of wild {
                   [] -> case GHC.List.foldl2 ret_ty [GHC.Types.Char] of {}
                   : x xs
                   -> let {
                        base :: [GHC.Types.Char]
                        = FortranSynthesiser.$wgo1
                            (FortranSynthesiser.synthesiseSuperKernelName_go2 xs x)
                            30#
                      } in
                      GHC.Base.++
                        @ GHC.Types.Char
                        base
                        (case GHC.List.$wlenAcc @ GHC.Types.Char base 0# of ww2 {
                           DEFAULT
                           -> case FortranSynthesiser.synthesiseSuperKernelName_go1
                                     base
                                     (GHC.List.lastError
                                        @ GHC.Types.Char) of wild1 { GHC.Types.C# ds16 ->
                              case ds16 of ds17 {
                                DEFAULT -> FortranSynthesiser.synthesiseSuperKernelName4
                                '_'# -> FortranSynthesiser.synthesiseSuperKernelName3 } }
                           30#
                           -> case FortranSynthesiser.synthesiseSuperKernelName_go
                                     base
                                     (GHC.List.lastError
                                        @ GHC.Types.Char) of wild1 { GHC.Types.C# ds16 ->
                              case ds16 of ds17 {
                                DEFAULT -> FortranSynthesiser.synthesiseSuperKernelName2
                                '_'# -> FortranSynthesiser.synthesiseSuperKernelName1 } } }) }) -}
ce830365304cd11c59c0b6eb8ca89c70
  synthesiseSuperKernelName1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "etc_superkernel"#) -}
fc04200d778e4f32f0e6223eb86285a6
  synthesiseSuperKernelName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_etc_superkernel"#) -}
28bde99184ad67b085d1c1bf2c84803e
  synthesiseSuperKernelName3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "superkernel"#) -}
374369439b7523e76b03a7442d93413c
  synthesiseSuperKernelName4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_superkernel"#) -}
4218874187d281b06c6753598dc285cd
  synthesiseSuperKernelName_go ::
    [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
f97b125be8cf6b8b392568631ea98bc9
  synthesiseSuperKernelName_go1 ::
    [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)> -}
0525a84aeaed5a051314ba72488a677e
  synthesiseSuperKernelName_go2 ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
6a9e2faa5f60a4e40f43d3082dee6f3e
  synthesiseType ::
    Language.Fortran.Type LanguageFortranTools.Anno -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds16 :: Language.Fortran.Type
                              LanguageFortranTools.Anno) ->
                 case ds16 of wild {
                   Language.Fortran.BaseType anno base attrList expr1 expr2
                   -> let {
                        n :: [GHC.Types.Char]
                        = let {
                            n1 :: [GHC.Types.Char]
                            = case FortranSynthesiser.synthesiseAttrList attrList of wild1 {
                                [] -> GHC.Types.[] @ GHC.Types.Char
                                : ipv ipv1 -> GHC.CString.unpackAppendCString# ", "# wild1 }
                          } in
                          case LanguageFortranTools.outputExprFormatting expr1 of wild1 {
                            [] -> n1
                            : ipv ipv1
                            -> GHC.CString.unpackAppendCString#
                                 "(kind="#
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    wild1
                                    (GHC.CString.unpackAppendCString# ")"# n1)) }
                      } in
                      case base of wild1 {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             FortranSynthesiser.synthesiseBaseType4
                             n
                        Language.Fortran.Integer ds17
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             FortranSynthesiser.synthesiseBaseType3
                             n
                        Language.Fortran.Real ds17
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             FortranSynthesiser.synthesiseBaseType2
                             n
                        Language.Fortran.Character ds17
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             FortranSynthesiser.synthesiseBaseType1
                             n }
                   Language.Fortran.ArrayT ipv ipv1 ipv2 ipv3 ipv4 ipv5
                   -> FortranSynthesiser.synthesiseType1 }) -}
79e1d60133d84505c325dc997bc80254
  synthesiseType1 :: GHC.Base.String
  {- Strictness: x -}
c5cb2efde67c89938d69e655763cc79d
  synthesiseUse ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Uses LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><S,1*U><L,A><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Uses LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseUse w1 w3) -}
044c4f839c3b7a8f0b06b602442b7f00
  synthesiseUse1 :: GHC.Base.String
  {- Strictness: x -}
5ed689b432d04b97af8aa452fded147e
  traverseDSeq ::
    Language.Fortran.Decl t
    -> [Language.Fortran.Decl t] -> [Language.Fortran.Decl t]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
"SC:defaultFilename0" [ALWAYS] forall (sc :: [GHC.Types.Char])
                                      (sc1 :: [[GHC.Types.Char]])
  FortranSynthesiser.defaultFilename (GHC.Types.:
                                        @ GHC.Base.String
                                        sc
                                        sc1)
  = FortranSynthesiser.defaultFilename_$sdefaultFilename sc sc1
"SC:generateOriginalFileName0" [ALWAYS] forall (sc :: [GHC.Types.Char])
                                               (sc1 :: [[GHC.Types.Char]])
  FortranSynthesiser.generateOriginalFileName (GHC.Types.:
                                                 @ GHC.Base.String
                                                 sc
                                                 sc1)
  = FortranSynthesiser.generateOriginalFileName_$sgenerateOriginalFileName
      sc
      sc1
"SC:synthesiseDecl0" [ALWAYS] forall (sc :: Data.Map.Base.Map
                                              [GHC.Types.Char] [[GHC.Types.Char]])
                                     (sc1 :: [(Language.Fortran.Expr
                                                 (Data.Map.Base.Map
                                                    [GHC.Types.Char] [[GHC.Types.Char]]),
                                               Language.Fortran.Expr
                                                 (Data.Map.Base.Map
                                                    [GHC.Types.Char] [[GHC.Types.Char]]),
                                               GHC.Base.Maybe GHC.Types.Int)])
                                     (sc2 :: Language.Fortran.Type
                                               (Data.Map.Base.Map
                                                  [GHC.Types.Char] [[GHC.Types.Char]]))
                                     (sc3 :: [GHC.Types.Char])
  FortranSynthesiser.synthesiseDecl sc3
                                    (Language.Fortran.Decl
                                       @ LanguageFortranTools.Anno
                                       sc
                                       LanguageFortranTools.nullSrcSpan
                                       sc1
                                       sc2)
  = FortranSynthesiser.synthesiseDecl_$ssynthesiseDecl sc sc1 sc2 sc3
"SC:synthesiseDeclList0" [ALWAYS] forall (sc :: (Language.Fortran.Expr
                                                   (Data.Map.Base.Map
                                                      [GHC.Types.Char] [[GHC.Types.Char]]),
                                                 Language.Fortran.Expr
                                                   (Data.Map.Base.Map
                                                      [GHC.Types.Char] [[GHC.Types.Char]]),
                                                 GHC.Base.Maybe GHC.Types.Int))
                                         (sc1 :: [(Language.Fortran.Expr
                                                     (Data.Map.Base.Map
                                                        [GHC.Types.Char] [[GHC.Types.Char]]),
                                                   Language.Fortran.Expr
                                                     (Data.Map.Base.Map
                                                        [GHC.Types.Char] [[GHC.Types.Char]]),
                                                   GHC.Base.Maybe GHC.Types.Int)])
  FortranSynthesiser.synthesiseDeclList (GHC.Types.:
                                           @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                              Language.Fortran.Expr LanguageFortranTools.Anno,
                                              GHC.Base.Maybe GHC.Types.Int)
                                           sc
                                           sc1)
  = FortranSynthesiser.synthesiseDeclList_$ssynthesiseDeclList sc sc1
"SC:synthesiseRangeExpr0" [ALWAYS] forall (sc :: (Language.Fortran.Expr
                                                    (Data.Map.Base.Map
                                                       [GHC.Types.Char] [[GHC.Types.Char]]),
                                                  Language.Fortran.Expr
                                                    (Data.Map.Base.Map
                                                       [GHC.Types.Char] [[GHC.Types.Char]])))
                                          (sc1 :: [(Language.Fortran.Expr
                                                      (Data.Map.Base.Map
                                                         [GHC.Types.Char] [[GHC.Types.Char]]),
                                                    Language.Fortran.Expr
                                                      (Data.Map.Base.Map
                                                         [GHC.Types.Char] [[GHC.Types.Char]]))])
  FortranSynthesiser.synthesiseRangeExpr (GHC.Types.:
                                            @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                               Language.Fortran.Expr LanguageFortranTools.Anno)
                                            sc
                                            sc1)
  = FortranSynthesiser.synthesiseRangeExpr_$ssynthesiseRangeExpr
      sc
      sc1
"SC:synthesiseStateDefinitions0" [ALWAYS] forall (sc :: GHC.Prim.Int#)
                                                 (sc1 :: [([GHC.Types.Char], [GHC.Types.Char])])
  FortranSynthesiser.synthesiseStateDefinitions sc1 (GHC.Types.I# sc)
  = FortranSynthesiser.synthesiseStateDefinitions_$ssynthesiseStateDefinitions
      sc
      sc1
"SPEC synthesiseBufferIndexNames @ Int" [ALWAYS] forall ($dNum :: GHC.Num.Num
                                                                    GHC.Types.Int)
                                                        ($dShow :: GHC.Show.Show GHC.Types.Int)
  FortranSynthesiser.synthesiseBufferIndexNames @ GHC.Types.Int
                                                $dShow
                                                $dNum
  = FortranSynthesiser.synthesiseBufferIndexNames_$ssynthesiseBufferIndexNames
"SPEC/FortranSynthesiser $fDataArg @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                         (Data.Map.Base.Map
                                                                                            GHC.Base.String
                                                                                            [GHC.Base.String]))
  Language.Fortran.$fDataArg @ (Data.Map.Base.Map
                                  GHC.Base.String [GHC.Base.String])
                             $dData
  = FortranSynthesiser.$s$fDataArg
"SPEC/FortranSynthesiser $fDataBlock @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                           (Data.Map.Base.Map
                                                                                              GHC.Base.String
                                                                                              [GHC.Base.String]))
  Language.Fortran.$fDataBlock @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dData
  = FortranSynthesiser.$s$fDataBlock
"SPEC/FortranSynthesiser $fDataFortran @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                             (Data.Map.Base.Map
                                                                                                GHC.Base.String
                                                                                                [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Base.Map
                                      GHC.Base.String [GHC.Base.String])
                                 $dData
  = FortranSynthesiser.$s$fDataFortran
"SPEC/FortranSynthesiser $fDataMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                    [GHC.Types.Char])
                                                                        ($dData1 :: Data.Data.Data
                                                                                      [GHC.Base.String])
                                                                        ($dData :: Data.Data.Data
                                                                                     [GHC.Types.Char])
  Data.Map.Base.$fDataMap @ [GHC.Types.Char]
                          @ [GHC.Base.String]
                          $dData
                          $dData1
                          $dOrd
  = FortranSynthesiser.$s$fDataArg_$s$fDataMap
"SPEC/FortranSynthesiser $fDataProgUnit @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                              (Data.Map.Base.Map
                                                                                                 GHC.Base.String
                                                                                                 [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit @ (Data.Map.Base.Map
                                       GHC.Base.String [GHC.Base.String])
                                  $dData
  = FortranSynthesiser.$s$fDataProgUnit
"SPEC/FortranSynthesiser $fData[] @ (ProgUnit Anno)" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                  (Language.Fortran.ProgUnit
                                                                                     LanguageFortranTools.Anno))
  Data.Data.$fData[] @ (Language.Fortran.ProgUnit
                          LanguageFortranTools.Anno)
                     $dData
  = FortranSynthesiser.$s$fData[]
"SPEC/FortranSynthesiser $fData[] @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                         [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] $dData
  = FortranSynthesiser.$s$fDataArg_$s$fData[]
"SPEC/FortranSynthesiser $fData[]_$cdataCast2 @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                     [GHC.Types.Char])
  Data.Data.$fData[]_$cdataCast2 @ [GHC.Types.Char] $dData
  = FortranSynthesiser.$s$fDataArg_$s$fData[]_$cdataCast2
"SPEC/FortranSynthesiser $fData[]_$cdataTypeOf @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                      [GHC.Types.Char])
  Data.Data.$fData[]_$cdataTypeOf @ [GHC.Types.Char] $dData
  = FortranSynthesiser.$s$fDataArg_$s$fData[]_$cdataTypeOf
"SPEC/FortranSynthesiser $fData[]_$ctoConstr @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                    [GHC.Types.Char])
  Data.Data.$fData[]_$ctoConstr @ [GHC.Types.Char] $dData
  = FortranSynthesiser.$s$fDataArg_$s$fData[]_$ctoConstr
"SPEC/FortranSynthesiser $fEqFortran @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                         (Data.Map.Base.Map
                                                                                            GHC.Base.String
                                                                                            [GHC.Base.String]))
  Language.Fortran.$fEqFortran @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dEq
  = FortranSynthesiser.$s$fEqFortran
"SPEC/FortranSynthesiser $fEqFortran_$c/= @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                              (Data.Map.Base.Map
                                                                                                 GHC.Base.String
                                                                                                 [GHC.Base.String]))
  Language.Fortran.$fEqFortran_$c/= @ (Data.Map.Base.Map
                                         GHC.Base.String [GHC.Base.String])
                                    $dEq
  = FortranSynthesiser.$s$fEqFortran_$s$fEqFortran_$c/=
"SPEC/FortranSynthesiser $fEqMap @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                  [GHC.Base.String])
                                                                      ($dEq :: GHC.Classes.Eq
                                                                                 [GHC.Types.Char])
  Data.Map.Base.$fEqMap @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        $dEq
                        $dEq1
  = FortranSynthesiser.$s$fEqDecl_$s$fEqMap
"SPEC/FortranSynthesiser $fEqMap_$c/= @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                       [GHC.Base.String])
                                                                           ($dEq :: GHC.Classes.Eq
                                                                                      [GHC.Types.Char])
  Data.Map.Base.$fEqMap_$c/= @ [GHC.Types.Char]
                             @ [GHC.Base.String]
                             $dEq
                             $dEq1
  = FortranSynthesiser.$s$fEqDecl_$s$fEqMap_$c/=
"SPEC/FortranSynthesiser $fEqUses @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                      (Data.Map.Base.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fEqUses @ (Data.Map.Base.Map
                                 GHC.Base.String [GHC.Base.String])
                            $dEq
  = FortranSynthesiser.$s$fEqUses
"SPEC/FortranSynthesiser $fEqVarName @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                         (Data.Map.Base.Map
                                                                                            GHC.Base.String
                                                                                            [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dEq
  = FortranSynthesiser.$s$fEqVarName
"SPEC/FortranSynthesiser $fOrdMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd1 :: GHC.Classes.Ord
                                                                                    [GHC.Base.String])
                                                                       ($dOrd :: GHC.Classes.Ord
                                                                                   [GHC.Types.Char])
  Data.Map.Base.$fOrdMap @ [GHC.Types.Char]
                         @ [GHC.Base.String]
                         $dOrd
                         $dOrd1
  = FortranSynthesiser.$s$fOrdMap
"SPEC/FortranSynthesiser $fOrdVarName @ (Map String [String])" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                           (Data.Map.Base.Map
                                                                                              GHC.Base.String
                                                                                              [GHC.Base.String]))
  Language.Fortran.$fOrdVarName @ (Data.Map.Base.Map
                                     GHC.Base.String [GHC.Base.String])
                                $dOrd
  = FortranSynthesiser.$s$fOrdVarName
"SPEC/FortranSynthesiser fromList @ (VarName Anno)" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                (Language.Fortran.VarName
                                                                                   LanguageFortranTools.Anno))
  Data.Set.Base.fromList @ (Language.Fortran.VarName
                              LanguageFortranTools.Anno)
                         $dOrd
  = FortranSynthesiser.$sfromList
"SPEC/FortranSynthesiser insert @ (VarName Anno) _" [ALWAYS] forall @ a
                                                                    ($dOrd :: GHC.Classes.Ord
                                                                                (Language.Fortran.VarName
                                                                                   LanguageFortranTools.Anno))
  Data.Map.Base.insert @ (Language.Fortran.VarName
                            LanguageFortranTools.Anno)
                       @ a
                       $dOrd
  = FortranSynthesiser.$sinsert1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

