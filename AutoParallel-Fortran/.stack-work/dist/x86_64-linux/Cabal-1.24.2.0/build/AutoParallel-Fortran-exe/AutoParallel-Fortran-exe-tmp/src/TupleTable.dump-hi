
==================== FINAL INTERFACE ====================
2018-12-03 15:55:05.553605 UTC

interface main@main:TupleTable 8002
  interface hash: 8c9743a8d50c658281cea446dafdca9c
  ABI hash: 352e4ce9987fd6bf4b438ca52bbd5e55
  export-list hash: e15d0d563e9c0fba003831686b25a3db
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  TupleTable.collapseIterTable
  TupleTable.getLeastTuple
  TupleTable.getMostTuple
  TupleTable.insertIntoTupleTable
  TupleTable.lookupTupleTable
  TupleTable.tupleTableElementGreaterThan
  TupleTable.tupleTableNotEmpty
  TupleTable.TupleTable{TupleTable.Empty TupleTable.LoopIterRecord}
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskell-src-1.0.2.0@haskell-src-1.0.2.0-3zoaErItXGVA1GHC7t3Glx
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      process-1.4.3.0@process-1.4.3.0
                      syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Instances
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  LanguageFortranTools 7890a5e96ab51325aa3603dbd4691bf4
  exports: 83b35210801e0c6fe3fd2a2c2ff1ecd0
05068131ebd202d120749a5167605714
  $fEqTupleTable :: GHC.Classes.Eq TupleTable.TupleTable
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TupleTable.TupleTable
                  TupleTable.$fEqTupleTable_$c==
                  TupleTable.$fEqTupleTable_$c/= -}
05068131ebd202d120749a5167605714
  $fEqTupleTable_$c/= ::
    TupleTable.TupleTable -> TupleTable.TupleTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: TupleTable.TupleTable)
                   (b :: TupleTable.TupleTable) ->
                 case TupleTable.$fEqTupleTable_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
05068131ebd202d120749a5167605714
  $fEqTupleTable_$c== ::
    TupleTable.TupleTable -> TupleTable.TupleTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
05068131ebd202d120749a5167605714
  $fShowTupleTable :: GHC.Show.Show TupleTable.TupleTable
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TupleTable.TupleTable
                  TupleTable.$fShowTupleTable_$cshowsPrec
                  TupleTable.$fShowTupleTable_$cshow
                  TupleTable.$fShowTupleTable_$cshowList -}
05068131ebd202d120749a5167605714
  $fShowTupleTable_$cshow :: TupleTable.TupleTable -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: TupleTable.TupleTable) ->
                 TupleTable.$fShowTupleTable_$s$cshowsPrec
                   x
                   0#
                   (GHC.Types.[] @ GHC.Types.Char)) -}
05068131ebd202d120749a5167605714
  $fShowTupleTable_$cshowList ::
    [TupleTable.TupleTable] -> GHC.Show.ShowS
  {- Arity: 2 -}
05068131ebd202d120749a5167605714
  $fShowTupleTable_$cshowsPrec ::
    GHC.Types.Int -> TupleTable.TupleTable -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
05068131ebd202d120749a5167605714
  $fShowTupleTable_$s$cshowsPrec ::
    TupleTable.TupleTable -> GHC.Prim.Int# -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
7d8ccb6915f4a40e9bfb43f271a28666
  $slookup1 ::
    GHC.Types.Int
    -> Data.Map.Base.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Map.Base.Map GHC.Types.Int a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TupleTable.$wpoly_go1 @ a ww1 w1 }) -}
84ad3085f30d60c5f736977a3fcb4d22
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13529123989339657985##
                   1351627319386280973##
                   TupleTable.$trModule
                   TupleTable.$tc'Empty1) -}
2d27d0e13b498809b1a5947f0a98f4ad
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
a19a7e7533a11ee1249906eddf95e370
  $tc'LoopIterRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9156329946105521500##
                   6491459005366467212##
                   TupleTable.$trModule
                   TupleTable.$tc'LoopIterRecord1) -}
4ba9219896088813a384b2c17b3255ef
  $tc'LoopIterRecord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LoopIterRecord"#) -}
b88ed07a3aefeaf2a556b00ea8ec44ff
  $tcTupleTable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14484662932762008432##
                   12550044141604724644##
                   TupleTable.$trModule
                   TupleTable.$trModule1) -}
e8edffae1ad23c4dd39b690f7786d426
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TupleTable.$trModule2
                   TupleTable.$trModule1) -}
f8aef10b7b2796ed9aa5e8a3bb249958
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TupleTable"#) -}
317375d11added9bfc02e9ddf0921254
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
4b4034c3ac40ff833fb37db8a92d51b0
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
c1fa3f54ef64f37a8746adb870d9f45c
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
cfd4d16232ff704fa877903d8e27c066
  $wpoly_go10 ::
    a -> GHC.Prim.Int# -> Data.Map.Base.Map GHC.Types.Int a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><S,1*U>,
     Inline: [0] -}
05068131ebd202d120749a5167605714
  data TupleTable
    = LoopIterRecord (Data.Map.Base.Map
                        GHC.Types.Int TupleTable.TupleTable)
    | Empty
f371b84a775ed376dd04e081ea365802
  collapseIterTable :: TupleTable.TupleTable -> TupleTable.TupleTable
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: TupleTable.TupleTable) ->
                 case ds of wild {
                   TupleTable.LoopIterRecord iterTable
                   -> case Data.Map.Base.keys1
                             @ TupleTable.TupleTable
                             @ GHC.Types.Int
                             (GHC.Types.[] @ GHC.Types.Int)
                             iterTable of wild1 {
                        [] -> TupleTable.Empty
                        : ipv ipv1
                        -> case GHC.Base.map
                                  @ GHC.Types.Int
                                  @ TupleTable.TupleTable
                                  (\ (x :: GHC.Types.Int) ->
                                   case x of ww { GHC.Types.I# ww1 ->
                                   TupleTable.$wpoly_go10
                                     @ TupleTable.TupleTable
                                     TupleTable.Empty
                                     ww1
                                     iterTable })
                                  wild1 of wild2 {
                             [] -> TupleTable.Empty
                             : ipv2 ipv3
                             -> TupleTable.collapseIterTable_$sgo
                                  (case ipv of ww { GHC.Types.I# ww1 ->
                                   Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ TupleTable.TupleTable
                                     1#
                                     (GHC.Types.I# ww1)
                                     ipv2
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ TupleTable.TupleTable)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ TupleTable.TupleTable) })
                                  ipv3
                                  ipv1 } }
                   TupleTable.Empty -> TupleTable.collapseIterTable1 }) -}
2c0592419194a3e7379600b36633517a
  collapseIterTable1 :: TupleTable.TupleTable
  {- Strictness: x -}
f224b49b27ca332f8c9583eb6131da55
  collapseIterTable_$sgo ::
    Data.Map.Base.Map GHC.Types.Int TupleTable.TupleTable
    -> [TupleTable.TupleTable]
    -> [GHC.Types.Int]
    -> TupleTable.TupleTable
  {- Arity: 3, Strictness: <L,U><L,1*U><S,1*U> -}
9fbbd63beb5e34a3d720a7bd0f87594b
  getLeastTuple :: TupleTable.TupleTable -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U> -}
fb705550ed8c7f466eb834559dc09605
  getMostTuple :: TupleTable.TupleTable -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U> -}
5128a1d824c1ad773656bf3648403e02
  insertIntoTupleTable ::
    [GHC.Types.Int] -> TupleTable.TupleTable -> TupleTable.TupleTable
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
32f9ae143db735e4197919bb202b1d8f
  lookupTupleTable ::
    [GHC.Types.Int]
    -> TupleTable.TupleTable -> GHC.Base.Maybe TupleTable.TupleTable
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
5ab2a0d28af51e38052f174fbac8cb03
  tupleTableElementGreaterThan ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
cf478c5c024858a11990b01fed34fc7d
  tupleTableNotEmpty :: TupleTable.TupleTable -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TupleTable.TupleTable) ->
                 case ds of wild {
                   TupleTable.LoopIterRecord ipv -> GHC.Types.True
                   TupleTable.Empty -> GHC.Types.False }) -}
instance GHC.Classes.Eq [TupleTable.TupleTable]
  = TupleTable.$fEqTupleTable
instance GHC.Show.Show [TupleTable.TupleTable]
  = TupleTable.$fShowTupleTable
"SC:$cshowsPrec0" [ALWAYS] forall (sc :: TupleTable.TupleTable)
                                  (sc1 :: GHC.Prim.Int#)
  TupleTable.$fShowTupleTable_$cshowsPrec (GHC.Types.I# sc1) sc
  = TupleTable.$fShowTupleTable_$s$cshowsPrec sc sc1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

