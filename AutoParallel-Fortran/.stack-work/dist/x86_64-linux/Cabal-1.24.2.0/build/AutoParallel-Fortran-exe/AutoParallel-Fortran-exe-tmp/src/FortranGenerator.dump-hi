
==================== FINAL INTERFACE ====================
2018-12-03 15:55:10.458783 UTC

interface main@main:FortranGenerator 8002
  interface hash: e3c6469d5671b94452f830a2acebc8b8
  ABI hash: f3b40b4219f7c9e53bba52b4614b9c03
  export-list hash: fe08451cbc1f1d63e1c4b9cd9ce5b2b7
  orphan hash: 6aee8a0cbbb347162af0f972e183cbb2
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  FortranGenerator.adaptOriginalDeclaration_intent
  FortranGenerator.adaptOriginalDeclaration_varname
  FortranGenerator.declareGlobalReductionArray
  FortranGenerator.declareLocalReductionArray
  FortranGenerator.declareScalarPointer
  FortranGenerator.generateArgList
  FortranGenerator.generateFinalHostReduction
  FortranGenerator.generateFinalHostReduction_assgs
  FortranGenerator.generateGlobalWorkItemsExpr
  FortranGenerator.generateIfNoElse
  FortranGenerator.generateImplicitDecl
  FortranGenerator.generateKernelDeclarations
  FortranGenerator.generateLoop
  FortranGenerator.generateLoopInitialisers
  FortranGenerator.generateLoopIterationsExpr
  FortranGenerator.generateLoopStartAddition
  FortranGenerator.generateProductExpr_list
  FortranGenerator.generateRangeExpr
  FortranGenerator.generateRangeVar
  FortranGenerator.generateReductionArrayAssignment
  FortranGenerator.generateRelVar
  FortranGenerator.generateSizeDecl
  FortranGenerator.generateSizeStatement
  FortranGenerator.generateSizeStatements_decls
  FortranGenerator.generateSubtractionExpr_list
  FortranGenerator.generateWorkGroupReduction
  FortranGenerator.generateWorkGroupReduction_assgs
module dependencies: CodeEmitterUtils F95IntrinsicFunctions
                     Language.Fortran Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskell-src-1.0.2.0@haskell-src-1.0.2.0-3zoaErItXGVA1GHC7t3Glx
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      process-1.4.3.0@process-1.4.3.0
                      syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Instances
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  CodeEmitterUtils bc5edf6436e6c4432e181644ac03bb99
  exports: 83fe22c4657035c778433521c92d60d5
  addDimension aa30ca3861ff7a6812ea4caa1c2f7d4f
  applyIntent c6f768e57cb05f95fa9de09023206a76
  containsParameterAttr 163d8d5574686f14d40c5e1f21bc4cd9
  declareScalarPointer_decl 28a656dbd3d23d966720055f03f588a1
  extractDeclaration_varname 5e51623c06e01a7934c63c29decab351
  generateGlobalReductionArray bd1fe4e2f9c02f08002418b87d5c56f6
  generateLocalReductionArray 9c7027bb67e0091189ab577f5376dd33
  generateLocalReductionVar 3089c04576291768bc10865525ba3b81
  getDeclRank 14faafc3f7927d6ff0d38f3fea1f967a
  nunitsVar 37826a33d2e23abfd938eaf089ad3a5f
  removeIntentFromDecl 372bb4e47633376329d04994118d74ac
  scalarPointerVarName d013d83e4dcac452d9df51601df98ee8
  varSizeVarName f6ce06a64604c8a077bb514dc04d4c7f
import  -/  Language.Fortran c957d8f93581b3ce2cc521df25110d11
  exports: cb4e2f808f933bd0493dcd95204741d0
  ArgList cd4377d5409f1d69d31cc63bf9624407
  ArgList fd45c3abbcc1cd23ca18c96ee1403b96
  Assg e4ff0447498349c3e2879e1af28dc289
  BaseType ca5d7487fbe699d664f7837b2f094048
  Bin 31bb1b9369e8820657f411d90ee9619c
  Con e9784612770372502a12b479082c4a0e
  Decl d78489b6b11f87857f4ba3465cebf581
  Decl c4465a5758b20b0d6387c4cda8774a94
  Dimension 80d338f2485dd9dba4658e44ba6c92c2
  Div ed67099c3b8ec7b7f48b784c091ff524
  Expr fd45c3abbcc1cd23ca18c96ee1403b96
  For 8eaaf1a59a9e6e9d8f36eff8caf7c991
  Fortran 7ef8d1883356542a2e7829f1c3512bc2
  If 2ebe473c51363820c571e0150fe25882
  In c3152ec7476c9052d5df452d36158bd3
  InOut ba801df823599561aa4e02813d34ab30
  Integer 247d786a49e53a070207e400ccb2363d
  IntentAttr 2e224cb3ca4fa18503a4d24170747dce
  Minus 74fd79e66076db48c9d27b6cd0f2b01a
  Mul 408f573b36ba1a21b1233ab02a2b76a6
  NullExpr d53181ba59030b4ed334d3840cb5eea1
  OpenCLBufferRead 7062856698f9bec8c015dbffd83f3cd0
  OpenCLBufferWrite 4bb6fbfda0c948d2b7b329fa92eecc3b
  OpenCLMap f735cdb4fcfce00b0cd641aaa6255a4b
  OpenCLReduce 811a5024d542e78a43320fc6af66c91a
  Out cec654c84d9ddc57389477346da890e9
  Plus 2246ba64804dd1a40f56ff697ab3e419
  Program 61c057161e42f4aa29fb8dd8afb17b21
  Real 1f5e3d6d1fce569b7e0ec8170f09616e
  Var 223ccce2fd2a845a28913e272a1a9b28
  VarName 64af05f1c71bcd1dfd571ca0d5218f1b
  VarName d4d45769399fe3ed8e0615e3282cf5b7
import  -/  LanguageFortranTools 7890a5e96ab51325aa3603dbd4691bf4
  exports: 83b35210801e0c6fe3fd2a2c2ff1ecd0
  Anno e22809b44b97ccfdb28bfb19047d139f
  appendFortran_recursive 4a73f638f4b7d944226ec9c29c89a7cb
  applyGeneratedSrcSpans abc3393b31513f41cb818c5f6e8c39dc
  extractAssigneeFromDecl 39645f5b02a3ff61a46cb5621de8142e
  extractPrimaryReductionFunction 49e11240ac424d2be24fb360fce42874
  extractPrimaryReductionOp cda64d1992e89c20ebcc7a87e588ea11
  extractVarNames 0c06747830f37e92c31e4dbe6aedfd6f
  generateAdditionExpr 1a1fe3b617c314f3472027164db13694
  generateArrayVar 11ed22caf0a9996357d1cb6d5af1e578
  generateAssgCode baf053e0f63bff8c8b8bcc6c48d141a9
  generateESeq 9cdd15cd307dad9af29d05d8fff8b71d
  generateIntConstant 15603276f1aca276b29ee11bb7132c17
  generateSubtractionExpr 6075eabbf6676385f0a6855cf8e61901
  generateVar 9d0fea224f278c04fc62fa0745c0e6f6
  listIntersection ea4660c5c67b37d7a94bfd3c2305858a
  listSubtract b3c64f9bf63909177406c8d10e99ecef
  nullAnno e3239ac8aba218af15f945a652936cc8
  nullSrcSpan 088997d0b27116160aebfa68704495fa
  outputExprFormatting 94304bd749d8576e2241b877c8b68b4d
  replaceAllOccurences_varname c127dbc9dbb46e9d16d1c72254041a56
  usesVarName_list 1a8e06494d870a68ecb9906f49497737
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics ea99a8062a9608312218ffd7309b5391
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Aliases 09d594ec9a31e3c858478cc583771648
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Schemes 4b69980d384f37e61fe24ae708a71220
a7d56991dcc6c71cfb3ed0a7e67c274b
  $s$fDataDecl ::
    Data.Data.Data
      (Language.Fortran.Decl
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Decl
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataDecl_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cdataTypeOf
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cdataCast2
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataDecl_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1) -}
5f9d6bf89a9f3c05c73a4ce18207c049
  $s$fDataDecl1 ::
    Data.Data.Data
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Unfolding: InlineRule (0, True, True)
                FortranGenerator.$s$fDataDecl_$s$fDataMap -}
4095cd903ed6b657351e2190a24278d0
  $s$fDataDecl2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Base.Nothing
                   @ (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))) -}
bdb10ab1078719d3b3279889a072bc51
  $s$fDataDecl3 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.mapDataType) -}
b51eef3999ec102f2af21d0fec1e4f8d
  $s$fDataDecl4 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.fromListConstr) -}
ce623b9b762becb6fc90d380aec54f79
  $s$fDataDecl_$dData1 :: Data.Data.Data [GHC.Base.String]
  {- Unfolding: InlineRule (0, True, True)
                FortranGenerator.$s$fDataDecl_$s$fData[] -}
7eab434c2fc08a7ade996c03aaa01527
  $s$fDataDecl_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fDataMap_$cp1Data
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  FortranGenerator.$s$fDataDecl4
                  FortranGenerator.$s$fDataDecl3
                  FortranGenerator.$s$fDataDecl2
                  (Data.Map.Base.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapT
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
e238238d8a34694c718936fa2f41c612
  $s$fDataDecl_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Data.$fData[]_$cp1Data
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  FortranGenerator.$s$fDataDecl_$s$fData[]_$ctoConstr
                  FortranGenerator.$s$fDataDecl_$s$fData[]_$cdataTypeOf
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  FortranGenerator.$s$fDataDecl_$s$fData[]_$cdataCast2
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
70b3bb514009e5feb9ebfbd4a0304aaf
  $s$fDataDecl_$s$fData[]_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d e.
                          (Data.Data.Data d, Data.Data.Data e) =>
                          c (t d e)) ->
                 GHC.Base.Nothing @ (c [[GHC.Types.Char]])) -}
ac26148eefedbd010fea74c93b31bf3a
  $s$fDataDecl_$s$fData[]_$cdataTypeOf ::
    [[GHC.Types.Char]] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [[GHC.Types.Char]]) -> Data.Data.listDataType) -}
59607d5b8c8c5887d2b4dbf5c6e5e65f
  $s$fDataDecl_$s$fData[]_$ctoConstr ::
    [[GHC.Types.Char]] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [[GHC.Types.Char]]) ->
                 case ds of wild {
                   [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr }) -}
3d53b415402f023ecdff8fdf3dbd88f8
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataFortran_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  FortranGenerator.$s$fDataFortran2
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  FortranGenerator.$s$fDataFortran1
                  (Language.Fortran.$fDataFortran_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl1) -}
8927396489ab19d3b1b6f313b0ee322b
  $s$fDataFortran1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Fortran
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds :: forall d e.
                          (Data.Data.Data d, Data.Data.Data e) =>
                          c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Fortran
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
316ff39b386b5917c927d03b67cf91ca
  $s$fDataFortran2 ::
    Language.Fortran.Fortran
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.Fortran.Fortran
                            (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$tD9QMegU2padFswPGA4PbPq) -}
7742eaff866b0bb8f6289213d57bd29d
  $s$fEqFortran ::
    GHC.Classes.Eq
      (Language.Fortran.Fortran
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqBlock_$c==1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fEqFortran1)
                  FortranGenerator.$s$fEqFortran_$s$fEqFortran_$c/= -}
f486ec6c81c71d434498c32037ad097c
  $s$fEqFortran1 ::
    GHC.Classes.Eq
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                FortranGenerator.$s$fEqFortran_$s$fEqMap -}
8b6a4f5a17816526fc9b5601377b5bc9
  $s$fEqFortran2 :: GHC.Classes.Eq [GHC.Base.String]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]2 -}
93569b1fcb0460c6f325e81c31b77750
  $s$fEqFortran3 :: GHC.Classes.Eq [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
d0c4a33f05562365b853d0ba81bf5eee
  $s$fEqFortran_$s$fEqFortran_$c/= ::
    Language.Fortran.Fortran
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.Fortran
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.Fortran.Fortran
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                   (b :: Language.Fortran.Fortran
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case Language.Fortran.$fEqBlock_$c==1
                        @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                        FortranGenerator.$s$fEqFortran1
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9e4fc4a46cf5c15efb387fe9d8f1fbfa
  $s$fEqFortran_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     FortranGenerator.$s$fEqFortran3
                     FortranGenerator.$s$fEqFortran2)
                  FortranGenerator.$s$fEqFortran_$s$fEqMap_$c/= -}
9738890a300ce03a82818bc8b44b9914
  $s$fEqFortran_$s$fEqMap_$c/= ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ [GHC.Types.Char]
                      @ [GHC.Base.String]
                      FortranGenerator.$s$fEqFortran3
                      FortranGenerator.$s$fEqFortran2
                      x
                      y)) -}
4298a75d3eec836b4663d71cb8914294
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fEqFortran1)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fEqFortran1) -}
5053a4074fea1cffae8957df99334f56
  $s$fShowFortran_$cshow2 ::
    [Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Data.Map.Base.Map
                             [GHC.Types.Char] [GHC.Base.String]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                   FortranGenerator.$s$fShowFortran_$cshow3
                   ls
                   s) -}
16d468af8e74fa5ab27088bd543011da
  $s$fShowFortran_$cshow3 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w3 :: Data.Map.Base.Map
                            [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]2
                   0#
                   w3) -}
ff96770b01d589258af70c61f4c577a6
  $s$fShowFortran_$cshow4 :: GHC.Show.Show [GHC.Base.String]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]2 -}
0fbe31e2e00c67b1fb72249313812bf2
  $s$fShowFortran_$cshow5 :: GHC.Show.Show [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]1 -}
1e3cdf6f9e5b8b9e191417956029e228
  $s$fShowFortran_$cshow_$s$fShowMap ::
    GHC.Show.Show
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fShowMap_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     FortranGenerator.$s$fShowFortran_$cshow5
                     FortranGenerator.$s$fShowFortran_$cshow4)
                  (Data.Map.Base.$fShowMap_$cshow
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     FortranGenerator.$s$fShowFortran_$cshow5
                     FortranGenerator.$s$fShowFortran_$cshow4)
                  FortranGenerator.$s$fShowFortran_$cshow2 -}
3bf8eece3cca1ac2b278c4fad8351cea
  $stypeRep#10 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranGenerator.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
6906fed3c9912f8eb00b41c6b50cdbda
  $stypeRep#11 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
35450ec0b9fc119f00314921630bd14b
  $stypeRep#14 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranGenerator.$stypeRep#15
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tc[]
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
044028dfd6229c5aa3d6da96550cb03e
  $stypeRep#15 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17730107610217102821##
                   9866972337190828755##) -}
4bc019c7ca239c5af31e5170a6d9f9a2
  $stypeRep#18 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranGenerator.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranGenerator.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
b170fdeb7e92ea9b7471919646b27e6f
  $stypeRep#19 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranGenerator.$stypeRep#10
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
adcaa8d75380d0eba01b295a7c962b55
  $stypeRep#2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranGenerator.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
95e8ee10f8ce2908bd91dbd79e17c6cc
  $stypeRep#22 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranGenerator.$stypeRep#2 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranGenerator.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
cd2f217afeb37d8bc6b39cc10a5396e2
  $stypeRep#23 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranGenerator.$stypeRep#18
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
ed81fddc2628ef2b6caca7ef14914c40
  $stypeRep#26 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranGenerator.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranGenerator.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
f3a13e93f4cb9f4d7afb0a1257352471
  $stypeRep#29 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranGenerator.$stypeRep#22 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranGenerator.$stypeRep#30
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
689a182c2dd24cebfe0aaf698e2f8062
  $stypeRep#3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17306070887558246498##
                   16032333906417739553##) -}
58cd5185146f0f7000b516879cdcf56f
  $stypeRep#30 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranGenerator.$stypeRep#26
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
d7f55e527e733314bc8901aba8f9cb68
  $stypeRep#6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranGenerator.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
47ee6b79afb9521dc219d5f03bb622db
  $stypeRep#7 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6882220124880764793##
                   15271875958298145102##) -}
4f96003c4dcb6b9f6d31bb483d7d90b7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FortranGenerator.$trModule2
                   FortranGenerator.$trModule1) -}
05336afa21b17b517bac5d51fa9d0a8c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FortranGenerator"#) -}
afa7c479b9ca252660b516b5b4b3d302
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
c1638d51996d52312b7e1508fe7d12cd
  $wgenerateKernelDeclarations ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Decl LanguageFortranTools.Anno] #)
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
346eebcec1935eb275d151ad510eb005
  $wgenerateLoopIterationsExpr ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [0] -}
f6c01ce031badaeb94c67c497d1a2009
  $wgenerateReductionArrayAssignment ::
    [GHC.Types.Char]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> [GHC.Types.Char]
    -> Language.Fortran.Variable
    -> Language.Fortran.Variable
    -> [GHC.Types.Char]
  {- Arity: 5, Strictness: <L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ t
                   @ t1
                   (w :: [GHC.Types.Char])
                   (w1 :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (w2 :: [GHC.Types.Char])
                   (ww :: Language.Fortran.Variable)
                   (ww1 :: Language.Fortran.Variable) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   w2
                   (GHC.Base.++
                      @ GHC.Types.Char
                      w
                      (GHC.Base.++
                         @ GHC.Types.Char
                         ww
                         (GHC.CString.unpackAppendCString#
                            "("#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               (LanguageFortranTools.outputExprFormatting w1)
                               (GHC.CString.unpackAppendCString#
                                  ") = "#
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     ww1
                                     FortranGenerator.generateReductionArrayAssignment1))))))) -}
22628192a2267b5a53333f86750b6e68
  $wgenerateSizeStatements_decls ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> (# [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Fortran LanguageFortranTools.Anno] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: [Language.Fortran.Decl
                            LanguageFortranTools.Anno]) ->
                 let {
                   varsWithRanks :: [(Language.Fortran.VarName
                                        LanguageFortranTools.Anno,
                                      GHC.Types.Int)]
                   = FortranGenerator.generateSizeStatements_decls_go3
                       w
                       (GHC.Base.map
                          @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                          @ GHC.Types.Int
                          CodeEmitterUtils.getDeclRank
                          w)
                 } in
                 (# GHC.Base.++
                      @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                      (FortranGenerator.generateSizeStatements_decls_go2
                         varsWithRanks
                         (GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)))
                      (FortranGenerator.generateSizeStatements_decls_go1 w),
                    FortranGenerator.generateSizeStatements_decls_go
                      varsWithRanks
                      (GHC.Types.[]
                         @ (Language.Fortran.Fortran LanguageFortranTools.Anno)) #)) -}
65e5dabc1f3f46e5e30ffe5a57ca886f
  adaptOriginalDeclaration_intent ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.Maybe (Language.Fortran.Decl LanguageFortranTools.Anno)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (intent :: Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case CodeEmitterUtils.extractDeclaration_varname
                        varname
                        program of wild {
                   []
                   -> GHC.Base.Nothing
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   : ipv ipv1
                   -> GHC.Base.Just
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        (case CodeEmitterUtils.containsParameterAttr_go
                                (Language.Fortran.$fDataDecl_$cgmapQ
                                   @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                                   CodeEmitterUtils.$s$fDataDecl_$s$fDataMap
                                   @ GHC.Types.Bool
                                   CodeEmitterUtils.containsParameterAttr1
                                   ipv)
                                GHC.Types.False of wild1 {
                           GHC.Types.False
                           -> Data.Generics.Schemes.everywhere
                                LanguageFortranTools.applyGeneratedSrcSpans2
                                @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                FortranGenerator.$s$fDataDecl
                                (CodeEmitterUtils.applyIntent intent ipv)
                           GHC.Types.True
                           -> Data.Generics.Schemes.everywhere
                                LanguageFortranTools.applyGeneratedSrcSpans2
                                @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                FortranGenerator.$s$fDataDecl
                                ipv }) }) -}
300513dd3cf020a37052b0514ede1d41
  adaptOriginalDeclaration_varname ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (newVarname :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 Data.Generics.Schemes.everywhere
                   LanguageFortranTools.applyGeneratedSrcSpans2
                   @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   FortranGenerator.$s$fDataDecl
                   (LanguageFortranTools.replaceAllOccurences_varname
                      @ Language.Fortran.Decl
                      FortranGenerator.$s$fDataDecl
                      (case CodeEmitterUtils.extractDeclaration_varname
                              varname
                              program of wild {
                         []
                         -> Language.Fortran.Decl
                              @ LanguageFortranTools.Anno
                              (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                              LanguageFortranTools.nullSrcSpan
                              (GHC.Types.:
                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                    Language.Fortran.Expr LanguageFortranTools.Anno,
                                    GHC.Base.Maybe GHC.Types.Int)
                                 (Language.Fortran.Var
                                    @ LanguageFortranTools.Anno
                                    (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                    LanguageFortranTools.nullSrcSpan
                                    (GHC.Types.:
                                       @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                          [Language.Fortran.Expr LanguageFortranTools.Anno])
                                       (varname,
                                        GHC.Types.[]
                                          @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                             [Language.Fortran.Expr LanguageFortranTools.Anno]))),
                                  FortranGenerator.adaptOriginalDeclaration_varname2,
                                  GHC.Base.Nothing @ GHC.Types.Int)
                                 (GHC.Types.[]
                                    @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)))
                              FortranGenerator.adaptOriginalDeclaration_varname1
                         : ipv ipv1 -> ipv })
                      varname
                      newVarname)) -}
de0d3d0d672b6610740935500f061ea0
  adaptOriginalDeclaration_varname1 ::
    Language.Fortran.Type LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.BaseType
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.adaptOriginalDeclaration_varname3
                   (GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno))
                   FortranGenerator.adaptOriginalDeclaration_varname2
                   FortranGenerator.adaptOriginalDeclaration_varname2) -}
c379d52086041859e0ba0a54c9f4923f
  adaptOriginalDeclaration_varname2 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m9,
     Unfolding: (Language.Fortran.NullExpr
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan) -}
0e452a6cc4f309f374812dfa48532948
  adaptOriginalDeclaration_varname3 ::
    Language.Fortran.BaseType LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Language.Fortran.Real
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
0b9f4149e9e10ef992bbd890495d4d55
  declareGlobalReductionArray ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U(U,U)><L,U><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (arraySize :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.applyIntent
                   FortranGenerator.declareGlobalReductionArray3
                   (LanguageFortranTools.replaceAllOccurences_varname
                      @ Language.Fortran.Decl
                      FortranGenerator.$s$fDataDecl
                      (CodeEmitterUtils.addDimension
                         (case CodeEmitterUtils.extractDeclaration_varname
                                 varname
                                 program of wild {
                            []
                            -> Language.Fortran.Decl
                                 @ LanguageFortranTools.Anno
                                 (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                 LanguageFortranTools.nullSrcSpan
                                 (GHC.Types.:
                                    @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)
                                    (Language.Fortran.Var
                                       @ LanguageFortranTools.Anno
                                       (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                       LanguageFortranTools.nullSrcSpan
                                       (GHC.Types.:
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                             [Language.Fortran.Expr LanguageFortranTools.Anno])
                                          (varname,
                                           GHC.Types.[]
                                             @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                          (GHC.Types.[]
                                             @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                                [Language.Fortran.Expr
                                                   LanguageFortranTools.Anno]))),
                                     FortranGenerator.adaptOriginalDeclaration_varname2,
                                     GHC.Base.Nothing @ GHC.Types.Int)
                                    (GHC.Types.[]
                                       @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                          Language.Fortran.Expr LanguageFortranTools.Anno,
                                          GHC.Base.Maybe GHC.Types.Int)))
                                 FortranGenerator.adaptOriginalDeclaration_varname1
                            : ipv ipv1 -> ipv })
                         FortranGenerator.declareGlobalReductionArray1
                         arraySize)
                      varname
                      (case varname of ww { Language.Fortran.VarName ww1 ww2 ->
                       Language.Fortran.VarName
                         @ LanguageFortranTools.Anno
                         ww1
                         (GHC.CString.unpackAppendCString#
                            "global_"#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               ww2
                               CodeEmitterUtils.generateGlobalReductionArray1)) }))) -}
bb370067b1556a4ce9a7013ce815fb42
  declareGlobalReductionArray1 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   FortranGenerator.declareGlobalReductionArray2) -}
d30d83206f140ec59a1629f0edd6e91b
  declareGlobalReductionArray2 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        1#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
491fe29176292f3075b24a6382c31a4f
  declareGlobalReductionArray3 ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Language.Fortran.Out
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
9daecd23e794fdeffd5e58e3aab3762b
  declareLocalReductionArray ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U(U,U)><L,U><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (arraySize :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.addDimension
                   (LanguageFortranTools.replaceAllOccurences_varname
                      @ Language.Fortran.Decl
                      FortranGenerator.$s$fDataDecl
                      (case CodeEmitterUtils.extractDeclaration_varname
                              varname
                              program of wild {
                         []
                         -> Language.Fortran.Decl
                              @ LanguageFortranTools.Anno
                              (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                              LanguageFortranTools.nullSrcSpan
                              (GHC.Types.:
                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                    Language.Fortran.Expr LanguageFortranTools.Anno,
                                    GHC.Base.Maybe GHC.Types.Int)
                                 (Language.Fortran.Var
                                    @ LanguageFortranTools.Anno
                                    (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                    LanguageFortranTools.nullSrcSpan
                                    (GHC.Types.:
                                       @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                          [Language.Fortran.Expr LanguageFortranTools.Anno])
                                       (varname,
                                        GHC.Types.[]
                                          @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                             [Language.Fortran.Expr LanguageFortranTools.Anno]))),
                                  FortranGenerator.adaptOriginalDeclaration_varname2,
                                  GHC.Base.Nothing @ GHC.Types.Int)
                                 (GHC.Types.[]
                                    @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)))
                              FortranGenerator.adaptOriginalDeclaration_varname1
                         : ipv ipv1 -> ipv })
                      varname
                      (case varname of ww { Language.Fortran.VarName ww1 ww2 ->
                       Language.Fortran.VarName
                         @ LanguageFortranTools.Anno
                         ww1
                         (GHC.CString.unpackAppendCString#
                            "local_"#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               ww2
                               CodeEmitterUtils.generateGlobalReductionArray1)) }))
                   FortranGenerator.declareGlobalReductionArray1
                   arraySize) -}
0dce9126996140b37099d0141a5ec541
  declareScalarPointer ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U(U,U)><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 LanguageFortranTools.replaceAllOccurences_varname
                   @ Language.Fortran.Decl
                   FortranGenerator.$s$fDataDecl
                   (CodeEmitterUtils.addDimension
                      (case CodeEmitterUtils.extractDeclaration_varname
                              varname
                              program of wild {
                         []
                         -> Language.Fortran.Decl
                              @ LanguageFortranTools.Anno
                              (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                              LanguageFortranTools.nullSrcSpan
                              (GHC.Types.:
                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                    Language.Fortran.Expr LanguageFortranTools.Anno,
                                    GHC.Base.Maybe GHC.Types.Int)
                                 (Language.Fortran.Var
                                    @ LanguageFortranTools.Anno
                                    (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                    LanguageFortranTools.nullSrcSpan
                                    (GHC.Types.:
                                       @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                          [Language.Fortran.Expr LanguageFortranTools.Anno])
                                       (varname,
                                        GHC.Types.[]
                                          @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                             [Language.Fortran.Expr LanguageFortranTools.Anno]))),
                                  FortranGenerator.adaptOriginalDeclaration_varname2,
                                  GHC.Base.Nothing @ GHC.Types.Int)
                                 (GHC.Types.[]
                                    @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)))
                              FortranGenerator.adaptOriginalDeclaration_varname1
                         : ipv ipv1 -> ipv })
                      FortranGenerator.adaptOriginalDeclaration_varname2
                      FortranGenerator.declareGlobalReductionArray1)
                   varname
                   (case varname of ww { Language.Fortran.VarName ww1 ww2 ->
                    Language.Fortran.VarName
                      @ LanguageFortranTools.Anno
                      (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                      (GHC.Base.++
                         @ GHC.Types.Char
                         ww2
                         FortranGenerator.declareScalarPointer1) })) -}
94686a2576ad11f2294143184334c30a
  declareScalarPointer1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_ptr"#) -}
4e3da5d6f771a1c545b241707be1e358
  generateArgList ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.ArgList LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case ds of wild {
                   [] -> FortranGenerator.generateArgList1
                   : ipv ipv1
                   -> Language.Fortran.ArgList
                        @ LanguageFortranTools.Anno
                        (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                        (LanguageFortranTools.generateESeq_$sgenerateESeq ipv ipv1) }) -}
d3fa71dedd8ca702397a715a573ba119
  generateArgList1 ::
    Language.Fortran.ArgList LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.ArgList
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.adaptOriginalDeclaration_varname2) -}
224fb96d4f7ea8ab5bb02a041c3a6205
  generateFinalHostReduction ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (reductionVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno])
                   (redIter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (codeSeg :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case Data.Generics.Schemes.everything
                        @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                        (GHC.Base.++
                           @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                        (\ @ a ($dData :: Data.Data.Data a) (eta :: a)[OneShot] ->
                         case (Data.Data.$p1Data @ a $dData)
                                `cast`
                              (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                                (GHC.Prim.proxy#
                                   @ *
                                   @ a) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ds4 ->
                         case FortranGenerator.generateFinalHostReduction1 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds5 ds6 ds7 ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqWord# dt dt2) of wild2 {
                           GHC.Types.False
                           -> GHC.Types.[]
                                @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                           GHC.Types.True
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                                GHC.Types.False
                                -> GHC.Types.[]
                                     @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                GHC.Types.True
                                -> FortranGenerator.generateFinalHostReduction_assgs
                                     reductionVars
                                     redIter
                                     eta
                                       `cast`
                                     (UnsafeCo representational a (Language.Fortran.Fortran
                                                                     LanguageFortranTools.Anno)) } } } })
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        FortranGenerator.$s$fDataFortran
                        codeSeg of wild {
                   []
                   -> GHC.List.foldl2
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   : x xs -> FortranGenerator.generateFinalHostReduction_go xs x }) -}
5271a60862f82eb5bf3b05770793e8f3
  generateFinalHostReduction1 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranGenerator.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        FortranGenerator.generateFinalHostReduction_types of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranGenerator.$stypeRep#7
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   FortranGenerator.generateFinalHostReduction_types } } } }) -}
f53e02bc506200e24c610d3635c2a555
  generateFinalHostReduction2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranGenerator.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        FortranGenerator.generateFinalHostReduction_types2 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranGenerator.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        FortranGenerator.generateFinalHostReduction_types1 of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           FortranGenerator.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   FortranGenerator.generateFinalHostReduction_types1 } } } } } }) -}
d361dface388ab84552203de2aa979b3
  generateFinalHostReduction3 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranGenerator.generateFinalHostReduction4
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
897c60476a8858b4f92ee25ee01a1bcb
  generateFinalHostReduction4 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranGenerator.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranGenerator.generateFinalHostReduction_types2
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
cbcb595f4f062c84b07b490789af37bb
  generateFinalHostReduction5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranGenerator.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranGenerator.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
8eed8d7ed4b5cab5410b42e25c83de6b
  generateFinalHostReduction_assgs ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: (\ (reductionVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno])
                   (redIter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (ds :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Types.[]
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   Language.Fortran.Assg ds1 ds2 expr1 expr2
                   -> case LanguageFortranTools.usesVarName_list
                             reductionVars
                             expr1 of wild1 {
                        GHC.Types.False
                        -> GHC.Types.[]
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        GHC.Types.True
                        -> let {
                             finalReductionVar :: Language.Fortran.VarName
                                                    LanguageFortranTools.Anno
                             = case expr1 of wild2 {
                                 DEFAULT -> FortranGenerator.generateFinalHostReduction_assgs5
                                 Language.Fortran.Var ds3 ds4 lst
                                 -> case LanguageFortranTools.extractVarNames_go lst of wild3 {
                                      [] -> FortranGenerator.generateFinalHostReduction_assgs5
                                      : y ys -> y } }
                           } in
                           let {
                             finalReductionVar1 :: (Language.Fortran.VarName
                                                      LanguageFortranTools.Anno,
                                                    [Language.Fortran.Expr
                                                       LanguageFortranTools.Anno])
                               {- Strictness: m -}
                             = (finalReductionVar,
                                GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                           } in
                           let {
                             finalReductionVar2 :: [(Language.Fortran.VarName
                                                       LanguageFortranTools.Anno,
                                                     [Language.Fortran.Expr
                                                        LanguageFortranTools.Anno])]
                             = GHC.Types.:
                                 @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                    [Language.Fortran.Expr LanguageFortranTools.Anno])
                                 finalReductionVar1
                                 (GHC.Types.[]
                                    @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                       [Language.Fortran.Expr LanguageFortranTools.Anno]))
                           } in
                           let {
                             finalReductionVar3 :: Language.Fortran.Expr
                                                     LanguageFortranTools.Anno
                             = Language.Fortran.Var
                                 @ LanguageFortranTools.Anno
                                 (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                 LanguageFortranTools.nullSrcSpan
                                 finalReductionVar2
                           } in
                           let {
                             finalReductionArray :: Language.Fortran.VarName
                                                      LanguageFortranTools.Anno
                             = case expr1 of wild2 {
                                 DEFAULT -> FortranGenerator.generateFinalHostReduction_assgs1
                                 Language.Fortran.Var ds3 ds4 lst
                                 -> case LanguageFortranTools.extractVarNames_go lst of wild3 {
                                      [] -> FortranGenerator.generateFinalHostReduction_assgs1
                                      : y ys
                                      -> case y of ww { Language.Fortran.VarName ww1 ww2 ->
                                         Language.Fortran.VarName
                                           @ LanguageFortranTools.Anno
                                           ww1
                                           (GHC.CString.unpackAppendCString#
                                              "global_"#
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 ww2
                                                 CodeEmitterUtils.generateGlobalReductionArray1)) } } }
                           } in
                           case LanguageFortranTools.extractPrimaryReductionOp
                                  expr1
                                  expr2 of wild2 {
                             GHC.Base.Nothing
                             -> case LanguageFortranTools.extractPrimaryReductionFunction
                                       expr1
                                       expr2 of wild3 {
                                  []
                                  -> GHC.Types.[]
                                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                  : ipv ipv1
                                  -> GHC.Types.:
                                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                       (Language.Fortran.Assg
                                          @ LanguageFortranTools.Anno
                                          (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                          LanguageFortranTools.nullSrcSpan
                                          finalReductionVar3
                                          (Language.Fortran.Var
                                             @ LanguageFortranTools.Anno
                                             (Data.Map.Base.Tip
                                                @ GHC.Base.String
                                                @ [GHC.Base.String])
                                             LanguageFortranTools.nullSrcSpan
                                             (GHC.Types.:
                                                @ (Language.Fortran.VarName
                                                     LanguageFortranTools.Anno,
                                                   [Language.Fortran.Expr
                                                      LanguageFortranTools.Anno])
                                                (Language.Fortran.VarName
                                                   @ LanguageFortranTools.Anno
                                                   (Data.Map.Base.Tip
                                                      @ GHC.Base.String
                                                      @ [GHC.Base.String])
                                                   wild3,
                                                 GHC.Types.:
                                                   @ (Language.Fortran.Expr
                                                        LanguageFortranTools.Anno)
                                                   finalReductionVar3
                                                   (GHC.Types.:
                                                      @ (Language.Fortran.Expr
                                                           LanguageFortranTools.Anno)
                                                      (Language.Fortran.Var
                                                         @ LanguageFortranTools.Anno
                                                         (Data.Map.Base.Tip
                                                            @ GHC.Base.String
                                                            @ [GHC.Base.String])
                                                         LanguageFortranTools.nullSrcSpan
                                                         (GHC.Types.:
                                                            @ (Language.Fortran.VarName
                                                                 LanguageFortranTools.Anno,
                                                               [Language.Fortran.Expr
                                                                  LanguageFortranTools.Anno])
                                                            (finalReductionArray,
                                                             GHC.Types.:
                                                               @ (Language.Fortran.Expr
                                                                    LanguageFortranTools.Anno)
                                                               (Language.Fortran.Var
                                                                  @ LanguageFortranTools.Anno
                                                                  (Data.Map.Base.Tip
                                                                     @ GHC.Base.String
                                                                     @ [GHC.Base.String])
                                                                  LanguageFortranTools.nullSrcSpan
                                                                  (GHC.Types.:
                                                                     @ (Language.Fortran.VarName
                                                                          LanguageFortranTools.Anno,
                                                                        [Language.Fortran.Expr
                                                                           LanguageFortranTools.Anno])
                                                                     (redIter,
                                                                      GHC.Types.[]
                                                                        @ (Language.Fortran.Expr
                                                                             LanguageFortranTools.Anno))
                                                                     (GHC.Types.[]
                                                                        @ (Language.Fortran.VarName
                                                                             LanguageFortranTools.Anno,
                                                                           [Language.Fortran.Expr
                                                                              LanguageFortranTools.Anno]))))
                                                               (GHC.Types.[]
                                                                  @ (Language.Fortran.Expr
                                                                       LanguageFortranTools.Anno)))
                                                            (GHC.Types.[]
                                                               @ (Language.Fortran.VarName
                                                                    LanguageFortranTools.Anno,
                                                                  [Language.Fortran.Expr
                                                                     LanguageFortranTools.Anno]))))
                                                      (GHC.Types.[]
                                                         @ (Language.Fortran.Expr
                                                              LanguageFortranTools.Anno))))
                                                (GHC.Types.[]
                                                   @ (Language.Fortran.VarName
                                                        LanguageFortranTools.Anno,
                                                      [Language.Fortran.Expr
                                                         LanguageFortranTools.Anno])))))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.Fortran LanguageFortranTools.Anno)) }
                             GHC.Base.Just op
                             -> GHC.Types.:
                                  @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                  (Language.Fortran.Assg
                                     @ LanguageFortranTools.Anno
                                     (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                     LanguageFortranTools.nullSrcSpan
                                     finalReductionVar3
                                     (Language.Fortran.Bin
                                        @ LanguageFortranTools.Anno
                                        (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                        LanguageFortranTools.nullSrcSpan
                                        op
                                        finalReductionVar3
                                        (Language.Fortran.Var
                                           @ LanguageFortranTools.Anno
                                           (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                           LanguageFortranTools.nullSrcSpan
                                           (GHC.Types.:
                                              @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                                 [Language.Fortran.Expr LanguageFortranTools.Anno])
                                              (finalReductionArray,
                                               GHC.Types.:
                                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                                                 (Language.Fortran.Var
                                                    @ LanguageFortranTools.Anno
                                                    (Data.Map.Base.Tip
                                                       @ GHC.Base.String
                                                       @ [GHC.Base.String])
                                                    LanguageFortranTools.nullSrcSpan
                                                    (GHC.Types.:
                                                       @ (Language.Fortran.VarName
                                                            LanguageFortranTools.Anno,
                                                          [Language.Fortran.Expr
                                                             LanguageFortranTools.Anno])
                                                       (redIter,
                                                        GHC.Types.[]
                                                          @ (Language.Fortran.Expr
                                                               LanguageFortranTools.Anno))
                                                       (GHC.Types.[]
                                                          @ (Language.Fortran.VarName
                                                               LanguageFortranTools.Anno,
                                                             [Language.Fortran.Expr
                                                                LanguageFortranTools.Anno]))))
                                                 (GHC.Types.[]
                                                    @ (Language.Fortran.Expr
                                                         LanguageFortranTools.Anno)))
                                              (GHC.Types.[]
                                                 @ (Language.Fortran.VarName
                                                      LanguageFortranTools.Anno,
                                                    [Language.Fortran.Expr
                                                       LanguageFortranTools.Anno]))))))
                                  (GHC.Types.[]
                                     @ (Language.Fortran.Fortran
                                          LanguageFortranTools.Anno)) } } }) -}
baa30724b4c0a281201a290063f7ea87
  generateFinalHostReduction_assgs1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateFinalHostReduction_assgs2) -}
3ee867fab96aa469daf3764f95629a62
  generateFinalHostReduction_assgs2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "global_"#
                   FortranGenerator.generateFinalHostReduction_assgs3) -}
45b35e2d5cc32a6675b6f04f59bc1f24
  generateFinalHostReduction_assgs3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranGenerator.generateFinalHostReduction_assgs4
                   CodeEmitterUtils.generateGlobalReductionArray1) -}
c814ee263a3ab97c640487917e14da22
  generateFinalHostReduction_assgs4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DUMMY13"#) -}
6b92563f919c2c8c05536544bffdf6d7
  generateFinalHostReduction_assgs5 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateFinalHostReduction_assgs6) -}
91b575ddda0daffd27851c8e4f535feb
  generateFinalHostReduction_assgs6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DUMMY14"#) -}
1bb3880c9553c55a70bf093f0072cb90
  generateFinalHostReduction_go ::
    [Language.Fortran.Fortran LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
2ca01b1f4b6e10bb601824c3a2b64108
  generateFinalHostReduction_types ::
    [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranGenerator.generateFinalHostReduction2
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
4c12ac4bbd04ff656186647440386006
  generateFinalHostReduction_types1 ::
    [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   FortranGenerator.generateFinalHostReduction_types2
                   FortranGenerator.generateFinalHostReduction3) -}
2fff97589df795c349a9dfefc47712a1
  generateFinalHostReduction_types2 ::
    [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranGenerator.generateFinalHostReduction5
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
17af276ba72548c348de5f4df90b74d2
  generateGlobalWorkItemsExpr ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (loopVars :: [(Language.Fortran.VarName
                                    LanguageFortranTools.Anno,
                                  Language.Fortran.Expr LanguageFortranTools.Anno,
                                  Language.Fortran.Expr LanguageFortranTools.Anno,
                                  Language.Fortran.Expr LanguageFortranTools.Anno)]) ->
                 FortranGenerator.generateProductExpr_list
                   (GHC.Base.build
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                      (\ @ b1
                         (c :: Language.Fortran.Expr LanguageFortranTools.Anno
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            Language.Fortran.Expr LanguageFortranTools.Anno,
                            Language.Fortran.Expr LanguageFortranTools.Anno,
                            Language.Fortran.Expr LanguageFortranTools.Anno)
                         @ b1
                         (GHC.Base.mapFB
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            @ b1
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                               Language.Fortran.Expr LanguageFortranTools.Anno,
                               Language.Fortran.Expr LanguageFortranTools.Anno,
                               Language.Fortran.Expr LanguageFortranTools.Anno)
                            c
                            FortranGenerator.generateLoopIterationsExpr)
                         n
                         loopVars))) -}
dcb734958ca0025a273eff11a5569b42
  generateIfNoElse ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><L,U>m5,
     Unfolding: InlineRule (2, True, False)
                (\ (cond_expr :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (block_if_true :: Language.Fortran.Fortran
                                       LanguageFortranTools.Anno) ->
                 Language.Fortran.If
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   cond_expr
                   block_if_true
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Fortran LanguageFortranTools.Anno))
                   (GHC.Base.Nothing
                      @ (Language.Fortran.Fortran LanguageFortranTools.Anno))) -}
84dd6d1b3fb9f91d4704b1cedd0cfd79
  generateImplicitDecl ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (var :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 Language.Fortran.Decl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno,
                         GHC.Base.Maybe GHC.Types.Int)
                      (LanguageFortranTools.generateVar var,
                       FortranGenerator.adaptOriginalDeclaration_varname2,
                       GHC.Base.Nothing @ GHC.Types.Int)
                      (GHC.Types.[]
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                            Language.Fortran.Expr LanguageFortranTools.Anno,
                            GHC.Base.Maybe GHC.Types.Int)))
                   FortranGenerator.adaptOriginalDeclaration_varname1) -}
65a7c788e6220177495ec93812460800
  generateKernelDeclarations ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> ([Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno])
  {- Arity: 2, Strictness: <S,1*U><L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.Program LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case FortranGenerator.$wgenerateKernelDeclarations
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
4ecf2556692bca38268fe0c354d3131d
  generateLoop ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m2,
     Unfolding: InlineRule (4, True, False)
                (\ (r_iter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (start :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (end :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (fortran :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 Language.Fortran.For
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   r_iter
                   start
                   end
                   FortranGenerator.generateLoop1
                   fortran) -}
f9b19029a284a3084bd5ba4fb4f3c0f5
  generateLoop1 :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   FortranGenerator.generateLoop2) -}
1b282b6eba56cea6585cfc1aace5638b
  generateLoop2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1"#) -}
056a6160e4696a6c47675ae334b341a2
  generateLoopInitialisers ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> GHC.Base.Maybe (Language.Fortran.Expr LanguageFortranTools.Anno)
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
8c421319464b3c5d1646ab967e4ac42b
  generateLoopInitialisers_$sgenerateLoopInitialisers ::
    Language.Fortran.Expr
      (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> Language.Fortran.Expr
         (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> (Language.Fortran.VarName
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
        Language.Fortran.Expr
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
        Language.Fortran.Expr
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
        Language.Fortran.Expr
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]))
    -> [(Language.Fortran.VarName
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]))]
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U> -}
9e80e06a6728aeea67e0e66025b1ee7a
  generateLoopIterationsExpr ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno)
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S(LSLS),1*U(A,U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno)) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 FortranGenerator.$wgenerateLoopIterationsExpr ww2 ww3 ww4 }) -}
fab2a81209da145f28b86fd2c078a1ec
  generateLoopStartAddition ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U(U,U)><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (varname :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (start :: Language.Fortran.Expr LanguageFortranTools.Anno) ->
                 Language.Fortran.Assg
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (LanguageFortranTools.generateVar varname)
                   (Language.Fortran.Bin
                      @ LanguageFortranTools.Anno
                      (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      LanguageFortranTools.generateAdditionExpr1
                      (FortranGenerator.generateRelVar varname)
                      start)) -}
b0c8a34e0c3d7c2bc99f8cc9772c699a
  generateProductExpr_list ::
    [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.Fortran.Expr
                             LanguageFortranTools.Anno]) ->
                 case ds of wild {
                   [] -> FortranGenerator.generateProductExpr_list2
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> Language.Fortran.Bin
                             @ LanguageFortranTools.Anno
                             (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                             LanguageFortranTools.nullSrcSpan
                             FortranGenerator.generateProductExpr_list1
                             x
                             (FortranGenerator.generateProductExpr_list_$sgenerateProductExpr_list
                                ipv
                                ipv1) } }) -}
63271e5676a8c68152ba4616b2d2ac47
  generateProductExpr_list1 ::
    Language.Fortran.BinOp LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Language.Fortran.Mul
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
604528b7d03efc29689871d1beb12359
  generateProductExpr_list2 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: x -}
2af0ed300dcd9fd9066bce76a8204fe1
  generateProductExpr_list_$sgenerateProductExpr_list ::
    Language.Fortran.Expr
      (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.Expr
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><L,U> -}
119c12d713ab900902cd3d69d708be96
  generateRangeExpr ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,1*U(U,1*U)><L,U><L,U>m1,
     Unfolding: InlineRule (3, True, False)
                (\ (varname :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (start :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (end :: Language.Fortran.Expr LanguageFortranTools.Anno) ->
                 Language.Fortran.Assg
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (FortranGenerator.generateRangeVar varname)
                   (Language.Fortran.Bin
                      @ LanguageFortranTools.Anno
                      (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      LanguageFortranTools.generateAdditionExpr1
                      (LanguageFortranTools.generateSubtractionExpr end start)
                      FortranGenerator.generateLoop1)) -}
594908736d5574d138cdf38f5eb9cbac
  generateRangeVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m5, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (Language.Fortran.VarName
                         @ LanguageFortranTools.Anno
                         ww1
                         (GHC.Base.++
                            @ GHC.Types.Char
                            ww2
                            (GHC.CString.unpackCString# "_range"#)),
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno]))) }) -}
e096dbd2432768cebbbea139d6c00b12
  generateReductionArrayAssignment ::
    [GHC.Types.Char]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> [GHC.Types.Char]
    -> (Language.Fortran.VarName t1, Language.Fortran.VarName t)
    -> [GHC.Types.Char]
  {- Arity: 4,
     Strictness: <L,1*U><L,1*U><S,1*U><S(SS),1*U(1*U(A,1*U),1*U(A,1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ t
                   @ t1
                   (w :: [GHC.Types.Char])
                   (w1 :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (w2 :: [GHC.Types.Char])
                   (w3 :: (Language.Fortran.VarName t1,
                           Language.Fortran.VarName t)) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Language.Fortran.VarName ww4 ww5 ->
                 case ww2 of ww6 { Language.Fortran.VarName ww7 ww8 ->
                 FortranGenerator.$wgenerateReductionArrayAssignment
                   @ t
                   @ t1
                   w
                   w1
                   w2
                   ww5
                   ww8 } } }) -}
65ed44c425ba3fa89dc7afa65547b52e
  generateReductionArrayAssignment1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
dd23d34f35b14122c1f6ffa05e430d55
  generateRelVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m5, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (Language.Fortran.VarName
                         @ LanguageFortranTools.Anno
                         ww1
                         (GHC.Base.++
                            @ GHC.Types.Char
                            ww2
                            (GHC.CString.unpackCString# "_rel"#)),
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno]))) }) -}
d9b9c96e8a7b31726474f258c4867076
  generateSizeDecl ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> GHC.Types.Int -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>m1, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (w1 :: GHC.Types.Int) ->
                 Language.Fortran.Decl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno,
                         GHC.Base.Maybe GHC.Types.Int)
                      (LanguageFortranTools.generateVar w,
                       FortranGenerator.adaptOriginalDeclaration_varname2,
                       GHC.Base.Nothing @ GHC.Types.Int)
                      (GHC.Types.[]
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                            Language.Fortran.Expr LanguageFortranTools.Anno,
                            GHC.Base.Maybe GHC.Types.Int)))
                   (Language.Fortran.BaseType
                      @ LanguageFortranTools.Anno
                      (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                      FortranGenerator.generateSizeDecl3
                      (GHC.Types.:
                         @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                         (Language.Fortran.Dimension
                            @ LanguageFortranTools.Anno
                            (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                            (GHC.Types.:
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                  Language.Fortran.Expr LanguageFortranTools.Anno)
                               (FortranGenerator.adaptOriginalDeclaration_varname2,
                                LanguageFortranTools.generateIntConstant w1)
                               (GHC.Types.[]
                                  @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno))))
                         (GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno)))
                      FortranGenerator.adaptOriginalDeclaration_varname2
                      FortranGenerator.generateSizeDecl1)) -}
d0a84e3d9fc662479418cdec51414b92
  generateSizeDecl1 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   FortranGenerator.generateSizeDecl2) -}
b4a12a35baa3227ea3aed78b22902520
  generateSizeDecl2 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        8#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
f8e69a5359a1427310342da255cfb882
  generateSizeDecl3 ::
    Language.Fortran.BaseType LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.Fortran.Integer
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
09925ee5b67012eb73bc596707432772
  generateSizeStatement ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U(U,U)>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 Language.Fortran.Assg
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (Language.Fortran.Var
                      @ LanguageFortranTools.Anno
                      (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      (GHC.Types.:
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])
                         (CodeEmitterUtils.varSizeVarName w,
                          GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                         (GHC.Types.[]
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                               [Language.Fortran.Expr LanguageFortranTools.Anno]))))
                   (Language.Fortran.Var
                      @ LanguageFortranTools.Anno
                      (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      (GHC.Types.:
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])
                         (FortranGenerator.generateSizeStatement1,
                          GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            (LanguageFortranTools.generateVar w)
                            (GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno)))
                         (GHC.Types.[]
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                               [Language.Fortran.Expr LanguageFortranTools.Anno]))))) -}
29f6fbcbe183de8496b2566055291e18
  generateSizeStatement1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateSizeStatement2) -}
52d1b3fffeef3d71e0e2a6d3498dde24
  generateSizeStatement2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "shape"#) -}
ff34c931a2d5d7ed6b910be87896d9c9
  generateSizeStatements_decls ::
    GHC.Base.String
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> ([Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Fortran LanguageFortranTools.Anno])
  {- Arity: 2, Strictness: <L,A><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                 case FortranGenerator.$wgenerateSizeStatements_decls
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d5a2c3981afd61430516bad5bc3be240
  generateSizeStatements_decls_go ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      GHC.Types.Int)]
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
b0055347624c996028194346ae3704b1
  generateSizeStatements_decls_go1 ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 1, Strictness: <S,1*U> -}
0b151d5e902236d3867780b61fdc76e0
  generateSizeStatements_decls_go2 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      GHC.Types.Int)]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
8c27d1996b8d1934b2854fc18e3a2d05
  generateSizeStatements_decls_go3 ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [GHC.Types.Int]
    -> [(Language.Fortran.VarName LanguageFortranTools.Anno,
         GHC.Types.Int)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
2afec06e14bce1dc6a1757b0533708e4
  generateSubtractionExpr_list ::
    [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.Fortran.Expr
                             LanguageFortranTools.Anno]) ->
                 case ds of wild {
                   [] -> FortranGenerator.generateSubtractionExpr_list2
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> Language.Fortran.Bin
                             @ LanguageFortranTools.Anno
                             (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                             LanguageFortranTools.nullSrcSpan
                             FortranGenerator.generateSubtractionExpr_list1
                             x
                             (FortranGenerator.generateSubtractionExpr_list_$sgenerateSubtractionExpr_list1
                                ipv
                                ipv1) } }) -}
2db05936bf1bb274b1c5c0586c05f152
  generateSubtractionExpr_list1 ::
    Language.Fortran.BinOp LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Language.Fortran.Minus
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
df2d1d32ef5aad70808c1d32d78d7c9a
  generateSubtractionExpr_list2 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: x -}
a673ccf8b6db63fca64058a8761e1182
  generateSubtractionExpr_list_$sgenerateSubtractionExpr_list1 ::
    Language.Fortran.Expr
      (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.Expr
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><L,U> -}
e2a29e236c53df2628a69345fbe58445
  generateWorkGroupReduction ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (reductionVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno])
                   (redIter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (codeSeg :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 let {
                   assignments :: [Language.Fortran.Fortran LanguageFortranTools.Anno]
                   = Data.Generics.Schemes.everything
                       @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                       (GHC.Base.++
                          @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                       (\ @ a ($dData :: Data.Data.Data a) (eta :: a)[OneShot] ->
                        case (Data.Data.$p1Data @ a $dData)
                               `cast`
                             (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                               (GHC.Prim.proxy#
                                  @ *
                                  @ a) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ds4 ->
                        case FortranGenerator.generateWorkGroupReduction2 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds5 ds6 ds7 ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.eqWord# dt dt2) of wild2 {
                          GHC.Types.False
                          -> GHC.Types.[]
                               @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                          GHC.Types.True
                          -> case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                               GHC.Types.False
                               -> GHC.Types.[]
                                    @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                               GHC.Types.True
                               -> FortranGenerator.generateWorkGroupReduction_assgs
                                    reductionVars
                                    redIter
                                    eta
                                      `cast`
                                    (UnsafeCo representational a (Language.Fortran.Fortran
                                                                    LanguageFortranTools.Anno)) } } } })
                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                       FortranGenerator.$s$fDataFortran
                       codeSeg
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        FortranGenerator.$s$fEqFortran
                        assignments
                        (GHC.Types.[]
                           @ (Language.Fortran.Fortran LanguageFortranTools.Anno)) of wild {
                   GHC.Types.False
                   -> case assignments of wild1 {
                        []
                        -> GHC.List.foldl2
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        : x xs -> FortranGenerator.generateWorkGroupReduction_go xs x }
                   GHC.Types.True
                   -> FortranGenerator.generateWorkGroupReduction1
                        codeSeg
                        reductionVars }) -}
b36c4860ed117a4c3d08a84e4b9757ff
  generateWorkGroupReduction1 ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <B,U><B,1*U>x -}
4a7b65e170099f11d477eb02b66efc94
  generateWorkGroupReduction2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case FortranGenerator.$stypeRep#6 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       FortranGenerator.generateWorkGroupReduction3
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
8b95650bd370f7cd777c17459b052d17
  generateWorkGroupReduction3 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   FortranGenerator.$stypeRep#29
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
ca7ae565a0b57f6bd416f1b9074abcb7
  generateWorkGroupReduction_assgs ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: (\ (reductionVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno])
                   (redIter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (ds :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Types.[]
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   Language.Fortran.Assg ds1 ds2 expr1 expr2
                   -> case LanguageFortranTools.usesVarName_list
                             reductionVars
                             expr1 of wild1 {
                        GHC.Types.False
                        -> GHC.Types.[]
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        GHC.Types.True
                        -> let {
                             localReductionVar :: Language.Fortran.VarName
                                                    LanguageFortranTools.Anno
                             = case expr1 of wild2 {
                                 DEFAULT -> FortranGenerator.generateWorkGroupReduction_assgs5
                                 Language.Fortran.Var ds3 ds4 lst
                                 -> case LanguageFortranTools.extractVarNames_go lst of wild3 {
                                      [] -> FortranGenerator.generateWorkGroupReduction_assgs5
                                      : y ys
                                      -> case y of wild4 { Language.Fortran.VarName anno str ->
                                         Language.Fortran.VarName
                                           @ LanguageFortranTools.Anno
                                           anno
                                           (GHC.CString.unpackAppendCString# "local_"# str) } } }
                           } in
                           let {
                             localReductionVar1 :: (Language.Fortran.VarName
                                                      LanguageFortranTools.Anno,
                                                    [Language.Fortran.Expr
                                                       LanguageFortranTools.Anno])
                               {- Strictness: m -}
                             = (localReductionVar,
                                GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                           } in
                           let {
                             localReductionVar2 :: [(Language.Fortran.VarName
                                                       LanguageFortranTools.Anno,
                                                     [Language.Fortran.Expr
                                                        LanguageFortranTools.Anno])]
                             = GHC.Types.:
                                 @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                    [Language.Fortran.Expr LanguageFortranTools.Anno])
                                 localReductionVar1
                                 (GHC.Types.[]
                                    @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                       [Language.Fortran.Expr LanguageFortranTools.Anno]))
                           } in
                           let {
                             localReductionVar3 :: Language.Fortran.Expr
                                                     LanguageFortranTools.Anno
                             = Language.Fortran.Var
                                 @ LanguageFortranTools.Anno
                                 (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                 LanguageFortranTools.nullSrcSpan
                                 localReductionVar2
                           } in
                           let {
                             localReductionArray :: Language.Fortran.VarName
                                                      LanguageFortranTools.Anno
                             = case expr1 of wild2 {
                                 DEFAULT -> FortranGenerator.generateWorkGroupReduction_assgs1
                                 Language.Fortran.Var ds3 ds4 lst
                                 -> case LanguageFortranTools.extractVarNames_go lst of wild3 {
                                      [] -> FortranGenerator.generateWorkGroupReduction_assgs1
                                      : y ys
                                      -> case y of ww { Language.Fortran.VarName ww1 ww2 ->
                                         Language.Fortran.VarName
                                           @ LanguageFortranTools.Anno
                                           ww1
                                           (GHC.CString.unpackAppendCString#
                                              "local_"#
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 ww2
                                                 CodeEmitterUtils.generateGlobalReductionArray1)) } } }
                           } in
                           case LanguageFortranTools.extractPrimaryReductionOp
                                  expr1
                                  expr2 of wild2 {
                             GHC.Base.Nothing
                             -> case LanguageFortranTools.extractPrimaryReductionFunction
                                       expr1
                                       expr2 of wild3 {
                                  []
                                  -> GHC.Types.[]
                                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                  : ipv ipv1
                                  -> GHC.Types.:
                                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                       (Language.Fortran.Assg
                                          @ LanguageFortranTools.Anno
                                          (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                          LanguageFortranTools.nullSrcSpan
                                          localReductionVar3
                                          (Language.Fortran.Var
                                             @ LanguageFortranTools.Anno
                                             (Data.Map.Base.Tip
                                                @ GHC.Base.String
                                                @ [GHC.Base.String])
                                             LanguageFortranTools.nullSrcSpan
                                             (GHC.Types.:
                                                @ (Language.Fortran.VarName
                                                     LanguageFortranTools.Anno,
                                                   [Language.Fortran.Expr
                                                      LanguageFortranTools.Anno])
                                                (Language.Fortran.VarName
                                                   @ LanguageFortranTools.Anno
                                                   (Data.Map.Base.Tip
                                                      @ GHC.Base.String
                                                      @ [GHC.Base.String])
                                                   wild3,
                                                 GHC.Types.:
                                                   @ (Language.Fortran.Expr
                                                        LanguageFortranTools.Anno)
                                                   localReductionVar3
                                                   (GHC.Types.:
                                                      @ (Language.Fortran.Expr
                                                           LanguageFortranTools.Anno)
                                                      (Language.Fortran.Var
                                                         @ LanguageFortranTools.Anno
                                                         (Data.Map.Base.Tip
                                                            @ GHC.Base.String
                                                            @ [GHC.Base.String])
                                                         LanguageFortranTools.nullSrcSpan
                                                         (GHC.Types.:
                                                            @ (Language.Fortran.VarName
                                                                 LanguageFortranTools.Anno,
                                                               [Language.Fortran.Expr
                                                                  LanguageFortranTools.Anno])
                                                            (localReductionArray,
                                                             GHC.Types.:
                                                               @ (Language.Fortran.Expr
                                                                    LanguageFortranTools.Anno)
                                                               (Language.Fortran.Var
                                                                  @ LanguageFortranTools.Anno
                                                                  (Data.Map.Base.Tip
                                                                     @ GHC.Base.String
                                                                     @ [GHC.Base.String])
                                                                  LanguageFortranTools.nullSrcSpan
                                                                  (GHC.Types.:
                                                                     @ (Language.Fortran.VarName
                                                                          LanguageFortranTools.Anno,
                                                                        [Language.Fortran.Expr
                                                                           LanguageFortranTools.Anno])
                                                                     (redIter,
                                                                      GHC.Types.[]
                                                                        @ (Language.Fortran.Expr
                                                                             LanguageFortranTools.Anno))
                                                                     (GHC.Types.[]
                                                                        @ (Language.Fortran.VarName
                                                                             LanguageFortranTools.Anno,
                                                                           [Language.Fortran.Expr
                                                                              LanguageFortranTools.Anno]))))
                                                               (GHC.Types.[]
                                                                  @ (Language.Fortran.Expr
                                                                       LanguageFortranTools.Anno)))
                                                            (GHC.Types.[]
                                                               @ (Language.Fortran.VarName
                                                                    LanguageFortranTools.Anno,
                                                                  [Language.Fortran.Expr
                                                                     LanguageFortranTools.Anno]))))
                                                      (GHC.Types.[]
                                                         @ (Language.Fortran.Expr
                                                              LanguageFortranTools.Anno))))
                                                (GHC.Types.[]
                                                   @ (Language.Fortran.VarName
                                                        LanguageFortranTools.Anno,
                                                      [Language.Fortran.Expr
                                                         LanguageFortranTools.Anno])))))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.Fortran LanguageFortranTools.Anno)) }
                             GHC.Base.Just op
                             -> GHC.Types.:
                                  @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                  (Language.Fortran.Assg
                                     @ LanguageFortranTools.Anno
                                     (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                     LanguageFortranTools.nullSrcSpan
                                     localReductionVar3
                                     (Language.Fortran.Bin
                                        @ LanguageFortranTools.Anno
                                        (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                        LanguageFortranTools.nullSrcSpan
                                        op
                                        localReductionVar3
                                        (Language.Fortran.Var
                                           @ LanguageFortranTools.Anno
                                           (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                           LanguageFortranTools.nullSrcSpan
                                           (GHC.Types.:
                                              @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                                 [Language.Fortran.Expr LanguageFortranTools.Anno])
                                              (localReductionArray,
                                               GHC.Types.:
                                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                                                 (Language.Fortran.Var
                                                    @ LanguageFortranTools.Anno
                                                    (Data.Map.Base.Tip
                                                       @ GHC.Base.String
                                                       @ [GHC.Base.String])
                                                    LanguageFortranTools.nullSrcSpan
                                                    (GHC.Types.:
                                                       @ (Language.Fortran.VarName
                                                            LanguageFortranTools.Anno,
                                                          [Language.Fortran.Expr
                                                             LanguageFortranTools.Anno])
                                                       (redIter,
                                                        GHC.Types.[]
                                                          @ (Language.Fortran.Expr
                                                               LanguageFortranTools.Anno))
                                                       (GHC.Types.[]
                                                          @ (Language.Fortran.VarName
                                                               LanguageFortranTools.Anno,
                                                             [Language.Fortran.Expr
                                                                LanguageFortranTools.Anno]))))
                                                 (GHC.Types.[]
                                                    @ (Language.Fortran.Expr
                                                         LanguageFortranTools.Anno)))
                                              (GHC.Types.[]
                                                 @ (Language.Fortran.VarName
                                                      LanguageFortranTools.Anno,
                                                    [Language.Fortran.Expr
                                                       LanguageFortranTools.Anno]))))))
                                  (GHC.Types.[]
                                     @ (Language.Fortran.Fortran
                                          LanguageFortranTools.Anno)) } } }) -}
c1cc3791f01a78ab514620a0c57c30c1
  generateWorkGroupReduction_assgs1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateWorkGroupReduction_assgs2) -}
af67b3f1fac74630d6261d19f9c6c93a
  generateWorkGroupReduction_assgs2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "local_"#
                   FortranGenerator.generateWorkGroupReduction_assgs3) -}
73e7ffde2481e86a0d3858871a00a549
  generateWorkGroupReduction_assgs3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranGenerator.generateWorkGroupReduction_assgs4
                   CodeEmitterUtils.generateGlobalReductionArray1) -}
69c65fa19d8b0a57d2c2a66b9429d1f6
  generateWorkGroupReduction_assgs4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DUMMY11"#) -}
72dcb5555b412fddf9d2ee69683dcea3
  generateWorkGroupReduction_assgs5 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateWorkGroupReduction_assgs6) -}
0bd2b9cc89d40e4d655c2e832d7d3736
  generateWorkGroupReduction_assgs6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "local_"#
                   FortranGenerator.generateWorkGroupReduction_assgs7) -}
96d5c834a3ee9822efb438399f65b59b
  generateWorkGroupReduction_assgs7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DUMMY12"#) -}
a06fe0957edac1bae2fc00e1b01c9058
  generateWorkGroupReduction_go ::
    [Language.Fortran.Fortran LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
"SC:generateLoopInitialisers0" [ALWAYS] forall (sc :: Language.Fortran.Expr
                                                        (Data.Map.Base.Map
                                                           [GHC.Types.Char] [[GHC.Types.Char]]))
                                               (sc1 :: Language.Fortran.Expr
                                                         (Data.Map.Base.Map
                                                            [GHC.Types.Char] [[GHC.Types.Char]]))
                                               (sc2 :: (Language.Fortran.VarName
                                                          (Data.Map.Base.Map
                                                             [GHC.Types.Char] [[GHC.Types.Char]]),
                                                        Language.Fortran.Expr
                                                          (Data.Map.Base.Map
                                                             [GHC.Types.Char] [[GHC.Types.Char]]),
                                                        Language.Fortran.Expr
                                                          (Data.Map.Base.Map
                                                             [GHC.Types.Char] [[GHC.Types.Char]]),
                                                        Language.Fortran.Expr
                                                          (Data.Map.Base.Map
                                                             [GHC.Types.Char] [[GHC.Types.Char]])))
                                               (sc3 :: [(Language.Fortran.VarName
                                                           (Data.Map.Base.Map
                                                              [GHC.Types.Char] [[GHC.Types.Char]]),
                                                         Language.Fortran.Expr
                                                           (Data.Map.Base.Map
                                                              [GHC.Types.Char] [[GHC.Types.Char]]),
                                                         Language.Fortran.Expr
                                                           (Data.Map.Base.Map
                                                              [GHC.Types.Char] [[GHC.Types.Char]]),
                                                         Language.Fortran.Expr
                                                           (Data.Map.Base.Map
                                                              [GHC.Types.Char]
                                                              [[GHC.Types.Char]]))])
  FortranGenerator.generateLoopInitialisers (GHC.Types.:
                                               @ (Language.Fortran.VarName
                                                    LanguageFortranTools.Anno,
                                                  Language.Fortran.Expr LanguageFortranTools.Anno,
                                                  Language.Fortran.Expr LanguageFortranTools.Anno,
                                                  Language.Fortran.Expr LanguageFortranTools.Anno)
                                               sc2
                                               sc3)
                                            sc1
                                            (GHC.Base.Just
                                               @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                                               sc)
  = FortranGenerator.generateLoopInitialisers_$sgenerateLoopInitialisers
      sc
      sc1
      sc2
      sc3
"SC:generateProductExpr_list0" [ALWAYS] forall (sc :: Language.Fortran.Expr
                                                        (Data.Map.Base.Map
                                                           [GHC.Types.Char] [[GHC.Types.Char]]))
                                               (sc1 :: [Language.Fortran.Expr
                                                          (Data.Map.Base.Map
                                                             [GHC.Types.Char] [[GHC.Types.Char]])])
  FortranGenerator.generateProductExpr_list (GHC.Types.:
                                               @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                                               sc
                                               sc1)
  = FortranGenerator.generateProductExpr_list_$sgenerateProductExpr_list
      sc
      sc1
"SC:generateSubtractionExpr_list0" [ALWAYS] forall (sc :: Language.Fortran.Expr
                                                            (Data.Map.Base.Map
                                                               [GHC.Types.Char] [[GHC.Types.Char]]))
                                                   (sc1 :: [Language.Fortran.Expr
                                                              (Data.Map.Base.Map
                                                                 [GHC.Types.Char]
                                                                 [[GHC.Types.Char]])])
  FortranGenerator.generateSubtractionExpr_list (GHC.Types.:
                                                   @ (Language.Fortran.Expr
                                                        LanguageFortranTools.Anno)
                                                   sc
                                                   sc1)
  = FortranGenerator.generateSubtractionExpr_list_$sgenerateSubtractionExpr_list1
      sc
      sc1
"SPEC/FortranGenerator $fDataDecl @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                        (Data.Map.Base.Map
                                                                                           GHC.Base.String
                                                                                           [GHC.Base.String]))
  Language.Fortran.$fDataDecl @ (Data.Map.Base.Map
                                   GHC.Base.String [GHC.Base.String])
                              $dData
  = FortranGenerator.$s$fDataDecl
"SPEC/FortranGenerator $fDataFortran @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                           (Data.Map.Base.Map
                                                                                              GHC.Base.String
                                                                                              [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Base.Map
                                      GHC.Base.String [GHC.Base.String])
                                 $dData
  = FortranGenerator.$s$fDataFortran
"SPEC/FortranGenerator $fDataMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                  [GHC.Types.Char])
                                                                      ($dData1 :: Data.Data.Data
                                                                                    [GHC.Base.String])
                                                                      ($dData :: Data.Data.Data
                                                                                   [GHC.Types.Char])
  Data.Map.Base.$fDataMap @ [GHC.Types.Char]
                          @ [GHC.Base.String]
                          $dData
                          $dData1
                          $dOrd
  = FortranGenerator.$s$fDataDecl_$s$fDataMap
"SPEC/FortranGenerator $fData[] @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                       [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] $dData
  = FortranGenerator.$s$fDataDecl_$s$fData[]
"SPEC/FortranGenerator $fData[]_$cdataCast2 @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                   [GHC.Types.Char])
  Data.Data.$fData[]_$cdataCast2 @ [GHC.Types.Char] $dData
  = FortranGenerator.$s$fDataDecl_$s$fData[]_$cdataCast2
"SPEC/FortranGenerator $fData[]_$cdataTypeOf @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                    [GHC.Types.Char])
  Data.Data.$fData[]_$cdataTypeOf @ [GHC.Types.Char] $dData
  = FortranGenerator.$s$fDataDecl_$s$fData[]_$cdataTypeOf
"SPEC/FortranGenerator $fData[]_$ctoConstr @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                  [GHC.Types.Char])
  Data.Data.$fData[]_$ctoConstr @ [GHC.Types.Char] $dData
  = FortranGenerator.$s$fDataDecl_$s$fData[]_$ctoConstr
"SPEC/FortranGenerator $fEqFortran @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                       (Data.Map.Base.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fEqFortran @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dEq
  = FortranGenerator.$s$fEqFortran
"SPEC/FortranGenerator $fEqFortran_$c/= @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                            (Data.Map.Base.Map
                                                                                               GHC.Base.String
                                                                                               [GHC.Base.String]))
  Language.Fortran.$fEqFortran_$c/= @ (Data.Map.Base.Map
                                         GHC.Base.String [GHC.Base.String])
                                    $dEq
  = FortranGenerator.$s$fEqFortran_$s$fEqFortran_$c/=
"SPEC/FortranGenerator $fEqMap @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                [GHC.Base.String])
                                                                    ($dEq :: GHC.Classes.Eq
                                                                               [GHC.Types.Char])
  Data.Map.Base.$fEqMap @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        $dEq
                        $dEq1
  = FortranGenerator.$s$fEqFortran_$s$fEqMap
"SPEC/FortranGenerator $fEqMap_$c/= @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                     [GHC.Base.String])
                                                                         ($dEq :: GHC.Classes.Eq
                                                                                    [GHC.Types.Char])
  Data.Map.Base.$fEqMap_$c/= @ [GHC.Types.Char]
                             @ [GHC.Base.String]
                             $dEq
                             $dEq1
  = FortranGenerator.$s$fEqFortran_$s$fEqMap_$c/=
"SPEC/FortranGenerator $fEqVarName @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                       (Data.Map.Base.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dEq
  = FortranGenerator.$s$fEqVarName
"SPEC/FortranGenerator $fShowMap @ [Char] @ [String]" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                    [GHC.Base.String])
                                                                      ($dShow :: GHC.Show.Show
                                                                                   [GHC.Types.Char])
  Data.Map.Base.$fShowMap @ [GHC.Types.Char]
                          @ [GHC.Base.String]
                          $dShow
                          $dShow1
  = FortranGenerator.$s$fShowFortran_$cshow_$s$fShowMap
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

