
==================== FINAL INTERFACE ====================
2018-12-03 15:55:06.18546 UTC

interface main@main:VarDependencyAnalysis 8002
  interface hash: 97e5180c36a383a5a471ca531b79ece3
  ABI hash: d3e85612afd610e5fcb0e3763a1de01e
  export-list hash: f27db6a43dea9dbe861dd661c14bd373
  orphan hash: 00d8c1f90851465589b0460fedacceb7
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  VarDependencyAnalysis.analyseDependencies
  VarDependencyAnalysis.constructLoopIterTable
  VarDependencyAnalysis.isIndirectlyDependentOn
  VarDependencyAnalysis.loopCarriedDependencyCheck
  VarDependencyAnalysis.loopCarriedDependencyCheck_reductionWithIteration
  VarDependencyAnalysis.VarDependencyAnalysis
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     TupleTable Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskell-src-1.0.2.0@haskell-src-1.0.2.0-3zoaErItXGVA1GHC7t3Glx
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      process-1.4.3.0@process-1.4.3.0
                      syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Instances
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Data da440c60016500822a3d4307ca5dea66
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Language.Fortran c957d8f93581b3ce2cc521df25110d11
  exports: cb4e2f808f933bd0493dcd95204741d0
  Assg e4ff0447498349c3e2879e1af28dc289
  Bin 31bb1b9369e8820657f411d90ee9619c
  Expr fd45c3abbcc1cd23ca18c96ee1403b96
  For 8eaaf1a59a9e6e9d8f36eff8caf7c991
  Fortran 7ef8d1883356542a2e7829f1c3512bc2
  Minus 74fd79e66076db48c9d27b6cd0f2b01a
  Null f9b4d2f804869f054752a44b06f43d80
  OpenCLMap f735cdb4fcfce00b0cd641aaa6255a4b
  OpenCLReduce 811a5024d542e78a43320fc6af66c91a
  Plus 2246ba64804dd1a40f56ff697ab3e419
  VarName 64af05f1c71bcd1dfd571ca0d5218f1b
  VarName d4d45769399fe3ed8e0615e3282cf5b7
import  -/  Language.Fortran.Parser 59e506b7f9b623442ab6ce146631eefb
  exports: 83a6073254db4377feeca61632e25716
import  -/  LanguageFortranTools 7890a5e96ab51325aa3603dbd4691bf4
  exports: 83b35210801e0c6fe3fd2a2c2ff1ecd0
  Anno e22809b44b97ccfdb28bfb19047d139f
  ValueTable a6a5d1540a20832381bbaf30c8315a50
  addToValueTable 24127fd3e69a9e4d54f6f047e10aed1c
  appendToMap dc2f60dee1c2c768663fa5922bc11748
  applyGeneratedSrcSpans abc3393b31513f41cb818c5f6e8c39dc
  evaluateExpr 62620ee21f752bed948b5a6b77659df8
  evaluateRange ab4f18ddaefe5574bba2452796f37538
  extractAssignments d06c509687e2b75fc33d6dddf17b459e
  extractContainedVars 0331c35bcc1dc0d38694c0dba9afce40
  extractLoopIters 14a8a201024a363eb99389909191bf2c
  extractLoopVars 3cc939ec3da2237440656c11a73a87af
  extractOperands 4ddf57e446d8f47e8d5ca35eb2b33baf
  extractVarNames 0c06747830f37e92c31e4dbe6aedfd6f
  generateArrayVar 11ed22caf0a9996357d1cb6d5af1e578
  isVar 8f3347a5fcc2aec5fa7520695a0bb710
  listConcatUnique 71a2194601dc95d4bf102289f5a59052
  listRemoveDuplications 4378f4b10536dcf8634c95685ebad55d
  listSubtract b3c64f9bf63909177406c8d10e99ecef
  nullAnno e3239ac8aba218af15f945a652936cc8
  nullSrcSpan 088997d0b27116160aebfa68704495fa
  outputExprFormatting 94304bd749d8576e2241b877c8b68b4d
import  -/  TupleTable 352e4ce9987fd6bf4b438ca52bbd5e55
  exports: e15d0d563e9c0fba003831686b25a3db
  Empty dfaa5cc68089973a336afda3a0553de4
  LoopIterRecord dc7befb2b8c55b638fdef1f6b2173971
  TupleTable 05068131ebd202d120749a5167605714
  collapseIterTable f371b84a775ed376dd04e081ea365802
  getLeastTuple 9fbbd63beb5e34a3d720a7bd0f87594b
  getMostTuple fb705550ed8c7f466eb834559dc09605
  insertIntoTupleTable 5128a1d824c1ad773656bf3648403e02
  lookupTupleTable 32f9ae143db735e4197919bb202b1d8f
  tupleTableElementGreaterThan 5ab2a0d28af51e38052f174fbac8cb03
  tupleTableNotEmpty cf478c5c024858a11990b01fed34fc7d
import  -/  Warning 37568988846bf7dc0ef160b198d03155
  exports: 66d1a373648e452607e9cbdbd4f3a821
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics ea99a8062a9608312218ffd7309b5391
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Aliases 09d594ec9a31e3c858478cc583771648
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Schemes 4b69980d384f37e61fe24ae708a71220
d17b28febd67e75d758b6152dc6caae2
  $s$fDataExpr ::
    Data.Data.Data
      (Language.Fortran.Expr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataExpr_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  VarDependencyAnalysis.$s$fDataExpr2
                  (Language.Fortran.$fDataExpr_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  VarDependencyAnalysis.$s$fDataExpr1
                  (Language.Fortran.$fDataExpr_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData) -}
e314955755cb091a478db4dfcb73af4b
  $s$fDataExpr1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Expr
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds9 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Expr
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
4c11af6daa1cf5cb0c8646eb76795936
  $s$fDataExpr2 ::
    Language.Fortran.Expr
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds9 :: Language.Fortran.Expr
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$t8ooBCVvkUu0CFtmgl1DgHc) -}
919e395baf5e210e0687ad2ef139f086
  $s$fDataExpr3 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds9 :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Base.Nothing
                   @ (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))) -}
d1bfaeabd5106f0d827737e9e00f4e67
  $s$fDataExpr4 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds9 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.mapDataType) -}
2fd64386c04fbfb647bf39aefce0f1a4
  $s$fDataExpr5 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds9 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.fromListConstr) -}
745ee5d9d8de68b7a678198af273924e
  $s$fDataExpr_$dData ::
    Data.Data.Data
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Unfolding: InlineRule (0, True, True)
                VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap -}
130c98b423285b07757ae5564e90f527
  $s$fDataExpr_$dData1 :: Data.Data.Data [GHC.Base.String]
  {- Unfolding: InlineRule (0, True, True)
                VarDependencyAnalysis.$s$fDataExpr_$s$fData[] -}
e6ece30e7fe3ae81b97235943aeaf806
  $s$fDataExpr_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fDataMap_$cp1Data
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  VarDependencyAnalysis.$s$fDataExpr5
                  VarDependencyAnalysis.$s$fDataExpr4
                  VarDependencyAnalysis.$s$fDataExpr3
                  (Data.Map.Base.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapT
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
2ddf89c701b3390709faf6b8ebd5e0ab
  $s$fDataExpr_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Data.$fData[]_$cp1Data
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  VarDependencyAnalysis.$s$fDataExpr_$s$fData[]_$ctoConstr
                  VarDependencyAnalysis.$s$fDataExpr_$s$fData[]_$cdataTypeOf
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  VarDependencyAnalysis.$s$fDataExpr_$s$fData[]_$cdataCast2
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
05377657c4038848899c2460f6cceab8
  $s$fDataExpr_$s$fData[]_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds9 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing @ (c [[GHC.Types.Char]])) -}
a76f3cc619d66ab93ca230f1f48558a6
  $s$fDataExpr_$s$fData[]_$cdataTypeOf ::
    [[GHC.Types.Char]] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds9 :: [[GHC.Types.Char]]) -> Data.Data.listDataType) -}
32410cd7ae0d0b6bfa652051045ea605
  $s$fDataExpr_$s$fData[]_$ctoConstr ::
    [[GHC.Types.Char]] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds9 :: [[GHC.Types.Char]]) ->
                 case ds9 of wild {
                   [] -> Data.Data.nilConstr : ds10 ds11 -> Data.Data.consConstr }) -}
214ac06a1903fbcf68c308575ed5c703
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataFortran_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  VarDependencyAnalysis.$s$fDataFortran2
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  VarDependencyAnalysis.$s$fDataFortran1
                  (Language.Fortran.$fDataFortran_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$dData) -}
9a0cfbf3c12c91eaf0bb8473807f75bf
  $s$fDataFortran1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Fortran
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds9 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Fortran
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
78df2184ec6b74150a2d907489a86502
  $s$fDataFortran2 ::
    Language.Fortran.Fortran
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds9 :: Language.Fortran.Fortran
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$tD9QMegU2padFswPGA4PbPq) -}
a5cfe7a06eb89e09c13b81a8771e0a05
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.Fortran.Expr LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     VarDependencyAnalysis.$s$fEq(,)_$dEq
                     VarDependencyAnalysis.$s$fEq(,)_$dEq)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     VarDependencyAnalysis.$s$fEq(,)_$dEq
                     VarDependencyAnalysis.$s$fEq(,)_$dEq) -}
39fdf56977f7a6e6999933fa7ea0ed00
  $s$fEq(,)_$dEq ::
    GHC.Classes.Eq (Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr -}
414ff14c6903e7dc1a4048200abd2bbd
  $s$fEq(,)_$dEq1 ::
    GHC.Classes.Eq
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap -}
ced7e68bb577fbeac7d85bc2dfd1dd69
  $s$fEq(,)_$dEq2 :: GHC.Classes.Eq [GHC.Base.String]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]2 -}
c5dea89814100e6ebb8003b5e403aa7e
  $s$fEq(,)_$dEq3 :: GHC.Classes.Eq [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
0c15c242dadc642e26b3a29a5cd0c239
  $s$fEq(,)_$s$fEqExpr ::
    GHC.Classes.Eq
      (Language.Fortran.Expr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqExpr_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fEq(,)_$dEq1)
                  (Language.Fortran.$fEqExpr_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fEq(,)_$dEq1) -}
d797a2e59691592381cdfd58d9b39d45
  $s$fEq(,)_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     VarDependencyAnalysis.$s$fEq(,)_$dEq3
                     VarDependencyAnalysis.$s$fEq(,)_$dEq2)
                  VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap_$c/= -}
531b2bfcc080a14507fbb7718020632a
  $s$fEq(,)_$s$fEqMap_$c/= ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ [GHC.Types.Char]
                      @ [GHC.Base.String]
                      VarDependencyAnalysis.$s$fEq(,)_$dEq3
                      VarDependencyAnalysis.$s$fEq(,)_$dEq2
                      x
                      y)) -}
b78485decb5b351f03a3001f75596c04
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fEq(,)_$dEq1)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fEq(,)_$dEq1) -}
66ab69f30e2edf4c6cbf0093cf98dcbe
  $s$fEq[] ::
    GHC.Classes.Eq [Language.Fortran.Expr LanguageFortranTools.Anno]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Language.Fortran.Expr LanguageFortranTools.Anno]
                  (GHC.Classes.$fEq[]_$c==
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     VarDependencyAnalysis.$s$fEq(,)_$dEq)
                  VarDependencyAnalysis.$s$fEq[]_$s$fEq[]_$c/= -}
5eba8dcab8ac3b2d12e5248a8c7a9669
  $s$fEq[]_$s$fEq[]_$c/= ::
    [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Language.Fortran.Expr LanguageFortranTools.Anno])
                   (y :: [Language.Fortran.Expr LanguageFortranTools.Anno]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                      VarDependencyAnalysis.$s$fEq(,)_$dEq
                      x
                      y)) -}
3d934889e954e21fb3ec07b1d0caa30b
  $s$fOrdMap ::
    GHC.Classes.Ord
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  VarDependencyAnalysis.$s$fEq(,)_$dEq1
                  (Data.Map.Base.$fOrdMap_$ccompare
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$c<
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$c<=
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$c>
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$c>=
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$cmax
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Base.$fOrdMap_$cmin
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2) -}
f99ae20b9d319b62c8eb0da164c01dd6
  $s$fOrdVarName ::
    GHC.Classes.Ord
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  VarDependencyAnalysis.$s$fOrdVarName_$s$fOrdVarName_$cp1Ord
                  (Language.Fortran.$fOrdVarName_$ccompare
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$c<
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$c<=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$c>
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$c>=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$cmax
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdVarName_$dOrd)
                  (Language.Fortran.$fOrdVarName_$cmin
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdVarName_$dOrd) -}
43743ca663ba1dc73040d95f4bf991fb
  $s$fOrdVarName_$dOrd ::
    GHC.Classes.Ord
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                VarDependencyAnalysis.$s$fOrdMap -}
b1290275460c785ae285f22dbebf9c23
  $s$fOrdVarName_$s$fOrdVarName_$cp1Ord ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                VarDependencyAnalysis.$s$fEqVarName -}
26f578c10281e1b2280a926d59d0f78c
  $sapplyGeneratedSrcSpans ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Unfolding: InlineRule (0, True, False)
                (Data.Generics.Schemes.everywhere
                   LanguageFortranTools.applyGeneratedSrcSpans2
                   @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                   VarDependencyAnalysis.$sapplyGeneratedSrcSpans_$dData) -}
4208c43fca2ae1786180e43885c68e7a
  $sapplyGeneratedSrcSpans_$dData ::
    Data.Data.Data (Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Unfolding: InlineRule (0, True, True)
                VarDependencyAnalysis.$s$fDataExpr -}
1d175b7f703e1cb156feeb1943575a6c
  $sinsert_$sgo1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> a1
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a1
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a1
  {- Arity: 3, Strictness: <S,1*U(U,U)><L,U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (w :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (w1 :: a1)
                   (w2 :: Data.Map.Base.Map
                            (Language.Fortran.VarName LanguageFortranTools.Anno) a1) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 VarDependencyAnalysis.$w$sgo1 @ a1 ww1 ww2 w1 w2 }) -}
08fb0e447fdf1e87c6d20630902107bb
  $sinsert_$sgo10 ::
    GHC.Types.Int
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <S,1*U(U)><L,U><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (w :: GHC.Types.Int)
                   (w1 :: a1)
                   (w2 :: Data.Map.Base.Map GHC.Types.Int a1) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 VarDependencyAnalysis.$w$sgo10 @ a1 ww1 w1 w2 }) -}
36d2901c927270ac2fc1fbf3d5c0142f
  $stypeRep#10 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
d065a507e9d89edbc147d69e2ec0f255
  $stypeRep#11 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
114fec728d486323865c403af0981a16
  $stypeRep#14 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#15
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tc[]
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
6a875fb74105d463854d3a63ee42d645
  $stypeRep#15 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17730107610217102821##
                   9866972337190828755##) -}
d9da157bd456964ce6a567f50fcbfd02
  $stypeRep#18 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case VarDependencyAnalysis.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types14 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       VarDependencyAnalysis.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types14 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types14 } } }) -}
4500f318727a8f6b8d2f4a28902045d2
  $stypeRep#19 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   VarDependencyAnalysis.$stypeRep#10
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
09929ef79b32f8cc11c9398bb208f768
  $stypeRep#2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
f1606d7f0aff22343cff2805f432d1e0
  $stypeRep#22 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case VarDependencyAnalysis.$stypeRep#2 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types14 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       VarDependencyAnalysis.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types14 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types14 } } }) -}
cd5b4279d79c992d30fb0f484afa62dd
  $stypeRep#23 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   VarDependencyAnalysis.$stypeRep#18
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
1886a8e8b1929c2fdca62e0cd215594e
  $stypeRep#26 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case VarDependencyAnalysis.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types14 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       VarDependencyAnalysis.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types14 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types14 } } }) -}
6fa1069a42850e64b20d452022ddb085
  $stypeRep#29 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case VarDependencyAnalysis.$stypeRep#22 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types14 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       VarDependencyAnalysis.$stypeRep#30
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types14 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types14 } } }) -}
ae4874d89ab7b5df9be3b28ad94050bf
  $stypeRep#3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17306070887558246498##
                   16032333906417739553##) -}
cdfd7a18819bda20a3b133013f73f865
  $stypeRep#30 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   VarDependencyAnalysis.$stypeRep#26
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
3179cb9abaf3212267b43b81bd883a67
  $stypeRep#33 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#34
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcExpr
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
6e0ce8999436034a17e4d8abe77ebad1
  $stypeRep#34 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   13621902738272893592##
                   4484539928315244892##) -}
ccd9bd0c273ca9cfd90aa64d3cebe91b
  $stypeRep#6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
f16b4bbaf37c337c0e83d94b3215056c
  $stypeRep#7 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6882220124880764793##
                   15271875958298145102##) -}
dee023155a66631d85ed9513a97f2461
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   VarDependencyAnalysis.$trModule2
                   VarDependencyAnalysis.$trModule1) -}
60c9060390b793e1e63292383f493a76
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "VarDependencyAnalysis"#) -}
6f0b696cadd440d08ab2f6c1a1ecae91
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
faad87c5df2c67454b687d661e81564e
  $w$sgo1 ::
    LanguageFortranTools.Anno
    -> Language.Fortran.Variable
    -> a1
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a1
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
aa0209623091301bd9212c69aad0558b
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
9330b02c272beea5aa8702cf9dd238bf
  $wconstructLoopIterTable ::
    GHC.Base.Maybe TupleTable.TupleTable
    -> VarDependencyAnalysis.LoopStepTable
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Base.Maybe TupleTable.TupleTable,
          [Language.Fortran.VarName LanguageFortranTools.Anno],
          VarDependencyAnalysis.LoopStepTable #)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*U>, Inline: [0] -}
32a5932b9045e426d44ba47d6c148c66
  $wisIndirectlyDependentOn ::
    VarDependencyAnalysis.VarDependencyAnalysis
    -> LanguageFortranTools.Anno
    -> Language.Fortran.Variable
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,U><L,U><L,U><L,U>, Inline: [0] -}
c7f1507234cfafdc209462221b7452a9
  $wloopCarriedDependencyCheck ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Types.Bool, GHC.Types.Bool,
          [(Language.Fortran.Expr LanguageFortranTools.Anno,
            Language.Fortran.Expr LanguageFortranTools.Anno)] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
805e0d04ac33b257a0b8d7a78f6d6ce3
  $wloopCarriedDependencyCheck_reductionWithIteration ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Types.Bool, GHC.Types.Bool,
          [(Language.Fortran.Expr LanguageFortranTools.Anno,
            Language.Fortran.Expr LanguageFortranTools.Anno)] #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
5a8646b6eb75e31d2bb9e3092a0fe2ce
  $wpoly_go1 ::
    a -> GHC.Prim.Int# -> Data.Map.Base.Map GHC.Types.Int a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><S,1*U>,
     Inline: [0] -}
a7ac74343577d6e420895066110c4887
  $wpoly_go10 ::
    a
    -> LanguageFortranTools.Anno
    -> Language.Fortran.Variable
    -> Data.Map.Base.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a
    -> a
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><S,1*U>, Inline: [0] -}
7941f8d3df47f5744c842fd4d6b16612
  type ArrayAccessExpressions =
    Data.Map.Base.Map
      (Language.Fortran.VarName LanguageFortranTools.Anno)
      [[Language.Fortran.Expr LanguageFortranTools.Anno]]
d11dac03cb7b8ab946e976edae16cb34
  type LoopStepTable =
    Data.Map.Base.Map
      (Language.Fortran.VarName LanguageFortranTools.Anno)
      GHC.Types.Float
eac14f63a23cb4cb28fe9d2430e0a426
  type VarDependencyAnalysis =
    Data.Map.Base.Map
      (Language.Fortran.VarName LanguageFortranTools.Anno)
      [Language.Fortran.Expr LanguageFortranTools.Anno]
2d35637e4d6e90e51b80c5e51a0bee90
  analyseDependencies ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> VarDependencyAnalysis.VarDependencyAnalysis
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (codeSeg :: Language.Fortran.Fortran
                                 LanguageFortranTools.Anno) ->
                 VarDependencyAnalysis.analyseDependencies_go
                   (Data.Generics.Schemes.everything
                      @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                      (GHC.Base.++
                         @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                      VarDependencyAnalysis.analyseDependencies1
                      @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                      VarDependencyAnalysis.$s$fDataFortran
                      codeSeg)
                   (Data.Map.Base.Tip
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                      @ [Language.Fortran.Expr LanguageFortranTools.Anno])) -}
fb1471239abc215ab32a70f8ab7e9545
  analyseDependencies1 ::
    Data.Data.Data a =>
    a -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 2,
     Strictness: <S(C(S(SLLLL))LLLLLLLLLLLLLL),1*U(1*C1(U(U,U,A,A,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ a ($dData :: Data.Data.Data a) (eta :: a) ->
                 case (Data.Data.$p1Data @ a $dData)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ a) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds9 ds10 ds11 ->
                 case VarDependencyAnalysis.analyseDependencies2 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds12 ds13 ds14 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt dt2) of wild2 {
                   GHC.Types.False
                   -> GHC.Types.[]
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                        GHC.Types.False
                        -> GHC.Types.[]
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        GHC.Types.True
                        -> LanguageFortranTools.extractAssignments
                             eta
                               `cast`
                             (UnsafeCo representational a (Language.Fortran.Fortran
                                                             LanguageFortranTools.Anno)) } } } }) -}
32712f5f12f362954d83cee809aeb064
  analyseDependencies2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        VarDependencyAnalysis.analyseDependencies_types of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#7
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   VarDependencyAnalysis.analyseDependencies_types } } } }) -}
4681fce24e919067a2899c2e0a49e6ae
  analyseDependencies3 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        VarDependencyAnalysis.analyseDependencies_types2 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        VarDependencyAnalysis.analyseDependencies_types1 of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           VarDependencyAnalysis.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   VarDependencyAnalysis.analyseDependencies_types1 } } } } } }) -}
2783f329344d0311746fbcd71dc64efe
  analyseDependencies4 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   VarDependencyAnalysis.analyseDependencies5
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
b6f6ad3f2cc4a6a91fec6d7adfd61f67
  analyseDependencies5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case VarDependencyAnalysis.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types14 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       VarDependencyAnalysis.analyseDependencies_types2
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types14 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types14 } } }) -}
8e25eab051001f16b894c09959527b56
  analyseDependencies6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case VarDependencyAnalysis.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types14 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       VarDependencyAnalysis.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types14 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types14 } } }) -}
7fda78b3cec7bd3ac70ce0123e7dce1d
  analyseDependencies_go ::
    [Language.Fortran.Fortran LanguageFortranTools.Anno]
    -> VarDependencyAnalysis.VarDependencyAnalysis
    -> VarDependencyAnalysis.VarDependencyAnalysis
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
10ff9cb126c4bd5b3c4cc40457005bc6
  analyseDependencies_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   VarDependencyAnalysis.analyseDependencies3
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
272d230e4b11b8d52df12b065823f9ef
  analyseDependencies_types1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   VarDependencyAnalysis.analyseDependencies_types2
                   VarDependencyAnalysis.analyseDependencies4) -}
0c432667de14ac9f4286af034e4313db
  analyseDependencies_types2 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   VarDependencyAnalysis.analyseDependencies6
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
d0aa7dfb311d31f6302243c009c3fd08
  constructLoopIterTable ::
    GHC.Base.Maybe TupleTable.TupleTable
    -> VarDependencyAnalysis.LoopStepTable
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Base.Maybe TupleTable.TupleTable,
        [Language.Fortran.VarName LanguageFortranTools.Anno],
        VarDependencyAnalysis.LoopStepTable)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.Maybe TupleTable.TupleTable)
                   (w1 :: VarDependencyAnalysis.LoopStepTable)
                   (w2 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case VarDependencyAnalysis.$wconstructLoopIterTable
                        w
                        w1
                        w2
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
0bd7633fcab13054b1525ac0ea51e69d
  isIndirectlyDependentOn ::
    VarDependencyAnalysis.VarDependencyAnalysis
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><S,U(U,U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: VarDependencyAnalysis.VarDependencyAnalysis)
                   (w1 :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (w2 :: Language.Fortran.Expr LanguageFortranTools.Anno) ->
                 case w1 of ww { Language.Fortran.VarName ww1 ww2 ->
                 VarDependencyAnalysis.$wisIndirectlyDependentOn w ww1 ww2 w2 }) -}
ba6f3e6f5d09f005453cc48397059331
  loopCarriedDependencyCheck ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Types.Bool, GHC.Types.Bool,
        [(Language.Fortran.Expr LanguageFortranTools.Anno,
          Language.Fortran.Expr LanguageFortranTools.Anno)])
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case VarDependencyAnalysis.$wloopCarriedDependencyCheck
                        w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
62b3c70563754f6784fed12a829679ae
  loopCarriedDependencyCheck_reductionWithIteration ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Types.Bool, GHC.Types.Bool,
        [(Language.Fortran.Expr LanguageFortranTools.Anno,
          Language.Fortran.Expr LanguageFortranTools.Anno)])
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case VarDependencyAnalysis.$wloopCarriedDependencyCheck_reductionWithIteration
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
"SPEC/VarDependencyAnalysis $fDataExpr @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                             (Data.Map.Base.Map
                                                                                                GHC.Base.String
                                                                                                [GHC.Base.String]))
  Language.Fortran.$fDataExpr @ (Data.Map.Base.Map
                                   GHC.Base.String [GHC.Base.String])
                              $dData
  = VarDependencyAnalysis.$s$fDataExpr
"SPEC/VarDependencyAnalysis $fDataFortran @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                                (Data.Map.Base.Map
                                                                                                   GHC.Base.String
                                                                                                   [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Base.Map
                                      GHC.Base.String [GHC.Base.String])
                                 $dData
  = VarDependencyAnalysis.$s$fDataFortran
"SPEC/VarDependencyAnalysis $fDataMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                       [GHC.Types.Char])
                                                                           ($dData1 :: Data.Data.Data
                                                                                         [GHC.Base.String])
                                                                           ($dData :: Data.Data.Data
                                                                                        [GHC.Types.Char])
  Data.Map.Base.$fDataMap @ [GHC.Types.Char]
                          @ [GHC.Base.String]
                          $dData
                          $dData1
                          $dOrd
  = VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap
"SPEC/VarDependencyAnalysis $fData[] @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                            [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] $dData
  = VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
"SPEC/VarDependencyAnalysis $fData[]_$cdataCast2 @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                        [GHC.Types.Char])
  Data.Data.$fData[]_$cdataCast2 @ [GHC.Types.Char] $dData
  = VarDependencyAnalysis.$s$fDataExpr_$s$fData[]_$cdataCast2
"SPEC/VarDependencyAnalysis $fData[]_$cdataTypeOf @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                         [GHC.Types.Char])
  Data.Data.$fData[]_$cdataTypeOf @ [GHC.Types.Char] $dData
  = VarDependencyAnalysis.$s$fDataExpr_$s$fData[]_$cdataTypeOf
"SPEC/VarDependencyAnalysis $fData[]_$ctoConstr @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                       [GHC.Types.Char])
  Data.Data.$fData[]_$ctoConstr @ [GHC.Types.Char] $dData
  = VarDependencyAnalysis.$s$fDataExpr_$s$fData[]_$ctoConstr
"SPEC/VarDependencyAnalysis $fEq(,) @ (Expr Anno) @ (Expr Anno)" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                             (Language.Fortran.Expr
                                                                                                LanguageFortranTools.Anno))
                                                                                 ($dEq :: GHC.Classes.Eq
                                                                                            (Language.Fortran.Expr
                                                                                               LanguageFortranTools.Anno))
  GHC.Classes.$fEq(,) @ (Language.Fortran.Expr
                           LanguageFortranTools.Anno)
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                      $dEq
                      $dEq1
  = VarDependencyAnalysis.$s$fEq(,)
"SPEC/VarDependencyAnalysis $fEqExpr @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                         (Data.Map.Base.Map
                                                                                            GHC.Base.String
                                                                                            [GHC.Base.String]))
  Language.Fortran.$fEqExpr @ (Data.Map.Base.Map
                                 GHC.Base.String [GHC.Base.String])
                            $dEq
  = VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr
"SPEC/VarDependencyAnalysis $fEqMap @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                     [GHC.Base.String])
                                                                         ($dEq :: GHC.Classes.Eq
                                                                                    [GHC.Types.Char])
  Data.Map.Base.$fEqMap @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        $dEq
                        $dEq1
  = VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap
"SPEC/VarDependencyAnalysis $fEqMap_$c/= @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                          [GHC.Base.String])
                                                                              ($dEq :: GHC.Classes.Eq
                                                                                         [GHC.Types.Char])
  Data.Map.Base.$fEqMap_$c/= @ [GHC.Types.Char]
                             @ [GHC.Base.String]
                             $dEq
                             $dEq1
  = VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap_$c/=
"SPEC/VarDependencyAnalysis $fEqVarName @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                            (Data.Map.Base.Map
                                                                                               GHC.Base.String
                                                                                               [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dEq
  = VarDependencyAnalysis.$s$fEqVarName
"SPEC/VarDependencyAnalysis $fEq[] @ (Expr Anno)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                             (Language.Fortran.Expr
                                                                                LanguageFortranTools.Anno))
  GHC.Classes.$fEq[] @ (Language.Fortran.Expr
                          LanguageFortranTools.Anno)
                     $dEq
  = VarDependencyAnalysis.$s$fEq[]
"SPEC/VarDependencyAnalysis $fEq[]_$c/= @ (Expr Anno)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                  (Language.Fortran.Expr
                                                                                     LanguageFortranTools.Anno))
  GHC.Classes.$fEq[]_$c/= @ (Language.Fortran.Expr
                               LanguageFortranTools.Anno)
                          $dEq
  = VarDependencyAnalysis.$s$fEq[]_$s$fEq[]_$c/=
"SPEC/VarDependencyAnalysis $fOrdMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd1 :: GHC.Classes.Ord
                                                                                       [GHC.Base.String])
                                                                          ($dOrd :: GHC.Classes.Ord
                                                                                      [GHC.Types.Char])
  Data.Map.Base.$fOrdMap @ [GHC.Types.Char]
                         @ [GHC.Base.String]
                         $dOrd
                         $dOrd1
  = VarDependencyAnalysis.$s$fOrdMap
"SPEC/VarDependencyAnalysis $fOrdVarName @ (Map String [String])" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                              (Data.Map.Base.Map
                                                                                                 GHC.Base.String
                                                                                                 [GHC.Base.String]))
  Language.Fortran.$fOrdVarName @ (Data.Map.Base.Map
                                     GHC.Base.String [GHC.Base.String])
                                $dOrd
  = VarDependencyAnalysis.$s$fOrdVarName
"SPEC/VarDependencyAnalysis $fOrdVarName_$cp1Ord @ (Map
                                                     String [String])" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                                                                                           (Data.Map.Base.Map
                                                                                                                                                              GHC.Base.String
                                                                                                                                                              [GHC.Base.String]))
  Language.Fortran.$fOrdVarName_$cp1Ord @ (Data.Map.Base.Map
                                             GHC.Base.String [GHC.Base.String])
                                        $dOrd
  = VarDependencyAnalysis.$s$fOrdVarName_$s$fOrdVarName_$cp1Ord
"SPEC/VarDependencyAnalysis applyGeneratedSrcSpans @ Expr" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                        (Language.Fortran.Expr
                                                                                           LanguageFortranTools.Anno))
  LanguageFortranTools.applyGeneratedSrcSpans @ Language.Fortran.Expr
                                              $dData
  = VarDependencyAnalysis.$sapplyGeneratedSrcSpans
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

