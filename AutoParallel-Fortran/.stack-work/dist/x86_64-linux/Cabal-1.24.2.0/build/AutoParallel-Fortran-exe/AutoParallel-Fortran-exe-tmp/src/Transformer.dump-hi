
==================== FINAL INTERFACE ====================
2018-12-03 15:55:09.025784 UTC

interface main@main:Transformer 8002
  interface hash: 33c7a58d64f590c67a8c42b4d686c3c7
  ABI hash: 7668e76b7028b135f1aaa9987edbf5e4
  export-list hash: fe48ab713cb2e662d3271549f051b5be
  orphan hash: e23261118cef2453cdfea3268b7ed94c
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  Transformer.combineKernelProgUnit_foldl
  Transformer.paralleliseProgUnit_foldl
module dependencies: CombineKernels ConstantFolding
                     F95IntrinsicFunctions Language.Fortran Language.Fortran.Lexer
                     Language.Fortran.Parser Language.Fortran.PreProcess
                     LanguageFortranTools LoopAnalysis MiniPP PreProcessor
                     SubroutineTable TupleTable VarAccessAnalysis VarDependencyAnalysis
                     Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskell-src-1.0.2.0@haskell-src-1.0.2.0-3zoaErItXGVA1GHC7t3Glx
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      process-1.4.3.0@process-1.4.3.0
                      syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Instances
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Data da440c60016500822a3d4307ca5dea66
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Data.Typeable.Internal 0e9bdefa4325a0112d8e73b5e1e1f85d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 8ff5ebd6a93811413df021d2be39a158
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  CombineKernels fef5eb1de0c25df6e0d8a5f9c2edda50
  exports: 7925b6aa06130c045849d065df8c851d
  combineKernelsProgUnit d3755ea931c5b838362f79e7117d91e1
import  -/  ConstantFolding 46d0ace98abbf98f9916fb2d1794e538
  exports: 8bd70cd009ed4b3bc85970f11bd4d466
  foldConstants 14fe84b51106fae86011d2154d570697
import  -/  Language.Fortran c957d8f93581b3ce2cc521df25110d11
  exports: cb4e2f808f933bd0493dcd95204741d0
  Assg e4ff0447498349c3e2879e1af28dc289
  Block 00b5dcb26b4d8331f4d0a27afc418872
  Expr fd45c3abbcc1cd23ca18c96ee1403b96
  For 8eaaf1a59a9e6e9d8f36eff8caf7c991
  Fortran 7ef8d1883356542a2e7829f1c3512bc2
  OpenCLMap f735cdb4fcfce00b0cd641aaa6255a4b
  OpenCLReduce 811a5024d542e78a43320fc6af66c91a
  Var 223ccce2fd2a845a28913e272a1a9b28
  VarName d4d45769399fe3ed8e0615e3282cf5b7
  srcSpan fbf339ac9b9eae31a89ba940dccb0289
  tag 1e05e78ade3321265e317abd182a7405
import  -/  Language.Fortran.Parser 59e506b7f9b623442ab6ce146631eefb
  exports: 83a6073254db4377feeca61632e25716
import  -/  LanguageFortranTools 7890a5e96ab51325aa3603dbd4691bf4
  exports: 83b35210801e0c6fe3fd2a2c2ff1ecd0
  Anno e22809b44b97ccfdb28bfb19047d139f
  appendAnnotation 99aca3dcb141660efe924d41377444a3
  appendAnnotationMap cc81568ce9b1db55601acb0f7996f784
  appendFortran_recursive 4a73f638f4b7d944226ec9c29c89a7cb
  compilerName af3b337e7deea7084cf6d3ad27314e83
  errorLocationFormatting ade5e4011267f0b3e68f4c6bf90cd5b5
  extractFirstChildFor cb5c88e5217910e2a4a35949970b6528
  extractLoopVars 3cc939ec3da2237440656c11a73a87af
  extractVarNames 0c06747830f37e92c31e4dbe6aedfd6f
  generateSrcSpan e283ce1fd9d05cd994044befc212af2f
  getLoopVar 008b4a920ef497f7b1207632cbc03f3c
  listRemoveDuplications 4378f4b10536dcf8634c95685ebad55d
  listSubtract b3c64f9bf63909177406c8d10e99ecef
  nullAnno e3239ac8aba218af15f945a652936cc8
  outputExprFormatting 94304bd749d8576e2241b877c8b68b4d
  outputTab 7dd6e0a389efe481cc10a3751b3f709f
  removeAllAnnotations 1f35b6b8e8dd065227c320ebc22801d2
  removeLoopConstructs_recursive 6059b8cf19c92f3070ab070658d8959b
import  -/  LoopAnalysis e6ebf449ca3ad7aec5184b135d0c3dd0
  exports: bb4e6f820369d6dc54fd8664788a554f
  analyseLoop_map d89beba107729a928e286b129ed5cdb5
  analyseLoop_reduce 93e75a083396b57c16bdeaedd83e5de3
  getErrorAnnotations 9eeef21cab9a58fd8ff69f45ddc65ac7
  getReads 9669373f2393f55075f8fdd24a836215
  getReductionVarNames d42cf1d1f27b28922dc12fe42c4aadfa
  getWrites a7f1e1a6718ef504d8e0612660b38fe4
import  -/  MiniPP f16ed7e5a39853044388f8480999b1a1
  exports: 7578fb79964ca180f8c5942d9032d1f5
import  -/  SubroutineTable 478a2d1f7dd1c241949a1b63a72c1af8
  exports: 36e92c4145b6d54c4036b21148e09ac1
  MkSubRec a39ac213c8876cd1d6e64acd45b9c276
  SubroutineTable 875efe6d79ce808ce2e029d4077f36df
  subAst ffc672553e5614ff97f91fc9495e2abb
  subSrcFile 70f676119365d32c2d92b48d94b7f7d4
import  -/  VarAccessAnalysis c1df2c318ff94db68fe9eac144e58579
  exports: 051e850c675aa14514a70f7a8b7a0582
  VarAccessAnalysis e08531c66c90e73f54dbd5e70c7e78e1
  analyseAllVarAccess_progUnit 22aac08bcdb3ae0527082324a03c6e56
  getNonTempVars 40b9298c31f2cec1076ba702a83cf1b5
  getPrexistingVars a4b88a51baab3c3b5cfa48a4a4b3029c
  getValueAtSrcSpan f8891a4444df96c0e1177805c06b2a25
import  -/  VarDependencyAnalysis d3e85612afd610e5fcb0e3763a1de01e
  exports: f27db6a43dea9dbe861dd661c14bd373
  VarDependencyAnalysis eac14f63a23cb4cb28fe9d2430e0a426
  analyseDependencies 2d35637e4d6e90e51b80c5e51a0bee90
  loopCarriedDependencyCheck ba6f3e6f5d09f005453cc48397059331
  loopCarriedDependencyCheck_reductionWithIteration 62b3c70563754f6784fed12a829679ae
import  -/  Warning 37568988846bf7dc0ef160b198d03155
  exports: 66d1a373648e452607e9cbdbd4f3a821
import  -/  process-1.4.3.0@process-1.4.3.0:System.Process 1ee59b956b7cad68338d3f6ab3e772ed
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics ea99a8062a9608312218ffd7309b5391
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Aliases 09d594ec9a31e3c858478cc583771648
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Schemes 4b69980d384f37e61fe24ae708a71220
31d9da8b9bb43b5c58bc2861098e215c
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataFortran_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  Transformer.$s$fDataFortran2
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  Transformer.$s$fDataFortran1
                  (Language.Fortran.$fDataFortran_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData) -}
7a9f849f7cbab91bc3f66bea5477d412
  $s$fDataFortran1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Fortran
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds5 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Fortran
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
8281cb90a914f6a10b763aeec5065381
  $s$fDataFortran2 ::
    Language.Fortran.Fortran
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds5 :: Language.Fortran.Fortran
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$tD9QMegU2padFswPGA4PbPq) -}
945d7a4a1068bd6b6199f615975ec932
  $s$fDataFortran3 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds5 :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Base.Nothing
                   @ (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))) -}
bc89b39b512896e6113f9deea9dfc37f
  $s$fDataFortran4 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds5 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.mapDataType) -}
0bf5a16cffa71a004414e29bfdc3d23e
  $s$fDataFortran5 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds5 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.fromListConstr) -}
2e170b70cdf39988e4f454b58840543f
  $s$fDataFortran_$dData ::
    Data.Data.Data
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Unfolding: InlineRule (0, True, True)
                Transformer.$s$fDataFortran_$s$fDataMap -}
f18da38bac31c58b8a7250d4b7422a84
  $s$fDataFortran_$dData1 :: Data.Data.Data [GHC.Base.String]
  {- Unfolding: InlineRule (0, True, True)
                Transformer.$s$fDataFortran_$s$fData[] -}
4b7e675e5d459598b5c7524737dd8386
  $s$fDataFortran_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fDataMap_$cp1Data
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  Transformer.$s$fDataFortran5
                  Transformer.$s$fDataFortran4
                  Transformer.$s$fDataFortran3
                  (Data.Map.Base.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapT
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
d27eea87af6eb5a75bc2855e9aaae8f2
  $s$fDataFortran_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Data.$fData[]_$cp1Data
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  Transformer.$s$fDataFortran_$s$fData[]_$ctoConstr
                  Transformer.$s$fDataFortran_$s$fData[]_$cdataTypeOf
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  Transformer.$s$fDataFortran_$s$fData[]_$cdataCast2
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
44862db61871283a905238b57f4aab89
  $s$fDataFortran_$s$fData[]_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds5 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing @ (c [[GHC.Types.Char]])) -}
b8a9007f29b1f8ac6de33f46b0429952
  $s$fDataFortran_$s$fData[]_$cdataTypeOf ::
    [[GHC.Types.Char]] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds5 :: [[GHC.Types.Char]]) -> Data.Data.listDataType) -}
b8a543299e9140a6b55a80dfdcba0922
  $s$fDataFortran_$s$fData[]_$ctoConstr ::
    [[GHC.Types.Char]] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds5 :: [[GHC.Types.Char]]) ->
                 case ds5 of wild {
                   [] -> Data.Data.nilConstr : ds6 ds7 -> Data.Data.consConstr }) -}
5afdb986aaeb508aaaca971783afbc7e
  $s$fDataProgUnit ::
    Data.Data.Data
      (Language.Fortran.ProgUnit
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ProgUnit
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataProgUnit_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  Transformer.$s$fDataProgUnit3
                  Transformer.$s$fDataProgUnit2
                  (Language.Fortran.$fDataProgUnit_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  Transformer.$s$fDataProgUnit1
                  (Language.Fortran.$fDataProgUnit_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$dData) -}
8cdb33804c851f8d62702e60f143a536
  $s$fDataProgUnit1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.ProgUnit
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds5 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.ProgUnit
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
73096aabde18a2a7b5d9e22ccd09d2da
  $s$fDataProgUnit2 ::
    Language.Fortran.ProgUnit
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds5 :: Language.Fortran.ProgUnit
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$t7VQWdGSfPYu9Iisks7pSs4) -}
9ac0bebdf83c9efaf3ff25b74550b801
  $s$fDataProgUnit3 ::
    Language.Fortran.ProgUnit
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds5 :: Language.Fortran.ProgUnit
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case ds5 of wild {
                   Language.Fortran.Main ds6 ds7 ds8 ds9 ds10 ds11
                   -> Language.Fortran.$c4xrtyfBJfgG9CdmZCyXplY
                   Language.Fortran.Sub ds6 ds7 ds8 ds9 ds10 ds11
                   -> Language.Fortran.$c7zjF0LiJYf2AdH4exyJgTk
                   Language.Fortran.Function ds6 ds7 ds8 ds9 ds10 ds11 ds12
                   -> Language.Fortran.$cHz24H293oUm0OxUULdlqBb
                   Language.Fortran.Module ds6 ds7 ds8 ds9 ds10 ds11 ds12
                   -> Language.Fortran.$cJF7ERNq7h76LqRZ36w7OdI
                   Language.Fortran.BlockData ds6 ds7 ds8 ds9 ds10 ds11
                   -> Language.Fortran.$cJMYppX9bYODKKluMTnLSGS
                   Language.Fortran.PSeq ds6 ds7 ds8 ds9
                   -> Language.Fortran.$cBhco6aZ1tyeC07hEtbJOeV
                   Language.Fortran.Prog ds6 ds7 ds8
                   -> Language.Fortran.$c1punZIYcQoU5BRBrTkMOur
                   Language.Fortran.NullProg ds6 ds7
                   -> Language.Fortran.$c4IpgnqT1fRXLxfwDHaby2z
                   Language.Fortran.IncludeProg ds6 ds7 ds8 ds9
                   -> Language.Fortran.$cCGFBodCaxL10tlXfi5MSfH }) -}
6cc4699a5b6ea2bb97093bd03269dc7a
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.Fortran.VarName LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     Transformer.$s$fEq(,)2
                     Transformer.$s$fEq(,)_$dEq1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     Transformer.$s$fEq(,)2
                     Transformer.$s$fEq(,)_$dEq1) -}
a1addd700ffdefd027bb081d27399574
  $s$fEq(,)1 :: GHC.Classes.Eq LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Transformer.$s$fEq(,)_$s$fEqMap -}
79e7e93dfae81ddbee901418ffa418f8
  $s$fEq(,)2 ::
    GHC.Classes.Eq (Language.Fortran.VarName LanguageFortranTools.Anno)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Transformer.$s$fEq(,)_$s$fEqVarName -}
3115d63987dc890b29f390b2ad0db714
  $s$fEq(,)_$dEq1 ::
    GHC.Classes.Eq (Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Transformer.$s$fEq(,)_$s$fEqExpr -}
02cbdeb705bba988d6f894552a60bdd8
  $s$fEq(,)_$s$fEqExpr ::
    GHC.Classes.Eq
      (Language.Fortran.Expr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqExpr_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fEq(,)1)
                  (Language.Fortran.$fEqExpr_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fEq(,)1) -}
abc395ad94e7686834ea31c76aa3db02
  $s$fEq(,)_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  Transformer.$s$fEq(,)_$s$fEqMap_$c/= -}
f084db77501d2685db71deb2f998e1ed
  $s$fEq(,)_$s$fEqMap_$c/= ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ [GHC.Types.Char]
                      @ [GHC.Base.String]
                      GHC.Classes.$fEq[]_$s$fEq[]1
                      GHC.Classes.$fEq[]_$s$fEq[]2
                      x
                      y)) -}
540eb771972b682402108fe56b8cb7a2
  $s$fEq(,)_$s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fEq(,)1)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fEq(,)1) -}
b62eda86a2c8dc844d6b2ecdf86739b8
  $sfindWithDefault1 ::
    a -> GHC.Base.String -> Data.Map.Base.Map GHC.Base.String a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><S,1*U><S,1*U> -}
3d55024994e8f9c5e4676405b86fb85c
  $sinsert_$sgo10 ::
    [GHC.Types.Char]
    -> a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
42e7529e13433cbaf0300b6c8758eb27
  $stypeRep#10 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Transformer.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
83032d3424c32fe68255bab6c2348e75
  $stypeRep#11 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
4bfa4e914c73eaf2d4e3170b9e733f98
  $stypeRep#14 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Transformer.$stypeRep#15
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tc[]
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
078f494d6e05c69f850db8edc548d189
  $stypeRep#15 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17730107610217102821##
                   9866972337190828755##) -}
dbdeb3c8544932dca4015f1b37a91051
  $stypeRep#18 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Transformer.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types13 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       Transformer.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types13 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types13 } } }) -}
c4e97707291bab914f9f1718d6a97cb6
  $stypeRep#19 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Transformer.$stypeRep#10
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
bb13030a3974256a96fcf95d9e024884
  $stypeRep#2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Transformer.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcBlock
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
7c937303b0f1d5f2c60cc2cf8a2da9c2
  $stypeRep#23 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Transformer.$stypeRep#18
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
cf1e35407d316035ca7a5699fe056207
  $stypeRep#29 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Transformer.$stypeRep#30
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
74c49b38ddff9c2dd78cf3725a2f4837
  $stypeRep#3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8622183916436018781##
                   7917166659374511045##) -}
8b4c78d3981cb912bfdbf577bea215ca
  $stypeRep#30 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6882220124880764793##
                   15271875958298145102##) -}
ee02d1303180a4ad1240b85fc3832547
  $stypeRep#33 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Transformer.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        Transformer.$stypeRep#_types1 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Transformer.$stypeRep#7
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        Transformer.$stypeRep#_types of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Transformer.$stypeRep#7
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Transformer.$stypeRep#_types } } } } } }) -}
82cbf0a90346d9e901b98be4aa8c32d0
  $stypeRep#34 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Transformer.$stypeRep#35
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
04a7406a68561c4857148ca0df169053
  $stypeRep#35 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Transformer.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types13 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       Transformer.$stypeRep#_types1
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types13 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types13 } } }) -}
410bb162871c36cf2c2b474b8fbe907d
  $stypeRep#36 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Transformer.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types13 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       Transformer.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types13 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types13 } } }) -}
ef47883da5c2625a2db19ed3fcba9c05
  $stypeRep#7 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17306070887558246498##
                   16032333906417739553##) -}
a6b6440c568d5324888791a20e6c60fb
  $stypeRep#_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   Transformer.$stypeRep#_types1
                   Transformer.$stypeRep#34) -}
5cacdf55c366eb8ade9adbd777a3ac72
  $stypeRep#_types1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Transformer.$stypeRep#36
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
005d136afb8b8f93405a6497f531b3f2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Transformer.$trModule2
                   Transformer.$trModule1) -}
04a463cc75afb16e78065422b166a03c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Transformer"#) -}
8d74b6c82adaed7610d15db6b07282f3
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
bbb01b5c6db302c93164297cb0224a1d
  $wcombineKernelProgUnit_foldl ::
    GHC.Base.Maybe GHC.Types.Float
    -> SubroutineTable.SubroutineTable
    -> [(GHC.Base.String, GHC.Base.String)]
    -> GHC.Base.String
    -> (# SubroutineTable.SubroutineTable,
          [(GHC.Base.String, GHC.Base.String)] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.Maybe GHC.Types.Float)
                   (ww :: SubroutineTable.SubroutineTable)
                   (ww1 :: [(GHC.Base.String, GHC.Base.String)])
                   (w1 :: GHC.Base.String) ->
                 let {
                   subrec :: SubroutineTable.SubRec
                   = Transformer.$sfindWithDefault1
                       @ SubroutineTable.SubRec
                       Transformer.combineKernelProgUnit_foldl3
                       w1
                       ww
                 } in
                 let {
                   combinedProgUnit :: Language.Fortran.ProgUnit
                                         LanguageFortranTools.Anno
                   = CombineKernels.combineKernelsProgUnit
                       @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                       Transformer.$s$fDataProgUnit
                       w
                       (Transformer.combineKernelProgUnit_foldl2
                          (SubroutineTable.subAst subrec))
                 } in
                 let {
                   filename :: GHC.Base.String
                   = case subrec of wild { SubroutineTable.MkSubRec ds5 ds6 ds7 ->
                     ds6 }
                 } in
                 (# Transformer.$sinsert_$sgo10
                      @ SubroutineTable.SubRec
                      w1
                      (SubroutineTable.MkSubRec
                         combinedProgUnit
                         filename
                         (GHC.Types.[] @ GHC.Base.String))
                      ww,
                    GHC.Base.++
                      @ (GHC.Base.String, GHC.Base.String)
                      ww1
                      (GHC.Types.:
                         @ (GHC.Base.String, GHC.Base.String)
                         (filename,
                          Data.Generics.Schemes.everything
                            @ [GHC.Types.Char]
                            (GHC.Base.++ @ GHC.Types.Char)
                            Transformer.combineKernelProgUnit_foldl1
                            @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                            Transformer.$s$fDataProgUnit
                            combinedProgUnit)
                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) #)) -}
f783f662c7c4ea34453f71d7656ef558
  $wparalleliseProgUnit_foldl ::
    [GHC.Base.String]
    -> SubroutineTable.SubroutineTable
    -> SubroutineTable.SubroutineTable
    -> [(GHC.Base.String, GHC.Base.String)]
    -> GHC.Base.String
    -> (# SubroutineTable.SubroutineTable,
          [(GHC.Base.String, GHC.Base.String)] #)
  {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
d44e345a06c7c88486c5fc10a6ef5b63
  combineKernelProgUnit_foldl ::
    GHC.Base.Maybe GHC.Types.Float
    -> (SubroutineTable.SubroutineTable,
        [(GHC.Base.String, GHC.Base.String)])
    -> GHC.Base.String
    -> (SubroutineTable.SubroutineTable,
        [(GHC.Base.String, GHC.Base.String)])
  {- Arity: 3, Strictness: <L,U><S,1*U(U,1*U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.Maybe GHC.Types.Float)
                   (w1 :: (SubroutineTable.SubroutineTable,
                           [(GHC.Base.String, GHC.Base.String)]))
                   (w2 :: GHC.Base.String) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case Transformer.$wcombineKernelProgUnit_foldl
                        w
                        ww1
                        ww2
                        w2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
0d9c5a05e8d7813d2898c5ead7b1d20e
  combineKernelProgUnit_foldl1 ::
    Data.Data.Data a => a -> [GHC.Types.Char]
  {- Arity: 2,
     Strictness: <S(C(S(SLLLL))LLLLLLLLLLLLLL),1*U(1*C1(U(U,U,A,A,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
ce5ac9939695ce9be2638c97da80167f
  combineKernelProgUnit_foldl2 ::
    Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
  {- Unfolding: (Data.Generics.Schemes.everywhere
                   LanguageFortranTools.removeAllAnnotations1
                   @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   Transformer.$s$fDataProgUnit) -}
b2e27d3343faa6c7357f2d6d4e5bbc2f
  combineKernelProgUnit_foldl3 :: SubroutineTable.SubRec
  {- Strictness: x -}
326f0936e2c5107bc446354a4c24f95c
  paralleliseProgUnit_foldl ::
    [GHC.Base.String]
    -> SubroutineTable.SubroutineTable
    -> (SubroutineTable.SubroutineTable,
        [(GHC.Base.String, GHC.Base.String)])
    -> GHC.Base.String
    -> (SubroutineTable.SubroutineTable,
        [(GHC.Base.String, GHC.Base.String)])
  {- Arity: 4, Strictness: <L,U><L,U><S,1*U(1*U,1*U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: SubroutineTable.SubroutineTable)
                   (w2 :: (SubroutineTable.SubroutineTable,
                           [(GHC.Base.String, GHC.Base.String)]))
                   (w3 :: GHC.Base.String) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case Transformer.$wparalleliseProgUnit_foldl
                        w
                        w1
                        ww1
                        ww2
                        w3 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
"SPEC/Transformer $fDataFortran @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                      (Data.Map.Base.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Base.Map
                                      GHC.Base.String [GHC.Base.String])
                                 $dData
  = Transformer.$s$fDataFortran
"SPEC/Transformer $fDataMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                             [GHC.Types.Char])
                                                                 ($dData1 :: Data.Data.Data
                                                                               [GHC.Base.String])
                                                                 ($dData :: Data.Data.Data
                                                                              [GHC.Types.Char])
  Data.Map.Base.$fDataMap @ [GHC.Types.Char]
                          @ [GHC.Base.String]
                          $dData
                          $dData1
                          $dOrd
  = Transformer.$s$fDataFortran_$s$fDataMap
"SPEC/Transformer $fDataProgUnit @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                       (Data.Map.Base.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit @ (Data.Map.Base.Map
                                       GHC.Base.String [GHC.Base.String])
                                  $dData
  = Transformer.$s$fDataProgUnit
"SPEC/Transformer $fData[] @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                  [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] $dData
  = Transformer.$s$fDataFortran_$s$fData[]
"SPEC/Transformer $fData[]_$cdataCast2 @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                              [GHC.Types.Char])
  Data.Data.$fData[]_$cdataCast2 @ [GHC.Types.Char] $dData
  = Transformer.$s$fDataFortran_$s$fData[]_$cdataCast2
"SPEC/Transformer $fData[]_$cdataTypeOf @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                               [GHC.Types.Char])
  Data.Data.$fData[]_$cdataTypeOf @ [GHC.Types.Char] $dData
  = Transformer.$s$fDataFortran_$s$fData[]_$cdataTypeOf
"SPEC/Transformer $fData[]_$ctoConstr @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                             [GHC.Types.Char])
  Data.Data.$fData[]_$ctoConstr @ [GHC.Types.Char] $dData
  = Transformer.$s$fDataFortran_$s$fData[]_$ctoConstr
"SPEC/Transformer $fEq(,) @ (VarName Anno) @ (Expr Anno)" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                      (Language.Fortran.Expr
                                                                                         LanguageFortranTools.Anno))
                                                                          ($dEq :: GHC.Classes.Eq
                                                                                     (Language.Fortran.VarName
                                                                                        LanguageFortranTools.Anno))
  GHC.Classes.$fEq(,) @ (Language.Fortran.VarName
                           LanguageFortranTools.Anno)
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                      $dEq
                      $dEq1
  = Transformer.$s$fEq(,)
"SPEC/Transformer $fEqExpr @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                               (Data.Map.Base.Map
                                                                                  GHC.Base.String
                                                                                  [GHC.Base.String]))
  Language.Fortran.$fEqExpr @ (Data.Map.Base.Map
                                 GHC.Base.String [GHC.Base.String])
                            $dEq
  = Transformer.$s$fEq(,)_$s$fEqExpr
"SPEC/Transformer $fEqMap @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                           [GHC.Base.String])
                                                               ($dEq :: GHC.Classes.Eq
                                                                          [GHC.Types.Char])
  Data.Map.Base.$fEqMap @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        $dEq
                        $dEq1
  = Transformer.$s$fEq(,)_$s$fEqMap
"SPEC/Transformer $fEqMap_$c/= @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                [GHC.Base.String])
                                                                    ($dEq :: GHC.Classes.Eq
                                                                               [GHC.Types.Char])
  Data.Map.Base.$fEqMap_$c/= @ [GHC.Types.Char]
                             @ [GHC.Base.String]
                             $dEq
                             $dEq1
  = Transformer.$s$fEq(,)_$s$fEqMap_$c/=
"SPEC/Transformer $fEqVarName @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                  (Data.Map.Base.Map
                                                                                     GHC.Base.String
                                                                                     [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dEq
  = Transformer.$s$fEq(,)_$s$fEqVarName
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

