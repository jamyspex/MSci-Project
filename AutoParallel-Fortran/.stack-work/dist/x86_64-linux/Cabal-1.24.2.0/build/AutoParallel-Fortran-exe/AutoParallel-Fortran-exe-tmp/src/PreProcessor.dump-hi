
==================== FINAL INTERFACE ====================
2018-10-08 15:32:22.795739 UTC

interface main@main:PreProcessor 8002
  interface hash: 64beab32b3e346aa9312b738bc3bac33
  ABI hash: 24c50a585a4c30c7e7fe641b3f79d39c
  export-list hash: 972843a1d8ebd6ae3ac01d38b3b14b9a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  PreProcessor.preProcess
  PreProcessor.removeBlankLines
module dependencies: Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Warning 37568988846bf7dc0ef160b198d03155
  exports: 66d1a373648e452607e9cbdbd4f3a821
d93d2dcf35987473694f8106cc8139f7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PreProcessor.$trModule2
                   PreProcessor.$trModule1) -}
0dd63d9df8d977cc8cedc3991d68e993
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PreProcessor"#) -}
1311a807d54272f7e96dbcf75a537920
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
6dafd43b5dbe13b11633677e6e779975
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
025aea9d3e048c1dc33cf7c4f0dd9605
  $wpreProcess ::
    GHC.Types.Bool
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (# GHC.Base.String,
          Data.Map.Base.Map GHC.Types.Int [GHC.Base.String] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Bool)
                   (w1 :: [GHC.Base.String])
                   (w2 :: GHC.Base.String) ->
                 case w of wild {
                   GHC.Types.False
                   -> PreProcessor.$wreplaceIfDefByLabel
                        w1
                        (Data.OldList.unlines
                           (GHC.List.filter
                              @ [GHC.Types.Char]
                              PreProcessor.preProcess12
                              (Data.OldList.lines
                                 (PreProcessor.caseInsensitive_strReplace
                                    PreProcessor.preProcess11
                                    PreProcessor.preProcess10
                                    (PreProcessor.caseInsensitive_strReplace
                                       PreProcessor.preProcess9
                                       PreProcessor.preProcess8
                                       (PreProcessor.caseInsensitive_strReplace
                                          PreProcessor.preProcess7
                                          PreProcessor.preProcess6
                                          (PreProcessor.caseInsensitive_strReplace
                                             PreProcessor.preProcess5
                                             PreProcessor.preProcess6
                                             (PreProcessor.caseInsensitive_strReplace
                                                PreProcessor.preProcess4
                                                PreProcessor.preProcess3
                                                (PreProcessor.caseInsensitive_strReplace
                                                   PreProcessor.preProcess2
                                                   PreProcessor.preProcess1
                                                   w2)))))))))
                   GHC.Types.True
                   -> PreProcessor.$wreplaceIfDefByLabel
                        w1
                        (Data.OldList.unlines
                           (GHC.List.filter
                              @ [GHC.Types.Char]
                              PreProcessor.preProcess12
                              (Data.OldList.lines
                                 (PreProcessor.caseInsensitive_strReplace
                                    PreProcessor.preProcess11
                                    PreProcessor.preProcess10
                                    (PreProcessor.caseInsensitive_strReplace
                                       PreProcessor.preProcess9
                                       PreProcessor.preProcess8
                                       (PreProcessor.caseInsensitive_strReplace
                                          PreProcessor.preProcess7
                                          PreProcessor.preProcess6
                                          (PreProcessor.caseInsensitive_strReplace
                                             PreProcessor.preProcess5
                                             PreProcessor.preProcess6
                                             (PreProcessor.caseInsensitive_strReplace
                                                PreProcessor.preProcess4
                                                PreProcessor.preProcess3
                                                (PreProcessor.caseInsensitive_strReplace
                                                   PreProcessor.preProcess2
                                                   PreProcessor.preProcess1
                                                   (PreProcessor.preProcess_go
                                                      (Data.OldList.lines w2)
                                                      (GHC.Types.[]
                                                         @ GHC.Types.Char))))))))))) }) -}
af760c77ef26b17e3ab1ae55502dfd01
  $wreplaceIfDefByLabel ::
    [GHC.Base.String]
    -> GHC.Base.String
    -> (# GHC.Base.String,
          Data.Map.Base.Map GHC.Types.Int [GHC.Base.String] #)
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0] -}
295c78f822fc6c4efaa6c70e2951ab25
  caseInsensitive_strReplace ::
    [GHC.Types.Char]
    -> [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <S,U><L,U><L,U> -}
7e825d887f66be5ebff7e77c572ae38b
  preProcess ::
    GHC.Types.Bool
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (GHC.Base.String,
        Data.Map.Base.Map GHC.Types.Int [GHC.Base.String])
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Bool)
                   (w1 :: [GHC.Base.String])
                   (w2 :: GHC.Base.String) ->
                 case PreProcessor.$wpreProcess w w1 w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
69f756f115257202648b7d94f554e7fd
  preProcess1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \ case "#) -}
7ac143ed249a98c28a69a9f8b2e4e2bd
  preProcess10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " .and. "#) -}
7f79aa88fd3439f1d109e025995b4b0d
  preProcess11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".and."#) -}
11dc4babdf6c57d04d023930f5d1133b
  preProcess12 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 case (PreProcessor.preProcess_go1 x)
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
214ba4cb1e3b3bcc3b755a0e8525693b
  preProcess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \case "#) -}
754fafa0cb23b74882e1458d21715ff2
  preProcess3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \ case("#) -}
693c1aa8d0cded69eb4bac3547a8a05f
  preProcess4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \case("#) -}
f10dc5ab5c67e44e3e91ddd48971d2a6
  preProcess5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \contains "#) -}
7708ebd0adccdda11ee03f5a4cf7d979
  preProcess6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \ contains "#) -}
b59a2c48672ace6ba64afd1e1486c212
  preProcess7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \contains"#) -}
fd1832ce21367b4d791e3e1ec013c738
  preProcess8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " .or. "#) -}
030da807991402967e2ca9b41a75ba4e
  preProcess9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".or."#) -}
4336b71a4856d3eb4d419820201ff956
  preProcess_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
4b046f80d70c2508f82c7884bc148c6c
  preProcess_go1 :: [GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4795a6b3d92f60411c950a865062aa83
  removeBlankLines :: [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.List.filter
                   @ [GHC.Types.Char]
                   PreProcessor.preProcess12) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

