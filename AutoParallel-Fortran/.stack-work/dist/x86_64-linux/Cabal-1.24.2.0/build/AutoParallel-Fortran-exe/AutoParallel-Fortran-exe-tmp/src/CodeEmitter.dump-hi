
==================== FINAL INTERFACE ====================
2018-12-03 15:55:14.696831 UTC

interface main@main:CodeEmitter 8002
  interface hash: 794b9a5643eddaffa697650b62e3ee2a
  ABI hash: cd75236b323cbcd2c9ea3adc490d930c
  export-list hash: 9de3cbbde93f0723188cf4096e7fc461
  orphan hash: 887f18341f646bcea9fa16186b8bd9e2
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  CodeEmitter.emit
module dependencies: CodeEmitterUtils F95IntrinsicFunctions
                     FortranGenerator FortranSynthesiser Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools MiniPP Platform
                     PreProcessor SubroutineTable Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskell-src-1.0.2.0@haskell-src-1.0.2.0-3zoaErItXGVA1GHC7t3Glx
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      process-1.4.3.0@process-1.4.3.0
                      syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Instances
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  CodeEmitterUtils bc5edf6436e6c4432e181644ac03bb99
  exports: 83fe22c4657035c778433521c92d60d5
  getModuleName 45ba41629b3d79a0c19ad48abdd18a96
  hostModuleName 0e1be82316273a56b7a957f8c5c4359b
  initModuleName 8c78f7a77000f8a28abd025cc880f498
import  -/  FortranSynthesiser fde25ebc70bfac1e62d1c68155225ba2
  exports: 4b57163b5858fd662aef731f0a0307a2
  produceCode_prog 4be2bbd857a2eff7128d794a1d0f1d21
  synthesiseInitModule c245ebbd7d878f563b2900295533aa1b
  synthesiseKernels bff24166b852b6ca56157375ce6af78f
  synthesiseSuperKernelModule 09ddecfd649c6e7e6b700ef66992e96a
  synthesiseSuperKernelName 2e5aae888023ead5949cd65c8f12e255
import  -/  Language.Fortran c957d8f93581b3ce2cc521df25110d11
  exports: cb4e2f808f933bd0493dcd95204741d0
  ProgUnit dd0d2763607dbd5a6f6c1c5d85fe76dd
  Program 61c057161e42f4aa29fb8dd8afb17b21
  VarName d4d45769399fe3ed8e0615e3282cf5b7
import  -/  Language.Fortran.Parser 59e506b7f9b623442ab6ce146631eefb
  exports: 83a6073254db4377feeca61632e25716
import  -/  LanguageFortranTools 7890a5e96ab51325aa3603dbd4691bf4
  exports: 83b35210801e0c6fe3fd2a2c2ff1ecd0
  Anno e22809b44b97ccfdb28bfb19047d139f
  CodeStash 8db81f826e64fb3d0da9e254dc4a6a55
  ModuleVarsTable 2d3509d9190540c2ff64d7aa77e642a6
import  -/  Platform 68ee714015ddeec7ef5b38f1b1229aea
  exports: faf9de2f15d0e1cf9065a7f78566814c
  Platform 06b607c6896cb24eacacbc624d07dfa1
import  -/  SubroutineTable 478a2d1f7dd1c241949a1b63a72c1af8
  exports: 36e92c4145b6d54c4036b21148e09ac1
  SubRec 634277e0b165f8e96a02add9b72466c9
  SubroutineArgumentTranslationMap cfad5044b89ccfb7a793ac7497738c50
  SubroutineTable 875efe6d79ce808ce2e029d4077f36df
  subAst ffc672553e5614ff97f91fc9495e2abb
  subSrcFile 70f676119365d32c2d92b48d94b7f7d4
  subSrcLines b10e7cabc4a4ec72e6222d72e8a09bb2
import  -/  process-1.4.3.0@process-1.4.3.0:System.Process 1ee59b956b7cad68338d3f6ab3e772ed
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics ea99a8062a9608312218ffd7309b5391
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Aliases 09d594ec9a31e3c858478cc583771648
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Schemes 4b69980d384f37e61fe24ae708a71220
2769eff97df015fbdd7ea0ae2c7566bd
  $s$fDataMap ::
    Data.Data.Data
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fDataMap_$cp1Data
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  CodeEmitter.$s$fDataMap3
                  CodeEmitter.$s$fDataMap2
                  CodeEmitter.$s$fDataMap1
                  (Data.Map.Base.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapT
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitter.$s$fDataMap_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
cdfc978dd8be0cdf64f0a2af9df501e6
  $s$fDataMap1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds1 :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Base.Nothing
                   @ (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))) -}
e2affbb74e9bb5660af0d15504ef75fe
  $s$fDataMap2 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.mapDataType) -}
d52f6cda5d579b96a6d2a3db98659037
  $s$fDataMap3 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.fromListConstr) -}
16841c395148b979ef615ac6a47edb94
  $s$fDataMap_$dData1 :: Data.Data.Data [GHC.Base.String]
  {- Unfolding: InlineRule (0, True, True)
                CodeEmitter.$s$fDataMap_$s$fData[] -}
1341c0b33d1d84e18e4eb39fb3299653
  $s$fDataMap_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Data.$fData[]_$cp1Data
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  CodeEmitter.$s$fDataMap_$s$fData[]_$ctoConstr
                  CodeEmitter.$s$fDataMap_$s$fData[]_$cdataTypeOf
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  CodeEmitter.$s$fDataMap_$s$fData[]_$cdataCast2
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
8d13eba51c1862d00eed3a29580f713b
  $s$fDataMap_$s$fData[]_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds1 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing @ (c [[GHC.Types.Char]])) -}
5be25b6c3db8c32ab8a25887fb10146c
  $s$fDataMap_$s$fData[]_$cdataTypeOf ::
    [[GHC.Types.Char]] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: [[GHC.Types.Char]]) -> Data.Data.listDataType) -}
081dfb35d3f19c1e0b6a9cb8b68fe7d9
  $s$fDataMap_$s$fData[]_$ctoConstr ::
    [[GHC.Types.Char]] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: [[GHC.Types.Char]]) ->
                 case ds1 of wild {
                   [] -> Data.Data.nilConstr : ds2 ds3 -> Data.Data.consConstr }) -}
ef30fec200e0fe67ff94920d1b03f938
  $s$fDataProgUnit ::
    Data.Data.Data
      (Language.Fortran.ProgUnit
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ProgUnit
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataProgUnit_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  CodeEmitter.$s$fDataProgUnit3
                  CodeEmitter.$s$fDataProgUnit2
                  (Language.Fortran.$fDataProgUnit_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  CodeEmitter.$s$fDataProgUnit1
                  (Language.Fortran.$fDataProgUnit_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitter.$s$fDataProgUnit_$dData) -}
7f8d5a7521c0175719226b4b6072dd73
  $s$fDataProgUnit1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.ProgUnit
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds1 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.ProgUnit
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
83a0685f8928fed46b42c307440fca0d
  $s$fDataProgUnit2 ::
    Language.Fortran.ProgUnit
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Language.Fortran.ProgUnit
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$t7VQWdGSfPYu9Iisks7pSs4) -}
8f7063525f89d7cf81274ef914d959ac
  $s$fDataProgUnit3 ::
    Language.Fortran.ProgUnit
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds1 :: Language.Fortran.ProgUnit
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case ds1 of wild {
                   Language.Fortran.Main ds2 ds3 ds4 ds5 ds6 ds7
                   -> Language.Fortran.$c4xrtyfBJfgG9CdmZCyXplY
                   Language.Fortran.Sub ds2 ds3 ds4 ds5 ds6 ds7
                   -> Language.Fortran.$c7zjF0LiJYf2AdH4exyJgTk
                   Language.Fortran.Function ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> Language.Fortran.$cHz24H293oUm0OxUULdlqBb
                   Language.Fortran.Module ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> Language.Fortran.$cJF7ERNq7h76LqRZ36w7OdI
                   Language.Fortran.BlockData ds2 ds3 ds4 ds5 ds6 ds7
                   -> Language.Fortran.$cJMYppX9bYODKKluMTnLSGS
                   Language.Fortran.PSeq ds2 ds3 ds4 ds5
                   -> Language.Fortran.$cBhco6aZ1tyeC07hEtbJOeV
                   Language.Fortran.Prog ds2 ds3 ds4
                   -> Language.Fortran.$c1punZIYcQoU5BRBrTkMOur
                   Language.Fortran.NullProg ds2 ds3
                   -> Language.Fortran.$c4IpgnqT1fRXLxfwDHaby2z
                   Language.Fortran.IncludeProg ds2 ds3 ds4 ds5
                   -> Language.Fortran.$cCGFBodCaxL10tlXfi5MSfH }) -}
901b6b45839973b8c871a897e579d340
  $s$fDataProgUnit_$dData ::
    Data.Data.Data
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Unfolding: InlineRule (0, True, True) CodeEmitter.$s$fDataMap -}
a0550779d7c761cf542044aab4ad0593
  $s$fData[] ::
    Data.Data.Data
      [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
                  (Data.Data.$fData[]_$cp1Data
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  (Data.Data.$fData[]_$cgfoldl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  (Data.Data.$fData[]_$cgunfold
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  CodeEmitter.$s$fData[]3
                  CodeEmitter.$s$fData[]2
                  (Data.Data.$fData[]_$cdataCast1
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  CodeEmitter.$s$fData[]1
                  (Data.Data.$fData[]_$cgmapT
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  (Data.Data.$fData[]_$cgmapQl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  (Data.Data.$fData[]_$cgmapQr
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  (Data.Data.$fData[]_$cgmapQ
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  (Data.Data.$fData[]_$cgmapQi
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  (Data.Data.$fData[]_$cgmapM
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  (Data.Data.$fData[]_$cgmapMp
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData)
                  (Data.Data.$fData[]_$cgmapMo
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitter.$s$fData[]_$dData) -}
720a406255f159410728aa1cae38df5b
  $s$fData[]1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c [Language.Fortran.ProgUnit LanguageFortranTools.Anno])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds1 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c [Language.Fortran.ProgUnit LanguageFortranTools.Anno])) -}
beccca1d62950681ccae6e7a80bd8775
  $s$fData[]2 ::
    [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: [Language.Fortran.ProgUnit
                              LanguageFortranTools.Anno]) ->
                 Data.Data.listDataType) -}
adb5859dbd09552fd594f7835c54685b
  $s$fData[]3 ::
    [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: [Language.Fortran.ProgUnit
                              LanguageFortranTools.Anno]) ->
                 case ds1 of wild {
                   [] -> Data.Data.nilConstr : ds2 ds3 -> Data.Data.consConstr }) -}
c3665dade14232756cc1fb464d28f75d
  $s$fData[]_$dData ::
    Data.Data.Data
      (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
  {- Unfolding: InlineRule (0, True, True)
                CodeEmitter.$s$fDataProgUnit -}
cb137dac07bd43aba2414f3bbffb25e9
  $stypeRep#10 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitter.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
64c3eceabcb99db74c9fed848693cc6d
  $stypeRep#11 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
22e4a5bd37924547b679861e5537c09c
  $stypeRep#14 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitter.$stypeRep#15
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tc[]
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
e29b26215552476ed64874b04f9dbcdd
  $stypeRep#15 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17730107610217102821##
                   9866972337190828755##) -}
2245d833bb6f019d9a320339e7620974
  $stypeRep#18 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitter.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitter.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
b46cad3b34ed320412732eafd9b69bdb
  $stypeRep#19 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitter.$stypeRep#10
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
21a78194cf02bba40145f3e5d0430d16
  $stypeRep#2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitter.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
eb9d181f1f157129ab0129b997c06fb0
  $stypeRep#22 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitter.$stypeRep#2 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitter.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
f2cd0d1f0761b0f60483a73890eff10d
  $stypeRep#23 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitter.$stypeRep#18
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
2fc0379af115c59846524c570bb2ff1e
  $stypeRep#26 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitter.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitter.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
9e0079b97a8ebcfad2011bd8cbc68674
  $stypeRep#29 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitter.$stypeRep#22 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitter.$stypeRep#30
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
a2e132388e7d65f1f3627d42d6b9cace
  $stypeRep#3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17306070887558246498##
                   16032333906417739553##) -}
cbe8d3d7e40a96eb47dc091d610daac4
  $stypeRep#30 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitter.$stypeRep#26
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
463f83b1e13051e7439e8d71f8bbf836
  $stypeRep#6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitter.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
a6c4a8f9c5b33a9933f20d1925f36844
  $stypeRep#7 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6882220124880764793##
                   15271875958298145102##) -}
4e7483d09a4b31065fb688c75cb0a14e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CodeEmitter.$trModule2
                   CodeEmitter.$trModule1) -}
30eb877039eae9d81dea996019b4c298
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CodeEmitter"#) -}
346f0c8fd76bc5b842044088da1f8212
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
bbe5b460777377304b40a59567922582
  $wemit ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> Platform.Platform
    -> GHC.Types.Bool
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.String
    -> SubroutineTable.SubroutineTable
    -> (GHC.Base.String, LanguageFortranTools.CodeStash)
    -> LanguageFortranTools.ModuleVarsTable
    -> [LanguageFortranTools.ModuleVarsTable]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [()] #)
  {- Arity: 14,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U><L,U><L,U><L,1*U(A,U)><L,U><L,1*U><S,U>,
     Inline: [0] -}
fed5ec85d6388785c5e7427496510896
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
ecb2432cea33ce250faac0332f508349
  emit ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> Platform.Platform
    -> GHC.Types.Bool
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> SubroutineTable.SubroutineTable
    -> ((GHC.Base.String, LanguageFortranTools.CodeStash),
        [(GHC.Base.String, LanguageFortranTools.CodeStash)])
    -> (LanguageFortranTools.ModuleVarsTable,
        [LanguageFortranTools.ModuleVarsTable])
    -> GHC.Types.IO [()]
  {- Arity: 15,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,A><S,1*U(U,U)><L,A><L,A><L,U><S,1*U(1*U(A,U),A)><S,1*U(U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                CodeEmitter.emit1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <Platform.Platform>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <[(Language.Fortran.Program LanguageFortranTools.Anno,
                         GHC.Base.String)]>_R
                 ->_R <[(Language.Fortran.Program LanguageFortranTools.Anno,
                         GHC.Base.String)]>_R
                 ->_R <SubroutineTable.SubroutineArgumentTranslationMap>_R
                 ->_R <(Language.Fortran.Program LanguageFortranTools.Anno,
                        GHC.Base.String)>_R
                 ->_R <[Language.Fortran.VarName LanguageFortranTools.Anno]>_R
                 ->_R <[Language.Fortran.VarName LanguageFortranTools.Anno]>_R
                 ->_R <SubroutineTable.SubroutineTable>_R
                 ->_R <((GHC.Base.String, LanguageFortranTools.CodeStash),
                        [(GHC.Base.String, LanguageFortranTools.CodeStash)])>_R
                 ->_R <(LanguageFortranTools.ModuleVarsTable,
                        [LanguageFortranTools.ModuleVarsTable])>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[()]>_R)) -}
177807174fbe7fe54b9187da6c7b886d
  emit1 ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> Platform.Platform
    -> GHC.Types.Bool
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> SubroutineTable.SubroutineTable
    -> ((GHC.Base.String, LanguageFortranTools.CodeStash),
        [(GHC.Base.String, LanguageFortranTools.CodeStash)])
    -> (LanguageFortranTools.ModuleVarsTable,
        [LanguageFortranTools.ModuleVarsTable])
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [()] #)
  {- Arity: 15,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,A><S,1*U(U,U)><L,A><L,A><L,U><S,1*U(1*U(A,U),A)><S,1*U(U,1*U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (15, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: [GHC.Base.String])
                   (w2 :: [GHC.Base.String])
                   (w3 :: Platform.Platform)
                   (w4 :: GHC.Types.Bool)
                   (w5 :: [(Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String)])
                   (w6 :: [(Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String)])
                   (w7 :: SubroutineTable.SubroutineArgumentTranslationMap)
                   (w8 :: (Language.Fortran.Program LanguageFortranTools.Anno,
                           GHC.Base.String))
                   (w9 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w10 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w11 :: SubroutineTable.SubroutineTable)
                   (w12 :: ((GHC.Base.String, LanguageFortranTools.CodeStash),
                            [(GHC.Base.String, LanguageFortranTools.CodeStash)]))
                   (w13 :: (LanguageFortranTools.ModuleVarsTable,
                            [LanguageFortranTools.ModuleVarsTable]))
                   (w14 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w8 of ww { (,) ww1 ww2 ->
                 case w12 of ww3 { (,) ww4 ww5 ->
                 case w13 of ww6 { (,) ww7 ww8 ->
                 CodeEmitter.$wemit
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   ww1
                   ww2
                   w11
                   ww4
                   ww7
                   ww8
                   w14 } } }) -}
"SPEC/CodeEmitter $fDataMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                             [GHC.Types.Char])
                                                                 ($dData1 :: Data.Data.Data
                                                                               [GHC.Base.String])
                                                                 ($dData :: Data.Data.Data
                                                                              [GHC.Types.Char])
  Data.Map.Base.$fDataMap @ [GHC.Types.Char]
                          @ [GHC.Base.String]
                          $dData
                          $dData1
                          $dOrd
  = CodeEmitter.$s$fDataMap
"SPEC/CodeEmitter $fDataProgUnit @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                       (Data.Map.Base.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit @ (Data.Map.Base.Map
                                       GHC.Base.String [GHC.Base.String])
                                  $dData
  = CodeEmitter.$s$fDataProgUnit
"SPEC/CodeEmitter $fData[] @ (ProgUnit Anno)" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                           (Language.Fortran.ProgUnit
                                                                              LanguageFortranTools.Anno))
  Data.Data.$fData[] @ (Language.Fortran.ProgUnit
                          LanguageFortranTools.Anno)
                     $dData
  = CodeEmitter.$s$fData[]
"SPEC/CodeEmitter $fData[] @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                  [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] $dData
  = CodeEmitter.$s$fDataMap_$s$fData[]
"SPEC/CodeEmitter $fData[]_$cdataCast2 @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                              [GHC.Types.Char])
  Data.Data.$fData[]_$cdataCast2 @ [GHC.Types.Char] $dData
  = CodeEmitter.$s$fDataMap_$s$fData[]_$cdataCast2
"SPEC/CodeEmitter $fData[]_$cdataTypeOf @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                               [GHC.Types.Char])
  Data.Data.$fData[]_$cdataTypeOf @ [GHC.Types.Char] $dData
  = CodeEmitter.$s$fDataMap_$s$fData[]_$cdataTypeOf
"SPEC/CodeEmitter $fData[]_$ctoConstr @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                             [GHC.Types.Char])
  Data.Data.$fData[]_$ctoConstr @ [GHC.Types.Char] $dData
  = CodeEmitter.$s$fDataMap_$s$fData[]_$ctoConstr
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

