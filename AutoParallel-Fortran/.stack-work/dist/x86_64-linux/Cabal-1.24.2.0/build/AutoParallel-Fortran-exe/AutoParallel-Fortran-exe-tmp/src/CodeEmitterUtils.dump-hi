
==================== FINAL INTERFACE ====================
2018-12-03 15:55:09.768166 UTC

interface main@main:CodeEmitterUtils 8002
  interface hash: 379f7dd7d9efabb0cc561ae978589bfd
  ABI hash: bc5edf6436e6c4432e181644ac03bb99
  export-list hash: 83fe22c4657035c778433521c92d60d5
  orphan hash: 10b3ce10ebbb85f50eb052df77c8685e
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  CodeEmitterUtils.adaptForReadScalarDecls
  CodeEmitterUtils.addDimension
  CodeEmitterUtils.addIntent
  CodeEmitterUtils.addNewDimensionClaus
  CodeEmitterUtils.anyChildGenerated
  CodeEmitterUtils.appendDimension
  CodeEmitterUtils.applyIntent
  CodeEmitterUtils.chunk_size
  CodeEmitterUtils.chunk_size_varname
  CodeEmitterUtils.collectDecls
  CodeEmitterUtils.constructDeclTree
  CodeEmitterUtils.containsParameterAttr
  CodeEmitterUtils.convertScalarToOneDimArray
  CodeEmitterUtils.declareScalarPointer_decl
  CodeEmitterUtils.emitDeclStr
  CodeEmitterUtils.extractDeclaration_varname
  CodeEmitterUtils.extractDeclaration_varname'
  CodeEmitterUtils.extractDeclaration_varnameSrcSpan
  CodeEmitterUtils.extractDimensionAttr
  CodeEmitterUtils.extractKernelArguments
  CodeEmitterUtils.extractOriginalCode
  CodeEmitterUtils.extractOriginalCode_Offset
  CodeEmitterUtils.extractOriginalCode_Offset1
  CodeEmitterUtils.extractintentAttrs
  CodeEmitterUtils.generateGloablReductionArrayArgStr
  CodeEmitterUtils.generateGlobalReductionArray
  CodeEmitterUtils.generateLocalReductionArray
  CodeEmitterUtils.generateLocalReductionArrayArgStr
  CodeEmitterUtils.generateLocalReductionVar
  CodeEmitterUtils.generatePtrScalarAssignment
  CodeEmitterUtils.generateReductionIterator
  CodeEmitterUtils.getDeclRank
  CodeEmitterUtils.getDimensionExprs
  CodeEmitterUtils.getFirstBlockSrc
  CodeEmitterUtils.getFirstFortranSrc
  CodeEmitterUtils.getGlobalID
  CodeEmitterUtils.getGroupID
  CodeEmitterUtils.getGroupSize
  CodeEmitterUtils.getLocalId
  CodeEmitterUtils.getLocalSize
  CodeEmitterUtils.getModuleName
  CodeEmitterUtils.getNumberGroups
  CodeEmitterUtils.getOriginalDeclaration
  CodeEmitterUtils.globalMemSpaceAcc
  CodeEmitterUtils.hostModuleName
  CodeEmitterUtils.initModuleName
  CodeEmitterUtils.insertDecl
  CodeEmitterUtils.insertDecls
  CodeEmitterUtils.isGenerated
  CodeEmitterUtils.isIntent
  CodeEmitterUtils.localChunkSize
  CodeEmitterUtils.localMemBarrier
  CodeEmitterUtils.localMemSpaceAcc
  CodeEmitterUtils.mergeDeclWithPrevious_recurse
  CodeEmitterUtils.nthVar
  CodeEmitterUtils.numGroupsVar
  CodeEmitterUtils.numGroupsVarName
  CodeEmitterUtils.nunitsVar
  CodeEmitterUtils.paramCheck_attr
  CodeEmitterUtils.paramCheck_type
  CodeEmitterUtils.reductionIteratorDecl
  CodeEmitterUtils.removeIntentFromDecl
  CodeEmitterUtils.removeIntentFromType
  CodeEmitterUtils.replaceIntent
  CodeEmitterUtils.scalarPointerVar
  CodeEmitterUtils.scalarPointerVarName
  CodeEmitterUtils.splitOnChar
  CodeEmitterUtils.splitOnChar'
  CodeEmitterUtils.startPosition
  CodeEmitterUtils.statePtrDecl
  CodeEmitterUtils.statePtrVar
  CodeEmitterUtils.statePtrVarName
  CodeEmitterUtils.stateVar
  CodeEmitterUtils.stateVarDecl
  CodeEmitterUtils.stateVarName
  CodeEmitterUtils.stripAttrs
  CodeEmitterUtils.stripDeclAttrs
  CodeEmitterUtils.varBufVar
  CodeEmitterUtils.varBufVarName
  CodeEmitterUtils.varSizeVar
  CodeEmitterUtils.varSizeVarName
  CodeEmitterUtils.KernelArgsIndexMap
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskell-src-1.0.2.0@haskell-src-1.0.2.0-3zoaErItXGVA1GHC7t3Glx
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      process-1.4.3.0@process-1.4.3.0
                      syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Instances
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Data da440c60016500822a3d4307ca5dea66
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Language.Fortran c957d8f93581b3ce2cc521df25110d11
  exports: cb4e2f808f933bd0493dcd95204741d0
  ArrayT 1071841314ea2748dea0af6459ed7756
  Assg e4ff0447498349c3e2879e1af28dc289
  Attr cd26706e4e94cf728d05a3d7b1b9056d
  BaseType ca5d7487fbe699d664f7837b2f094048
  Block 961f7c2c989b091b59c58c09a763b797
  Block 00b5dcb26b4d8331f4d0a27afc418872
  Con e9784612770372502a12b479082c4a0e
  DSeq 772b67a42edbea3be62c0cc83a34765a
  Decl d78489b6b11f87857f4ba3465cebf581
  Decl c4465a5758b20b0d6387c4cda8774a94
  Dimension 80d338f2485dd9dba4658e44ba6c92c2
  Expr fd45c3abbcc1cd23ca18c96ee1403b96
  Fortran 7ef8d1883356542a2e7829f1c3512bc2
  InOut ba801df823599561aa4e02813d34ab30
  Integer 247d786a49e53a070207e400ccb2363d
  Intent b995ba2ebcb7e909c60733562878a23e
  IntentAttr 2e224cb3ca4fa18503a4d24170747dce
  NullDecl 556c1a1fea20eb2b2390caa747283126
  NullExpr d53181ba59030b4ed334d3840cb5eea1
  OpenCLMap f735cdb4fcfce00b0cd641aaa6255a4b
  OpenCLReduce 811a5024d542e78a43320fc6af66c91a
  Parameter e57fc45f50a252e608f4c6688c7391dc
  Program 61c057161e42f4aa29fb8dd8afb17b21
  SrcLoc a58d61bb9404a2380d0de8c4177e198c
  SrcSpan a18da1424c2a105ac654e1e8b2930f03
  Type cac90f1d6845827f0c2780e86e10c606
  Var 223ccce2fd2a845a28913e272a1a9b28
  VarName 64af05f1c71bcd1dfd571ca0d5218f1b
  VarName d4d45769399fe3ed8e0615e3282cf5b7
  srcSpan fbf339ac9b9eae31a89ba940dccb0289
import  -/  LanguageFortranTools 7890a5e96ab51325aa3603dbd4691bf4
  exports: 83b35210801e0c6fe3fd2a2c2ff1ecd0
  Anno e22809b44b97ccfdb28bfb19047d139f
  extractAssigneeFromDecl 39645f5b02a3ff61a46cb5621de8142e
  generateArrayVar 11ed22caf0a9996357d1cb6d5af1e578
  generateFSeq 1e00a8acec4e54a010d5c4d6f04bac61
  generateIntConstant 15603276f1aca276b29ee11bb7132c17
  generateVar 9d0fea224f278c04fc62fa0745c0e6f6
  listRemoveDuplications 4378f4b10536dcf8634c95685ebad55d
  listSubtract b3c64f9bf63909177406c8d10e99ecef
  nullAnno e3239ac8aba218af15f945a652936cc8
  nullSrcSpan 088997d0b27116160aebfa68704495fa
  outputExprFormatting 94304bd749d8576e2241b877c8b68b4d
  replaceAllOccurences_varname c127dbc9dbb46e9d16d1c72254041a56
  tabInc 985de88de6d4578495764b5eb5c13f4c
  usesVarName_list 1a8e06494d870a68ecb9906f49497737
  varNameStr 95ac032c44f5687eb820ca35335877d7
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics ea99a8062a9608312218ffd7309b5391
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Aliases 09d594ec9a31e3c858478cc583771648
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Schemes 4b69980d384f37e61fe24ae708a71220
251056ca4b221c2e796f91849acd7bf9
  $s$fDataDecl ::
    Data.Data.Data
      (Language.Fortran.Decl
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Decl
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataDecl_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  CodeEmitterUtils.$s$fDataDecl2
                  (Language.Fortran.$fDataDecl_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  CodeEmitterUtils.$s$fDataDecl1
                  (Language.Fortran.$fDataDecl_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataDecl_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3) -}
6a9bce77bf28225ec4f81af966beb29b
  $s$fDataDecl1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Decl
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds12 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Decl
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
55b85fb32524b2277fa55c3c7e0fc8da
  $s$fDataDecl10 :: [[GHC.Types.Char]] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds12 :: [[GHC.Types.Char]]) -> Data.Data.listDataType) -}
2bd9b5b3652901822024916d94a48231
  $s$fDataDecl11 :: [[GHC.Types.Char]] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds12 :: [[GHC.Types.Char]]) ->
                 case ds12 of wild {
                   [] -> Data.Data.nilConstr : ds13 ds14 -> Data.Data.consConstr }) -}
ee773539c5b61ec22a24921514608449
  $s$fDataDecl12 :: Data.Data.Data [GHC.Types.Char]
  {- Unfolding: InlineRule (0, True, True)
                Data.Data.$fData[]_$s$fData[] -}
8fed06fc43b8f3107bdcaf7b5ed9319c
  $s$fDataDecl2 ::
    Language.Fortran.Decl
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds12 :: Language.Fortran.Decl
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$t5IBBfvIJazmGZ0AUBImoCA) -}
d46a07635352012196047cd2e13e5f35
  $s$fDataDecl3 ::
    Data.Data.Data
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Unfolding: InlineRule (0, True, True)
                CodeEmitterUtils.$s$fDataDecl_$s$fDataMap -}
15f44a64a0d043bd984454ad3b3e3025
  $s$fDataDecl4 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds12 :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Base.Nothing
                   @ (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))) -}
48fe94dc82dac4ce1fadae2c2caefb0a
  $s$fDataDecl5 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds12 :: Data.Map.Base.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.mapDataType) -}
a426d688141fabcd1c756c28b2885a3f
  $s$fDataDecl6 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds12 :: Data.Map.Base.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.fromListConstr) -}
26b9a8116adc1c1e4e566e45db9982c4
  $s$fDataDecl7 :: GHC.Classes.Ord [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrd[]_$s$fOrd[]1 -}
1c8ed4f1b0004fcb0f67a48db79a88c4
  $s$fDataDecl8 :: Data.Data.Data [GHC.Base.String]
  {- Unfolding: InlineRule (0, True, True)
                CodeEmitterUtils.$s$fDataDecl_$s$fData[] -}
bf278f7a587a48e8c7155e6b1b344ccb
  $s$fDataDecl9 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds12 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing @ (c [[GHC.Types.Char]])) -}
eed82c483379e72c979dcb6de875c548
  $s$fDataDecl_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fDataMap_$cp1Data
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  CodeEmitterUtils.$s$fDataDecl6
                  CodeEmitterUtils.$s$fDataDecl5
                  CodeEmitterUtils.$s$fDataDecl4
                  (Data.Map.Base.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgmapT
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7)
                  (Data.Map.Base.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     CodeEmitterUtils.$s$fDataDecl12
                     CodeEmitterUtils.$s$fDataDecl8
                     CodeEmitterUtils.$s$fDataDecl7) -}
74a4e5f6a35d141d03f95f42d3b2426e
  $s$fDataDecl_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Data.$fData[]_$cp1Data
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  CodeEmitterUtils.$s$fDataDecl11
                  CodeEmitterUtils.$s$fDataDecl10
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  CodeEmitterUtils.$s$fDataDecl9
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12)
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     CodeEmitterUtils.$s$fDataDecl12) -}
eff52924f832a22d8b147e31afda0b3b
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataFortran_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  CodeEmitterUtils.$s$fDataFortran2
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  CodeEmitterUtils.$s$fDataFortran1
                  (Language.Fortran.$fDataFortran_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3) -}
d20997c0af5a18a5b352c74d74a032ac
  $s$fDataFortran1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Fortran
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds12 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Fortran
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
0489b7081fe67dd453ef3cb78445e727
  $s$fDataFortran2 ::
    Language.Fortran.Fortran
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds12 :: Language.Fortran.Fortran
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$tD9QMegU2padFswPGA4PbPq) -}
05c976c7d7b5c42aea683d27dfba1670
  $s$fDataProgUnit ::
    Data.Data.Data
      (Language.Fortran.ProgUnit
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ProgUnit
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataProgUnit_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataProgUnit_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataProgUnit_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  CodeEmitterUtils.$s$fDataProgUnit3
                  CodeEmitterUtils.$s$fDataProgUnit2
                  (Language.Fortran.$fDataProgUnit_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  CodeEmitterUtils.$s$fDataProgUnit1
                  (Language.Fortran.$fDataProgUnit_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataProgUnit_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataProgUnit_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataProgUnit_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataProgUnit_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataProgUnit_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataProgUnit_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3)
                  (Language.Fortran.$fDataProgUnit_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl3) -}
ab264ae555946d5cd2e2fef640e350af
  $s$fDataProgUnit1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.ProgUnit
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds12 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.ProgUnit
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
1c1f1cbeeab18d7f661b824456f2772e
  $s$fDataProgUnit2 ::
    Language.Fortran.ProgUnit
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds12 :: Language.Fortran.ProgUnit
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$t7VQWdGSfPYu9Iisks7pSs4) -}
761a816b66da51f5b63472f383c1e46b
  $s$fDataProgUnit3 ::
    Language.Fortran.ProgUnit
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds12 :: Language.Fortran.ProgUnit
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case ds12 of wild {
                   Language.Fortran.Main ds13 ds14 ds15 ds16 ds17 ds18
                   -> Language.Fortran.$c4xrtyfBJfgG9CdmZCyXplY
                   Language.Fortran.Sub ds13 ds14 ds15 ds16 ds17 ds18
                   -> Language.Fortran.$c7zjF0LiJYf2AdH4exyJgTk
                   Language.Fortran.Function ds13 ds14 ds15 ds16 ds17 ds18 ds19
                   -> Language.Fortran.$cHz24H293oUm0OxUULdlqBb
                   Language.Fortran.Module ds13 ds14 ds15 ds16 ds17 ds18 ds19
                   -> Language.Fortran.$cJF7ERNq7h76LqRZ36w7OdI
                   Language.Fortran.BlockData ds13 ds14 ds15 ds16 ds17 ds18
                   -> Language.Fortran.$cJMYppX9bYODKKluMTnLSGS
                   Language.Fortran.PSeq ds13 ds14 ds15 ds16
                   -> Language.Fortran.$cBhco6aZ1tyeC07hEtbJOeV
                   Language.Fortran.Prog ds13 ds14 ds15
                   -> Language.Fortran.$c1punZIYcQoU5BRBrTkMOur
                   Language.Fortran.NullProg ds13 ds14
                   -> Language.Fortran.$c4IpgnqT1fRXLxfwDHaby2z
                   Language.Fortran.IncludeProg ds13 ds14 ds15 ds16
                   -> Language.Fortran.$cCGFBodCaxL10tlXfi5MSfH }) -}
129b68098ff222017d8f13e22f5c3e88
  $s$fData[] ::
    Data.Data.Data
      [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
                  (Data.Data.$fData[]_$cp1Data
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  (Data.Data.$fData[]_$cgfoldl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  (Data.Data.$fData[]_$cgunfold
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  CodeEmitterUtils.$s$fData[]3
                  CodeEmitterUtils.$s$fData[]2
                  (Data.Data.$fData[]_$cdataCast1
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  CodeEmitterUtils.$s$fData[]1
                  (Data.Data.$fData[]_$cgmapT
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  (Data.Data.$fData[]_$cgmapQl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  (Data.Data.$fData[]_$cgmapQr
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  (Data.Data.$fData[]_$cgmapQ
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  (Data.Data.$fData[]_$cgmapQi
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  (Data.Data.$fData[]_$cgmapM
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  (Data.Data.$fData[]_$cgmapMp
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4)
                  (Data.Data.$fData[]_$cgmapMo
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fData[]4) -}
80d8a71301b3aec89bee76eddd362339
  $s$fData[]1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c [Language.Fortran.ProgUnit LanguageFortranTools.Anno])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds12 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c [Language.Fortran.ProgUnit LanguageFortranTools.Anno])) -}
fafc00e919b662e86f99717b852d8597
  $s$fData[]2 ::
    [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds12 :: [Language.Fortran.ProgUnit
                               LanguageFortranTools.Anno]) ->
                 Data.Data.listDataType) -}
22655edd3699d2252a3d1476860af6e9
  $s$fData[]3 ::
    [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds12 :: [Language.Fortran.ProgUnit
                               LanguageFortranTools.Anno]) ->
                 case ds12 of wild {
                   [] -> Data.Data.nilConstr : ds13 ds14 -> Data.Data.consConstr }) -}
9a1c77e7768838e6ba0e674ee6d7ae47
  $s$fData[]4 ::
    Data.Data.Data
      (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
  {- Unfolding: InlineRule (0, True, True)
                CodeEmitterUtils.$s$fDataProgUnit -}
0c422a79ba54a2b9dc0aa02f5d36bceb
  $s$fEqAttr ::
    GHC.Classes.Eq
      (Language.Fortran.Attr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Attr
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqAttr_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fEqAttr1)
                  CodeEmitterUtils.$s$fEqAttr_$s$fEqAttr_$c/= -}
c72edeb08dd9f7e8dccefc32b83ba4ae
  $s$fEqAttr1 ::
    GHC.Classes.Eq
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                CodeEmitterUtils.$s$fEqAttr_$s$fEqMap -}
c3e0d0e98186e38f32c1cffb59616356
  $s$fEqAttr_$s$fEqAttr_$c/= ::
    Language.Fortran.Attr
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.Attr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.Fortran.Attr
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                   (b :: Language.Fortran.Attr
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case Language.Fortran.$fEqAttr_$c==
                        @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                        CodeEmitterUtils.$s$fEqAttr1
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8f9321d99a7fd7981b36d5249a44d140
  $s$fEqAttr_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  CodeEmitterUtils.$s$fEqAttr_$s$fEqMap_$c/= -}
6b5b98dbdabc153b544122d9608d979d
  $s$fEqAttr_$s$fEqMap_$c/= ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ [GHC.Types.Char]
                      @ [GHC.Base.String]
                      GHC.Classes.$fEq[]_$s$fEq[]1
                      GHC.Classes.$fEq[]_$s$fEq[]2
                      x
                      y)) -}
f5e60d562a2fa95b0527f085d86e9633
  $s$fEqIntentAttr ::
    GHC.Classes.Eq
      (Language.Fortran.IntentAttr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.IntentAttr
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqIntentAttr_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fEqAttr1)
                  CodeEmitterUtils.$s$fEqIntentAttr1 -}
120dc712eca1d7d96e9958962caa146a
  $s$fEqIntentAttr1 ::
    Language.Fortran.IntentAttr
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.IntentAttr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.Fortran.IntentAttr
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                   (b :: Language.Fortran.IntentAttr
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case a of wild {
                   Language.Fortran.In a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Fortran.In b1
                        -> case CodeEmitterUtils.$s$fEqIntentAttr2 a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Language.Fortran.Out a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Fortran.Out b1
                        -> case CodeEmitterUtils.$s$fEqIntentAttr2 a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Language.Fortran.InOut a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Fortran.InOut b1
                        -> case CodeEmitterUtils.$s$fEqIntentAttr2 a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
ba421863979e93e8f34dc9823068a6aa
  $s$fEqIntentAttr2 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Unfolding: (Data.Map.Base.$fEqMap_$c==
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Classes.$fEq[]_$s$fEq[]2) -}
272ffdc6eb2c0821a909c06abff0a885
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fEqAttr1)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fEqAttr1) -}
49f8ba8064e232d74bc78f4fbec11ee2
  $stypeRep#10 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
3d0c3f3b64179cab306c519528a759f0
  $stypeRep#11 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
16d4712dcbcfead8cd0066cc6ca200ca
  $stypeRep#14 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#15
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tc[]
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
06c5e6152490ddfcade4be8b2342afbd
  $stypeRep#15 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17730107610217102821##
                   9866972337190828755##) -}
6c2f17dac5a6e307ffebcc081ea87fd4
  $stypeRep#18 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
3c9f515d92c7ce852946cac006431a6e
  $stypeRep#19 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.$stypeRep#10
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
6d73d558dc44f0be29227da66c654b51
  $stypeRep#2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
dd37b1c2a72417e67c39aaad1c217e10
  $stypeRep#22 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#2 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
622dbe9c3f56e32dd31ed0f438a6c288
  $stypeRep#23 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.$stypeRep#18
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
4dae4bea0e7ae03fd65209bfc76b027e
  $stypeRep#26 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
9927083d67da1e624b6b51ea38aaa32c
  $stypeRep#29 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#22 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#30
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
f8a2299d486ba653f26415bb692c514a
  $stypeRep#3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17306070887558246498##
                   16032333906417739553##) -}
1eee653ca6c4b64cde468072b8a1dde5
  $stypeRep#30 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.$stypeRep#26
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
2e80be4aa47e580bba25d273ae230de0
  $stypeRep#33 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#34
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcAttr
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
dab4a4a6510fe7eb9946df95608f0c70
  $stypeRep#34 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   9037790331881822576##
                   12484905115659523528##) -}
2c2e082c2eb2ea5e216ec0f378b63830
  $stypeRep#37 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#33 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#38
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
06dc9a1a24fad9d660c3037165cf12cc
  $stypeRep#38 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.$stypeRep#39
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
34d2de82c4e0ec1bac1668fa2c4f973d
  $stypeRep#39 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.$stypeRep#_types1 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.$stypeRep#_types of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   CodeEmitterUtils.$stypeRep#_types } } } } } }) -}
cb4b03e161207e60cfc00f1246d3a668
  $stypeRep#40 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.$stypeRep#41
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
30bdfcf34bf315a5975414da596b1e0b
  $stypeRep#41 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#_types1
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
215d17e2ee4ca8ff180161c84def5c07
  $stypeRep#42 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
a4eb5f5c35a3af8d942a969fb5260e02
  $stypeRep#45 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#46
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcDecl
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
d2e4cb985e01dae6d5d37fa391b18665
  $stypeRep#46 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1333565254055508066##
                   2348454038217729491##) -}
d183905e5490c71804e72ba05387b86a
  $stypeRep#49 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#50
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
ccaeff7e5042eb67aa516030dd6348f1
  $stypeRep#50 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6882220124880764793##
                   15271875958298145102##) -}
376656317a71d4d2fbb72e4821ab5bb9
  $stypeRep#53 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#54
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcIntentAttr
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
ca9cc091107c4947c2ab0438e008e31a
  $stypeRep#54 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   7948506444303774333##
                   4885414271858797651##) -}
c80b8948887321509d99b83ad0477caf
  $stypeRep#6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcType
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
4b45ed021ee34377b1a15721b79bb629
  $stypeRep#7 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1220767263731147235##
                   9614101381113798831##) -}
382ac4ea503bbef77439048c2e5eb1fb
  $stypeRep#_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.$stypeRep#_types1
                   CodeEmitterUtils.$stypeRep#40) -}
8e5144d22d1c674ed8f3b006b0a043ea
  $stypeRep#_types1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.$stypeRep#42
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
299624ff27c0ebfa7c3d6b6ce8fbabea
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CodeEmitterUtils.$trModule2
                   CodeEmitterUtils.$trModule1) -}
30a863e18977b904b72271a755806e5a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CodeEmitterUtils"#) -}
8e3552c8de09a0fad921c9055f900a29
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
863739e52f25e4ca61b87bb0c9a88a15
  $wadaptForReadScalarDecls ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> (# [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Decl LanguageFortranTools.Anno],
          Language.Fortran.Fortran LanguageFortranTools.Anno,
          [Language.Fortran.VarName LanguageFortranTools.Anno] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: [Language.Fortran.VarName
                            LanguageFortranTools.Anno])
                   (ww :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (ww1 :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (ww2 :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                 (# let {
                      z :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                      = CodeEmitterUtils.adaptForReadScalarDecls_go1 ww
                    } in
                    letrec {
                      go1 :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                             -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds12 :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                        case ds12 of wild {
                          [] -> z
                          : y ys
                          -> case CodeEmitterUtils.$wgetDeclRank y of ww3 {
                               DEFAULT
                               -> GHC.Types.:
                                    @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                    y
                                    (go1 ys)
                               0# -> go1 ys } }
                    } in
                    go1 ww,
                    ww1,
                    let {
                      z :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                      = CodeEmitterUtils.adaptForReadScalarDecls_go ww2
                    } in
                    letrec {
                      go1 :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                             -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds12 :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                        case ds12 of wild {
                          [] -> z
                          : y ys
                          -> case CodeEmitterUtils.$wgetDeclRank y of ww3 {
                               DEFAULT
                               -> GHC.Types.:
                                    @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                    y
                                    (go1 ys)
                               0# -> go1 ys } }
                    } in
                    go1 ww2,
                    LanguageFortranTools.extractPriorToFor1, w #)) -}
17e51027d5101ffa4b55b4a1cb639985
  $waddIntent ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> (# Language.Fortran.Attr LanguageFortranTools.Anno,
          [Language.Fortran.Attr LanguageFortranTools.Anno] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
dc840671d9e85723240b6f848d0c81e3
  $waddNewDimensionClaus ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> (# Language.Fortran.Attr LanguageFortranTools.Anno,
          [Language.Fortran.Attr LanguageFortranTools.Anno] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Inline: [0] -}
4afc1a1fa39430952af7cab6dd21409c
  $wextractOriginalCode_Offset ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Base.String]
    -> Language.Fortran.SrcSpan
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(U)><L,1*U(U)><S,U><L,1*U(1*U(A,1*U(U),A),1*U(A,1*U(U),A))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: [GHC.Base.String])
                   (w1 :: Language.Fortran.SrcSpan) ->
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 0#) of wild {
                   GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                   GHC.Types.True
                   -> case w1 of wild1 { (,) ds12 ds13 ->
                      case ds12 of wild2 { Language.Fortran.SrcLoc f lineStart columnStart ->
                      case ds13 of wild3 { Language.Fortran.SrcLoc ds14 lineEnd columnEnd ->
                      case lineStart of wild4 { GHC.Types.I# x ->
                      case ww of wild5 { GHC.Types.I# y ->
                      case lineEnd of wild6 { GHC.Types.I# x1 ->
                      case ww1 of wild7 { GHC.Types.I# y1 ->
                      let {
                        x2 :: GHC.Prim.Int# = GHC.Prim.-# (GHC.Prim.+# x y) 1#
                      } in
                      let {
                        y2 :: GHC.Prim.Int# = GHC.Prim.+# x1 y1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# x2 0#) of wild8 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# 0# y2) of wild9 {
                             GHC.Types.False
                             -> Data.OldList.unlines (GHC.Types.[] @ GHC.Base.String)
                             GHC.Types.True
                             -> Data.OldList.unlines
                                  (CodeEmitterUtils.$wunsafeDrop
                                     @ GHC.Base.String
                                     x2
                                     (GHC.List.$wunsafeTake @ [GHC.Types.Char] y2 w)) }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# 0# y2) of wild9 {
                             GHC.Types.False -> CodeEmitterUtils.extractOriginalCode2
                             GHC.Types.True
                             -> Data.OldList.unlines
                                  (GHC.List.$wunsafeTake
                                     @ [GHC.Types.Char]
                                     y2
                                     w) } } } } } } } } } } }) -}
4e9033758c5a8514b53c26c87ce683f8
  $wgetDeclRank ::
    Language.Fortran.Decl LanguageFortranTools.Anno -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Language.Fortran.Decl
                           LanguageFortranTools.Anno) ->
                 let {
                   extractedDimensions :: [Language.Fortran.Attr
                                             LanguageFortranTools.Anno]
                   = Data.Generics.Schemes.everything
                       @ [Language.Fortran.Attr LanguageFortranTools.Anno]
                       (GHC.Base.++ @ (Language.Fortran.Attr LanguageFortranTools.Anno))
                       CodeEmitterUtils.adaptForReadScalarDecls1
                       @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                       CodeEmitterUtils.$s$fDataDecl
                       w
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fEqAttr
                        extractedDimensions
                        (GHC.Types.[]
                           @ (Language.Fortran.Attr LanguageFortranTools.Anno)) of wild {
                   GHC.Types.False
                   -> case extractedDimensions of wild1 {
                        [] -> case GHC.List.badHead ret_ty GHC.Prim.Int# of {}
                        : x ds12
                        -> case x of wild2 {
                             DEFAULT -> 0#
                             Language.Fortran.Dimension ds13 exprs
                             -> GHC.List.$wlenAcc
                                  @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno)
                                  exprs
                                  0# } }
                   GHC.Types.True -> 0# }) -}
4987f0f951fae368b7e073a0913ad4f7
  $winsertDecl ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> (# LanguageFortranTools.Anno,
          Language.Fortran.Decl LanguageFortranTools.Anno,
          Language.Fortran.Decl LanguageFortranTools.Anno #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
f3c66b25a5a7791c62da86aab4ea2c50
  $wsplitOnChar' ::
    GHC.Types.Char
    -> GHC.Base.String
    -> GHC.Base.String
    -> (# GHC.Base.String, [GHC.Base.String] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Char)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String) ->
                 case w2 of wild {
                   [] -> (# w1, GHC.Types.[] @ GHC.Base.String #)
                   : x xs
                   -> case w of wild1 { GHC.Types.C# x1 ->
                      case x of wild2 { GHC.Types.C# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqChar# x1 y) of wild3 {
                        GHC.Types.False
                        -> CodeEmitterUtils.getModuleName_$s$wsplitOnChar'
                             xs
                             (GHC.Base.++
                                @ GHC.Types.Char
                                w1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   wild2
                                   (GHC.Types.[] @ GHC.Types.Char)))
                             x1
                        GHC.Types.True
                        -> (# w1,
                              case CodeEmitterUtils.getModuleName_$s$wsplitOnChar'
                                     xs
                                     (GHC.Types.[] @ GHC.Types.Char)
                                     x1 of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ GHC.Base.String ww1 ww2 } #) } } } }) -}
b7fc12bc4c3fc7b97e444d8585ab2cf7
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
32eeb7238c1c2d1b6fbb6ca51eafc592
  type KernelArgsIndexMap =
    Data.Map.Base.Map
      (Language.Fortran.VarName LanguageFortranTools.Anno) GHC.Types.Int
de398df24fad9f9c9e9cb768903e9ddb
  adaptForReadScalarDecls ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> ([Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno])
    -> ([Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno],
        Language.Fortran.Fortran LanguageFortranTools.Anno,
        [Language.Fortran.VarName LanguageFortranTools.Anno])
  {- Arity: 2, Strictness: <L,U><S,1*U(U,U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w1 :: ([Language.Fortran.Decl LanguageFortranTools.Anno],
                           [Language.Fortran.Decl LanguageFortranTools.Anno],
                           [Language.Fortran.Decl LanguageFortranTools.Anno])) ->
                 case w1 of ww { (,,) ww1 ww2 ww3 ->
                 case CodeEmitterUtils.$wadaptForReadScalarDecls
                        w
                        ww1
                        ww2
                        ww3 of ww4 { (#,,,,#) ww5 ww6 ww7 ww8 ww9 ->
                 (ww5, ww6, ww7, ww8, ww9) } }) -}
0e6c8a892b8cbf2baceb57acbc152ab9
  adaptForReadScalarDecls1 ::
    Data.Data.Data a =>
    a -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 2,
     Strictness: <S(C(S(SLLLL))LLLLLLLLLLLLLL),1*U(1*C1(U(U,U,A,A,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ a ($dData :: Data.Data.Data a) (eta :: a) ->
                 case (Data.Data.$p1Data @ a $dData)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ a) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds12 ds13 ds14 ->
                 case CodeEmitterUtils.adaptForReadScalarDecls2 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds15 ds16 ds17 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt dt2) of wild2 {
                   GHC.Types.False
                   -> GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                        GHC.Types.False
                        -> GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                        GHC.Types.True
                        -> CodeEmitterUtils.extractDimensionAttr
                             eta
                               `cast`
                             (UnsafeCo representational a (Language.Fortran.Attr
                                                             LanguageFortranTools.Anno)) } } } }) -}
94d7566a35e360fc50aa9beeb5061163
  adaptForReadScalarDecls2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#34
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.adaptForReadScalarDecls_types of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#34
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Language.Fortran.$tcAttr
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   CodeEmitterUtils.adaptForReadScalarDecls_types } } } }) -}
0f89f8ff94b66b61bcf6528cec099ab4
  adaptForReadScalarDecls3 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.adaptForReadScalarDecls_types2 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.adaptForReadScalarDecls_types1 of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   CodeEmitterUtils.adaptForReadScalarDecls_types1 } } } } } }) -}
c8bc338c6e6070d1b3af43b5058bd5fc
  adaptForReadScalarDecls4 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.adaptForReadScalarDecls5
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
65966d4cc0c1e55759c2dc7ea2e8eded
  adaptForReadScalarDecls5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.adaptForReadScalarDecls_types2
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
b288f71a181f030c92f4d43371079bdf
  adaptForReadScalarDecls6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
eaf9452c18e2e86704791bffcf094cfc
  adaptForReadScalarDecls_go ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 1, Strictness: <S,1*U> -}
aeeae5bd7cc15c28b415c6bd72ff29c6
  adaptForReadScalarDecls_go1 ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 1, Strictness: <S,1*U> -}
d441c6da2349e91706257544cba35f62
  adaptForReadScalarDecls_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.adaptForReadScalarDecls3
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
55e3fea7610bd64e6014d4366804a724
  adaptForReadScalarDecls_types1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.adaptForReadScalarDecls_types2
                   CodeEmitterUtils.adaptForReadScalarDecls4) -}
7992efee941632d93dd5491bcee71aff
  adaptForReadScalarDecls_types2 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.adaptForReadScalarDecls6
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
aa30ca3861ff7a6812ea4caa1c2f7d4f
  addDimension ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
fa89cde9e5fe9320df865e990ecee1b0
  addIntent ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                   (w1 :: [Language.Fortran.Attr LanguageFortranTools.Anno]) ->
                 case CodeEmitterUtils.$waddIntent w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   ww1
                   ww2 }) -}
27b1fcf924a90d4e5c857bcf3c128a59
  addNewDimensionClaus ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (w2 :: [Language.Fortran.Attr LanguageFortranTools.Anno]) ->
                 case CodeEmitterUtils.$waddNewDimensionClaus
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   ww1
                   ww2 }) -}
fa96c7a52065e60afb4139fc3d308818
  anyChildGenerated ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ast :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 Data.Generics.Schemes.everything
                   @ GHC.Types.Bool
                   GHC.Classes.||
                   CodeEmitterUtils.anyChildGenerated1
                   @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   CodeEmitterUtils.$s$fDataFortran
                   ast) -}
d65238d5e3b4b0a1c1d3f849e7fdf239
  anyChildGenerated1 :: Data.Data.Data a => a -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(C(S(SLLLL))LLLLLLLLLLLLLL),1*U(1*C1(U(U,U,A,A,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ a ($dData :: Data.Data.Data a) (eta :: a) ->
                 case (Data.Data.$p1Data @ a $dData)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ a) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds12 ds13 ds14 ->
                 case CodeEmitterUtils.anyChildGenerated2 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds15 ds16 ds17 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt dt2) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> CodeEmitterUtils.isGenerated
                             eta
                               `cast`
                             (UnsafeCo representational a (Language.Fortran.Fortran
                                                             LanguageFortranTools.Anno)) } } } }) -}
58ed3ce271bbc673258b1454f7f6e1c3
  anyChildGenerated2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#49 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.anyChildGenerated3
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
49c94b53ea16b47960028fdda8980bd1
  anyChildGenerated3 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.anyChildGenerated4
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
5d29f9622ecef7ed9aab452cb7a8deac
  anyChildGenerated4 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.anyChildGenerated_types1 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.anyChildGenerated_types of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   CodeEmitterUtils.anyChildGenerated_types } } } } } }) -}
3a0c66f06fcfe4007e1b1f5dfcb9daa1
  anyChildGenerated5 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.anyChildGenerated6
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
ce61c5fe7f65bc1da25e07f3cf4e2385
  anyChildGenerated6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.anyChildGenerated_types1
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
ffc3ef6fed941f392e916a583aa648fb
  anyChildGenerated7 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
38925b097232d3d41d2a371df959115f
  anyChildGenerated_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.anyChildGenerated_types1
                   CodeEmitterUtils.anyChildGenerated5) -}
4d0a656c8adf9c507fc3b6f2dedd211e
  anyChildGenerated_types1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.anyChildGenerated7
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
b55cdf39848d20e45f2c3f0980955f80
  appendDimension ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Attr LanguageFortranTools.Anno
    -> Language.Fortran.Attr LanguageFortranTools.Anno
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (start :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (end :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (ds12 :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case ds12 of wild {
                   DEFAULT -> wild
                   Language.Fortran.Dimension anno lst
                   -> Language.Fortran.Dimension
                        @ LanguageFortranTools.Anno
                        anno
                        (GHC.Base.augment
                           @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno)
                           (\ @ b
                              (c :: (Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno)
                                    -> b -> b)[OneShot]
                              (n :: b)[OneShot] ->
                            GHC.Base.foldr
                              @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno)
                              @ b
                              c
                              n
                              lst)
                           (GHC.Types.:
                              @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno)
                              (start, end)
                              (GHC.Types.[]
                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                    Language.Fortran.Expr LanguageFortranTools.Anno)))) }) -}
c6f768e57cb05f95fa9de09023206a76
  applyIntent ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><L,U> -}
6081e081debe60b12bb21f44123d333c
  chunk_size :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m5,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.chunk_size1) -}
ff7e6a952bbf786744997fd4b7a65140
  chunk_size1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.chunk_size2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
30706fdc7d64ffba7e11525517c25d7d
  chunk_size2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.chunk_size_varname,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
fd9029697c1f3e66fc3a9fc14cfd08a0
  chunk_size_varname ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.chunk_size_varname1) -}
b0d3146034412eed439c22c9226255d0
  chunk_size_varname1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chunk_size"#) -}
5bfb790661e0d0d18efd8855b4cce735
  collectDecls ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (previousDecls :: [Language.Fortran.Decl
                                        LanguageFortranTools.Anno])
                   (currentDecl :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.mergeDeclWithPrevious_recurse
                   previousDecls
                   currentDecl) -}
d287e8beb57222f02689ac2f06cccc97
  constructDeclTree ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds12 :: [Language.Fortran.Decl
                               LanguageFortranTools.Anno]) ->
                 case ds12 of wild {
                   [] -> CodeEmitterUtils.constructDeclTree1
                   : decl ds13
                   -> case ds13 of wild1 {
                        [] -> decl
                        : ipv ipv1
                        -> Language.Fortran.DSeq
                             @ LanguageFortranTools.Anno
                             (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                             decl
                             (CodeEmitterUtils.constructDeclTree_$sconstructDeclTree
                                ipv
                                ipv1) } }) -}
572ba8e81fdf383c8e79b06848db313d
  constructDeclTree1 ::
    Language.Fortran.Decl LanguageFortranTools.Anno
  {- Strictness: m14,
     Unfolding: (Language.Fortran.NullDecl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan) -}
9b3b8cb048dcb58a70b8e775f59075ac
  constructDeclTree_$sconstructDeclTree ::
    Language.Fortran.Decl
      (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.Decl
          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U> -}
163d8d5574686f14d40c5e1f21bc4cd9
  containsParameterAttr ::
    Language.Fortran.Decl LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (decl :: Language.Fortran.Decl
                              LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.containsParameterAttr_go
                   (Language.Fortran.$fDataDecl_$cgmapQ
                      @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                      CodeEmitterUtils.$s$fDataDecl_$s$fDataMap
                      @ GHC.Types.Bool
                      CodeEmitterUtils.containsParameterAttr1
                      decl)
                   GHC.Types.False) -}
03292f5ad3e179fd814d3283a1218ca3
  containsParameterAttr1 :: Data.Data.Data d => d -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(C(S(SLLLL))LLLLLLLLLLLLLL),1*U(1*C1(U(U,U,A,A,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ d ($dData :: Data.Data.Data d) (eta :: d) ->
                 case (Data.Data.$p1Data @ d $dData)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ d) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds12 ds13 ds14 ->
                 case CodeEmitterUtils.containsParameterAttr2 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds15 ds16 ds17 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt dt2) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> CodeEmitterUtils.paramCheck_type
                             eta
                               `cast`
                             (UnsafeCo representational d (Language.Fortran.Type
                                                             LanguageFortranTools.Anno)) } } } }) -}
f6aa47b1762b3678b31e02bae957077a
  containsParameterAttr2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.containsParameterAttr_types of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#7
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Language.Fortran.$tcType
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   CodeEmitterUtils.containsParameterAttr_types } } } }) -}
1ea1f4827fa4e794f9277f35dda01ac1
  containsParameterAttr3 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.containsParameterAttr_types2 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.containsParameterAttr_types1 of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   CodeEmitterUtils.containsParameterAttr_types1 } } } } } }) -}
a72379cfcf5491ad486149affdf2c054
  containsParameterAttr4 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.containsParameterAttr5
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
6b03b4a462827023fa892aa04fb2495e
  containsParameterAttr5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.containsParameterAttr_types2
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
7a36295328237e3c406f65ef192682f2
  containsParameterAttr6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
1f31a51fa8d2c36f509cca86b674d8a4
  containsParameterAttr_go ::
    [GHC.Types.Bool] -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
e2784a4381618c8594dd6819eed88f83
  containsParameterAttr_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.containsParameterAttr3
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
41e3a7b201cbe97eadbf6275d6f9b849
  containsParameterAttr_types1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.containsParameterAttr_types2
                   CodeEmitterUtils.containsParameterAttr4) -}
730c6aaed58764303b9731f7c4c5cde0
  containsParameterAttr_types2 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.containsParameterAttr6
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
004d1a83f0a22a1d5dd2203ed8c6760b
  convertScalarToOneDimArray ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (decl :: Language.Fortran.Decl
                              LanguageFortranTools.Anno) ->
                 case CodeEmitterUtils.$wgetDeclRank decl of ww {
                   DEFAULT -> decl
                   0#
                   -> CodeEmitterUtils.addDimension
                        decl
                        CodeEmitterUtils.convertScalarToOneDimArray3
                        CodeEmitterUtils.convertScalarToOneDimArray1 }) -}
e7eaaeabcab2851b2b4b0f5315e274fd
  convertScalarToOneDimArray1 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.convertScalarToOneDimArray2) -}
0a0763328e342ed742718c2d0aaa7362
  convertScalarToOneDimArray2 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        1#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
e4441a81939a9d7b6352425e17052f71
  convertScalarToOneDimArray3 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m9,
     Unfolding: (Language.Fortran.NullExpr
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan) -}
28a656dbd3d23d966720055f03f588a1
  declareScalarPointer_decl ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (decl :: Language.Fortran.Decl
                              LanguageFortranTools.Anno) ->
                 let {
                   varname :: Language.Fortran.VarName LanguageFortranTools.Anno
                   = case LanguageFortranTools.$wextractAssigneeFromDecl
                            decl of ww { (#,#) ww1 ww2 ->
                     Language.Fortran.VarName @ LanguageFortranTools.Anno ww1 ww2 }
                 } in
                 LanguageFortranTools.replaceAllOccurences_varname
                   @ Language.Fortran.Decl
                   CodeEmitterUtils.$s$fDataDecl
                   (CodeEmitterUtils.addDimension
                      decl
                      CodeEmitterUtils.convertScalarToOneDimArray3
                      CodeEmitterUtils.convertScalarToOneDimArray1)
                   varname
                   (case varname of wild { Language.Fortran.VarName ds12 str ->
                    Language.Fortran.VarName
                      @ LanguageFortranTools.Anno
                      (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                      (GHC.Base.++
                         @ GHC.Types.Char
                         str
                         CodeEmitterUtils.declareScalarPointer_decl1) })) -}
8bd903d5c68726fd1f746ae083c93ac5
  declareScalarPointer_decl1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_ptr"#) -}
437ad53a0bf52d305b126d9fa710b5a5
  emitDeclStr ::
    [GHC.Types.Char] -> Language.Fortran.Variable -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (typestr :: [GHC.Types.Char])
                   (varstr :: Language.Fortran.Variable) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   typestr
                   (GHC.CString.unpackAppendCString#
                      " :: "#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (LanguageFortranTools.outputExprFormatting
                            (Language.Fortran.Var
                               @ LanguageFortranTools.Anno
                               (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                               LanguageFortranTools.nullSrcSpan
                               (GHC.Types.:
                                  @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                     [Language.Fortran.Expr LanguageFortranTools.Anno])
                                  (Language.Fortran.VarName
                                     @ LanguageFortranTools.Anno
                                     (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                                     varstr,
                                   GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                  (GHC.Types.[]
                                     @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                        [Language.Fortran.Expr LanguageFortranTools.Anno])))))
                         CodeEmitterUtils.emitDeclStr1))) -}
1d6d80db35347d5bad8a6ef8df8a91b0
  emitDeclStr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
5e51623c06e01a7934c63c29decab351
  extractDeclaration_varname ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 Data.Generics.Schemes.everything
                   @ [Language.Fortran.Decl LanguageFortranTools.Anno]
                   (GHC.Base.++ @ (Language.Fortran.Decl LanguageFortranTools.Anno))
                   (\ @ a ($dData :: Data.Data.Data a) (eta :: a)[OneShot] ->
                    case (Data.Data.$p1Data @ a $dData)
                           `cast`
                         (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                           (GHC.Prim.proxy#
                              @ *
                              @ a) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds12 ds13 ds14 ->
                    case CodeEmitterUtils.extractDeclaration_varname1 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds15 ds16 ds17 ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.eqWord# dt dt2) of wild2 {
                      GHC.Types.False
                      -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                      GHC.Types.True
                      -> case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                           GHC.Types.False
                           -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                           GHC.Types.True
                           -> CodeEmitterUtils.extractDeclaration_varname'
                                varname
                                eta
                                  `cast`
                                (UnsafeCo representational a (Language.Fortran.Decl
                                                                LanguageFortranTools.Anno)) } } } })
                   @ (Language.Fortran.Program LanguageFortranTools.Anno)
                   CodeEmitterUtils.$s$fData[]
                   program) -}
e6edfff8770568c93ecdedf138477163
  extractDeclaration_varname' ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (ds12 :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 case ds12 of wild {
                   DEFAULT
                   -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   Language.Fortran.Decl anno src lst typ
                   -> let {
                        lvl112 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                        = GHC.Types.:
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                            varname
                            (GHC.Types.[]
                               @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                      } in
                      letrec {
                        $sgo2 :: [(Language.Fortran.Expr
                                     (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   Language.Fortran.Expr
                                     (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   GHC.Base.Maybe GHC.Types.Int)]
                                 -> GHC.Types.Bool
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [(Language.Fortran.Expr
                                       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     Language.Fortran.Expr
                                       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     GHC.Base.Maybe GHC.Types.Int)]) ->
                          case sc of wild1 { [] -> GHC.Types.True : y ys -> $sgo2 ys }
                      } in
                      letrec {
                        go1 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno,
                                 GHC.Base.Maybe GHC.Types.Int)]
                               -> GHC.Types.Bool -> GHC.Types.Bool
                          {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                        = \ (ds13 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)])
                            (eta :: GHC.Types.Bool) ->
                          case ds13 of wild1 {
                            [] -> eta
                            : y ys
                            -> case eta of wild2 {
                                 GHC.Types.False
                                 -> case y of wild3 { (,,) expr ds14 ds15 ->
                                    go1 ys (LanguageFortranTools.usesVarName_list lvl112 expr) }
                                 GHC.Types.True -> $sgo2 ys } }
                      } in
                      let {
                        $sgo3 :: [(Language.Fortran.Expr
                                     (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   Language.Fortran.Expr
                                     (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   GHC.Base.Maybe GHC.Types.Int)]
                                 -> GHC.Types.Bool
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [(Language.Fortran.Expr
                                       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     Language.Fortran.Expr
                                       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     GHC.Base.Maybe GHC.Types.Int)]) ->
                          case sc of wild1 {
                            [] -> GHC.Types.False
                            : y ys
                            -> case y of wild2 { (,,) expr ds13 ds14 ->
                               go1 ys (LanguageFortranTools.usesVarName_list lvl112 expr) } }
                      } in
                      case $sgo3 lst of wild1 {
                        GHC.Types.False
                        -> letrec {
                             $sgo4 :: [(Language.Fortran.Expr
                                          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                        Language.Fortran.Expr
                                          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                        GHC.Base.Maybe GHC.Types.Int)]
                                      -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (sc :: [(Language.Fortran.Expr
                                            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                          Language.Fortran.Expr
                                            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                          GHC.Base.Maybe GHC.Types.Int)]) ->
                               case sc of wild2 { [] -> GHC.Types.True : y ys -> $sgo4 ys }
                           } in
                           letrec {
                             go2 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                      Language.Fortran.Expr LanguageFortranTools.Anno,
                                      GHC.Base.Maybe GHC.Types.Int)]
                                    -> GHC.Types.Bool -> GHC.Types.Bool
                               {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                             = \ (ds13 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                            Language.Fortran.Expr LanguageFortranTools.Anno,
                                            GHC.Base.Maybe GHC.Types.Int)])
                                 (eta :: GHC.Types.Bool) ->
                               case ds13 of wild2 {
                                 [] -> eta
                                 : y ys
                                 -> case eta of wild3 {
                                      GHC.Types.False
                                      -> case y of wild4 { (,,) ds14 expr ds15 ->
                                         go2
                                           ys
                                           (LanguageFortranTools.usesVarName_list lvl112 expr) }
                                      GHC.Types.True -> $sgo4 ys } }
                           } in
                           let {
                             $sgo5 :: [(Language.Fortran.Expr
                                          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                        Language.Fortran.Expr
                                          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                        GHC.Base.Maybe GHC.Types.Int)]
                                      -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (sc :: [(Language.Fortran.Expr
                                            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                          Language.Fortran.Expr
                                            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                          GHC.Base.Maybe GHC.Types.Int)]) ->
                               case sc of wild2 {
                                 [] -> GHC.Types.False
                                 : y ys
                                 -> case y of wild3 { (,,) ds13 expr ds14 ->
                                    go2 ys (LanguageFortranTools.usesVarName_list lvl112 expr) } }
                           } in
                           case $sgo5 lst of wild2 {
                             GHC.Types.False
                             -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                             GHC.Types.True
                             -> GHC.Types.:
                                  @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                  wild
                                  (GHC.Types.[]
                                     @ (Language.Fortran.Decl LanguageFortranTools.Anno)) }
                        GHC.Types.True
                        -> GHC.Types.:
                             @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                             wild
                             (GHC.Types.[]
                                @ (Language.Fortran.Decl LanguageFortranTools.Anno)) } }) -}
3ec608228325b86319e19b9e92f6813f
  extractDeclaration_varname1 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#45 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.extractDeclaration_varname2
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
6835c71ce4c5744179410727b9314a8e
  extractDeclaration_varname2 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.extractDeclaration_varname3
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
97e2ef324bda67fd3eb36463fafe709a
  extractDeclaration_varname3 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.extractDeclaration_varname_types1 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.extractDeclaration_varname_types of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   CodeEmitterUtils.extractDeclaration_varname_types } } } } } }) -}
f47f7d47dc684b3128f3cead0bae643b
  extractDeclaration_varname4 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.extractDeclaration_varname5
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
24f6becea8506053701d0bd9658b73a8
  extractDeclaration_varname5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.extractDeclaration_varname_types1
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
6ea0bbda5e6159974fb5b10b1718b9c6
  extractDeclaration_varname6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
d8a716dc7e654d648364d6576baa477c
  extractDeclaration_varnameSrcSpan ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> [Language.Fortran.SrcSpan]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (ds12 :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 case ds12 of wild {
                   DEFAULT -> GHC.Types.[] @ Language.Fortran.SrcSpan
                   Language.Fortran.Decl ds13 src lst ds14
                   -> let {
                        lvl112 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                        = GHC.Types.:
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                            varname
                            (GHC.Types.[]
                               @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                      } in
                      letrec {
                        $sgo2 :: [(Language.Fortran.Expr
                                     (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   Language.Fortran.Expr
                                     (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   GHC.Base.Maybe GHC.Types.Int)]
                                 -> GHC.Types.Bool
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [(Language.Fortran.Expr
                                       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     Language.Fortran.Expr
                                       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     GHC.Base.Maybe GHC.Types.Int)]) ->
                          case sc of wild1 { [] -> GHC.Types.True : y ys -> $sgo2 ys }
                      } in
                      letrec {
                        go1 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno,
                                 GHC.Base.Maybe GHC.Types.Int)]
                               -> GHC.Types.Bool -> GHC.Types.Bool
                          {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                        = \ (ds15 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)])
                            (eta :: GHC.Types.Bool) ->
                          case ds15 of wild1 {
                            [] -> eta
                            : y ys
                            -> case eta of wild2 {
                                 GHC.Types.False
                                 -> case y of wild3 { (,,) expr ds16 ds17 ->
                                    go1 ys (LanguageFortranTools.usesVarName_list lvl112 expr) }
                                 GHC.Types.True -> $sgo2 ys } }
                      } in
                      let {
                        $sgo3 :: [(Language.Fortran.Expr
                                     (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   Language.Fortran.Expr
                                     (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   GHC.Base.Maybe GHC.Types.Int)]
                                 -> GHC.Types.Bool
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [(Language.Fortran.Expr
                                       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     Language.Fortran.Expr
                                       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     GHC.Base.Maybe GHC.Types.Int)]) ->
                          case sc of wild1 {
                            [] -> GHC.Types.False
                            : y ys
                            -> case y of wild2 { (,,) expr ds15 ds16 ->
                               go1 ys (LanguageFortranTools.usesVarName_list lvl112 expr) } }
                      } in
                      case $sgo3 lst of wild1 {
                        GHC.Types.False
                        -> letrec {
                             $sgo4 :: [(Language.Fortran.Expr
                                          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                        Language.Fortran.Expr
                                          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                        GHC.Base.Maybe GHC.Types.Int)]
                                      -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (sc :: [(Language.Fortran.Expr
                                            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                          Language.Fortran.Expr
                                            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                          GHC.Base.Maybe GHC.Types.Int)]) ->
                               case sc of wild2 { [] -> GHC.Types.True : y ys -> $sgo4 ys }
                           } in
                           letrec {
                             go2 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                      Language.Fortran.Expr LanguageFortranTools.Anno,
                                      GHC.Base.Maybe GHC.Types.Int)]
                                    -> GHC.Types.Bool -> GHC.Types.Bool
                               {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                             = \ (ds15 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                            Language.Fortran.Expr LanguageFortranTools.Anno,
                                            GHC.Base.Maybe GHC.Types.Int)])
                                 (eta :: GHC.Types.Bool) ->
                               case ds15 of wild2 {
                                 [] -> eta
                                 : y ys
                                 -> case eta of wild3 {
                                      GHC.Types.False
                                      -> case y of wild4 { (,,) ds16 expr ds17 ->
                                         go2
                                           ys
                                           (LanguageFortranTools.usesVarName_list lvl112 expr) }
                                      GHC.Types.True -> $sgo4 ys } }
                           } in
                           let {
                             $sgo5 :: [(Language.Fortran.Expr
                                          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                        Language.Fortran.Expr
                                          (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                        GHC.Base.Maybe GHC.Types.Int)]
                                      -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (sc :: [(Language.Fortran.Expr
                                            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                          Language.Fortran.Expr
                                            (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                          GHC.Base.Maybe GHC.Types.Int)]) ->
                               case sc of wild2 {
                                 [] -> GHC.Types.False
                                 : y ys
                                 -> case y of wild3 { (,,) ds15 expr ds16 ->
                                    go2 ys (LanguageFortranTools.usesVarName_list lvl112 expr) } }
                           } in
                           case $sgo5 lst of wild2 {
                             GHC.Types.False -> GHC.Types.[] @ Language.Fortran.SrcSpan
                             GHC.Types.True
                             -> GHC.Types.:
                                  @ Language.Fortran.SrcSpan
                                  src
                                  (GHC.Types.[] @ Language.Fortran.SrcSpan) }
                        GHC.Types.True
                        -> GHC.Types.:
                             @ Language.Fortran.SrcSpan
                             src
                             (GHC.Types.[] @ Language.Fortran.SrcSpan) } }) -}
b67c75467436c40aafb394e07d16946b
  extractDeclaration_varname_types ::
    [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.extractDeclaration_varname_types1
                   CodeEmitterUtils.extractDeclaration_varname4) -}
24c967a6078778ef3ff75eecdc5939c8
  extractDeclaration_varname_types1 ::
    [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.extractDeclaration_varname6
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
648b6f17762e0eb01bf6ecdc88062350
  extractDimensionAttr ::
    Language.Fortran.Attr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (attr :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case attr of wild {
                   DEFAULT
                   -> GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   Language.Fortran.Dimension ds12 ds13
                   -> GHC.Types.:
                        @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                        wild
                        (GHC.Types.[]
                           @ (Language.Fortran.Attr LanguageFortranTools.Anno)) }) -}
8a51a82120e8c5a66888f7f0b98202f0
  extractKernelArguments ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
  {- Arity: 1, Strictness: <S,1*U> -}
4fffa1d891ea746078291b940fcc92f6
  extractOriginalCode ::
    [GHC.Base.String] -> Language.Fortran.SrcSpan -> GHC.Base.String
  {- Arity: 2,
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: Language.Fortran.SrcSpan) ->
                 CodeEmitterUtils.$wextractOriginalCode_Offset
                   CodeEmitterUtils.extractOriginalCode1
                   CodeEmitterUtils.extractOriginalCode1
                   w
                   w1) -}
f082e6b9a354a17f31650ddf4c1997b7
  extractOriginalCode1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
931f5f95a1979e8b717baf72e3e8846e
  extractOriginalCode2 :: GHC.Base.String
  {- Unfolding: (Data.OldList.unlines
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
e21f9c801f2e6cf92bfdbdd1ff276b00
  extractOriginalCode_Offset ::
    (GHC.Types.Int, GHC.Types.Int)
    -> [GHC.Base.String] -> Language.Fortran.SrcSpan -> GHC.Base.String
  {- Arity: 3,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,U><L,1*U(1*U(A,1*U(U),A),1*U(A,1*U(U),A))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: [GHC.Base.String])
                   (w2 :: Language.Fortran.SrcSpan) ->
                 case w of ww { (,) ww1 ww2 ->
                 CodeEmitterUtils.$wextractOriginalCode_Offset ww1 ww2 w1 w2 }) -}
64bf49781a653e511b820f304dd0448b
  extractOriginalCode_Offset1 ::
    [GHC.Base.String] -> Language.Fortran.SrcSpan -> GHC.Base.String
  {- Arity: 2,
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: Language.Fortran.SrcSpan) ->
                 CodeEmitterUtils.$wextractOriginalCode_Offset
                   CodeEmitterUtils.extractOriginalCode1
                   CodeEmitterUtils.extractOriginalCode_Offset2
                   w
                   w1) -}
925f2163cbfc71ea66ee42867228dcbb
  extractOriginalCode_Offset2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
173c14323708aa3e831eefc2618fa89a
  extractintentAttrs ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> [Language.Fortran.IntentAttr LanguageFortranTools.Anno]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (intentAttr :: Language.Fortran.IntentAttr
                                    LanguageFortranTools.Anno) ->
                 GHC.Types.:
                   @ (Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                   intentAttr
                   (GHC.Types.[]
                      @ (Language.Fortran.IntentAttr LanguageFortranTools.Anno))) -}
ec53e769d54aea0ed10b0be28f5ab760
  generateGloablReductionArrayArgStr ::
    [GHC.Types.Char]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U(A,1*U)>,
     Unfolding: (\ (accum :: [GHC.Types.Char])
                   (item :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   accum
                   (GHC.CString.unpackAppendCString#
                      "\n"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         LanguageFortranTools.tabInc
                         (GHC.CString.unpackAppendCString#
                            "__global "#
                            (case item of wild { Language.Fortran.VarName ds12 str ->
                             str }))))) -}
bd1fe4e2f9c02f08002418b87d5c56f6
  generateGlobalReductionArray ::
    Language.Fortran.VarName p -> Language.Fortran.VarName p
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ p (w :: Language.Fortran.VarName p) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.VarName
                   @ p
                   ww1
                   (GHC.CString.unpackAppendCString#
                      "global_"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         ww2
                         CodeEmitterUtils.generateGlobalReductionArray1)) }) -}
09ec7f284e8f6890f527e444c4693548
  generateGlobalReductionArray1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_array"#) -}
9c7027bb67e0091189ab577f5376dd33
  generateLocalReductionArray ::
    Language.Fortran.VarName p -> Language.Fortran.VarName p
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ p (w :: Language.Fortran.VarName p) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.VarName
                   @ p
                   ww1
                   (GHC.CString.unpackAppendCString#
                      "local_"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         ww2
                         CodeEmitterUtils.generateGlobalReductionArray1)) }) -}
98ce132e4c432eb4af2a194baf0f8c91
  generateLocalReductionArrayArgStr ::
    [GHC.Types.Char]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U(A,1*U)>,
     Unfolding: (\ (accum :: [GHC.Types.Char])
                   (item :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   accum
                   (GHC.CString.unpackAppendCString#
                      "\n"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         LanguageFortranTools.tabInc
                         (GHC.CString.unpackAppendCString#
                            "__local "#
                            (case item of wild { Language.Fortran.VarName ds12 str ->
                             str }))))) -}
3089c04576291768bc10865525ba3b81
  generateLocalReductionVar ::
    Language.Fortran.VarName p -> Language.Fortran.VarName p
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ p (ds12 :: Language.Fortran.VarName p) ->
                 case ds12 of wild { Language.Fortran.VarName anno str ->
                 Language.Fortran.VarName
                   @ p
                   anno
                   (GHC.CString.unpackAppendCString# "local_"# str) }) -}
03ccc8ce40a64e2c82cf2a8f0c9366ba
  generatePtrScalarAssignment ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U(U,U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (var :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 Language.Fortran.Assg
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (LanguageFortranTools.generateVar var)
                   (Language.Fortran.Var
                      @ LanguageFortranTools.Anno
                      (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      (GHC.Types.:
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])
                         (CodeEmitterUtils.scalarPointerVarName var,
                          CodeEmitterUtils.generatePtrScalarAssignment1)
                         (GHC.Types.[]
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                               [Language.Fortran.Expr LanguageFortranTools.Anno]))))) -}
ddac51b790ac64c8753799c54286c7f5
  generatePtrScalarAssignment1 ::
    [Language.Fortran.Expr LanguageFortranTools.Anno]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                   CodeEmitterUtils.convertScalarToOneDimArray1
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
911add31d709e17496f7bbee951e4374
  generateReductionIterator ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.generateReductionIterator1) -}
74616b283177ab17373f1573cf283ff9
  generateReductionIterator1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "r_iter"#) -}
14faafc3f7927d6ff0d38f3fea1f967a
  getDeclRank ::
    Language.Fortran.Decl LanguageFortranTools.Anno -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 case CodeEmitterUtils.$wgetDeclRank w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
55a976eba62e9d767a7a60338f0c7b8d
  getDimensionExprs ::
    Language.Fortran.Attr LanguageFortranTools.Anno
    -> [(Language.Fortran.Expr LanguageFortranTools.Anno,
         Language.Fortran.Expr LanguageFortranTools.Anno)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds12 :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case ds12 of wild {
                   DEFAULT
                   -> GHC.Types.[]
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno)
                   Language.Fortran.Dimension ds13 exprs -> exprs }) -}
4e7d7930f47d3526d84dfe25649be974
  getFirstBlockSrc ::
    Language.Fortran.Block LanguageFortranTools.Anno
    -> [Language.Fortran.SrcSpan]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*U(U,U),A,A)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (codeSeg :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                 GHC.Types.:
                   @ Language.Fortran.SrcSpan
                   (Language.Fortran.$fSpanBlock_$csrcSpan
                      @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                      codeSeg)
                   (GHC.Types.[] @ Language.Fortran.SrcSpan)) -}
918749b7efba212e0830f938d1724982
  getFirstFortranSrc ::
    Language.Fortran.Block LanguageFortranTools.Anno
    -> [Language.Fortran.SrcSpan]
  {- Arity: 1, Strictness: <S,1*U(A,A,A,A,A,1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds12 :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                 case ds12 of wild { Language.Fortran.Block ds13 ds14 ds15 ds16 ds17 fortran ->
                 GHC.Types.:
                   @ Language.Fortran.SrcSpan
                   (Language.Fortran.$fSpanFortran_$csrcSpan
                      @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                      fortran)
                   (GHC.Types.[] @ Language.Fortran.SrcSpan) }) -}
d7d987943d2913337ce5caba5b88e19e
  getGlobalID ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (globalIdVar :: Language.Fortran.Expr
                                     LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getGlobalID3,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         globalIdVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
b1a75cc57b81e65eca402a6ea8aceb66
  getGlobalID1 :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.getGlobalID2) -}
777f207e47d472a279c88840ad4ef953
  getGlobalID2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "0"#) -}
c01db7cb059b3d774cfb5c63622d6011
  getGlobalID3 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getGlobalID4) -}
012f562487479fce4fe172c8e64a09f4
  getGlobalID4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "get_global_id"#) -}
085d36ba5217923e425512d6fbc17448
  getGroupID ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (groupIdVar :: Language.Fortran.Expr
                                    LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getGroupID1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         groupIdVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
ab69ee77afb03406afe0ca3bd92bfe6e
  getGroupID1 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getGroupID2) -}
82bdafbaf7b03f552a4b6d4118545e06
  getGroupID2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "get_group_id"#) -}
a06428882a9f69539b0ee4d4e4a661fa
  getGroupSize ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (groupSizeVar :: Language.Fortran.Expr
                                      LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getGroupSize1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         groupSizeVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
09b9bdf74101283f13ba926f8287bfa0
  getGroupSize1 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getGroupSize2) -}
4e2e31d944968dedb62655cd79165424
  getGroupSize2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "get_group_size"#) -}
8eae6420e9868126a87492084f4bcf6d
  getLocalId ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (localIdVar :: Language.Fortran.Expr
                                    LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getLocalId1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         localIdVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
113cf0bebd8632f9719f2fdc8a58a1a5
  getLocalId1 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getLocalId2) -}
295dc8ffaf15fc89ee982343fb73761f
  getLocalId2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "get_local_id"#) -}
b3da052c88d4fdd729468bb1d738bd26
  getLocalSize ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (localSizeVar :: Language.Fortran.Expr
                                      LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getLocalSize1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         localSizeVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
788517c9fd8b79be422d55ef85aff119
  getLocalSize1 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getLocalSize2) -}
727f920f4ad21b724938b514afc410c9
  getLocalSize2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "get_local_size"#) -}
45ba41629b3d79a0c19ad48abdd18a96
  getModuleName :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (filename :: GHC.Base.String) ->
                 case CodeEmitterUtils.getModuleName_$s$wsplitOnChar'
                        filename
                        (GHC.Types.[] @ GHC.Types.Char)
                        '/'# of ww { (#,#) ww1 ww2 ->
                 case CodeEmitterUtils.getModuleName_$s$wsplitOnChar'
                        (CodeEmitterUtils.getModuleName_$sgo
                           (GHC.List.lastError @ GHC.Base.String)
                           ww1
                           ww2)
                        (GHC.Types.[] @ GHC.Types.Char)
                        '.'# of ww3 { (#,#) ww4 ww5 ->
                 ww4 } }) -}
1f15ac8cbaa59843bb42b13137414978
  getModuleName_$s$wsplitOnChar' ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.Char#
    -> (# GHC.Base.String, [GHC.Base.String] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
77e0fa6b687fd9aecbef0cbc34a548b0
  getModuleName_$sgo ::
    [GHC.Types.Char]
    -> [GHC.Types.Char] -> [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><L,U> -}
b7d9cafaa34b1e16cfb389428695ce16
  getNumberGroups ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (numberGroupsVar :: Language.Fortran.Expr
                                         LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getNumberGroups1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         numberGroupsVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
8dd2a12c3b3c7fe94f1a2d3b47dc865d
  getNumberGroups1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getNumberGroups2) -}
1f853091978eab21621ec303ce1f2c51
  getNumberGroups2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "get_num_groups"#) -}
d27c62f0ac3fa7a6c452ce05c8fc2082
  getOriginalDeclaration ::
    [GHC.Base.String]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (originalLines :: [GHC.Base.String])
                   (varname :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case Data.Generics.Schemes.everything
                        @ [Language.Fortran.SrcSpan]
                        (GHC.Base.++ @ Language.Fortran.SrcSpan)
                        (\ @ a ($dData :: Data.Data.Data a) (eta :: a)[OneShot] ->
                         case (Data.Data.$p1Data @ a $dData)
                                `cast`
                              (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                                (GHC.Prim.proxy#
                                   @ *
                                   @ a) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds12 ds13 ds14 ->
                         case CodeEmitterUtils.getOriginalDeclaration1 of wild1 { Data.Typeable.Internal.TypeRep dt2 dt3 ds15 ds16 ds17 ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.eqWord# dt dt2) of wild2 {
                           GHC.Types.False -> GHC.Types.[] @ Language.Fortran.SrcSpan
                           GHC.Types.True
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                                GHC.Types.False -> GHC.Types.[] @ Language.Fortran.SrcSpan
                                GHC.Types.True
                                -> CodeEmitterUtils.extractDeclaration_varnameSrcSpan
                                     varname
                                     eta
                                       `cast`
                                     (UnsafeCo representational a (Language.Fortran.Decl
                                                                     LanguageFortranTools.Anno)) } } } })
                        @ (Language.Fortran.Program LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fData[]
                        program of wild {
                   [] -> GHC.Base.Nothing @ GHC.Base.String
                   : ipv ipv1
                   -> GHC.Base.Just
                        @ GHC.Base.String
                        (CodeEmitterUtils.$wextractOriginalCode_Offset
                           CodeEmitterUtils.extractOriginalCode1
                           CodeEmitterUtils.extractOriginalCode1
                           originalLines
                           ipv) }) -}
d7636c886f482f0341c78d03794dcbcd
  getOriginalDeclaration1 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#46
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.getOriginalDeclaration_types of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#46
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Language.Fortran.$tcDecl
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   CodeEmitterUtils.getOriginalDeclaration_types } } } }) -}
ae429c6f10b3ba53d9d41ce68155ee67
  getOriginalDeclaration2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.getOriginalDeclaration_types2 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        CodeEmitterUtils.getOriginalDeclaration_types1 of kt_fps2 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CodeEmitterUtils.$stypeRep#3
                           kt_fps2) of dt6 { GHC.Fingerprint.Type.Fingerprint dt7 dt8 ->
                 Data.Typeable.Internal.TypeRep
                   dt7
                   dt8
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   CodeEmitterUtils.getOriginalDeclaration_types1 } } } } } }) -}
42b6bdb53f240e088af711d1cbf9a1e2
  getOriginalDeclaration3 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.getOriginalDeclaration4
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
12c41802c38583a55b495070ae40acd7
  getOriginalDeclaration4 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.getOriginalDeclaration_types2
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
4458d5ec34c34eb917fdc33e012c28d3
  getOriginalDeclaration5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types20 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CodeEmitterUtils.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types20 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types20 } } }) -}
3beebad74abf093e66a0250da2f4e179
  getOriginalDeclaration_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.getOriginalDeclaration2
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
7bb389e6283f1bfb93059d0c44e2f3d8
  getOriginalDeclaration_types1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.getOriginalDeclaration_types2
                   CodeEmitterUtils.getOriginalDeclaration3) -}
9831c95b6774041e224de4d02ba838b4
  getOriginalDeclaration_types2 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.getOriginalDeclaration5
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
0f78c6d3be3192fba6071c68c912befc
  globalMemSpaceAcc :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "!$ACC MemSpace global"#) -}
0e1be82316273a56b7a957f8c5c4359b
  hostModuleName :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (moduleName :: [GHC.Types.Char]) ->
                 GHC.Base.build
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      (GHC.CString.unpackFoldrCString# @ b "_host"# c n)
                      moduleName)) -}
8c78f7a77000f8a28abd025cc880f498
  initModuleName :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (moduleName :: [GHC.Types.Char]) ->
                 GHC.Base.build
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      (GHC.CString.unpackFoldrCString# @ b "_init"# c n)
                      moduleName)) -}
cc92ca1ade1a0edbb65aab9b36e7ceef
  insertDecl ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m12,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.Decl LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 case CodeEmitterUtils.$winsertDecl
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Language.Fortran.DSeq @ LanguageFortranTools.Anno ww1 ww2 ww3 }) -}
a2fe92c89dd228ed91f06bb37a7c25db
  insertDecls ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,1*U><S,1*U>m12,
     Unfolding: InlineRule (2, True, False)
                (\ (newDecls :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (declTree :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.insertDecl
                   (CodeEmitterUtils.constructDeclTree newDecls)
                   declTree) -}
352f087527f7a91024bf50cc290e9467
  isGenerated ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (codeSeg :: Language.Fortran.Fortran
                                 LanguageFortranTools.Anno) ->
                 case Language.Fortran.$fSpanFortran_$csrcSpan
                        @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                        codeSeg of wild { (,) ds12 ds13 ->
                 case ds12 of wild1 { Language.Fortran.SrcLoc f lineStart columnStart ->
                 case ds13 of wild2 { Language.Fortran.SrcLoc ds14 lineEnd columnEnd ->
                 case GHC.Classes.$fEq[]_$s$c==1
                        f
                        CodeEmitterUtils.isGenerated2 of wild3 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case lineStart of wild4 { GHC.Types.I# x ->
                      case x of wild5 {
                        DEFAULT -> GHC.Base.eqString f CodeEmitterUtils.isGenerated1
                        -1#
                        -> case lineEnd of wild6 { GHC.Types.I# x1 ->
                           case x1 of wild7 {
                             DEFAULT -> GHC.Base.eqString f CodeEmitterUtils.isGenerated1
                             -1# -> GHC.Types.True } } } } } } } }) -}
0d0f952a3bae8d3eb12e8315234bc63c
  isGenerated1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "generated"#) -}
dcfef5038b92c2aad8e867ad15e26350
  isGenerated2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<unknown>"#) -}
f06f1871576a51368dd858575286dffb
  isIntent ::
    Language.Fortran.Attr LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds12 :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case ds12 of wild {
                   DEFAULT -> GHC.Types.False
                   Language.Fortran.Intent ds13 ds14 -> GHC.Types.True }) -}
9eb3c09ea3a1a57bd1e6ae6b06905953
  localChunkSize :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m5,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.localChunkSize1) -}
cf5327a4bba364a5aab716a69bfb455f
  localChunkSize1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.localChunkSize2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
55520c114acda1e81983aaa2483cb189
  localChunkSize2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.localChunkSize3,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
c474965611fd204a5d2e91ea76f11b64
  localChunkSize3 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.localChunkSize4) -}
898f74747ddfa2ee326b23092488fa1f
  localChunkSize4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "local_chunk_size"#) -}
d493bfafecac4fb81fed995fca52bc95
  localMemBarrier :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "call barrier(CLK_LOCAL_MEM_FENCE)\n"#) -}
26c2fbca837cf8e44c347afd92af586a
  localMemSpaceAcc :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   " !$ACC MemSpace local"#) -}
a0cf9234d8534eb5d28bde75336e8ce9
  mergeDeclWithPrevious_recurse ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
4be3efde0ac9fd79ffb2b51036cf19fe
  nthVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m5,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.nthVar1) -}
5ab30b31cc4364b6b5aa649e6ce44394
  nthVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.nthVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
c27cf2fe8516863fe45ab53ce4e8c08e
  nthVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.nthVar3,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
605d71dec11b16d81ac65e744da72741
  nthVar3 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.nthVar4) -}
ec4e06a5d2127c94148163698317b7e8
  nthVar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTH"#) -}
6d60ea6bf5c17e98b3a3a95e8ede9a51
  numGroupsVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m5,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.numGroupsVar1) -}
a13417bd423b4edca0b52240e05a269a
  numGroupsVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.numGroupsVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
e8b8a5d7cfefc0d922a72a6057d191c9
  numGroupsVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.numGroupsVarName,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
4e7668f0b0849648d67af3b198352831
  numGroupsVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.numGroupsVarName1) -}
8ca44d4a62b63a587c4ae051ba65cd19
  numGroupsVarName1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num_groups"#) -}
37826a33d2e23abfd938eaf089ad3a5f
  nunitsVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m5,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.nunitsVar1) -}
e34dfcc30230bb479cb5982f38fdf9c0
  nunitsVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.nunitsVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
e4142110c045cbcb3726ea60c087c621
  nunitsVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.nunitsVar3,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
5176e236a5ed043cac91af845c9b0ce3
  nunitsVar3 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.nunitsVar4) -}
c5a63773de626321b6ed0b2cf1596789
  nunitsVar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NUNITS"#) -}
bc09b63290f050b1b40de98cb9cf65d0
  paramCheck_attr ::
    Language.Fortran.Attr LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds12 :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case ds12 of wild {
                   DEFAULT -> GHC.Types.False
                   Language.Fortran.Parameter ds13 -> GHC.Types.True }) -}
f085ba59c4446bd452b6e342d6714f23
  paramCheck_type ::
    Language.Fortran.Type LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds12 :: Language.Fortran.Type
                              LanguageFortranTools.Anno) ->
                 case ds12 of wild {
                   Language.Fortran.BaseType ds13 baseT attrList ds14 ds15
                   -> CodeEmitterUtils.paramCheck_type_$sgo1 attrList
                   Language.Fortran.ArrayT ds13 ds14 baseT attrList ds15 ds16
                   -> CodeEmitterUtils.paramCheck_type_$sgo attrList }) -}
3d08daeae76a99f08971bc55fbb24e8f
  paramCheck_type_$sgo ::
    [Language.Fortran.Attr
       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1c1a9cd5ece378430e14e87f73856611
  paramCheck_type_$sgo1 ::
    [Language.Fortran.Attr
       (Data.Map.Base.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a83487fd7ac7b529db6cfec4eeec9189
  reductionIteratorDecl :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "Integer :: "#
                   CodeEmitterUtils.generateReductionIterator1) -}
372bb4e47633376329d04994118d74ac
  removeIntentFromDecl ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                CodeEmitterUtils.removeIntentFromDecl1
                  `cast`
                (<Language.Fortran.Decl LanguageFortranTools.Anno>_R
                 ->_R Data.Data.N:ID[0]
                          <Language.Fortran.Decl
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])>_R) -}
b21e6cda765377b8f3c4de394f28e789
  removeIntentFromDecl1 ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Data.Data.ID
         (Language.Fortran.Decl
            (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (decl :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 Language.Fortran.$fDataDecl1
                   @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                   CodeEmitterUtils.$s$fDataDecl_$s$fDataMap
                   CodeEmitterUtils.removeIntentFromDecl2
                   decl) -}
4f0eb4311798076eea984bb8bfe8484c
  removeIntentFromDecl2 :: Data.Data.Data b => b -> b
  {- Arity: 1,
     Strictness: <S(C(S(SLLLL))LLLLLLLLLLLLLL),1*U(1*C1(U(U,U,A,A,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ b ($dData :: Data.Data.Data b) ->
                 case CodeEmitterUtils.$stypeRep#6 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        (GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           CodeEmitterUtils.removeIntentFromDecl3) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 case (Data.Data.$p1Data @ b $dData)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <b>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ b) of wild1 { Data.Typeable.Internal.TypeRep dt7 dt8 ds12 ds13 ds14 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt3 dt7) of wild2 {
                   GHC.Types.False -> GHC.Base.id @ b
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt4 dt8) of wild4 {
                        GHC.Types.False -> GHC.Base.id @ b
                        GHC.Types.True
                        -> CodeEmitterUtils.removeIntentFromType
                             `cast`
                           (UnsafeCo representational (Language.Fortran.Type
                                                         LanguageFortranTools.Anno) b
                            ->_R UnsafeCo representational (Language.Fortran.Type
                                                              LanguageFortranTools.Anno) b) } } } } } }) -}
e07445ed83e0fd4a4f5dfca8ffb57886
  removeIntentFromDecl3 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.$stypeRep#29
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
701aee2be48e15b3e47b4ef824775191
  removeIntentFromType ::
    Language.Fortran.Type LanguageFortranTools.Anno
    -> Language.Fortran.Type LanguageFortranTools.Anno
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds12 :: Language.Fortran.Type
                              LanguageFortranTools.Anno) ->
                 case ds12 of wild {
                   Language.Fortran.BaseType anno btype attrList expr1 expr2
                   -> Language.Fortran.BaseType
                        @ LanguageFortranTools.Anno
                        anno
                        btype
                        (GHC.List.filter
                           @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                           CodeEmitterUtils.removeIntentFromType1
                           attrList)
                        expr1
                        expr2
                   Language.Fortran.ArrayT anno exprList btype attrList expr1 expr2
                   -> Language.Fortran.ArrayT
                        @ LanguageFortranTools.Anno
                        anno
                        exprList
                        btype
                        (GHC.List.filter
                           @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                           CodeEmitterUtils.removeIntentFromType1
                           attrList)
                        expr1
                        expr2 }) -}
75741e912e8e8c4bb419743ae571df8e
  removeIntentFromType1 ::
    Language.Fortran.Attr LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.True
                   Language.Fortran.Intent ds12 ds13 -> GHC.Types.False }) -}
34301bb56ad1b199a625868336e6e0b9
  replaceIntent ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> Language.Fortran.IntentAttr LanguageFortranTools.Anno
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (newIntent :: Language.Fortran.IntentAttr
                                   LanguageFortranTools.Anno)
                   (oldIntent :: Language.Fortran.IntentAttr
                                   LanguageFortranTools.Anno) ->
                 newIntent) -}
d8a8f5edd4f45c8d3ee315c5ef41efa8
  scalarPointerVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,1*U(A,1*U)>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.scalarPointerVarName varname,
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
d013d83e4dcac452d9df51601df98ee8
  scalarPointerVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(A,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   (GHC.Base.++
                      @ GHC.Types.Char
                      ww2
                      (GHC.CString.unpackCString# "_ptr"#)) }) -}
b8ea0e014d207976169ca00c5c49969c
  splitOnChar ::
    GHC.Types.Char -> GHC.Base.String -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (char :: GHC.Types.Char) (str :: GHC.Base.String) ->
                 CodeEmitterUtils.splitOnChar'
                   char
                   (GHC.Types.[] @ GHC.Types.Char)
                   str) -}
17440d9cd8ade21e2f63fd7666db2f0d
  splitOnChar' ::
    GHC.Types.Char
    -> GHC.Base.String -> GHC.Base.String -> [GHC.Base.String]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Char)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String) ->
                 case CodeEmitterUtils.$wsplitOnChar'
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Base.String ww1 ww2 }) -}
c7ddc82e2adb7ee6615512874e82ebd0
  startPosition :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m5,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.startPosition1) -}
5810fc5752833f59bee0e0b1eb80a8ed
  startPosition1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.startPosition2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
36184af50c0b44c0df660369c8b12757
  startPosition2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.startPosition3,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
6ce9d19395893cbde2b1305229cd2024
  startPosition3 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.startPosition4) -}
31e2e7e5f8c602c2df802071c60b3fe5
  startPosition4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "start_position"#) -}
e319a632453c4f1fddcbc17983b02acc
  statePtrDecl :: Language.Fortran.Decl LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Decl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.statePtrDecl7
                   CodeEmitterUtils.statePtrDecl1) -}
3bc3a2502a21aa296a62d94eba68c247
  statePtrDecl1 :: Language.Fortran.Type LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.BaseType
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.statePtrDecl6
                   CodeEmitterUtils.statePtrDecl2
                   CodeEmitterUtils.convertScalarToOneDimArray3
                   CodeEmitterUtils.convertScalarToOneDimArray3) -}
9a5ea4c8244f44bd4997be33258e8a47
  statePtrDecl2 :: [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   CodeEmitterUtils.statePtrDecl3
                   (GHC.Types.[]
                      @ (Language.Fortran.Attr LanguageFortranTools.Anno))) -}
223745c4600b7b01ccef7f8a63179dcb
  statePtrDecl3 :: Language.Fortran.Attr LanguageFortranTools.Anno
  {- Strictness: m14,
     Unfolding: (Language.Fortran.Dimension
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.statePtrDecl4) -}
f1760ce0709b81e6fb514e82a6645c74
  statePtrDecl4 ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                      Language.Fortran.Expr LanguageFortranTools.Anno)
                   CodeEmitterUtils.statePtrDecl5
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno))) -}
ddf12e93c71a70b579a74cf37dee65fa
  statePtrDecl5 ::
    (Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.convertScalarToOneDimArray3,
                  CodeEmitterUtils.convertScalarToOneDimArray1)) -}
e76f54fc4c3bcf0025fc5cf8a106d797
  statePtrDecl6 ::
    Language.Fortran.BaseType LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.Fortran.Integer
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
8d0440b04f9199577ca6f0aa44f397b2
  statePtrDecl7 ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      GHC.Base.Maybe GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                      Language.Fortran.Expr LanguageFortranTools.Anno,
                      GHC.Base.Maybe GHC.Types.Int)
                   CodeEmitterUtils.statePtrDecl8
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno,
                         GHC.Base.Maybe GHC.Types.Int))) -}
c9006e1bd8bb6c6359d747ed95ba5bde
  statePtrDecl8 ::
    (Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.statePtrVar,
                  CodeEmitterUtils.convertScalarToOneDimArray3,
                  GHC.Base.Nothing @ GHC.Types.Int)) -}
3bcec0935db1e5f22058a3bca4198055
  statePtrVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m5,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.statePtrVar1) -}
36cc2dc6697a89115f8cb29ac16f7856
  statePtrVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.statePtrVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
0ebf10c2d199c46cff0cb6ad1b95baa9
  statePtrVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.statePtrVarName,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
1c7236253ae0fb64990b57aacd257837
  statePtrVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.statePtrVarName1) -}
c6fd7f2477de6bd611ed3cbf5f4ac852
  statePtrVarName1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "state_ptr"#) -}
0782fcf5b5ea1a61c5e74afcee7e15ef
  stateVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m5,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.stateVar1) -}
5390dbd8bf4bd9759894f6841b61a746
  stateVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.stateVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
11c0e43e2701470cb9fdecfa11a97c58
  stateVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.stateVarName,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
3e7d5739d9778b8636da730cd4b59ab7
  stateVarDecl :: Language.Fortran.Decl LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Decl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.stateVarDecl2
                   CodeEmitterUtils.stateVarDecl1) -}
b0b88c7d80d7ac545bb9204246b8624e
  stateVarDecl1 :: Language.Fortran.Type LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.BaseType
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.statePtrDecl6
                   (GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno))
                   CodeEmitterUtils.convertScalarToOneDimArray3
                   CodeEmitterUtils.convertScalarToOneDimArray3) -}
7638d54c32155e206d70000a4fa57f93
  stateVarDecl2 ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      GHC.Base.Maybe GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                      Language.Fortran.Expr LanguageFortranTools.Anno,
                      GHC.Base.Maybe GHC.Types.Int)
                   CodeEmitterUtils.stateVarDecl3
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno,
                         GHC.Base.Maybe GHC.Types.Int))) -}
26bc87940dbd70284783c192aa96670c
  stateVarDecl3 ::
    (Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.stateVar,
                  CodeEmitterUtils.convertScalarToOneDimArray3,
                  GHC.Base.Nothing @ GHC.Types.Int)) -}
d529ff6d7ecbaafe1bc46cd1a4d6886f
  stateVarName :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.stateVarName1) -}
e80469dc7e37b5bd04890ad273e37557
  stateVarName1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "state"#) -}
595ff35ae5986fdaf061c4bc369cbbfa
  stripAttrs ::
    [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (a :: [Language.Fortran.Attr LanguageFortranTools.Anno]) ->
                 GHC.Types.[]
                   @ (Language.Fortran.Attr LanguageFortranTools.Anno)) -}
a4ef372481f6748c59d7a28a01534e19
  stripDeclAttrs ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (decl :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 Data.Generics.Schemes.everywhere
                   CodeEmitterUtils.stripDeclAttrs1
                   @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   CodeEmitterUtils.$s$fDataDecl
                   decl) -}
979aa39feee721a09f9ae6ce25cdb692
  stripDeclAttrs1 :: Data.Data.Data a => a -> a
  {- Arity: 1,
     Strictness: <S(C(S(SLLLL))LLLLLLLLLLLLLL),1*U(1*C1(U(U,U,A,A,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ a ($dData :: Data.Data.Data a) ->
                 case CodeEmitterUtils.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        (GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           CodeEmitterUtils.stripDeclAttrs2) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 case (Data.Data.$p1Data @ a $dData)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ a) of wild1 { Data.Typeable.Internal.TypeRep dt7 dt8 ds12 ds13 ds14 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt3 dt7) of wild2 {
                   GHC.Types.False -> GHC.Base.id @ a
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt4 dt8) of wild4 {
                        GHC.Types.False -> GHC.Base.id @ a
                        GHC.Types.True
                        -> CodeEmitterUtils.stripAttrs
                             `cast`
                           (UnsafeCo representational [Language.Fortran.Attr
                                                         LanguageFortranTools.Anno] a
                            ->_R UnsafeCo representational [Language.Fortran.Attr
                                                              LanguageFortranTools.Anno] a) } } } } } }) -}
e617bb82ffbfbbd86eca5783ff7a987e
  stripDeclAttrs2 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CodeEmitterUtils.$stypeRep#37
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
bf9740b0af5af944e1c9562644c54040
  varBufVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,1*U(A,1*U)>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (varName :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.varSizeVarName varName,
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
0e35dc8558d45ffbb56628b7fa95d986
  varBufVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(A,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   (GHC.Base.++
                      @ GHC.Types.Char
                      ww2
                      (GHC.CString.unpackCString# "_buf"#)) }) -}
b62e4a4d2267769c42817e2a68f6b8b1
  varSizeVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,1*U(A,1*U)>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (varName :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.varSizeVarName varName,
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
f6ce06a64604c8a077bb514dc04d4c7f
  varSizeVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(A,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Base.Tip @ GHC.Base.String @ [GHC.Base.String])
                   (GHC.Base.++
                      @ GHC.Types.Char
                      ww2
                      (GHC.CString.unpackCString# "_sz"#)) }) -}
"SC:$wsplitOnChar'0" [0] forall (sc :: [GHC.Types.Char])
                                (sc1 :: [GHC.Types.Char])
                                (sc2 :: GHC.Prim.Char#)
  CodeEmitterUtils.$wsplitOnChar' (GHC.Types.C# sc2) sc1 sc
  = CodeEmitterUtils.getModuleName_$s$wsplitOnChar' sc sc1 sc2
"SC:constructDeclTree0" [ALWAYS] forall (sc :: Language.Fortran.Decl
                                                 (Data.Map.Base.Map
                                                    [GHC.Types.Char] [[GHC.Types.Char]]))
                                        (sc1 :: [Language.Fortran.Decl
                                                   (Data.Map.Base.Map
                                                      [GHC.Types.Char] [[GHC.Types.Char]])])
  CodeEmitterUtils.constructDeclTree (GHC.Types.:
                                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                        sc
                                        sc1)
  = CodeEmitterUtils.constructDeclTree_$sconstructDeclTree sc sc1
"SPEC/CodeEmitterUtils $fDataDecl @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                        (Data.Map.Base.Map
                                                                                           GHC.Base.String
                                                                                           [GHC.Base.String]))
  Language.Fortran.$fDataDecl @ (Data.Map.Base.Map
                                   GHC.Base.String [GHC.Base.String])
                              $dData
  = CodeEmitterUtils.$s$fDataDecl
"SPEC/CodeEmitterUtils $fDataFortran @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                           (Data.Map.Base.Map
                                                                                              GHC.Base.String
                                                                                              [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Base.Map
                                      GHC.Base.String [GHC.Base.String])
                                 $dData
  = CodeEmitterUtils.$s$fDataFortran
"SPEC/CodeEmitterUtils $fDataMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                  [GHC.Types.Char])
                                                                      ($dData1 :: Data.Data.Data
                                                                                    [GHC.Base.String])
                                                                      ($dData :: Data.Data.Data
                                                                                   [GHC.Types.Char])
  Data.Map.Base.$fDataMap @ [GHC.Types.Char]
                          @ [GHC.Base.String]
                          $dData
                          $dData1
                          $dOrd
  = CodeEmitterUtils.$s$fDataDecl_$s$fDataMap
"SPEC/CodeEmitterUtils $fDataProgUnit @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                            (Data.Map.Base.Map
                                                                                               GHC.Base.String
                                                                                               [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit @ (Data.Map.Base.Map
                                       GHC.Base.String [GHC.Base.String])
                                  $dData
  = CodeEmitterUtils.$s$fDataProgUnit
"SPEC/CodeEmitterUtils $fData[] @ (ProgUnit Anno)" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                (Language.Fortran.ProgUnit
                                                                                   LanguageFortranTools.Anno))
  Data.Data.$fData[] @ (Language.Fortran.ProgUnit
                          LanguageFortranTools.Anno)
                     $dData
  = CodeEmitterUtils.$s$fData[]
"SPEC/CodeEmitterUtils $fData[] @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                       [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] $dData
  = CodeEmitterUtils.$s$fDataDecl_$s$fData[]
"SPEC/CodeEmitterUtils $fEqAttr @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                    (Data.Map.Base.Map
                                                                                       GHC.Base.String
                                                                                       [GHC.Base.String]))
  Language.Fortran.$fEqAttr @ (Data.Map.Base.Map
                                 GHC.Base.String [GHC.Base.String])
                            $dEq
  = CodeEmitterUtils.$s$fEqAttr
"SPEC/CodeEmitterUtils $fEqAttr_$c/= @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                         (Data.Map.Base.Map
                                                                                            GHC.Base.String
                                                                                            [GHC.Base.String]))
  Language.Fortran.$fEqAttr_$c/= @ (Data.Map.Base.Map
                                      GHC.Base.String [GHC.Base.String])
                                 $dEq
  = CodeEmitterUtils.$s$fEqAttr_$s$fEqAttr_$c/=
"SPEC/CodeEmitterUtils $fEqIntentAttr @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                          (Data.Map.Base.Map
                                                                                             GHC.Base.String
                                                                                             [GHC.Base.String]))
  Language.Fortran.$fEqIntentAttr @ (Data.Map.Base.Map
                                       GHC.Base.String [GHC.Base.String])
                                  $dEq
  = CodeEmitterUtils.$s$fEqIntentAttr
"SPEC/CodeEmitterUtils $fEqMap @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                [GHC.Base.String])
                                                                    ($dEq :: GHC.Classes.Eq
                                                                               [GHC.Types.Char])
  Data.Map.Base.$fEqMap @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        $dEq
                        $dEq1
  = CodeEmitterUtils.$s$fEqAttr_$s$fEqMap
"SPEC/CodeEmitterUtils $fEqMap_$c/= @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                     [GHC.Base.String])
                                                                         ($dEq :: GHC.Classes.Eq
                                                                                    [GHC.Types.Char])
  Data.Map.Base.$fEqMap_$c/= @ [GHC.Types.Char]
                             @ [GHC.Base.String]
                             $dEq
                             $dEq1
  = CodeEmitterUtils.$s$fEqAttr_$s$fEqMap_$c/=
"SPEC/CodeEmitterUtils $fEqVarName @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                       (Data.Map.Base.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dEq
  = CodeEmitterUtils.$s$fEqVarName
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

