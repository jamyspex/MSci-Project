
==================== FINAL INTERFACE ====================
2018-12-03 15:55:08.455407 UTC

interface main@main:CombineKernels 8002
  interface hash: 86121c6a5f7d74ba7f44b06943119eab
  ABI hash: fef5eb1de0c25df6e0d8a5f9c2edda50
  export-list hash: 7925b6aa06130c045849d065df8c851d
  orphan hash: a3d8246ad2fa7b068aba91037f7ae6f7
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  CombineKernels.combineKernelsProgUnit
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     TupleTable VarDependencyAnalysis Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskell-src-1.0.2.0@haskell-src-1.0.2.0-3zoaErItXGVA1GHC7t3Glx
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      process-1.4.3.0@process-1.4.3.0
                      syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Instances
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Language.Fortran c957d8f93581b3ce2cc521df25110d11
  exports: cb4e2f808f933bd0493dcd95204741d0
  Bin 31bb1b9369e8820657f411d90ee9619c
  Block 00b5dcb26b4d8331f4d0a27afc418872
  Con e9784612770372502a12b479082c4a0e
  Expr fd45c3abbcc1cd23ca18c96ee1403b96
  FSeq 66c58ad61465e02006618848a2dea986
  Fortran 7ef8d1883356542a2e7829f1c3512bc2
  Minus 74fd79e66076db48c9d27b6cd0f2b01a
  OpenCLMap f735cdb4fcfce00b0cd641aaa6255a4b
  OpenCLReduce 811a5024d542e78a43320fc6af66c91a
  Plus 2246ba64804dd1a40f56ff697ab3e419
  Program 61c057161e42f4aa29fb8dd8afb17b21
  VarName d4d45769399fe3ed8e0615e3282cf5b7
import  -/  LanguageFortranTools 7890a5e96ab51325aa3603dbd4691bf4
  exports: 83b35210801e0c6fe3fd2a2c2ff1ecd0
  Anno e22809b44b97ccfdb28bfb19047d139f
  appendAnnotation 99aca3dcb141660efe924d41377444a3
  appendAnnotationMap cc81568ce9b1db55601acb0f7996f784
  appendFortran_recursive 4a73f638f4b7d944226ec9c29c89a7cb
  combineAnnotations 59a711db5664b0b539106b5d4baa7cb5
  compilerName af3b337e7deea7084cf6d3ad27314e83
  errorLocationFormatting ade5e4011267f0b3e68f4c6bf90cd5b5
  generateAndExprFromList ec2e058c9a61c2a070809e5c65a87f61
  generateIf 97983c6db70187f347b69b240a50a2ee
  generateLTExpr 12e687e45edf5afbef215d935dba4104
  generateSrcSpanMerge 806c5ded3a006ac5c2d14a1a94cf3eaf
  generateVar 9d0fea224f278c04fc62fa0745c0e6f6
  listRemoveDuplications 4378f4b10536dcf8634c95685ebad55d
  standardiseSrcSpan 3f2b4dbb841fadc56c002babbf59eb9b
import  -/  VarDependencyAnalysis d3e85612afd610e5fcb0e3763a1de01e
  exports: f27db6a43dea9dbe861dd661c14bd373
  loopCarriedDependencyCheck ba6f3e6f5d09f005453cc48397059331
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics ea99a8062a9608312218ffd7309b5391
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Aliases 09d594ec9a31e3c858478cc583771648
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Schemes 4b69980d384f37e61fe24ae708a71220
14ca992b72d1e78e027d2536e9a22743
  $s$fDataBlock ::
    Data.Data.Data
      (Language.Fortran.Block
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Block
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataBlock_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataBlock_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataBlock_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  CombineKernels.$s$fDataBlock3
                  CombineKernels.$s$fDataBlock2
                  (Language.Fortran.$fDataBlock_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  CombineKernels.$s$fDataBlock1
                  (Language.Fortran.$fDataBlock_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataBlock_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData) -}
1f0dde56d5d6c1c62277e93cf6f6a8bb
  $s$fDataBlock1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Block
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds2 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Block
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
0c2e317f2ffe7df68d38401727d63eae
  $s$fDataBlock2 ::
    Language.Fortran.Block
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds2 :: Language.Fortran.Block
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$tGkmznj2VlO42PYwprZUrCU) -}
78fc8771a8314e75eded7db10bfddca5
  $s$fDataBlock3 ::
    Language.Fortran.Block
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Language.Fortran.Block
                             (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case ds2 of wild { Language.Fortran.Block ds3 ds4 ds5 ds6 ds7 ds8 ->
                 Language.Fortran.$cGkmznj2VlO42PYwprZUrCU }) -}
290dd7d0fb6aecbb83d3fb8d1c5a7b64
  $s$fDataBlock4 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds2 :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Base.Nothing
                   @ (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))) -}
11d332ca9cc040606a15857c5cdc8a1e
  $s$fDataBlock5 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds2 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.mapDataType) -}
50dc7f9177b7242c5c14f8d118f91566
  $s$fDataBlock6 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds2 :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.fromListConstr) -}
a6c181f862c546a904c4a45006af9886
  $s$fDataBlock7 :: Data.Data.Data [GHC.Base.String]
  {- Unfolding: InlineRule (0, True, True)
                CombineKernels.$s$fDataBlock_$s$fData[] -}
61eb273c672327c689bf10af770afabf
  $s$fDataBlock_$dData ::
    Data.Data.Data
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Unfolding: InlineRule (0, True, True)
                CombineKernels.$s$fDataBlock_$s$fDataMap -}
52f21196b06471cfb4cf8988447f2924
  $s$fDataBlock_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fDataMap_$cp1Data
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  CombineKernels.$s$fDataBlock6
                  CombineKernels.$s$fDataBlock5
                  CombineKernels.$s$fDataBlock4
                  (Data.Map.Base.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapT
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock7
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
aca0f9db0f6dd46291701d3749734705
  $s$fDataBlock_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Data.$fData[]_$cp1Data
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  CombineKernels.$s$fDataBlock_$s$fData[]_$ctoConstr
                  CombineKernels.$s$fDataBlock_$s$fData[]_$cdataTypeOf
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  CombineKernels.$s$fDataBlock_$s$fData[]_$cdataCast2
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
d142cfedb4ee8bd0d5db636df52f048e
  $s$fDataBlock_$s$fData[]_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds2 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing @ (c [[GHC.Types.Char]])) -}
c6a3ac0c997506a47c9584c3f231e302
  $s$fDataBlock_$s$fData[]_$cdataTypeOf ::
    [[GHC.Types.Char]] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds2 :: [[GHC.Types.Char]]) -> Data.Data.listDataType) -}
9fc1934964343f6f7a9902ccc5a3066a
  $s$fDataBlock_$s$fData[]_$ctoConstr ::
    [[GHC.Types.Char]] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: [[GHC.Types.Char]]) ->
                 case ds2 of wild {
                   [] -> Data.Data.nilConstr : ds3 ds4 -> Data.Data.consConstr }) -}
a46ef54932aae5da065ec66a0b5ebdcb
  $s$fDataExpr ::
    Data.Data.Data
      (Language.Fortran.Expr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataExpr_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cdataTypeOf
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cdataCast2
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$dData) -}
5b227076a5e68a5f40ec59c6d6d9b950
  $s$fEq(,,,) ::
    GHC.Classes.Eq
      (Language.Fortran.VarName LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno)
                  (GHC.Classes.$fEq(,,,)_$c==
                     @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     CombineKernels.$s$fEq(,,,)2
                     CombineKernels.$s$fEq(,,,)1
                     CombineKernels.$s$fEq(,,,)1
                     CombineKernels.$s$fEq(,,,)1)
                  CombineKernels.$s$fEq(,,,)_$s$fEq(,,,)_$c/= -}
4a70c02df7d500e93a7abf89f7e138ec
  $s$fEq(,,,)1 ::
    GHC.Classes.Eq (Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                CombineKernels.$s$fEq(,,,)_$s$fEqExpr -}
be8dcf77c5cb3e0b922a93611188ede0
  $s$fEq(,,,)2 ::
    GHC.Classes.Eq (Language.Fortran.VarName LanguageFortranTools.Anno)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                CombineKernels.$s$fEq(,,,)_$s$fEqVarName -}
97770170271a1199bd5632bb703e96b5
  $s$fEq(,,,)_$dEq ::
    GHC.Classes.Eq
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                CombineKernels.$s$fEq(,,,)_$s$fEqMap -}
962419b5677d41aa06f3bbe3c7492026
  $s$fEq(,,,)_$s$fEq(,,,)_$c/= ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno)
    -> (Language.Fortran.VarName LanguageFortranTools.Anno,
        Language.Fortran.Expr LanguageFortranTools.Anno,
        Language.Fortran.Expr LanguageFortranTools.Anno,
        Language.Fortran.Expr LanguageFortranTools.Anno)
    -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLL),1*U(1*U(U,1*U),U,U,U)><S(SLLL),1*U(1*U(U,1*U),U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a1 :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno))
                   (b1 :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno)) ->
                 case GHC.Classes.$fEq(,,,)_$c==
                        @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        CombineKernels.$s$fEq(,,,)2
                        CombineKernels.$s$fEq(,,,)1
                        CombineKernels.$s$fEq(,,,)1
                        CombineKernels.$s$fEq(,,,)1
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ca571c099ca91ec1f54941d3f75c1e5f
  $s$fEq(,,,)_$s$fEqExpr ::
    GHC.Classes.Eq
      (Language.Fortran.Expr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqExpr_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fEq(,,,)_$dEq)
                  (Language.Fortran.$fEqExpr_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fEq(,,,)_$dEq) -}
557e15e556c742c0a3865592a497c453
  $s$fEq(,,,)_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  CombineKernels.$s$fEq(,,,)_$s$fEqMap_$c/= -}
7f54034ed70c222f6d3c7431f2a927bf
  $s$fEq(,,,)_$s$fEqMap_$c/= ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ [GHC.Types.Char]
                      @ [GHC.Base.String]
                      GHC.Classes.$fEq[]_$s$fEq[]1
                      GHC.Classes.$fEq[]_$s$fEq[]2
                      x
                      y)) -}
12b0f999c4bd95e783e3fc822a290890
  $s$fEq(,,,)_$s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fEq(,,,)_$dEq)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fEq(,,,)_$dEq) -}
fbb9caeeb610bf7a184b947abc8dc394
  $stypeRep#10 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CombineKernels.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
b4850fd15f6f4761efcf65d6b9945a7b
  $stypeRep#11 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
58f67ed1f67ead8d14e54defb5fe9f2a
  $stypeRep#14 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CombineKernels.$stypeRep#15
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tc[]
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
d89f26721099d57df684551bd2976b23
  $stypeRep#15 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17730107610217102821##
                   9866972337190828755##) -}
bb706ff6b4ad6ab1b8334da65cd16a9d
  $stypeRep#18 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CombineKernels.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types4 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CombineKernels.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types4 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types4 } } }) -}
f001bf7d090c37441e505570c5041f15
  $stypeRep#19 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CombineKernels.$stypeRep#10
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
668ebe0ecb915645c476455fab30a38c
  $stypeRep#2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CombineKernels.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
be1c60fa8786496cc1350e1ada2a5bfa
  $stypeRep#22 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CombineKernels.$stypeRep#2 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types4 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CombineKernels.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types4 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types4 } } }) -}
c2dfcfd292afc18b73a4d9428e74f5d3
  $stypeRep#23 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CombineKernels.$stypeRep#18
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
b9eee893556e343a5f333152a5974d6e
  $stypeRep#26 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CombineKernels.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types4 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CombineKernels.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types4 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types4 } } }) -}
e640d01c991b2a3f549fcf3769175827
  $stypeRep#29 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CombineKernels.$stypeRep#22 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types4 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CombineKernels.$stypeRep#30
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types4 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types4 } } }) -}
54fa3597a783ab8dbf5bc4011675af5f
  $stypeRep#3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17306070887558246498##
                   16032333906417739553##) -}
9b517e3aaa6730a33e2a40b20b545bf2
  $stypeRep#30 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CombineKernels.$stypeRep#26
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
8d158541a2e35b6acb1b7e5b7fbd9a35
  $stypeRep#33 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CombineKernels.$stypeRep#34
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcBlock
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
c819ae70e85b8ab64c72e1948b11bf0c
  $stypeRep#34 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8622183916436018781##
                   7917166659374511045##) -}
e48fe0f6c9bccdeb485bf41aef5b6aec
  $stypeRep#37 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CombineKernels.$stypeRep#39 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CombineKernels.$stypeRep#38
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Tuple.$tc(,)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
3d065353fca649b08631309a6f44e1c8
  $stypeRep#38 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17502837480397947244##
                   15872498598114190556##) -}
dc429f21878db047001a5645a7cc8f0a
  $stypeRep#39 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (Data.Typeable.Internal.typeRepFingerprints
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
b11b840a948d6f479b73ef6d6a74c9f5
  $stypeRep#42 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CombineKernels.$stypeRep#39 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CombineKernels.$stypeRep#43
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcSrcLoc
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
b4d6a736c75b6a3f392ec5d825903729
  $stypeRep#43 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   3080101248344241265##
                   5859815666103468669##) -}
b89deae7255a2ba5420b1fd7a5322bd3
  $stypeRep#46 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case CombineKernels.$stypeRep#37 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types4 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       CombineKernels.$stypeRep#47
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types4 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types4 } } }) -}
a758ce0306f87a395c7109a6123db824
  $stypeRep#47 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   CombineKernels.$stypeRep#42
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
df01766ca84b550cd05a3da06b53c5d2
  $stypeRep#6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           CombineKernels.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
131c5fca05078b7e38cd9843b0974541
  $stypeRep#7 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6882220124880764793##
                   15271875958298145102##) -}
ec12aaa7ea42b000f365cd6b66588776
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CombineKernels.$trModule2
                   CombineKernels.$trModule1) -}
c9bbdab9cf85682a65d06a28148a8d83
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CombineKernels"#) -}
0fdcf24adec9820d62ac3b5f57c3246e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d3755ea931c5b838362f79e7117d91e1
  combineKernelsProgUnit ::
    Data.Data.Data a => GHC.Base.Maybe GHC.Types.Float -> a -> a
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U> -}
"SPEC/CombineKernels $fDataBlock @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                       (Data.Map.Base.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fDataBlock @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dData
  = CombineKernels.$s$fDataBlock
"SPEC/CombineKernels $fDataExpr @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                      (Data.Map.Base.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fDataExpr @ (Data.Map.Base.Map
                                   GHC.Base.String [GHC.Base.String])
                              $dData
  = CombineKernels.$s$fDataExpr
"SPEC/CombineKernels $fDataMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                [GHC.Types.Char])
                                                                    ($dData1 :: Data.Data.Data
                                                                                  [GHC.Base.String])
                                                                    ($dData :: Data.Data.Data
                                                                                 [GHC.Types.Char])
  Data.Map.Base.$fDataMap @ [GHC.Types.Char]
                          @ [GHC.Base.String]
                          $dData
                          $dData1
                          $dOrd
  = CombineKernels.$s$fDataBlock_$s$fDataMap
"SPEC/CombineKernels $fData[] @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                     [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] $dData
  = CombineKernels.$s$fDataBlock_$s$fData[]
"SPEC/CombineKernels $fData[]_$cdataCast2 @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                 [GHC.Types.Char])
  Data.Data.$fData[]_$cdataCast2 @ [GHC.Types.Char] $dData
  = CombineKernels.$s$fDataBlock_$s$fData[]_$cdataCast2
"SPEC/CombineKernels $fData[]_$cdataTypeOf @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                  [GHC.Types.Char])
  Data.Data.$fData[]_$cdataTypeOf @ [GHC.Types.Char] $dData
  = CombineKernels.$s$fDataBlock_$s$fData[]_$cdataTypeOf
"SPEC/CombineKernels $fData[]_$ctoConstr @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                [GHC.Types.Char])
  Data.Data.$fData[]_$ctoConstr @ [GHC.Types.Char] $dData
  = CombineKernels.$s$fDataBlock_$s$fData[]_$ctoConstr
"SPEC/CombineKernels $fEq(,,,) @ (VarName Anno) @ (Expr
                                                    Anno) @ (Expr Anno) @ (Expr Anno)" [ALWAYS] forall ($dEq3 :: GHC.Classes.Eq
                                                                                                                                                                           (Language.Fortran.Expr
                                                                                                                                                                              LanguageFortranTools.Anno))
                                                                                                                                                               ($dEq2 :: GHC.Classes.Eq
                                                                                                                                                                           (Language.Fortran.Expr
                                                                                                                                                                              LanguageFortranTools.Anno))
                                                                                                                                                               ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                           (Language.Fortran.Expr
                                                                                                                                                                              LanguageFortranTools.Anno))
                                                                                                                                                               ($dEq :: GHC.Classes.Eq
                                                                                                                                                                          (Language.Fortran.VarName
                                                                                                                                                                             LanguageFortranTools.Anno))
  GHC.Classes.$fEq(,,,) @ (Language.Fortran.VarName
                             LanguageFortranTools.Anno)
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
  = CombineKernels.$s$fEq(,,,)
"SPEC/CombineKernels $fEq(,,,)_$c/= @ (VarName Anno) @ (Expr
                                                         Anno) @ (Expr Anno) @ (Expr Anno)" [ALWAYS] forall ($dEq3 :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.Fortran.Expr
                                                                                                                                                                                        LanguageFortranTools.Anno))
                                                                                                                                                                         ($dEq2 :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.Fortran.Expr
                                                                                                                                                                                        LanguageFortranTools.Anno))
                                                                                                                                                                         ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.Fortran.Expr
                                                                                                                                                                                        LanguageFortranTools.Anno))
                                                                                                                                                                         ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                    (Language.Fortran.VarName
                                                                                                                                                                                       LanguageFortranTools.Anno))
  GHC.Classes.$fEq(,,,)_$c/= @ (Language.Fortran.VarName
                                  LanguageFortranTools.Anno)
                             @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                             @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                             @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                             $dEq
                             $dEq1
                             $dEq2
                             $dEq3
  = CombineKernels.$s$fEq(,,,)_$s$fEq(,,,)_$c/=
"SPEC/CombineKernels $fEqExpr @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                  (Data.Map.Base.Map
                                                                                     GHC.Base.String
                                                                                     [GHC.Base.String]))
  Language.Fortran.$fEqExpr @ (Data.Map.Base.Map
                                 GHC.Base.String [GHC.Base.String])
                            $dEq
  = CombineKernels.$s$fEq(,,,)_$s$fEqExpr
"SPEC/CombineKernels $fEqMap @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                              [GHC.Base.String])
                                                                  ($dEq :: GHC.Classes.Eq
                                                                             [GHC.Types.Char])
  Data.Map.Base.$fEqMap @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        $dEq
                        $dEq1
  = CombineKernels.$s$fEq(,,,)_$s$fEqMap
"SPEC/CombineKernels $fEqMap_$c/= @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                   [GHC.Base.String])
                                                                       ($dEq :: GHC.Classes.Eq
                                                                                  [GHC.Types.Char])
  Data.Map.Base.$fEqMap_$c/= @ [GHC.Types.Char]
                             @ [GHC.Base.String]
                             $dEq
                             $dEq1
  = CombineKernels.$s$fEq(,,,)_$s$fEqMap_$c/=
"SPEC/CombineKernels $fEqVarName @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                     (Data.Map.Base.Map
                                                                                        GHC.Base.String
                                                                                        [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dEq
  = CombineKernels.$s$fEq(,,,)_$s$fEqVarName
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

