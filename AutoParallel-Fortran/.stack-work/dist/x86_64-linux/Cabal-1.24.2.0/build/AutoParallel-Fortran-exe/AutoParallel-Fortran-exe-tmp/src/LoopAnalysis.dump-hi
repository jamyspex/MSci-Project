
==================== FINAL INTERFACE ====================
2018-12-03 15:55:07.743156 UTC

interface main@main:LoopAnalysis 8002
  interface hash: 6e2cd49e6bd1dc30a6386e2a3345e2a6
  ABI hash: e6ebf449ca3ad7aec5184b135d0c3dd0
  export-list hash: bb4e6f820369d6dc54fd8664788a554f
  orphan hash: ce6d0bd47e8091b7614c3e0a5fbb6c78
  flag hash: 7c02f8b77a7db746ad4b6beb3be70535
  sig of: Nothing
  used TH splices: False
  where
exports:
  LoopAnalysis.analyseLoop_map
  LoopAnalysis.analyseLoop_reduce
  LoopAnalysis.getErrorAnnotations
  LoopAnalysis.getReads
  LoopAnalysis.getReductionVarNames
  LoopAnalysis.getWrites
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools MiniPP
                     PreProcessor SubroutineTable TupleTable VarAccessAnalysis
                     VarDependencyAnalysis Warning
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      haskell-src-1.0.2.0@haskell-src-1.0.2.0-3zoaErItXGVA1GHC7t3Glx
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      process-1.4.3.0@process-1.4.3.0
                      syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Instances
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Data da440c60016500822a3d4307ca5dea66
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 20d4ffbee41965d03d6a989425473dc4
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  F95IntrinsicFunctions 1b7f8e2622be78a835577e1b6cb9c90b
  exports: dc77bc6122892f669e7921a25fe21f4c
  f95IntrinsicFunctions 2ee4e8be5b6033feb7926734889188a8
import  -/  Language.Fortran c957d8f93581b3ce2cc521df25110d11
  exports: cb4e2f808f933bd0493dcd95204741d0
  Assg e4ff0447498349c3e2879e1af28dc289
  Bin 31bb1b9369e8820657f411d90ee9619c
  BinOp e17095ab710540e6e45e7763d42db35f
  Call 5dc8fc6a52ca566d9c8f8635b11363e5
  Con e9784612770372502a12b479082c4a0e
  Expr fd45c3abbcc1cd23ca18c96ee1403b96
  FSeq 66c58ad61465e02006618848a2dea986
  For 8eaaf1a59a9e6e9d8f36eff8caf7c991
  Fortran 7ef8d1883356542a2e7829f1c3512bc2
  If 2ebe473c51363820c571e0150fe25882
  Mul 408f573b36ba1a21b1233ab02a2b76a6
  Null f9b4d2f804869f054752a44b06f43d80
  Or 213d2e6b495d5f025e4a6b3f58e82a27
  Plus 2246ba64804dd1a40f56ff697ab3e419
  VarName 64af05f1c71bcd1dfd571ca0d5218f1b
  VarName d4d45769399fe3ed8e0615e3282cf5b7
  srcSpan fbf339ac9b9eae31a89ba940dccb0289
import  -/  LanguageFortranTools 7890a5e96ab51325aa3603dbd4691bf4
  exports: 83b35210801e0c6fe3fd2a2c2ff1ecd0
  Anno e22809b44b97ccfdb28bfb19047d139f
  applyGeneratedSrcSpans abc3393b31513f41cb818c5f6e8c39dc
  combineMaps 36b30c1166f90ccbb57ffb59fe770f13
  errorLocationFormatting ade5e4011267f0b3e68f4c6bf90cd5b5
  extractAllVarNames 86e7bb58fcd61ba1c9214f48532a0256
  extractContainedOperands ad7a63c662cf122960b20a3bede2f27f
  extractContainedVars 0331c35bcc1dc0d38694c0dba9afce40
  extractExpr_list 90ec2eadeb0a2ed115fbe8bc2fb1ab33
  extractFirstFortran 21ac384425554ea549e1f4507ad7a908
  extractOperands 4ddf57e446d8f47e8d5ca35eb2b33baf
  extractPrimaryReductionFunction 49e11240ac424d2be24fb360fce42874
  extractPrimaryReductionOp cda64d1992e89c20ebcc7a87e588ea11
  extractVarNames 0c06747830f37e92c31e4dbe6aedfd6f
  generateVar 9d0fea224f278c04fc62fa0745c0e6f6
  hasOperand b77d419e6a1626b5df588435a113ff03
  listRemoveDuplications 4378f4b10536dcf8634c95685ebad55d
  listSubtract b3c64f9bf63909177406c8d10e99ecef
  nullAnno e3239ac8aba218af15f945a652936cc8
  nullSrcSpan 088997d0b27116160aebfa68704495fa
  outputExprFormatting 94304bd749d8576e2241b877c8b68b4d
  outputTab 7dd6e0a389efe481cc10a3751b3f709f
  usesVarName_list 1a8e06494d870a68ecb9906f49497737
  varNameStr 95ac032c44f5687eb820ca35335877d7
import  -/  MiniPP f16ed7e5a39853044388f8480999b1a1
  exports: 7578fb79964ca180f8c5942d9032d1f5
import  -/  SubroutineTable 478a2d1f7dd1c241949a1b63a72c1af8
  exports: 36e92c4145b6d54c4036b21148e09ac1
  SubroutineTable 875efe6d79ce808ce2e029d4077f36df
  generateArgumentTranslation 8c77a00a67e907a9423fb7e678ed7313
  subroutineTable_ast 2d5aaaf22f57e0ecf7860f465469436a
import  -/  VarAccessAnalysis c1df2c318ff94db68fe9eac144e58579
  exports: 051e850c675aa14514a70f7a8b7a0582
  VarAccessAnalysis e08531c66c90e73f54dbd5e70c7e78e1
  isFunctionCall 1afc5a377b5b112c8daa139382274b4d
import  -/  VarDependencyAnalysis d3e85612afd610e5fcb0e3763a1de01e
  exports: f27db6a43dea9dbe861dd661c14bd373
  VarDependencyAnalysis eac14f63a23cb4cb28fe9d2430e0a426
  isIndirectlyDependentOn 0bd7633fcab13054b1525ac0ea51e69d
import  -/  Warning 37568988846bf7dc0ef160b198d03155
  exports: 66d1a373648e452607e9cbdbd4f3a821
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics ea99a8062a9608312218ffd7309b5391
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Aliases 09d594ec9a31e3c858478cc583771648
import  -/  syb-0.6@syb-0.6-IcoSwlPi2Nx4zSqMmorFPS:Data.Generics.Schemes 4b69980d384f37e61fe24ae708a71220
8d1a67be779fcb474764b6c9e2676bfc
  $s$fDataArgList ::
    Data.Data.Data
      (Language.Fortran.ArgList
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ArgList
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataArgList_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataArgList_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataArgList_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  LoopAnalysis.$s$fDataArgList3
                  LoopAnalysis.$s$fDataArgList2
                  (Language.Fortran.$fDataArgList_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  LoopAnalysis.$s$fDataArgList1
                  (Language.Fortran.$fDataArgList_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataArgList_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataArgList_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataArgList_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataArgList_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataArgList_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataArgList_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataArgList_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData) -}
369f63d918a901d813df352e0d163226
  $s$fDataArgList1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.ArgList
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds13 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.ArgList
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
4792cc93735b282e4455343d9a02af73
  $s$fDataArgList2 ::
    Language.Fortran.ArgList
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: Language.Fortran.ArgList
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$ta2TTLH2iFC1qRliXzNZGA) -}
942ab7a1cbbe9ae16245580c57e2c9bc
  $s$fDataArgList3 ::
    Language.Fortran.ArgList
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds13 :: Language.Fortran.ArgList
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case ds13 of wild { Language.Fortran.ArgList ds14 ds15 ->
                 Language.Fortran.$ca2TTLH2iFC1qRliXzNZGA }) -}
6701393176cbbff83592511d58b9bf84
  $s$fDataArgList4 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe
         (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds13 :: forall d. Data.Data.Data d => c (t d)) ->
                 GHC.Base.Nothing
                   @ (c (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]))) -}
fe987413aafca7a86195a6aa43d37649
  $s$fDataArgList5 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: Data.Map.Base.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.mapDataType) -}
cde6eab59264804799a1bccac75dd718
  $s$fDataArgList6 ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: Data.Map.Base.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Base.fromListConstr) -}
5bf04248d4e48defc027357e9f517c2c
  $s$fDataArgList_$cgmapQ1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.Expr
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds13 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.Expr
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
fe6fe3322ffe0829ade36422701ca1d6
  $s$fDataArgList_$cgmapQ2 ::
    Language.Fortran.Expr
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: Language.Fortran.Expr
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$t8ooBCVvkUu0CFtmgl1DgHc) -}
2b7f2684a75e8eed6b55f563e10ab351
  $s$fDataArgList_$cgmapQ_$s$fDataExpr ::
    Data.Data.Data
      (Language.Fortran.Expr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataExpr_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$ctoConstr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  LoopAnalysis.$s$fDataArgList_$cgmapQ2
                  (Language.Fortran.$fDataExpr_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  LoopAnalysis.$s$fDataArgList_$cgmapQ1
                  (Language.Fortran.$fDataExpr_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataExpr_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData) -}
64232611b1e0682d1b9f9c06b3233627
  $s$fDataArgList_$dData ::
    Data.Data.Data
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Unfolding: InlineRule (0, True, True)
                LoopAnalysis.$s$fDataArgList_$s$fDataMap -}
64d355e2a3070ea2058e713e838be9b9
  $s$fDataArgList_$dData1 :: Data.Data.Data [GHC.Base.String]
  {- Unfolding: InlineRule (0, True, True)
                LoopAnalysis.$s$fDataArgList_$s$fData[] -}
d61e474da79aa9958e4bde847298b28f
  $s$fDataArgList_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fDataMap_$cp1Data
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  LoopAnalysis.$s$fDataArgList6
                  LoopAnalysis.$s$fDataArgList5
                  LoopAnalysis.$s$fDataArgList4
                  (Data.Map.Base.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapT
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Base.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     LoopAnalysis.$s$fDataArgList_$dData1
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
75d6c3685bb66294befdb732b55ec579
  $s$fDataArgList_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Data.$fData[]_$cp1Data
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  LoopAnalysis.$s$fDataArgList_$s$fData[]_$ctoConstr
                  LoopAnalysis.$s$fDataArgList_$s$fData[]_$cdataTypeOf
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  LoopAnalysis.$s$fDataArgList_$s$fData[]_$cdataCast2
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
aceb1484a603e497ec556a7f9a39de09
  $s$fDataArgList_$s$fData[]_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [[GHC.Types.Char]])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds13 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing @ (c [[GHC.Types.Char]])) -}
1c93a2d425b773b9bfe1eb8eaa03b555
  $s$fDataArgList_$s$fData[]_$cdataTypeOf ::
    [[GHC.Types.Char]] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: [[GHC.Types.Char]]) -> Data.Data.listDataType) -}
3f6f1fb4870422af5c86982be01e7f16
  $s$fDataArgList_$s$fData[]_$ctoConstr ::
    [[GHC.Types.Char]] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds13 :: [[GHC.Types.Char]]) ->
                 case ds13 of wild {
                   [] -> Data.Data.nilConstr : ds14 ds15 -> Data.Data.consConstr }) -}
6b70931460d775b7fc249ebf30e41f27
  $s$fDataProgUnit ::
    Data.Data.Data
      (Language.Fortran.ProgUnit
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ProgUnit
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fDataProgUnit_$cp1Data
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgfoldl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgunfold
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  LoopAnalysis.$s$fDataProgUnit3
                  LoopAnalysis.$s$fDataProgUnit2
                  (Language.Fortran.$fDataProgUnit_$cdataCast1
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  LoopAnalysis.$s$fDataProgUnit1
                  (Language.Fortran.$fDataProgUnit_$cgmapT
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQl
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQr
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQ
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapQi
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapM
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapMp
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData)
                  (Language.Fortran.$fDataProgUnit_$cgmapMo
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fDataArgList_$dData) -}
fdb24fc7a2d0881bfe3d2dc5619a4df2
  $s$fDataProgUnit1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Fortran.ProgUnit
               (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds13 :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Fortran.ProgUnit
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])))) -}
ae21ac4944f3b99afdc7c063179f8c21
  $s$fDataProgUnit2 ::
    Language.Fortran.ProgUnit
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: Language.Fortran.ProgUnit
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 Language.Fortran.$t7VQWdGSfPYu9Iisks7pSs4) -}
a76a99c3b158e4c9e593bd7257a9039b
  $s$fDataProgUnit3 ::
    Language.Fortran.ProgUnit
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds13 :: Language.Fortran.ProgUnit
                              (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case ds13 of wild {
                   Language.Fortran.Main ds14 ds15 ds16 ds17 ds18 ds19
                   -> Language.Fortran.$c4xrtyfBJfgG9CdmZCyXplY
                   Language.Fortran.Sub ds14 ds15 ds16 ds17 ds18 ds19
                   -> Language.Fortran.$c7zjF0LiJYf2AdH4exyJgTk
                   Language.Fortran.Function ds14 ds15 ds16 ds17 ds18 ds19 ds20
                   -> Language.Fortran.$cHz24H293oUm0OxUULdlqBb
                   Language.Fortran.Module ds14 ds15 ds16 ds17 ds18 ds19 ds20
                   -> Language.Fortran.$cJF7ERNq7h76LqRZ36w7OdI
                   Language.Fortran.BlockData ds14 ds15 ds16 ds17 ds18 ds19
                   -> Language.Fortran.$cJMYppX9bYODKKluMTnLSGS
                   Language.Fortran.PSeq ds14 ds15 ds16 ds17
                   -> Language.Fortran.$cBhco6aZ1tyeC07hEtbJOeV
                   Language.Fortran.Prog ds14 ds15 ds16
                   -> Language.Fortran.$c1punZIYcQoU5BRBrTkMOur
                   Language.Fortran.NullProg ds14 ds15
                   -> Language.Fortran.$c4IpgnqT1fRXLxfwDHaby2z
                   Language.Fortran.IncludeProg ds14 ds15 ds16 ds17
                   -> Language.Fortran.$cCGFBodCaxL10tlXfi5MSfH }) -}
fc130eda337296e42127cb5d4bfac13b
  $s$fEqExpr ::
    GHC.Classes.Eq
      (Language.Fortran.Expr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqExpr_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fEqExpr_$dEq)
                  LoopAnalysis.$s$fEqExpr_$s$fEqExpr_$c/= -}
444b63b2c1cf8e560ee3ce459469e58e
  $s$fEqExpr_$dEq ::
    GHC.Classes.Eq
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                LoopAnalysis.$s$fEqExpr_$s$fEqMap -}
f811a4fd7374f54fe9767b3387964223
  $s$fEqExpr_$s$fEqExpr_$c/= ::
    Language.Fortran.Expr
      (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.Expr
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.Fortran.Expr
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                   (b :: Language.Fortran.Expr
                           (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])) ->
                 case Language.Fortran.$fEqExpr_$c==
                        @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                        LoopAnalysis.$s$fEqExpr_$dEq
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b3269dbe19a34d29fe68ecbb1bd3ef7d
  $s$fEqExpr_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Base.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  LoopAnalysis.$s$fEqExpr_$s$fEqMap_$c/= -}
5ae8795779483e4e6989411a3412aa0e
  $s$fEqExpr_$s$fEqMap_$c/= ::
    Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Base.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ [GHC.Types.Char]
                      @ [GHC.Base.String]
                      GHC.Classes.$fEq[]_$s$fEq[]1
                      GHC.Classes.$fEq[]_$s$fEq[]2
                      x
                      y)) -}
9472ea2a983141be6f41834ac695ec3e
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Base.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fEqExpr_$dEq)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Base.Map GHC.Base.String [GHC.Base.String])
                     LoopAnalysis.$s$fEqExpr_$dEq) -}
ff678bbd98296021e1e5ffc0ddf3348f
  $sinsert_$sgo10 ::
    [GHC.Types.Char]
    -> a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
ccd645699ab628213ee11778a7851b1c
  $slookup1 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map [GHC.Types.Char] a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f6a2dc0fff4067442a666e7cda889e51
  $stypeRep#10 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           LoopAnalysis.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
9800f9cb21052cdd117867c4aa03f5d9
  $stypeRep#11 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
14e5537cbd3a52244ea7cd7406643e1a
  $stypeRep#14 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           LoopAnalysis.$stypeRep#15
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tc[]
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
c0f2eb6464faa68d80def2cbd97676f8
  $stypeRep#15 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17730107610217102821##
                   9866972337190828755##) -}
7847ffb754ad5e7aeaae7b03a7acf6fe
  $stypeRep#18 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case LoopAnalysis.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types22 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       LoopAnalysis.$stypeRep#19
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types22 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types22 } } }) -}
ae77a972e48bf8bd8147ab3258fb3f69
  $stypeRep#19 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   LoopAnalysis.$stypeRep#10
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
10a53a6b130af44276ba490f271ef3e2
  $stypeRep#2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           LoopAnalysis.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Map.Base.$tcMap
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
9869ceea5098665f088a5c5b771ff6ba
  $stypeRep#22 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case LoopAnalysis.$stypeRep#2 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types22 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       LoopAnalysis.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types22 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types22 } } }) -}
1d9614088eea79ea3ba89c40769cb09b
  $stypeRep#23 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   LoopAnalysis.$stypeRep#18
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
6df6df14f0ca12b2b1f8c7e09fd79b07
  $stypeRep#26 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case LoopAnalysis.$stypeRep#14 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types22 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       LoopAnalysis.$stypeRep#23
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types22 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types22 } } }) -}
b5cb4080365a5c21e33ccbc2c094b66a
  $stypeRep#29 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case LoopAnalysis.$stypeRep#22 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types22 :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       LoopAnalysis.$stypeRep#30
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types22 of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types22 } } }) -}
0d193d114503284fb4aa9e83673b8e3c
  $stypeRep#3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17306070887558246498##
                   16032333906417739553##) -}
e0c85dc5f407bcc3fed430cc79cd83ba
  $stypeRep#30 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   LoopAnalysis.$stypeRep#26
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
5759a1f20d33a1aa9a4e212810024deb
  $stypeRep#33 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           LoopAnalysis.$stypeRep#34
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcExpr
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
e00bb27d81810b1fdfff294b8f6e887e
  $stypeRep#34 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   13621902738272893592##
                   4484539928315244892##) -}
06db85fb1fe3bd964b5a434dd96ba1f1
  $stypeRep#6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           LoopAnalysis.$stypeRep#7
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Fortran.$tcFortran
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
1958ddad7b33123207b09c2a4cdda3b0
  $stypeRep#7 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6882220124880764793##
                   15271875958298145102##) -}
ae0e1c3ee6a53e9229752de0abe03b16
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   LoopAnalysis.$trModule2
                   LoopAnalysis.$trModule1) -}
1b6b127e8612d081a18fe9806eaf9f8b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LoopAnalysis"#) -}
2d4e15ee8f08df7d6a0db6145fdc2cb8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
86e65ee79940046d199e3df402052376
  $wanalyseLoop_map ::
    GHC.Base.String
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> VarAccessAnalysis.VarAccessAnalysis
    -> SubroutineTable.SubroutineTable
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> LoopAnalysis.AnalysisInfo
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U(A,A,A,U)><L,U><S,1*U>,
     Inline: [0] -}
8ade914104167c576ea860e9ebef5a45
  type AnalysisInfo =
    (LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno],
     [Language.Fortran.Expr LanguageFortranTools.Anno],
     [Language.Fortran.Expr LanguageFortranTools.Anno])
d89beba107729a928e286b129ed5cdb5
  analyseLoop_map ::
    GHC.Base.String
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> VarAccessAnalysis.VarAccessAnalysis
    -> VarDependencyAnalysis.VarDependencyAnalysis
    -> SubroutineTable.SubroutineTable
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> LoopAnalysis.AnalysisInfo
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U(A,A,A,U)><L,A><L,U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (9, True, True)
                (\ (w :: GHC.Base.String)
                   (w1 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w2 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w3 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w4 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w5 :: VarAccessAnalysis.VarAccessAnalysis)
                   (w6 :: VarDependencyAnalysis.VarDependencyAnalysis)
                   (w7 :: SubroutineTable.SubroutineTable)
                   (w8 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 LoopAnalysis.$wanalyseLoop_map w w1 w2 w3 w4 w5 w7 w8) -}
93e75a083396b57c16bdeaedd83e5de3
  analyseLoop_reduce ::
    GHC.Base.String
    -> [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> VarDependencyAnalysis.VarDependencyAnalysis
    -> VarAccessAnalysis.VarAccessAnalysis
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> LoopAnalysis.AnalysisInfo
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U(A,A,A,U)><S,1*U> -}
9eeef21cab9a58fd8ff69f45ddc65ac7
  getErrorAnnotations ::
    LoopAnalysis.AnalysisInfo -> LanguageFortranTools.Anno
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds13 :: (LanguageFortranTools.Anno,
                             [Language.Fortran.Expr LanguageFortranTools.Anno],
                             [Language.Fortran.Expr LanguageFortranTools.Anno],
                             [Language.Fortran.Expr LanguageFortranTools.Anno])) ->
                 case ds13 of wild { (,,,) errors ds14 ds15 ds16 -> errors }) -}
9669373f2393f55075f8fdd24a836215
  getReads ::
    LoopAnalysis.AnalysisInfo
    -> [Language.Fortran.Expr LanguageFortranTools.Anno]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds13 :: (LanguageFortranTools.Anno,
                             [Language.Fortran.Expr LanguageFortranTools.Anno],
                             [Language.Fortran.Expr LanguageFortranTools.Anno],
                             [Language.Fortran.Expr LanguageFortranTools.Anno])) ->
                 case ds13 of wild { (,,,) ds14 ds15 reads ds16 -> reads }) -}
d42cf1d1f27b28922dc12fe42c4aadfa
  getReductionVarNames ::
    LoopAnalysis.AnalysisInfo
    -> [Language.Fortran.Expr LanguageFortranTools.Anno]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds13 :: (LanguageFortranTools.Anno,
                             [Language.Fortran.Expr LanguageFortranTools.Anno],
                             [Language.Fortran.Expr LanguageFortranTools.Anno],
                             [Language.Fortran.Expr LanguageFortranTools.Anno])) ->
                 case ds13 of wild { (,,,) ds14 reductionVars ds15 ds16 ->
                 reductionVars }) -}
a7f1e1a6718ef504d8e0612660b38fe4
  getWrites ::
    LoopAnalysis.AnalysisInfo
    -> [Language.Fortran.Expr LanguageFortranTools.Anno]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds13 :: (LanguageFortranTools.Anno,
                             [Language.Fortran.Expr LanguageFortranTools.Anno],
                             [Language.Fortran.Expr LanguageFortranTools.Anno],
                             [Language.Fortran.Expr LanguageFortranTools.Anno])) ->
                 case ds13 of wild { (,,,) ds14 ds15 ds16 writes -> writes }) -}
"SPEC/LoopAnalysis $fDataArgList @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                       (Data.Map.Base.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fDataArgList @ (Data.Map.Base.Map
                                      GHC.Base.String [GHC.Base.String])
                                 $dData
  = LoopAnalysis.$s$fDataArgList
"SPEC/LoopAnalysis $fDataExpr @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                    (Data.Map.Base.Map
                                                                                       GHC.Base.String
                                                                                       [GHC.Base.String]))
  Language.Fortran.$fDataExpr @ (Data.Map.Base.Map
                                   GHC.Base.String [GHC.Base.String])
                              $dData
  = LoopAnalysis.$s$fDataArgList_$cgmapQ_$s$fDataExpr
"SPEC/LoopAnalysis $fDataMap @ [Char] @ [String]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                              [GHC.Types.Char])
                                                                  ($dData1 :: Data.Data.Data
                                                                                [GHC.Base.String])
                                                                  ($dData :: Data.Data.Data
                                                                               [GHC.Types.Char])
  Data.Map.Base.$fDataMap @ [GHC.Types.Char]
                          @ [GHC.Base.String]
                          $dData
                          $dData1
                          $dOrd
  = LoopAnalysis.$s$fDataArgList_$s$fDataMap
"SPEC/LoopAnalysis $fDataProgUnit @ (Map String [String])" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                        (Data.Map.Base.Map
                                                                                           GHC.Base.String
                                                                                           [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit @ (Data.Map.Base.Map
                                       GHC.Base.String [GHC.Base.String])
                                  $dData
  = LoopAnalysis.$s$fDataProgUnit
"SPEC/LoopAnalysis $fData[] @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                   [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] $dData
  = LoopAnalysis.$s$fDataArgList_$s$fData[]
"SPEC/LoopAnalysis $fData[]_$cdataCast2 @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                               [GHC.Types.Char])
  Data.Data.$fData[]_$cdataCast2 @ [GHC.Types.Char] $dData
  = LoopAnalysis.$s$fDataArgList_$s$fData[]_$cdataCast2
"SPEC/LoopAnalysis $fData[]_$cdataTypeOf @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                [GHC.Types.Char])
  Data.Data.$fData[]_$cdataTypeOf @ [GHC.Types.Char] $dData
  = LoopAnalysis.$s$fDataArgList_$s$fData[]_$cdataTypeOf
"SPEC/LoopAnalysis $fData[]_$ctoConstr @ [Char]" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                              [GHC.Types.Char])
  Data.Data.$fData[]_$ctoConstr @ [GHC.Types.Char] $dData
  = LoopAnalysis.$s$fDataArgList_$s$fData[]_$ctoConstr
"SPEC/LoopAnalysis $fEqExpr @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                (Data.Map.Base.Map
                                                                                   GHC.Base.String
                                                                                   [GHC.Base.String]))
  Language.Fortran.$fEqExpr @ (Data.Map.Base.Map
                                 GHC.Base.String [GHC.Base.String])
                            $dEq
  = LoopAnalysis.$s$fEqExpr
"SPEC/LoopAnalysis $fEqExpr_$c/= @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                     (Data.Map.Base.Map
                                                                                        GHC.Base.String
                                                                                        [GHC.Base.String]))
  Language.Fortran.$fEqExpr_$c/= @ (Data.Map.Base.Map
                                      GHC.Base.String [GHC.Base.String])
                                 $dEq
  = LoopAnalysis.$s$fEqExpr_$s$fEqExpr_$c/=
"SPEC/LoopAnalysis $fEqMap @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                            [GHC.Base.String])
                                                                ($dEq :: GHC.Classes.Eq
                                                                           [GHC.Types.Char])
  Data.Map.Base.$fEqMap @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        $dEq
                        $dEq1
  = LoopAnalysis.$s$fEqExpr_$s$fEqMap
"SPEC/LoopAnalysis $fEqMap_$c/= @ [Char] @ [String]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                 [GHC.Base.String])
                                                                     ($dEq :: GHC.Classes.Eq
                                                                                [GHC.Types.Char])
  Data.Map.Base.$fEqMap_$c/= @ [GHC.Types.Char]
                             @ [GHC.Base.String]
                             $dEq
                             $dEq1
  = LoopAnalysis.$s$fEqExpr_$s$fEqMap_$c/=
"SPEC/LoopAnalysis $fEqVarName @ (Map String [String])" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                   (Data.Map.Base.Map
                                                                                      GHC.Base.String
                                                                                      [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Base.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dEq
  = LoopAnalysis.$s$fEqVarName
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

