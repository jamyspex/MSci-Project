
==================== FINAL INTERFACE ====================
2018-11-16 12:45:18.822023633 UTC

interface main:CombineKernels 8043
  interface hash: 0580d0b6b21a05ab173bdeb649816463
  ABI hash: 2fdafb443a7a90b889719c88ff97277f
  export-list hash: 29c7da1aedac033f1133ad4600c499c4
  orphan hash: 820d6e0ab350358579f3293c40612772
  flag hash: 7853c119b27f3f568e863cba4679c19c
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  CombineKernels.combineKernelsProgUnit
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     TupleTable VarDependencyAnalysis Warning
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      haskell-src-1.0.3.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      process-1.6.3.0 syb-0.7 text-1.2.3.1 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Language.Fortran e2add56600673959dbdfe1ac093795c9
  exports: 6ca1e7b188145fc0c602707ea4a1c428
  Bin ce8c88108b295f664e1eddaeffc220f4
  Block c8f6dc9d55c3b3cbc94e3fb30057f310
  Con a93b732ad49402af2de80d19cc1ec61c
  Expr 6304956f2901eead56a8fac1e90d4904
  FSeq 779df6dd417159b80814ee837ce7e2c0
  Fortran cab0cd6287333175c6b9d87427982518
  Minus 83a81930ff6b28393feaec477bd960ce
  OpenCLMap e48fa1b14eab97eb69b2edc5f2c10ce8
  OpenCLReduce d14e8e442939b0e4bb37da5a0da04484
  Plus 18a4412d61780e28c85d747ab521c561
  Program 607f4435fb994a8c5b83bd9f7709b3c3
  VarName 361ec85699986b0b7f4d68a05374d64d
import  -/  LanguageFortranTools 737e8abc5de089abcd0ce62660f9d159
  exports: a5a994dcb8ba92c93a8a354a063275b0
  Anno 1420203ed9c39fcf982d2ff37c01ae68
  appendAnnotation 0cb1dda6325719e67f26de8d69e9d691
  appendAnnotationMap 50267667683b6ec2d29dd181c59a4fea
  appendFortran_recursive a4e0a6baa3b66014183e44ccf0a12047
  combineAnnotations bd18cf823eef8367746cfe801f0e9d2f
  compilerName 716783fc2180cf5d40b0847b268cbee2
  errorLocationFormatting 9c9c0273432833def2860c2509392832
  generateAndExprFromList 3cf17bbc4ef8f5186be247188ddd53d7
  generateIf e9ac66b594d47f4b1fc9da873f6ce778
  generateLTExpr e83c0a2e02d3a190d6db72ef29392553
  generateSrcSpanMerge 9351529b83def99d6b69f6e3a8dee095
  generateVar 15f2fb62881f8fb31d49eabe4798345c
  listRemoveDuplications cc90c431c334b3429c5de18c32c0abd0
  standardiseSrcSpan 86113634805728e5513a4ae4d8033f83
import  -/  VarDependencyAnalysis 396f6429b909c284662b818c101482ab
  exports: 9e709a7a646c79ec724f173b4bb12fe5
  loopCarriedDependencyCheck 89d79345f8c95009c523d7a21dbafc43
import  -/  syb-0.7:Data.Generics 2ddc257f9ac35414fc37ff4d19b4d388
import  -/  syb-0.7:Data.Generics.Aliases a5097c06261967df51d59247bf1d4958
import  -/  syb-0.7:Data.Generics.Schemes 58bc96c8ed0bed4ad53424f237efe8b8
59d067ed155c335b49e1bb2d870a6a58
  $s$fDataBlock ::
    Data.Data.Data
      (Language.Fortran.Block
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Block
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Block
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataBlock9
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Block
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataBlock_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Block
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   case ds of wild { Language.Fortran.Block ds1 ds2 ds3 ds4 ds5 ds6 ->
                   Language.Fortran.$cBlock })
                  (\ (ds :: Language.Fortran.Block
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tBlock)
                  (Language.Fortran.$fDataBlock_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable3 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Block
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataBlock1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Block
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Block
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataBlock_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap) -}
ee885803f61bf6189ea549a7d3371927
  $s$fDataBlock_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ (Data.Map.Internal.Map [GHC.Types.Char])
                     @ [GHC.Base.String]
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ (* -> *)
                        @ Data.Map.Internal.Map
                        @ [GHC.Types.Char]
                        Data.Map.Internal.$fDataMap17
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7))
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ [GHC.Types.Char]
                        Data.Data.$fData[]3
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7)))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Data.Map.Internal.Map
                                                                       [GHC.Types.Char]
                                                                       [GHC.Base.String]>_N)
                  (Data.Map.Internal.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.fromListConstr)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.mapDataType)
                  (\ @ t :: * -> *
                     @ c :: * -> *
                     ($dTypeable3 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d. Data.Data.Data d => c (t d)) ->
                   GHC.Base.Nothing
                     @ (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])))
                  (Data.Map.Internal.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap6
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R)
                  (Data.Map.Internal.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CombineKernels.$s$fDataBlock_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
797166d550ba690231ae9182ee3c5c40
  $s$fDataBlock_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]3
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ GHC.Types.Char
                        Data.Data.$fData[]3
                        Data.Data.$fDataChar7))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[[GHC.Types.Char]]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ (ds :: [[GHC.Types.Char]]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [[GHC.Types.Char]]) -> Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable3 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c [[GHC.Types.Char]]))
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
5902880b9c480af0522df53ea8da765f
  $s$fDataExpr ::
    Data.Data.Data
      (Language.Fortran.Expr
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Expr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataExpr6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Expr
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataExpr_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Expr
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tExpr)
                  (Language.Fortran.$fDataExpr_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable3 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Expr
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataExpr1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Expr
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Expr
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataExpr_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fDataBlock_$s$fDataMap) -}
a093d2c3f01a0a02ab6cc35dba4b2c4d
  $s$fDataMap_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   (w3 :: Data.Typeable.Internal.Typeable t) ->
                 Data.Map.Internal.$w$cdataCast2
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   Data.Data.$fData[]_$s$fData[]
                   CombineKernels.$s$fDataBlock_$s$fData[]
                   @ t
                   @ c
                   w3) -}
b59bc0a02397183598e8f76195206215
  $s$fData[]7 :: Data.Typeable.Internal.TypeRep [[GHC.Types.Char]]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ [GHC.Types.Char]
                   Data.Data.$fData[]3
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ []
                      @ GHC.Types.Char
                      Data.Data.$fData[]3
                      Data.Data.$fDataChar7)) -}
c24b527d30249d08147a26cefa2b4dc0
  $s$fEq(,,,) ::
    GHC.Classes.Eq
      (Language.Fortran.VarName LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno)
                  (\ (ds :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno))
                     (ds1 :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno)) ->
                   case ds of wild { (,,,) a1 a2 a3 a4 ->
                   case ds1 of wild1 { (,,,) b1 b2 b3 b4 ->
                   case Language.Fortran.$fEqVarName_$c==
                          @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                          CombineKernels.$s$fEq(,,,)_$s$fEqMap
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.False
                     GHC.Types.True
                     -> case Language.Fortran.$fEqArgList_$c==
                               @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                               CombineKernels.$s$fEq(,,,)_$s$fEqMap
                               a2
                               b2 of wild3 {
                          GHC.Types.False -> GHC.Types.False
                          GHC.Types.True
                          -> case Language.Fortran.$fEqArgList_$c==
                                    @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                                    CombineKernels.$s$fEq(,,,)_$s$fEqMap
                                    a3
                                    b3 of wild4 {
                               GHC.Types.False -> GHC.Types.False
                               GHC.Types.True
                               -> Language.Fortran.$fEqArgList_$c==
                                    @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                                    CombineKernels.$s$fEq(,,,)_$s$fEqMap
                                    a4
                                    b4 } } } } })
                  CombineKernels.$s$fEq(,,,)_$s$fEq(,,,)_$c/= -}
20bea934e3c312c5da6268d527f2ee51
  $s$fEq(,,,)_$s$fEq(,,,)_$c/= ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno)
    -> (Language.Fortran.VarName LanguageFortranTools.Anno,
        Language.Fortran.Expr LanguageFortranTools.Anno,
        Language.Fortran.Expr LanguageFortranTools.Anno,
        Language.Fortran.Expr LanguageFortranTools.Anno)
    -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLL),1*U(1*U(U,1*U),U,U,U)><S(SLLL),1*U(1*U(U,1*U),U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno))
                   (y :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno)) ->
                 case x of wild { (,,,) a1 a2 a3 a4 ->
                 case y of wild1 { (,,,) b1 b2 b3 b4 ->
                 case Language.Fortran.$fEqVarName_$c==
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        CombineKernels.$s$fEq(,,,)_$s$fEqMap
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.Fortran.$fEqArgList_$c==
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             CombineKernels.$s$fEq(,,,)_$s$fEqMap
                             a2
                             b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case Language.Fortran.$fEqArgList_$c==
                                  @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                                  CombineKernels.$s$fEq(,,,)_$s$fEqMap
                                  a3
                                  b3 of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case Language.Fortran.$fEqArgList_$c==
                                       @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                                       CombineKernels.$s$fEq(,,,)_$s$fEqMap
                                       a4
                                       b4 of wild7 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } }) -}
75290098f728b4047d19de9e10eb3625
  $s$fEq(,,,)_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Internal.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  CombineKernels.$s$fEq(,,,)_$s$fEqMap_$c/= -}
e864e80ae165321a8492610f52a03a15
  $s$fEq(,,,)_$s$fEqMap_$c/= ::
    Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEq[]_$s$fEq[]2
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
fb4ed2028d5f20ab412387f824da81f1
  $s$fEqExpr ::
    GHC.Classes.Eq
      (Language.Fortran.Expr
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqArgList_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fEq(,,,)_$s$fEqMap)
                  (Language.Fortran.$fEqExpr_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fEq(,,,)_$s$fEqMap) -}
04f06558cb73a16c63f27dfc4611bf3a
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CombineKernels.$s$fEq(,,,)_$s$fEqMap)
                  CombineKernels.$s$fEqVarName_$s$fEqVarName_$c/= -}
5fd6169da3518e4bf841c9938648a3e4
  $s$fEqVarName_$s$fEqVarName_$c/= ::
    Language.Fortran.VarName
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,1*U)><S,1*U(U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Fortran.VarName
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                   (y :: Language.Fortran.VarName
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case x of wild { Language.Fortran.VarName a1 a2 ->
                 case y of wild1 { Language.Fortran.VarName b1 b2 ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEq[]_$s$fEq[]2
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Base.eqString a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
f7b9d94bde04eb07f7bf3f7b7b15170c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CombineKernels.$trModule3
                   CombineKernels.$trModule1) -}
4700b87443b5363afcad521b7f6b414a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS CombineKernels.$trModule2) -}
046a607c03d6ad46675af573514017ee
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CombineKernels"#) -}
07a50258286b82957ead2c9c14f3f356
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS CombineKernels.$trModule4) -}
a0b259aa06f1e8fc67083ce352aca461
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
3bd9fffb0375748e5c5689676b959dc1
  combineKernelsProgUnit ::
    Data.Data.Data a => GHC.Base.Maybe GHC.Types.Float -> a -> a
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U> -}
"SPEC/CombineKernels $fDataBlock @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                  (Data.Map.Internal.Map
                                                                                     GHC.Base.String
                                                                                     [GHC.Base.String]))
  Language.Fortran.$fDataBlock @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = CombineKernels.$s$fDataBlock
"SPEC/CombineKernels $fDataExpr @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                 (Data.Map.Internal.Map
                                                                                    GHC.Base.String
                                                                                    [GHC.Base.String]))
  Language.Fortran.$fDataExpr @ (Data.Map.Internal.Map
                                   GHC.Base.String [GHC.Base.String])
                              v
  = CombineKernels.$s$fDataExpr
"SPEC/CombineKernels $fDataMap @ [Char] @ [String]" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                             [GHC.Types.Char])
                                                                    (v1 :: Data.Data.Data
                                                                             [GHC.Base.String])
                                                                    (v :: Data.Data.Data
                                                                            [GHC.Types.Char])
  Data.Map.Internal.$fDataMap @ [GHC.Types.Char]
                              @ [GHC.Base.String]
                              v
                              v1
                              v2
  = CombineKernels.$s$fDataBlock_$s$fDataMap
"SPEC/CombineKernels $fDataMap_$cdataCast2 @ [Char] @ [String]" [orphan] [0] forall (w2 :: GHC.Classes.Ord
                                                                                             [GHC.Types.Char])
                                                                                    (w1 :: Data.Data.Data
                                                                                             [GHC.Base.String])
                                                                                    (w :: Data.Data.Data
                                                                                            [GHC.Types.Char])
  Data.Map.Internal.$fDataMap_$cdataCast2 @ [GHC.Types.Char]
                                          @ [GHC.Base.String]
                                          w
                                          w1
                                          w2
  = CombineKernels.$s$fDataMap_$cdataCast2
"SPEC/CombineKernels $fData[] @ [Char]" [orphan] forall (v :: Data.Data.Data
                                                                [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] v
  = CombineKernels.$s$fDataBlock_$s$fData[]
"SPEC/CombineKernels $fData[]7 @ [Char]" [orphan] forall ($dData :: Data.Data.Data
                                                                      [GHC.Types.Char])
  Data.Data.$fData[]7 @ [GHC.Types.Char] $dData
  = CombineKernels.$s$fData[]7
"SPEC/CombineKernels $fEq(,,,) @ (VarName Anno) @ (Expr
                                                    Anno) @ (Expr Anno) @ (Expr Anno)" [orphan] forall (v3 :: GHC.Classes.Eq
                                                                                                                                                                        (Language.Fortran.Expr
                                                                                                                                                                           LanguageFortranTools.Anno))
                                                                                                                                                               (v2 :: GHC.Classes.Eq
                                                                                                                                                                        (Language.Fortran.Expr
                                                                                                                                                                           LanguageFortranTools.Anno))
                                                                                                                                                               (v1 :: GHC.Classes.Eq
                                                                                                                                                                        (Language.Fortran.Expr
                                                                                                                                                                           LanguageFortranTools.Anno))
                                                                                                                                                               (v :: GHC.Classes.Eq
                                                                                                                                                                       (Language.Fortran.VarName
                                                                                                                                                                          LanguageFortranTools.Anno))
  GHC.Classes.$fEq(,,,) @ (Language.Fortran.VarName
                             LanguageFortranTools.Anno)
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        v
                        v1
                        v2
                        v3
  = CombineKernels.$s$fEq(,,,)
"SPEC/CombineKernels $fEq(,,,)_$c/= @ (VarName Anno) @ (Expr
                                                         Anno) @ (Expr Anno) @ (Expr Anno)" [orphan] forall ($dEq3 :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.Fortran.Expr
                                                                                                                                                                                        LanguageFortranTools.Anno))
                                                                                                                                                                         ($dEq2 :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.Fortran.Expr
                                                                                                                                                                                        LanguageFortranTools.Anno))
                                                                                                                                                                         ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.Fortran.Expr
                                                                                                                                                                                        LanguageFortranTools.Anno))
                                                                                                                                                                         ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                    (Language.Fortran.VarName
                                                                                                                                                                                       LanguageFortranTools.Anno))
  GHC.Classes.$fEq(,,,)_$c/= @ (Language.Fortran.VarName
                                  LanguageFortranTools.Anno)
                             @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                             @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                             @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                             $dEq
                             $dEq1
                             $dEq2
                             $dEq3
  = CombineKernels.$s$fEq(,,,)_$s$fEq(,,,)_$c/=
"SPEC/CombineKernels $fEqExpr @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                               (Data.Map.Internal.Map
                                                                                  GHC.Base.String
                                                                                  [GHC.Base.String]))
  Language.Fortran.$fEqExpr @ (Data.Map.Internal.Map
                                 GHC.Base.String [GHC.Base.String])
                            v
  = CombineKernels.$s$fEqExpr
"SPEC/CombineKernels $fEqMap @ [Char] @ [String]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                           [GHC.Base.String])
                                                                  (v :: GHC.Classes.Eq
                                                                          [GHC.Types.Char])
  Data.Map.Internal.$fEqMap @ [GHC.Types.Char]
                            @ [GHC.Base.String]
                            v
                            v1
  = CombineKernels.$s$fEq(,,,)_$s$fEqMap
"SPEC/CombineKernels $fEqMap_$c/= @ [Char] @ [String]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                   [GHC.Base.String])
                                                                       ($dEq :: GHC.Classes.Eq
                                                                                  [GHC.Types.Char])
  Data.Map.Internal.$fEqMap_$c/= @ [GHC.Types.Char]
                                 @ [GHC.Base.String]
                                 $dEq
                                 $dEq1
  = CombineKernels.$s$fEq(,,,)_$s$fEqMap_$c/=
"SPEC/CombineKernels $fEqVarName @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                  (Data.Map.Internal.Map
                                                                                     GHC.Base.String
                                                                                     [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = CombineKernels.$s$fEqVarName
"SPEC/CombineKernels $fEqVarName_$c/= @ (Map String [String])" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                          (Data.Map.Internal.Map
                                                                                             GHC.Base.String
                                                                                             [GHC.Base.String]))
  Language.Fortran.$fEqVarName_$c/= @ (Data.Map.Internal.Map
                                         GHC.Base.String [GHC.Base.String])
                                    $dEq
  = CombineKernels.$s$fEqVarName_$s$fEqVarName_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

