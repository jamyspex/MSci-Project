
==================== FINAL INTERFACE ====================
2018-11-16 12:45:20.390005066 UTC

interface main:FortranGenerator 8043
  interface hash: 485c8e5d8f919ca13d6e1839c519869b
  ABI hash: 2f897b974498c9ae931dccb37cb72ff1
  export-list hash: c3d733850e89ef125b28092452fc15ee
  orphan hash: 3161a1daf47f96185ba34f642d3839e7
  flag hash: 7853c119b27f3f568e863cba4679c19c
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  FortranGenerator.adaptOriginalDeclaration_intent
  FortranGenerator.adaptOriginalDeclaration_varname
  FortranGenerator.declareGlobalReductionArray
  FortranGenerator.declareLocalReductionArray
  FortranGenerator.declareScalarPointer
  FortranGenerator.generateArgList
  FortranGenerator.generateFinalHostReduction
  FortranGenerator.generateFinalHostReduction_assgs
  FortranGenerator.generateGlobalWorkItemsExpr
  FortranGenerator.generateIfNoElse
  FortranGenerator.generateImplicitDecl
  FortranGenerator.generateKernelDeclarations
  FortranGenerator.generateLoop
  FortranGenerator.generateLoopInitialisers
  FortranGenerator.generateLoopIterationsExpr
  FortranGenerator.generateLoopStartAddition
  FortranGenerator.generateProductExpr_list
  FortranGenerator.generateRangeExpr
  FortranGenerator.generateRangeVar
  FortranGenerator.generateReductionArrayAssignment
  FortranGenerator.generateRelVar
  FortranGenerator.generateSizeDecl
  FortranGenerator.generateSizeStatement
  FortranGenerator.generateSizeStatements_decls
  FortranGenerator.generateSubtractionExpr_list
  FortranGenerator.generateWorkGroupReduction
  FortranGenerator.generateWorkGroupReduction_assgs
module dependencies: CodeEmitterUtils F95IntrinsicFunctions
                     Language.Fortran Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     Warning
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      haskell-src-1.0.3.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      process-1.6.3.0 syb-0.7 text-1.2.3.1 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  CodeEmitterUtils 8c8f697b86f52412aeee8a88a6067ee0
  exports: e29a2b01fb771904633bff8cc099ecaa
  addDimension a9344bed1b35efab801dfc99840353ba
  applyIntent 4e5f03cb89dc9ee478313101df9adf05
  containsParameterAttr bfa9b18c4c4efcd4e197f7bba662bcd1
  declareScalarPointer_decl 01a7cc16b030ffe6a1523056231ff238
  extractDeclaration_varname 4c56904ee29d2c1912319b753b7323b8
  generateGlobalReductionArray e32ea7aa7f370591cd37a7e5c600d788
  generateLocalReductionArray 841020e5a975073c6d34180c8c79fc75
  generateLocalReductionVar c345185ec1f0c0d639145b173d02fa1e
  getDeclRank e376d7a2bfc0222995189db58df374e5
  nunitsVar 1451401abe946cff7de97b4d11538bff
  removeIntentFromDecl 54ba55367b26fceb5c5f8383250325f3
  scalarPointerVarName a0992b634ba3ae26ac202d5a574dc0ba
  varSizeVarName c503113eabf760574b114f4a179ded4c
import  -/  Language.Fortran e2add56600673959dbdfe1ac093795c9
  exports: 6ca1e7b188145fc0c602707ea4a1c428
  ArgList b3f677704555eeaf5d66d846d43ac778
  ArgList 6304956f2901eead56a8fac1e90d4904
  Assg c3a5a5c7c0380c697e6a5cda4cc060bd
  BaseType 4771b9af523aad0f39b02040c5046e99
  Bin ce8c88108b295f664e1eddaeffc220f4
  Con a93b732ad49402af2de80d19cc1ec61c
  Decl bf5604fd57dfb9f698111c9b30ee5605
  Decl e30f41d3f2effdd4b4a22fa8cf8c0055
  Dimension b79abe0a80c3378dabfaecd6caadd60e
  Div cf4bd6881ccd627392e1e8e1ed049580
  Expr 6304956f2901eead56a8fac1e90d4904
  For 5816e0af6d8df16d1771d2006bcf3abf
  Fortran cab0cd6287333175c6b9d87427982518
  If 70f325448a0ac0d3e601c0f9e1e99ec6
  In 806c6682e4ffdab4776e23b5c0c82c42
  InOut 4ca931ba089fb936bd60462edea6e28f
  Integer 8082a45204513974002220b5341d5b33
  IntentAttr 99ba40de9dfc0f3564a116b2fbf4b556
  Minus 83a81930ff6b28393feaec477bd960ce
  Mul d78a38debaadbefa8faf16070429adab
  NullExpr adfc15f00ad4bfbe033d167983c94995
  OpenCLBufferRead 9d6facba2ab5a4549c7d415b86d2a12f
  OpenCLBufferWrite fd57e16ab494e9f928a6973a79663ac9
  OpenCLMap e48fa1b14eab97eb69b2edc5f2c10ce8
  OpenCLReduce d14e8e442939b0e4bb37da5a0da04484
  Out 73ab48e8c681e54cbcbcdb76de251cbb
  Plus 18a4412d61780e28c85d747ab521c561
  Program 607f4435fb994a8c5b83bd9f7709b3c3
  Real efcfab18e0d8f1dbab722c8ce1c4fbc7
  Var 4b8ab01fc12afd12d9f52ad45e3004a1
  VarName a39ab087efdb6eba24247b07097f591c
  VarName 361ec85699986b0b7f4d68a05374d64d
import  -/  LanguageFortranTools 737e8abc5de089abcd0ce62660f9d159
  exports: a5a994dcb8ba92c93a8a354a063275b0
  Anno 1420203ed9c39fcf982d2ff37c01ae68
  appendFortran_recursive a4e0a6baa3b66014183e44ccf0a12047
  applyGeneratedSrcSpans c887472fe8f7b8f174b1bbcd7a24b63d
  extractAssigneeFromDecl d4ecaf52b7147befe912a1b31720faf2
  extractPrimaryReductionFunction 107a7a029ec017d3ccd919d45a4fe468
  extractPrimaryReductionOp f88551446462666ca9682d051c5513da
  extractVarNames 920113507cf2d36f1a1834c3a88c2c59
  generateAdditionExpr ebefe7ed371ea5a025889e090db2effe
  generateArrayVar 41f69fa556436cb7a4d3721607926c4e
  generateAssgCode 20710a75ff0344432f71c139fc360606
  generateESeq 9fb1ed62bd0a0082ff6bcab51b602e13
  generateIntConstant 6662a08fe79ba459b5e48087464e69d4
  generateSubtractionExpr 5bd05c27c551cc874ced7ab020963e53
  generateVar 15f2fb62881f8fb31d49eabe4798345c
  listIntersection a852f434f0160ba789329974e5d10cb7
  listSubtract 40ed5a52f1d2f2210a51ecab157379fd
  nullAnno b5ec3f8914fec256ad2e53b761b9bd52
  nullSrcSpan d9f6701836bf1a31425d57566b44db7b
  outputExprFormatting 071110acbe7f8df82378c3e15acadb0d
  replaceAllOccurences_varname cff8581a492a2237821e0a1c44d1e722
  usesVarName_list 7c75ad65f572a2cb7160776fea4e5c98
import  -/  syb-0.7:Data.Generics 2ddc257f9ac35414fc37ff4d19b4d388
import  -/  syb-0.7:Data.Generics.Aliases a5097c06261967df51d59247bf1d4958
import  -/  syb-0.7:Data.Generics.Schemes 58bc96c8ed0bed4ad53424f237efe8b8
6792456a132a3a346b8e60cdb23cd226
  $s$fDataDecl ::
    Data.Data.Data
      (Language.Fortran.Decl
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Decl
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Decl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataDecl6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Decl
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataDecl_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Decl
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tDecl)
                  (Language.Fortran.$fDataDecl_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Decl
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataDecl1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Decl
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Decl
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataDecl_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap) -}
626d4a8f4d108409f7e184f578aa98ca
  $s$fDataDecl_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ (Data.Map.Internal.Map [GHC.Types.Char])
                     @ [GHC.Base.String]
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ (* -> *)
                        @ Data.Map.Internal.Map
                        @ [GHC.Types.Char]
                        Data.Map.Internal.$fDataMap17
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7))
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ [GHC.Types.Char]
                        Data.Data.$fData[]3
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7)))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Data.Map.Internal.Map
                                                                       [GHC.Types.Char]
                                                                       [GHC.Base.String]>_N)
                  (Data.Map.Internal.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.fromListConstr)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.mapDataType)
                  (\ @ t :: * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d. Data.Data.Data d => c (t d)) ->
                   GHC.Base.Nothing
                     @ (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])))
                  (Data.Map.Internal.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap6
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R)
                  (Data.Map.Internal.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranGenerator.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
0ed43d77fdec0bf0512d2e18ed73909b
  $s$fDataDecl_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]3
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ GHC.Types.Char
                        Data.Data.$fData[]3
                        Data.Data.$fDataChar7))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[[GHC.Types.Char]]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ (ds :: [[GHC.Types.Char]]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [[GHC.Types.Char]]) -> Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c [[GHC.Types.Char]]))
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
42792cf2bc3f6daea9e9ca10323f0ff3
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Fortran
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataFortran6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Fortran
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Fortran
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tFortran)
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Fortran
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataFortran1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Fortran
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fDataDecl_$s$fDataMap) -}
3c8aa29c7bec5281813d3d30a3c823ef
  $s$fDataMap_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   (w3 :: Data.Typeable.Internal.Typeable t) ->
                 Data.Map.Internal.$w$cdataCast2
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   Data.Data.$fData[]_$s$fData[]
                   FortranGenerator.$s$fDataDecl_$s$fData[]
                   @ t
                   @ c
                   w3) -}
6f0bcacd410f2a1d4e973d938b318ac0
  $s$fData[]7 :: Data.Typeable.Internal.TypeRep [[GHC.Types.Char]]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ [GHC.Types.Char]
                   Data.Data.$fData[]3
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ []
                      @ GHC.Types.Char
                      Data.Data.$fData[]3
                      Data.Data.$fDataChar7)) -}
908035da2ccab7d410a8f2fb5c36f314
  $s$fEqFortran ::
    GHC.Classes.Eq
      (Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqBlock_$c==1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fEqFortran_$s$fEqMap)
                  FortranGenerator.$s$fEqFortran_$s$fEqFortran_$c/= -}
dbf30d568ede219d80ade3526c4e3c99
  $s$fEqFortran_$s$fEqFortran_$c/= ::
    Language.Fortran.Fortran
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                   (y :: Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case Language.Fortran.$fEqBlock_$c==1
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        FortranGenerator.$s$fEqFortran_$s$fEqMap
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
26006ea85a70edb11629eeb919d3f1a5
  $s$fEqFortran_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Internal.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  FortranGenerator.$s$fEqFortran_$s$fEqMap_$c/= -}
b9b3d3a3aeba0a76c011e8f9a9062b88
  $s$fEqFortran_$s$fEqMap_$c/= ::
    Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEq[]_$s$fEq[]2
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f4474863ca6db5ef50e70b189d87c10c
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fEqFortran_$s$fEqMap)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranGenerator.$s$fEqFortran_$s$fEqMap) -}
c4f4ac7dc945ac8e155b56f44f1f5bec
  $s$fShowMap ::
    GHC.Show.Show
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShow[]_$s$fShow[]2)
                  (\ (x :: Data.Map.Internal.Map
                             [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShow[]_$s$fShow[]2
                     Data.Map.Internal.$fDataMap3
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.Map.Internal.Map
                               [GHC.Types.Char] [GHC.Base.String]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                     (Data.Map.Internal.$fShowMap_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShow[]_$s$fShow[]2
                        Data.Map.Internal.$fDataMap3)
                     ls
                     s) -}
bbce7980ec5c7b47d54c008fc77250fa
  $s$fShowMap_$cshow ::
    Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Internal.Map
                           [GHC.Types.Char] [GHC.Base.String]) ->
                 Data.Map.Internal.$fShowMap_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]2
                   Data.Map.Internal.$fDataMap3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
776e6430e1c9f5d6981c7297cd4147ea
  $s$fShowMap_$cshowList ::
    [Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Internal.Map
                             [GHC.Types.Char] [GHC.Base.String]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                   (Data.Map.Internal.$fShowMap_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ [GHC.Base.String]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      GHC.Show.$fShow[]_$s$fShow[]2
                      Data.Map.Internal.$fDataMap3)
                   ls
                   s) -}
07181fd7e0fac9c09ca9718d8f5cacd5
  $s$fShowMap_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Map.Internal.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShow[]_$s$fShow[]2
                   ww1
                   w3 }) -}
e6a401b52ed189b3bf9f2d416e1b2fd1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FortranGenerator.$trModule3
                   FortranGenerator.$trModule1) -}
db9ff4c1ff5281c602cb61d98fe7a65a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FortranGenerator.$trModule2) -}
9ee6c5d147bdda261d58339a31b3691e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FortranGenerator"#) -}
b2f6cb829df6006461c0aa646c22a44f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FortranGenerator.$trModule4) -}
b1ce09143bce4ff98ed29b23834db027
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
2a15f834da57788604d72c2131453a05
  $wgenerateKernelDeclarations ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Decl LanguageFortranTools.Anno] #)
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
8e72dd183c2ec3005c77e1814fac0bb8
  $wgenerateLoopIterationsExpr ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Language.Fortran.Expr
                            LanguageFortranTools.Anno)
                   (ww1 :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (ww2 :: Language.Fortran.Expr LanguageFortranTools.Anno) ->
                 let {
                   fail :: GHC.Prim.Void#
                           -> Language.Fortran.Expr LanguageFortranTools.Anno
                     <join 1> {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       fail1 :: GHC.Prim.Void#
                                -> Language.Fortran.Expr LanguageFortranTools.Anno
                         <join 1> {- Arity: 1, Strictness: <L,A> -}
                       = \ (ds1 :: GHC.Prim.Void#)[OneShot] ->
                         case ww of wild {
                           DEFAULT
                           -> Language.Fortran.Bin
                                @ LanguageFortranTools.Anno
                                (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                LanguageFortranTools.nullSrcSpan
                                FortranGenerator.generateLoopIterationsExpr3
                                (Language.Fortran.Bin
                                   @ LanguageFortranTools.Anno
                                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                   LanguageFortranTools.nullSrcSpan
                                   FortranGenerator.generateLoopIterationsExpr2
                                   (Language.Fortran.Bin
                                      @ LanguageFortranTools.Anno
                                      (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                      LanguageFortranTools.nullSrcSpan
                                      FortranGenerator.generateLoopIterationsExpr1
                                      ww1
                                      (FortranGenerator.generateLoopIterationsExpr_$sgenerateSubtractionExpr_list
                                         wild
                                         (GHC.Types.[]
                                            @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                                   FortranGenerator.declareGlobalReductionArray2)
                                ww2
                           Language.Fortran.Con ds2 ds3 ds4
                           -> case ds4 of wild1 {
                                []
                                -> Language.Fortran.Bin
                                     @ LanguageFortranTools.Anno
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                     LanguageFortranTools.nullSrcSpan
                                     FortranGenerator.generateLoopIterationsExpr3
                                     (Language.Fortran.Bin
                                        @ LanguageFortranTools.Anno
                                        (Data.Map.Internal.Tip
                                           @ GHC.Base.String
                                           @ [GHC.Base.String])
                                        LanguageFortranTools.nullSrcSpan
                                        FortranGenerator.generateLoopIterationsExpr2
                                        (Language.Fortran.Bin
                                           @ LanguageFortranTools.Anno
                                           (Data.Map.Internal.Tip
                                              @ GHC.Base.String
                                              @ [GHC.Base.String])
                                           LanguageFortranTools.nullSrcSpan
                                           FortranGenerator.generateLoopIterationsExpr1
                                           ww1
                                           (FortranGenerator.generateLoopIterationsExpr_$sgenerateSubtractionExpr_list
                                              wild
                                              (GHC.Types.[]
                                                 @ (Language.Fortran.Expr
                                                      LanguageFortranTools.Anno))))
                                        FortranGenerator.declareGlobalReductionArray2)
                                     ww2
                                : ds5 ds6
                                -> case ds5 of wild2 { GHC.Types.C# ds7 ->
                                   case ds7 of ds8 {
                                     DEFAULT
                                     -> Language.Fortran.Bin
                                          @ LanguageFortranTools.Anno
                                          (Data.Map.Internal.Tip
                                             @ GHC.Base.String
                                             @ [GHC.Base.String])
                                          LanguageFortranTools.nullSrcSpan
                                          FortranGenerator.generateLoopIterationsExpr3
                                          (Language.Fortran.Bin
                                             @ LanguageFortranTools.Anno
                                             (Data.Map.Internal.Tip
                                                @ GHC.Base.String
                                                @ [GHC.Base.String])
                                             LanguageFortranTools.nullSrcSpan
                                             FortranGenerator.generateLoopIterationsExpr2
                                             (Language.Fortran.Bin
                                                @ LanguageFortranTools.Anno
                                                (Data.Map.Internal.Tip
                                                   @ GHC.Base.String
                                                   @ [GHC.Base.String])
                                                LanguageFortranTools.nullSrcSpan
                                                FortranGenerator.generateLoopIterationsExpr1
                                                ww1
                                                (FortranGenerator.generateLoopIterationsExpr_$sgenerateSubtractionExpr_list
                                                   wild
                                                   (GHC.Types.[]
                                                      @ (Language.Fortran.Expr
                                                           LanguageFortranTools.Anno))))
                                             FortranGenerator.declareGlobalReductionArray2)
                                          ww2
                                     '1'#
                                     -> case ds6 of wild3 {
                                          []
                                          -> Language.Fortran.Bin
                                               @ LanguageFortranTools.Anno
                                               (Data.Map.Internal.Tip
                                                  @ GHC.Base.String
                                                  @ [GHC.Base.String])
                                               LanguageFortranTools.nullSrcSpan
                                               FortranGenerator.generateLoopIterationsExpr3
                                               ww1
                                               ww2
                                          : ipv ipv1
                                          -> Language.Fortran.Bin
                                               @ LanguageFortranTools.Anno
                                               (Data.Map.Internal.Tip
                                                  @ GHC.Base.String
                                                  @ [GHC.Base.String])
                                               LanguageFortranTools.nullSrcSpan
                                               FortranGenerator.generateLoopIterationsExpr3
                                               (Language.Fortran.Bin
                                                  @ LanguageFortranTools.Anno
                                                  (Data.Map.Internal.Tip
                                                     @ GHC.Base.String
                                                     @ [GHC.Base.String])
                                                  LanguageFortranTools.nullSrcSpan
                                                  FortranGenerator.generateLoopIterationsExpr2
                                                  (Language.Fortran.Bin
                                                     @ LanguageFortranTools.Anno
                                                     (Data.Map.Internal.Tip
                                                        @ GHC.Base.String
                                                        @ [GHC.Base.String])
                                                     LanguageFortranTools.nullSrcSpan
                                                     FortranGenerator.generateLoopIterationsExpr1
                                                     ww1
                                                     (FortranGenerator.generateLoopIterationsExpr_$sgenerateSubtractionExpr_list
                                                        wild
                                                        (GHC.Types.[]
                                                           @ (Language.Fortran.Expr
                                                                LanguageFortranTools.Anno))))
                                                  FortranGenerator.declareGlobalReductionArray2)
                                               ww2 } } } } }
                     } in
                     case ww2 of wild {
                       DEFAULT -> fail1 GHC.Prim.void#
                       Language.Fortran.Con ds1 ds2 ds3
                       -> case ds3 of wild1 {
                            [] -> fail1 GHC.Prim.void#
                            : ds4 ds5
                            -> case ds4 of wild2 { GHC.Types.C# ds6 ->
                               case ds6 of ds7 {
                                 DEFAULT -> fail1 GHC.Prim.void#
                                 '1'#
                                 -> case ds5 of wild3 {
                                      []
                                      -> Language.Fortran.Bin
                                           @ LanguageFortranTools.Anno
                                           (Data.Map.Internal.Tip
                                              @ GHC.Base.String
                                              @ [GHC.Base.String])
                                           LanguageFortranTools.nullSrcSpan
                                           FortranGenerator.generateLoopIterationsExpr2
                                           (LanguageFortranTools.generateSubtractionExpr ww1 ww)
                                           FortranGenerator.declareGlobalReductionArray2
                                      : ipv ipv1 -> fail1 GHC.Prim.void# } } } } }
                 } in
                 case ww of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Language.Fortran.Con ds ds1 ds2
                   -> case ds2 of wild1 {
                        [] -> fail GHC.Prim.void#
                        : ds3 ds4
                        -> case ds3 of wild2 { GHC.Types.C# ds5 ->
                           case ds5 of ds6 {
                             DEFAULT -> fail GHC.Prim.void#
                             '1'#
                             -> case ds4 of wild3 {
                                  []
                                  -> case ww2 of wild4 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       Language.Fortran.Con ds7 ds8 ds9
                                       -> case ds9 of wild5 {
                                            [] -> fail GHC.Prim.void#
                                            : ds10 ds11
                                            -> case ds10 of wild6 { GHC.Types.C# ds12 ->
                                               case ds12 of ds13 {
                                                 DEFAULT -> fail GHC.Prim.void#
                                                 '1'#
                                                 -> case ds11 of wild7 {
                                                      [] -> ww1
                                                      : ipv ipv1 -> fail GHC.Prim.void# } } } } }
                                  : ipv ipv1 -> fail GHC.Prim.void# } } } } }) -}
987b0e4fc097970820133111d7fe72e2
  $wgenerateReductionArrayAssignment ::
    [GHC.Types.Char]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> [GHC.Types.Char]
    -> Language.Fortran.Variable
    -> Language.Fortran.Variable
    -> [GHC.Types.Char]
  {- Arity: 5, Strictness: <L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ p
                   @ p1
                   (w :: [GHC.Types.Char])
                   (w1 :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (w2 :: [GHC.Types.Char])
                   (ww :: Language.Fortran.Variable)
                   (ww1 :: Language.Fortran.Variable) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   w2
                   (GHC.Base.++
                      @ GHC.Types.Char
                      w
                      (GHC.Base.++
                         @ GHC.Types.Char
                         ww
                         (GHC.CString.unpackAppendCString#
                            FortranGenerator.generateReductionArrayAssignment4
                            (GHC.Base.++
                               @ GHC.Types.Char
                               (LanguageFortranTools.outputExprFormatting w1)
                               (GHC.CString.unpackAppendCString#
                                  FortranGenerator.generateReductionArrayAssignment3
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     ww1
                                     FortranGenerator.generateReductionArrayAssignment1))))))) -}
b75a2cccc2f572baeb67e1c64d77c9f1
  $wgenerateSizeStatements_decls ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> (# [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Fortran LanguageFortranTools.Anno] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: [Language.Fortran.Decl
                            LanguageFortranTools.Anno]) ->
                 let {
                   varsWithRanks :: [(Language.Fortran.VarName
                                        LanguageFortranTools.Anno,
                                      GHC.Types.Int)]
                   = FortranGenerator.generateSizeStatements_decls_go3
                       w
                       (GHC.Base.map
                          @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                          @ GHC.Types.Int
                          CodeEmitterUtils.getDeclRank
                          w)
                 } in
                 (# let {
                      exit :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                              -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                        <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (eta :: [Language.Fortran.Decl
                                     LanguageFortranTools.Anno])[OneShot] ->
                        GHC.Base.++
                          @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                          eta
                          (FortranGenerator.generateSizeStatements_decls_go2 w)
                    } in
                    letrec {
                      go1 :: [(Language.Fortran.VarName LanguageFortranTools.Anno,
                               GHC.Types.Int)]
                             -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                             -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                        <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                      = \ (ds :: [(Language.Fortran.VarName LanguageFortranTools.Anno,
                                   GHC.Types.Int)])
                          (eta :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                        case ds of wild {
                          [] -> exit eta
                          : y ys
                          -> case y of wild1 { (,) var rank ->
                             case rank of wild2 { GHC.Types.I# x ->
                             let {
                               $s$j :: GHC.Prim.Int#
                                       -> Language.Fortran.VarName
                                            (Data.Map.Internal.Map
                                               [GHC.Types.Char] [[GHC.Types.Char]])
                                       -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                                 <join 2> {- Arity: 2, Strictness: <L,U><L,1*U(A,1*U)> -}
                               = \ (sc :: GHC.Prim.Int#)[OneShot]
                                   (sc1 :: Language.Fortran.VarName
                                             (Data.Map.Internal.Map
                                                [GHC.Types.Char] [[GHC.Types.Char]]))[OneShot] ->
                                 go1
                                   ys
                                   (GHC.Base.++
                                      @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                      eta
                                      (GHC.Types.:
                                         @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                         (Language.Fortran.Decl
                                            @ LanguageFortranTools.Anno
                                            (Data.Map.Internal.Tip
                                               @ GHC.Base.String
                                               @ [GHC.Base.String])
                                            LanguageFortranTools.nullSrcSpan
                                            (GHC.Types.:
                                               @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                                  Language.Fortran.Expr LanguageFortranTools.Anno,
                                                  GHC.Base.Maybe GHC.Types.Int)
                                               (Language.Fortran.Var
                                                  @ LanguageFortranTools.Anno
                                                  (Data.Map.Internal.Tip
                                                     @ GHC.Base.String
                                                     @ [GHC.Base.String])
                                                  LanguageFortranTools.nullSrcSpan
                                                  (GHC.Types.:
                                                     @ (Language.Fortran.VarName
                                                          LanguageFortranTools.Anno,
                                                        [Language.Fortran.Expr
                                                           LanguageFortranTools.Anno])
                                                     (case sc1 of wild3 { Language.Fortran.VarName ds1 str ->
                                                      Language.Fortran.VarName
                                                        @ LanguageFortranTools.Anno
                                                        (Data.Map.Internal.Tip
                                                           @ GHC.Base.String
                                                           @ [GHC.Base.String])
                                                        (GHC.Base.++
                                                           @ GHC.Types.Char
                                                           str
                                                           FortranGenerator.generateSizeStatements_decls1) },
                                                      GHC.Types.[]
                                                        @ (Language.Fortran.Expr
                                                             LanguageFortranTools.Anno))
                                                     (GHC.Types.[]
                                                        @ (Language.Fortran.VarName
                                                             LanguageFortranTools.Anno,
                                                           [Language.Fortran.Expr
                                                              LanguageFortranTools.Anno]))),
                                                FortranGenerator.adaptOriginalDeclaration_varname2,
                                                GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Types.[]
                                                  @ (Language.Fortran.Expr
                                                       LanguageFortranTools.Anno,
                                                     Language.Fortran.Expr
                                                       LanguageFortranTools.Anno,
                                                     GHC.Base.Maybe GHC.Types.Int)))
                                            (Language.Fortran.BaseType
                                               @ LanguageFortranTools.Anno
                                               (Data.Map.Internal.Tip
                                                  @ GHC.Base.String
                                                  @ [GHC.Base.String])
                                               FortranGenerator.generateSizeDecl3
                                               (GHC.Types.:
                                                  @ (Language.Fortran.Attr
                                                       LanguageFortranTools.Anno)
                                                  (Language.Fortran.Dimension
                                                     @ LanguageFortranTools.Anno
                                                     (Data.Map.Internal.Tip
                                                        @ GHC.Base.String
                                                        @ [GHC.Base.String])
                                                     (GHC.Types.:
                                                        @ (Language.Fortran.Expr
                                                             LanguageFortranTools.Anno,
                                                           Language.Fortran.Expr
                                                             LanguageFortranTools.Anno)
                                                        (FortranGenerator.adaptOriginalDeclaration_varname2,
                                                         Language.Fortran.Con
                                                           @ LanguageFortranTools.Anno
                                                           (Data.Map.Internal.Tip
                                                              @ GHC.Base.String
                                                              @ [GHC.Base.String])
                                                           LanguageFortranTools.nullSrcSpan
                                                           (case GHC.Show.$wshowSignedInt
                                                                   0#
                                                                   sc
                                                                   (GHC.Types.[]
                                                                      @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                            GHC.Types.: @ GHC.Types.Char ww5 ww6 }))
                                                        (GHC.Types.[]
                                                           @ (Language.Fortran.Expr
                                                                LanguageFortranTools.Anno,
                                                              Language.Fortran.Expr
                                                                LanguageFortranTools.Anno))))
                                                  (GHC.Types.[]
                                                     @ (Language.Fortran.Attr
                                                          LanguageFortranTools.Anno)))
                                               FortranGenerator.adaptOriginalDeclaration_varname2
                                               FortranGenerator.generateSizeDecl1))
                                         (GHC.Types.[]
                                            @ (Language.Fortran.Decl LanguageFortranTools.Anno))))
                             } in
                             case x of wild3 {
                               DEFAULT -> $s$j wild3 var
                               0#
                               -> $s$j
                                    1#
                                    (case var of wild4 { Language.Fortran.VarName ds1 str ->
                                     Language.Fortran.VarName
                                       @ LanguageFortranTools.Anno
                                       (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                       (FortranGenerator.generateSizeStatements_decls_go1
                                          str) }) } } } }
                    } in
                    go1
                      varsWithRanks
                      (GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)),
                    FortranGenerator.generateSizeStatements_decls_go
                      varsWithRanks
                      (GHC.Types.[]
                         @ (Language.Fortran.Fortran LanguageFortranTools.Anno)) #)) -}
3016fc6cabe380f60b84db8c3beb2963
  adaptOriginalDeclaration_intent ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.Maybe (Language.Fortran.Decl LanguageFortranTools.Anno)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (intent :: Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case CodeEmitterUtils.extractDeclaration_varname
                        varname
                        program of wild {
                   []
                   -> GHC.Base.Nothing
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   : ipv ipv1
                   -> GHC.Base.Just
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        (case CodeEmitterUtils.containsParameterAttr_$sgo
                                (Language.Fortran.$fDataDecl_$cgmapQ
                                   @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                                   CodeEmitterUtils.$s$fDataDecl_$s$fDataMap
                                   @ GHC.Types.Bool
                                   CodeEmitterUtils.containsParameterAttr1
                                   ipv) of wild1 {
                           GHC.Types.False
                           -> FortranGenerator.adaptOriginalDeclaration_intent1
                                (CodeEmitterUtils.applyIntent intent ipv)
                           GHC.Types.True
                           -> FortranGenerator.adaptOriginalDeclaration_intent1 ipv }) }) -}
c3b68427a73c65feb9fa5bc42fb8cb15
  adaptOriginalDeclaration_intent1 ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Unfolding: (Data.Generics.Schemes.everywhere
                   LanguageFortranTools.applyGeneratedSrcSpans1
                   @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   FortranGenerator.$s$fDataDecl) -}
9402dd8b66a21c32f67e420034b9e01b
  adaptOriginalDeclaration_varname ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (newVarname :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 FortranGenerator.adaptOriginalDeclaration_intent1
                   (LanguageFortranTools.replaceAllOccurences_varname
                      @ Language.Fortran.Decl
                      FortranGenerator.$s$fDataDecl
                      (case CodeEmitterUtils.extractDeclaration_varname
                              varname
                              program of wild {
                         []
                         -> Language.Fortran.Decl
                              @ LanguageFortranTools.Anno
                              (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                              LanguageFortranTools.nullSrcSpan
                              (GHC.Types.:
                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                    Language.Fortran.Expr LanguageFortranTools.Anno,
                                    GHC.Base.Maybe GHC.Types.Int)
                                 (Language.Fortran.Var
                                    @ LanguageFortranTools.Anno
                                    (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                    LanguageFortranTools.nullSrcSpan
                                    (GHC.Types.:
                                       @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                          [Language.Fortran.Expr LanguageFortranTools.Anno])
                                       (varname,
                                        GHC.Types.[]
                                          @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                             [Language.Fortran.Expr LanguageFortranTools.Anno]))),
                                  FortranGenerator.adaptOriginalDeclaration_varname2,
                                  GHC.Base.Nothing @ GHC.Types.Int)
                                 (GHC.Types.[]
                                    @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)))
                              FortranGenerator.adaptOriginalDeclaration_varname1
                         : ipv ipv1 -> ipv })
                      varname
                      newVarname)) -}
30e085ea826d888a9359ce9386a5be39
  adaptOriginalDeclaration_varname1 ::
    Language.Fortran.Type LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.BaseType
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.adaptOriginalDeclaration_varname3
                   (GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno))
                   FortranGenerator.adaptOriginalDeclaration_varname2
                   FortranGenerator.adaptOriginalDeclaration_varname2) -}
6ef775a7afd44a3ddd85a7fe3b42d293
  adaptOriginalDeclaration_varname2 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m8,
     Unfolding: (Language.Fortran.NullExpr
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan) -}
fb65cf070993a97b47d92f46675b1915
  adaptOriginalDeclaration_varname3 ::
    Language.Fortran.BaseType LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Language.Fortran.Real
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
2897834a03a5f427c98bbf7ca40ad7e9
  declareGlobalReductionArray ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U(U,U)><L,U><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (arraySize :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.applyIntent
                   FortranGenerator.declareGlobalReductionArray4
                   (LanguageFortranTools.replaceAllOccurences_varname
                      @ Language.Fortran.Decl
                      FortranGenerator.$s$fDataDecl
                      (CodeEmitterUtils.addDimension
                         (case CodeEmitterUtils.extractDeclaration_varname
                                 varname
                                 program of wild {
                            []
                            -> Language.Fortran.Decl
                                 @ LanguageFortranTools.Anno
                                 (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                 LanguageFortranTools.nullSrcSpan
                                 (GHC.Types.:
                                    @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)
                                    (Language.Fortran.Var
                                       @ LanguageFortranTools.Anno
                                       (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                       LanguageFortranTools.nullSrcSpan
                                       (GHC.Types.:
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                             [Language.Fortran.Expr LanguageFortranTools.Anno])
                                          (varname,
                                           GHC.Types.[]
                                             @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                          (GHC.Types.[]
                                             @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                                [Language.Fortran.Expr
                                                   LanguageFortranTools.Anno]))),
                                     FortranGenerator.adaptOriginalDeclaration_varname2,
                                     GHC.Base.Nothing @ GHC.Types.Int)
                                    (GHC.Types.[]
                                       @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                          Language.Fortran.Expr LanguageFortranTools.Anno,
                                          GHC.Base.Maybe GHC.Types.Int)))
                                 FortranGenerator.adaptOriginalDeclaration_varname1
                            : ipv ipv1 -> ipv })
                         FortranGenerator.declareGlobalReductionArray2
                         arraySize)
                      varname
                      (case varname of ww { Language.Fortran.VarName ww1 ww2 ->
                       Language.Fortran.VarName
                         @ LanguageFortranTools.Anno
                         ww1
                         (GHC.CString.unpackAppendCString#
                            CodeEmitterUtils.generateGlobalReductionArray2
                            (GHC.Base.++
                               @ GHC.Types.Char
                               ww2
                               FortranGenerator.declareGlobalReductionArray1)) }))) -}
16e390cb77e6f82f0f438a788268d707
  declareGlobalReductionArray1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.generateGlobalReductionArray1) -}
924e968f9f5abac83f6e6f9f157d0590
  declareGlobalReductionArray2 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   FortranGenerator.declareGlobalReductionArray3) -}
35b461312e3ed6b9c7d0834bba4a8aee
  declareGlobalReductionArray3 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        1#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
2ff24e1ab2b3f12da16258fb920afd30
  declareGlobalReductionArray4 ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Language.Fortran.Out
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
f7d01c51a6e4aea70bdf3870dce43e2d
  declareLocalReductionArray ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U(U,U)><L,U><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (arraySize :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.addDimension
                   (LanguageFortranTools.replaceAllOccurences_varname
                      @ Language.Fortran.Decl
                      FortranGenerator.$s$fDataDecl
                      (case CodeEmitterUtils.extractDeclaration_varname
                              varname
                              program of wild {
                         []
                         -> Language.Fortran.Decl
                              @ LanguageFortranTools.Anno
                              (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                              LanguageFortranTools.nullSrcSpan
                              (GHC.Types.:
                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                    Language.Fortran.Expr LanguageFortranTools.Anno,
                                    GHC.Base.Maybe GHC.Types.Int)
                                 (Language.Fortran.Var
                                    @ LanguageFortranTools.Anno
                                    (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                    LanguageFortranTools.nullSrcSpan
                                    (GHC.Types.:
                                       @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                          [Language.Fortran.Expr LanguageFortranTools.Anno])
                                       (varname,
                                        GHC.Types.[]
                                          @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                             [Language.Fortran.Expr LanguageFortranTools.Anno]))),
                                  FortranGenerator.adaptOriginalDeclaration_varname2,
                                  GHC.Base.Nothing @ GHC.Types.Int)
                                 (GHC.Types.[]
                                    @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)))
                              FortranGenerator.adaptOriginalDeclaration_varname1
                         : ipv ipv1 -> ipv })
                      varname
                      (case varname of ww { Language.Fortran.VarName ww1 ww2 ->
                       Language.Fortran.VarName
                         @ LanguageFortranTools.Anno
                         ww1
                         (GHC.CString.unpackAppendCString#
                            CodeEmitterUtils.generateLocalReductionArray1
                            (GHC.Base.++
                               @ GHC.Types.Char
                               ww2
                               FortranGenerator.declareGlobalReductionArray1)) }))
                   FortranGenerator.declareGlobalReductionArray2
                   arraySize) -}
bf98e1b56aa63e4f6cb88b3b05d36d40
  declareScalarPointer ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U(U,U)><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 LanguageFortranTools.replaceAllOccurences_varname
                   @ Language.Fortran.Decl
                   FortranGenerator.$s$fDataDecl
                   (CodeEmitterUtils.addDimension
                      (case CodeEmitterUtils.extractDeclaration_varname
                              varname
                              program of wild {
                         []
                         -> Language.Fortran.Decl
                              @ LanguageFortranTools.Anno
                              (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                              LanguageFortranTools.nullSrcSpan
                              (GHC.Types.:
                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                    Language.Fortran.Expr LanguageFortranTools.Anno,
                                    GHC.Base.Maybe GHC.Types.Int)
                                 (Language.Fortran.Var
                                    @ LanguageFortranTools.Anno
                                    (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                    LanguageFortranTools.nullSrcSpan
                                    (GHC.Types.:
                                       @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                          [Language.Fortran.Expr LanguageFortranTools.Anno])
                                       (varname,
                                        GHC.Types.[]
                                          @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                             [Language.Fortran.Expr LanguageFortranTools.Anno]))),
                                  FortranGenerator.adaptOriginalDeclaration_varname2,
                                  GHC.Base.Nothing @ GHC.Types.Int)
                                 (GHC.Types.[]
                                    @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                       Language.Fortran.Expr LanguageFortranTools.Anno,
                                       GHC.Base.Maybe GHC.Types.Int)))
                              FortranGenerator.adaptOriginalDeclaration_varname1
                         : ipv ipv1 -> ipv })
                      FortranGenerator.adaptOriginalDeclaration_varname2
                      FortranGenerator.declareGlobalReductionArray2)
                   varname
                   (case varname of wild { Language.Fortran.VarName ds1 str ->
                    Language.Fortran.VarName
                      @ LanguageFortranTools.Anno
                      (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                      (GHC.Base.++
                         @ GHC.Types.Char
                         str
                         FortranGenerator.declareScalarPointer_z) })) -}
0d461df5565679f64b0bcf0e1aac3204
  declareScalarPointer_z :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.declareScalarPointer_decl2) -}
8d6ef0f8e90c4e4bd9a29ab4e4073dc5
  generateArgList ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.ArgList LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case w of wild {
                   []
                   -> Language.Fortran.ArgList
                        @ LanguageFortranTools.Anno
                        (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                        FortranGenerator.adaptOriginalDeclaration_varname2
                   : ipv ipv1
                   -> Language.Fortran.ArgList
                        @ LanguageFortranTools.Anno
                        (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                        (case ipv1 of wild1 {
                           [] -> LanguageFortranTools.generateVar ipv
                           : ipv2 ipv3
                           -> Language.Fortran.ESeq
                                @ LanguageFortranTools.Anno
                                (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                LanguageFortranTools.nullSrcSpan
                                (LanguageFortranTools.generateESeq_$sgenerateESeq ipv2 ipv3)
                                (LanguageFortranTools.generateVar ipv) }) }) -}
7598762235367b3dcb623a9f3a11a867
  generateFinalHostReduction ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (reductionVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno])
                   (redIter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (codeSeg :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case Data.Generics.Schemes.everything
                        @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                        (GHC.Base.++
                           @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                        (\ @ a ($dData :: Data.Data.Data a) (eta :: a)[OneShot] ->
                         case Data.Typeable.Internal.typeRepFingerprint
                                @ *
                                @ a
                                (Data.Data.$p1Data @ a $dData)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                         case FortranGenerator.generateFinalHostReduction1 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                         case GHC.Prim.eqWord# dt dt2 of lwild {
                           DEFAULT
                           -> GHC.Types.[]
                                @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                           1#
                           -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                                DEFAULT
                                -> GHC.Types.[]
                                     @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                1#
                                -> FortranGenerator.generateFinalHostReduction_assgs
                                     reductionVars
                                     redIter
                                     eta
                                       `cast`
                                     (UnsafeCo representational a (Language.Fortran.Fortran
                                                                     LanguageFortranTools.Anno)) } } } })
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        FortranGenerator.$s$fDataFortran
                        codeSeg of wild {
                   []
                   -> GHC.List.foldl2
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   : x xs -> FortranGenerator.generateFinalHostReduction_go xs x }) -}
3352c1d261a17024dabe192153783c66
  generateFinalHostReduction1 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Fortran
                        1898037638716600659##
                        3599167482411011499##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataFortran3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.Fortran
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.Fortran
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            FortranGenerator.generateFinalHostReduction3)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            FortranGenerator.generateFinalHostReduction2
                            FortranGenerator.generateFinalHostReduction3))) } }) -}
6862895ea118e34a42ac18fb4571dedf
  generateFinalHostReduction2 :: Data.Typeable.Internal.TypeRep []
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ []
                        15300440589168157478##
                        15016221815972113379##
                        GHC.Types.$trModule
                        GHC.Types.$tc[]1
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ []
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
a7114fd427f49901cac77586cedb1602
  generateFinalHostReduction3 ::
    Data.Typeable.Internal.TypeRep [GHC.Types.Char]
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Char
                        8424092006618324671##
                        2724268014499746065##
                        GHC.Types.$trModule
                        GHC.Types.$tcChar1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ GHC.Types.Char
                   FortranGenerator.generateFinalHostReduction2
                   (Data.Typeable.Internal.TrTyCon
                      @ *
                      @ GHC.Types.Char
                      ww8
                      ww9
                      ww10
                      ww11
                      ww12) }) -}
1f71cbfc6ca5436747b14673272c41ae
  generateFinalHostReduction_assgs ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: (\ (reductionVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno])
                   (redIter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (ds :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Types.[]
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   Language.Fortran.Assg ds1 ds2 expr1 expr2
                   -> case LanguageFortranTools.usesVarName_list
                             reductionVars
                             expr1 of wild1 {
                        GHC.Types.False
                        -> GHC.Types.[]
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        GHC.Types.True
                        -> let {
                             finalReductionVar :: Language.Fortran.VarName
                                                    LanguageFortranTools.Anno
                             = case expr1 of wild2 {
                                 DEFAULT -> FortranGenerator.generateFinalHostReduction_assgs6
                                 Language.Fortran.Var ds3 ds4 lst
                                 -> case LanguageFortranTools.extractVarNames_go lst of wild3 {
                                      [] -> FortranGenerator.generateFinalHostReduction_assgs6
                                      : y ys -> y } }
                           } in
                           let {
                             finalReductionVar1 :: (Language.Fortran.VarName
                                                      LanguageFortranTools.Anno,
                                                    [Language.Fortran.Expr
                                                       LanguageFortranTools.Anno])
                             = (finalReductionVar,
                                GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                           } in
                           let {
                             finalReductionVar2 :: [(Language.Fortran.VarName
                                                       LanguageFortranTools.Anno,
                                                     [Language.Fortran.Expr
                                                        LanguageFortranTools.Anno])]
                             = GHC.Types.:
                                 @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                    [Language.Fortran.Expr LanguageFortranTools.Anno])
                                 finalReductionVar1
                                 (GHC.Types.[]
                                    @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                       [Language.Fortran.Expr LanguageFortranTools.Anno]))
                           } in
                           let {
                             finalReductionVar3 :: Language.Fortran.Expr
                                                     LanguageFortranTools.Anno
                             = Language.Fortran.Var
                                 @ LanguageFortranTools.Anno
                                 (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                 LanguageFortranTools.nullSrcSpan
                                 finalReductionVar2
                           } in
                           let {
                             finalReductionArray :: Language.Fortran.VarName
                                                      LanguageFortranTools.Anno
                             = case expr1 of wild2 {
                                 DEFAULT -> FortranGenerator.generateFinalHostReduction_assgs1
                                 Language.Fortran.Var ds3 ds4 lst
                                 -> case LanguageFortranTools.extractVarNames_go lst of wild3 {
                                      [] -> FortranGenerator.generateFinalHostReduction_assgs1
                                      : y ys
                                      -> case y of ww { Language.Fortran.VarName ww1 ww2 ->
                                         Language.Fortran.VarName
                                           @ LanguageFortranTools.Anno
                                           ww1
                                           (GHC.CString.unpackAppendCString#
                                              CodeEmitterUtils.generateGlobalReductionArray2
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 ww2
                                                 FortranGenerator.declareGlobalReductionArray1)) } } }
                           } in
                           case LanguageFortranTools.extractPrimaryReductionOp
                                  expr1
                                  expr2 of wild2 {
                             GHC.Base.Nothing
                             -> case LanguageFortranTools.extractPrimaryReductionFunction
                                       expr1
                                       expr2 of wild3 {
                                  []
                                  -> GHC.Types.[]
                                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                  : ipv ipv1
                                  -> GHC.Types.:
                                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                       (Language.Fortran.Assg
                                          @ LanguageFortranTools.Anno
                                          (Data.Map.Internal.Tip
                                             @ GHC.Base.String
                                             @ [GHC.Base.String])
                                          LanguageFortranTools.nullSrcSpan
                                          finalReductionVar3
                                          (Language.Fortran.Var
                                             @ LanguageFortranTools.Anno
                                             (Data.Map.Internal.Tip
                                                @ GHC.Base.String
                                                @ [GHC.Base.String])
                                             LanguageFortranTools.nullSrcSpan
                                             (GHC.Types.:
                                                @ (Language.Fortran.VarName
                                                     LanguageFortranTools.Anno,
                                                   [Language.Fortran.Expr
                                                      LanguageFortranTools.Anno])
                                                (Language.Fortran.VarName
                                                   @ LanguageFortranTools.Anno
                                                   (Data.Map.Internal.Tip
                                                      @ GHC.Base.String
                                                      @ [GHC.Base.String])
                                                   wild3,
                                                 GHC.Types.:
                                                   @ (Language.Fortran.Expr
                                                        LanguageFortranTools.Anno)
                                                   finalReductionVar3
                                                   (GHC.Types.:
                                                      @ (Language.Fortran.Expr
                                                           LanguageFortranTools.Anno)
                                                      (Language.Fortran.Var
                                                         @ LanguageFortranTools.Anno
                                                         (Data.Map.Internal.Tip
                                                            @ GHC.Base.String
                                                            @ [GHC.Base.String])
                                                         LanguageFortranTools.nullSrcSpan
                                                         (GHC.Types.:
                                                            @ (Language.Fortran.VarName
                                                                 LanguageFortranTools.Anno,
                                                               [Language.Fortran.Expr
                                                                  LanguageFortranTools.Anno])
                                                            (finalReductionArray,
                                                             GHC.Types.:
                                                               @ (Language.Fortran.Expr
                                                                    LanguageFortranTools.Anno)
                                                               (Language.Fortran.Var
                                                                  @ LanguageFortranTools.Anno
                                                                  (Data.Map.Internal.Tip
                                                                     @ GHC.Base.String
                                                                     @ [GHC.Base.String])
                                                                  LanguageFortranTools.nullSrcSpan
                                                                  (GHC.Types.:
                                                                     @ (Language.Fortran.VarName
                                                                          LanguageFortranTools.Anno,
                                                                        [Language.Fortran.Expr
                                                                           LanguageFortranTools.Anno])
                                                                     (redIter,
                                                                      GHC.Types.[]
                                                                        @ (Language.Fortran.Expr
                                                                             LanguageFortranTools.Anno))
                                                                     (GHC.Types.[]
                                                                        @ (Language.Fortran.VarName
                                                                             LanguageFortranTools.Anno,
                                                                           [Language.Fortran.Expr
                                                                              LanguageFortranTools.Anno]))))
                                                               (GHC.Types.[]
                                                                  @ (Language.Fortran.Expr
                                                                       LanguageFortranTools.Anno)))
                                                            (GHC.Types.[]
                                                               @ (Language.Fortran.VarName
                                                                    LanguageFortranTools.Anno,
                                                                  [Language.Fortran.Expr
                                                                     LanguageFortranTools.Anno]))))
                                                      (GHC.Types.[]
                                                         @ (Language.Fortran.Expr
                                                              LanguageFortranTools.Anno))))
                                                (GHC.Types.[]
                                                   @ (Language.Fortran.VarName
                                                        LanguageFortranTools.Anno,
                                                      [Language.Fortran.Expr
                                                         LanguageFortranTools.Anno])))))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.Fortran LanguageFortranTools.Anno)) }
                             GHC.Base.Just op
                             -> GHC.Types.:
                                  @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                  (Language.Fortran.Assg
                                     @ LanguageFortranTools.Anno
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                     LanguageFortranTools.nullSrcSpan
                                     finalReductionVar3
                                     (Language.Fortran.Bin
                                        @ LanguageFortranTools.Anno
                                        (Data.Map.Internal.Tip
                                           @ GHC.Base.String
                                           @ [GHC.Base.String])
                                        LanguageFortranTools.nullSrcSpan
                                        op
                                        finalReductionVar3
                                        (Language.Fortran.Var
                                           @ LanguageFortranTools.Anno
                                           (Data.Map.Internal.Tip
                                              @ GHC.Base.String
                                              @ [GHC.Base.String])
                                           LanguageFortranTools.nullSrcSpan
                                           (GHC.Types.:
                                              @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                                 [Language.Fortran.Expr LanguageFortranTools.Anno])
                                              (finalReductionArray,
                                               GHC.Types.:
                                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                                                 (Language.Fortran.Var
                                                    @ LanguageFortranTools.Anno
                                                    (Data.Map.Internal.Tip
                                                       @ GHC.Base.String
                                                       @ [GHC.Base.String])
                                                    LanguageFortranTools.nullSrcSpan
                                                    (GHC.Types.:
                                                       @ (Language.Fortran.VarName
                                                            LanguageFortranTools.Anno,
                                                          [Language.Fortran.Expr
                                                             LanguageFortranTools.Anno])
                                                       (redIter,
                                                        GHC.Types.[]
                                                          @ (Language.Fortran.Expr
                                                               LanguageFortranTools.Anno))
                                                       (GHC.Types.[]
                                                          @ (Language.Fortran.VarName
                                                               LanguageFortranTools.Anno,
                                                             [Language.Fortran.Expr
                                                                LanguageFortranTools.Anno]))))
                                                 (GHC.Types.[]
                                                    @ (Language.Fortran.Expr
                                                         LanguageFortranTools.Anno)))
                                              (GHC.Types.[]
                                                 @ (Language.Fortran.VarName
                                                      LanguageFortranTools.Anno,
                                                    [Language.Fortran.Expr
                                                       LanguageFortranTools.Anno]))))))
                                  (GHC.Types.[]
                                     @ (Language.Fortran.Fortran
                                          LanguageFortranTools.Anno)) } } }) -}
bd470e87e38bbbf01171fa32f2b45eb0
  generateFinalHostReduction_assgs1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateFinalHostReduction_assgs2) -}
af0de21d5fa86ac8f3305c1e4f543ca9
  generateFinalHostReduction_assgs2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   CodeEmitterUtils.generateGlobalReductionArray2
                   FortranGenerator.generateFinalHostReduction_assgs3) -}
27b4aa8c2747895b3d70f203d4b73094
  generateFinalHostReduction_assgs3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranGenerator.generateFinalHostReduction_assgs4
                   FortranGenerator.declareGlobalReductionArray1) -}
4682fa2c6c77ac5050975bcd1fa670ca
  generateFinalHostReduction_assgs4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranGenerator.generateFinalHostReduction_assgs5) -}
053a63f5d2589a2ea01d77ccae9b502b
  generateFinalHostReduction_assgs5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DUMMY13"#) -}
7bba72dd44f2aebbe2c67a87b0bac111
  generateFinalHostReduction_assgs6 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateFinalHostReduction_assgs7) -}
92b83e4641c857a47f9a03b7b4f8ad68
  generateFinalHostReduction_assgs7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranGenerator.generateFinalHostReduction_assgs8) -}
7a706bf1e774a2ac4a13915ca0b8c2dc
  generateFinalHostReduction_assgs8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DUMMY14"#) -}
466898244b4d2e8dd2578df662880346
  generateFinalHostReduction_go ::
    [Language.Fortran.Fortran LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
3a01abbb82d8a3ffee4ff72f77afe6df
  generateGlobalWorkItemsExpr ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (loopVars :: [(Language.Fortran.VarName
                                    LanguageFortranTools.Anno,
                                  Language.Fortran.Expr LanguageFortranTools.Anno,
                                  Language.Fortran.Expr LanguageFortranTools.Anno,
                                  Language.Fortran.Expr LanguageFortranTools.Anno)]) ->
                 case GHC.Base.build
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        (\ @ b1
                           (c :: Language.Fortran.Expr LanguageFortranTools.Anno
                                 -> b1 -> b1)[OneShot]
                           (n :: b1)[OneShot] ->
                         GHC.Base.foldr
                           @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno)
                           @ b1
                           (GHC.Base.mapFB
                              @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                              @ b1
                              @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno)
                              c
                              FortranGenerator.generateLoopIterationsExpr)
                           n
                           loopVars) of wild {
                   [] -> FortranGenerator.generateGlobalWorkItemsExpr2
                   : x ds
                   -> case ds of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> Language.Fortran.Bin
                             @ LanguageFortranTools.Anno
                             (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                             LanguageFortranTools.nullSrcSpan
                             FortranGenerator.generateGlobalWorkItemsExpr1
                             x
                             (FortranGenerator.generateGlobalWorkItemsExpr_$sgenerateProductExpr_list
                                ipv
                                ipv1) } }) -}
42dfd67f0e7a3dbbfd5fdc1dfab6139e
  generateGlobalWorkItemsExpr1 ::
    Language.Fortran.BinOp LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Language.Fortran.Mul
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
d90de4b18998b59a939eeb1664042b8f
  generateGlobalWorkItemsExpr2 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: x -}
6f2e988185b3720f06b8d32dbd05dc3f
  generateGlobalWorkItemsExpr_$sgenerateProductExpr_list ::
    Language.Fortran.Expr
      (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.Expr
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
5969bf7875def38abf819bac55926c03
  generateIfNoElse ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><L,U>m5,
     Unfolding: InlineRule (2, True, False)
                (\ (cond_expr :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (block_if_true :: Language.Fortran.Fortran
                                       LanguageFortranTools.Anno) ->
                 Language.Fortran.If
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   cond_expr
                   block_if_true
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Fortran LanguageFortranTools.Anno))
                   (GHC.Base.Nothing
                      @ (Language.Fortran.Fortran LanguageFortranTools.Anno))) -}
336cc350d2340c1f52c21eab162540c1
  generateImplicitDecl ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (var :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 Language.Fortran.Decl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno,
                         GHC.Base.Maybe GHC.Types.Int)
                      (LanguageFortranTools.generateVar var,
                       FortranGenerator.adaptOriginalDeclaration_varname2,
                       GHC.Base.Nothing @ GHC.Types.Int)
                      (GHC.Types.[]
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                            Language.Fortran.Expr LanguageFortranTools.Anno,
                            GHC.Base.Maybe GHC.Types.Int)))
                   FortranGenerator.adaptOriginalDeclaration_varname1) -}
35903063d7cac8c9d2752ad046977fb4
  generateKernelDeclarations ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> ([Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno])
  {- Arity: 2, Strictness: <S,1*U><L,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.Program LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case FortranGenerator.$wgenerateKernelDeclarations
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
bfbaf6eb782414dccc202e1a7f0eb255
  generateLoop ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m2,
     Unfolding: InlineRule (4, True, False)
                (\ (r_iter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (start :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (end :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (fortran :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 Language.Fortran.For
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   r_iter
                   start
                   end
                   FortranGenerator.generateLoop1
                   fortran) -}
7e9efc3e708ac923f8dcc0d2af509e8c
  generateLoop1 :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   FortranGenerator.generateLoop2) -}
303ae87162d83421782e530813264242
  generateLoop2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranGenerator.generateLoop3) -}
6f93231f13f20ec52daffdab41a28ba4
  generateLoop3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1"#) -}
3e194c168efcc19873e375a64e8c66ff
  generateLoopInitialisers ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> GHC.Base.Maybe (Language.Fortran.Expr LanguageFortranTools.Anno)
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
803a8024da02db4b999a67bc97c27ab8
  generateLoopInitialisers_$sgenerateLoopInitialisers ::
    Language.Fortran.Expr
      (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> Language.Fortran.Expr
         (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> (Language.Fortran.VarName
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
        Language.Fortran.Expr
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
        Language.Fortran.Expr
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
        Language.Fortran.Expr
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]))
    -> [(Language.Fortran.VarName
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]))]
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 4,
     Strictness: <L,U><L,A><S,1*U(U(U,U),U,A,A)><S,1*U>m2 -}
a97bbfafecca1dc4ba9f73fad2742cd2
  generateLoopIterationsExpr ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno)
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S(LSLS),1*U(A,U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno)) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 FortranGenerator.$wgenerateLoopIterationsExpr ww2 ww3 ww4 }) -}
ec171412bdfabc12d8dd6c83008fe12c
  generateLoopIterationsExpr1 ::
    Language.Fortran.BinOp LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Language.Fortran.Minus
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
84d49a55b37589fde10d0ccac6383255
  generateLoopIterationsExpr2 ::
    Language.Fortran.BinOp LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.Fortran.Plus
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
3eab5f7a351554a35fc33289081aaba6
  generateLoopIterationsExpr3 ::
    Language.Fortran.BinOp LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Language.Fortran.Div
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
22b9783e01191e3951649654dd5e8031
  generateLoopIterationsExpr_$sgenerateSubtractionExpr_list ::
    Language.Fortran.Expr
      (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.Expr
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
707b968b3954844404a5bfc3c1446abd
  generateLoopStartAddition ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U(U,U)><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (varname :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (start :: Language.Fortran.Expr LanguageFortranTools.Anno) ->
                 Language.Fortran.Assg
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (LanguageFortranTools.generateVar varname)
                   (Language.Fortran.Bin
                      @ LanguageFortranTools.Anno
                      (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      LanguageFortranTools.generateAdditionExpr1
                      (FortranGenerator.generateRelVar varname)
                      start)) -}
dc0fa3c6418122a3b75ec77854461c84
  generateProductExpr_list ::
    [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.Fortran.Expr
                             LanguageFortranTools.Anno]) ->
                 case ds of wild {
                   [] -> FortranGenerator.generateGlobalWorkItemsExpr2
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> Language.Fortran.Bin
                             @ LanguageFortranTools.Anno
                             (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                             LanguageFortranTools.nullSrcSpan
                             FortranGenerator.generateGlobalWorkItemsExpr1
                             x
                             (FortranGenerator.generateGlobalWorkItemsExpr_$sgenerateProductExpr_list
                                ipv
                                ipv1) } }) -}
c4dedddde6d057ca21443d4eb2a5f308
  generateRangeExpr ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,1*U(U,1*U)><L,U><L,U>m1,
     Unfolding: InlineRule (3, True, False)
                (\ (varname :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (start :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (end :: Language.Fortran.Expr LanguageFortranTools.Anno) ->
                 Language.Fortran.Assg
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (FortranGenerator.generateRangeVar varname)
                   (Language.Fortran.Bin
                      @ LanguageFortranTools.Anno
                      (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      LanguageFortranTools.generateAdditionExpr1
                      (LanguageFortranTools.generateSubtractionExpr end start)
                      FortranGenerator.generateLoop1)) -}
df03ad43d5cb731cb1d85f1d88978828
  generateRangeVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m4, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (Language.Fortran.VarName
                         @ LanguageFortranTools.Anno
                         ww1
                         (GHC.Base.++
                            @ GHC.Types.Char
                            ww2
                            (GHC.CString.unpackCString# FortranGenerator.generateRangeVar1)),
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno]))) }) -}
7832e82f8bf19b17a65582eed6bbe37f
  generateRangeVar1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_range"#) -}
be358623d56ef441e876e87d369597e8
  generateReductionArrayAssignment ::
    [GHC.Types.Char]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> [GHC.Types.Char]
    -> (Language.Fortran.VarName p1, Language.Fortran.VarName p2)
    -> [GHC.Types.Char]
  {- Arity: 4,
     Strictness: <L,1*U><L,1*U><S,1*U><S(SS),1*U(1*U(A,1*U),1*U(A,1*U))>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ p
                   @ p1
                   (w :: [GHC.Types.Char])
                   (w1 :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (w2 :: [GHC.Types.Char])
                   (w3 :: (Language.Fortran.VarName p,
                           Language.Fortran.VarName p1)) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Language.Fortran.VarName ww4 ww5 ->
                 case ww2 of ww6 { Language.Fortran.VarName ww7 ww8 ->
                 FortranGenerator.$wgenerateReductionArrayAssignment
                   @ p
                   @ p1
                   w
                   w1
                   w2
                   ww5
                   ww8 } } }) -}
2fbf1f684d884593f8c8995666f32e9d
  generateReductionArrayAssignment1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranGenerator.generateReductionArrayAssignment2) -}
935a9cd31aacdd0759f8b71d11eae352
  generateReductionArrayAssignment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
7697f1f23d9f6fe8f5fa287f7df498bb
  generateReductionArrayAssignment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (") = "#) -}
a8c619e6a02f241c950b904816ccaabb
  generateReductionArrayAssignment4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("("#) -}
0abb3e183637e996451d4a534d239f3a
  generateRelVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m4, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (Language.Fortran.VarName
                         @ LanguageFortranTools.Anno
                         ww1
                         (GHC.Base.++
                            @ GHC.Types.Char
                            ww2
                            (GHC.CString.unpackCString# FortranGenerator.generateRelVar1)),
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno]))) }) -}
5a1f8dde6d88f4f2c730b4ebe7899e4c
  generateRelVar1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_rel"#) -}
787dee82898a88fc8ed842482577fb66
  generateSizeDecl ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> GHC.Types.Int -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>m1, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (w1 :: GHC.Types.Int) ->
                 Language.Fortran.Decl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno,
                         GHC.Base.Maybe GHC.Types.Int)
                      (LanguageFortranTools.generateVar w,
                       FortranGenerator.adaptOriginalDeclaration_varname2,
                       GHC.Base.Nothing @ GHC.Types.Int)
                      (GHC.Types.[]
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                            Language.Fortran.Expr LanguageFortranTools.Anno,
                            GHC.Base.Maybe GHC.Types.Int)))
                   (Language.Fortran.BaseType
                      @ LanguageFortranTools.Anno
                      (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                      FortranGenerator.generateSizeDecl3
                      (GHC.Types.:
                         @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                         (Language.Fortran.Dimension
                            @ LanguageFortranTools.Anno
                            (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                            (GHC.Types.:
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                  Language.Fortran.Expr LanguageFortranTools.Anno)
                               (FortranGenerator.adaptOriginalDeclaration_varname2,
                                LanguageFortranTools.generateIntConstant w1)
                               (GHC.Types.[]
                                  @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno))))
                         (GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno)))
                      FortranGenerator.adaptOriginalDeclaration_varname2
                      FortranGenerator.generateSizeDecl1)) -}
56b837d237d97867568e316bf2bbb5d0
  generateSizeDecl1 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   FortranGenerator.generateSizeDecl2) -}
8d365edc4c5822450b02e47ea5ca5285
  generateSizeDecl2 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        8#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
abb5387c0e003f76b0b7610831e34e57
  generateSizeDecl3 ::
    Language.Fortran.BaseType LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.Fortran.Integer
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
5ee220d4f484fed89e17c7676570ea66
  generateSizeStatement ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U(U,U)>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 Language.Fortran.Assg
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (Language.Fortran.Var
                      @ LanguageFortranTools.Anno
                      (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      (GHC.Types.:
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])
                         (CodeEmitterUtils.varSizeVarName w,
                          GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                         (GHC.Types.[]
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                               [Language.Fortran.Expr LanguageFortranTools.Anno]))))
                   (Language.Fortran.Var
                      @ LanguageFortranTools.Anno
                      (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      (GHC.Types.:
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])
                         (FortranGenerator.generateSizeStatement1,
                          GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            (LanguageFortranTools.generateVar w)
                            (GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno)))
                         (GHC.Types.[]
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                               [Language.Fortran.Expr LanguageFortranTools.Anno]))))) -}
bdac900d3deedf406026230fe6d7b4fc
  generateSizeStatement1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateSizeStatement2) -}
fcd69182aad60de7a7d33d2934dd3d32
  generateSizeStatement2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranGenerator.generateSizeStatement3) -}
962aa6c1e0b4de3ac776dce19df8326e
  generateSizeStatement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shape"#) -}
1e38414cad22b91b2259b1919eb64298
  generateSizeStatements_decls ::
    GHC.Base.String
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> ([Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Fortran LanguageFortranTools.Anno])
  {- Arity: 2, Strictness: <L,A><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                 case FortranGenerator.$wgenerateSizeStatements_decls
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
8a8c995f919b88996844eb9322962e43
  generateSizeStatements_decls1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.varSizeVarName1) -}
13a95c37569305e56a825135b58f46a7
  generateSizeStatements_decls_go ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      GHC.Types.Int)]
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e27eea9f52182dcd2666158bf16e42c9
  generateSizeStatements_decls_go1 ::
    [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
68f214e0e85654f390eb68d4396618dc
  generateSizeStatements_decls_go2 ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 1, Strictness: <S,1*U> -}
8402c463bb83de4475b0f1d8b271ce9d
  generateSizeStatements_decls_go3 ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [GHC.Types.Int]
    -> [(Language.Fortran.VarName LanguageFortranTools.Anno,
         GHC.Types.Int)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
124df92ac5ba581d7c903b188b75c509
  generateSubtractionExpr_list ::
    [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.Fortran.Expr
                             LanguageFortranTools.Anno]) ->
                 case ds of wild {
                   [] -> FortranGenerator.generateSubtractionExpr_list1
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> Language.Fortran.Bin
                             @ LanguageFortranTools.Anno
                             (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                             LanguageFortranTools.nullSrcSpan
                             FortranGenerator.generateLoopIterationsExpr1
                             x
                             (FortranGenerator.generateLoopIterationsExpr_$sgenerateSubtractionExpr_list
                                ipv
                                ipv1) } }) -}
9f2303d80bf20868faf2a6c82d97cf61
  generateSubtractionExpr_list1 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: x -}
36e8f24d81f2e92d96ee18967cb81b71
  generateWorkGroupReduction ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (reductionVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno])
                   (redIter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (codeSeg :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 let {
                   assignments :: [Language.Fortran.Fortran LanguageFortranTools.Anno]
                   = Data.Generics.Schemes.everything
                       @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                       (GHC.Base.++
                          @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                       (\ @ a ($dData :: Data.Data.Data a) (eta :: a)[OneShot] ->
                        case Data.Typeable.Internal.typeRepFingerprint
                               @ *
                               @ a
                               (Data.Data.$p1Data @ a $dData)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                        case FortranGenerator.generateFinalHostReduction1 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                        case GHC.Prim.eqWord# dt dt2 of lwild {
                          DEFAULT
                          -> GHC.Types.[]
                               @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                          1#
                          -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                               DEFAULT
                               -> GHC.Types.[]
                                    @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                               1#
                               -> FortranGenerator.generateWorkGroupReduction_assgs
                                    reductionVars
                                    redIter
                                    eta
                                      `cast`
                                    (UnsafeCo representational a (Language.Fortran.Fortran
                                                                    LanguageFortranTools.Anno)) } } } })
                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                       FortranGenerator.$s$fDataFortran
                       codeSeg
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        FortranGenerator.$s$fEqFortran
                        assignments
                        (GHC.Types.[]
                           @ (Language.Fortran.Fortran LanguageFortranTools.Anno)) of wild {
                   GHC.Types.False
                   -> case assignments of wild1 {
                        []
                        -> GHC.List.foldl2
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        : x xs -> FortranGenerator.generateFinalHostReduction_go xs x }
                   GHC.Types.True
                   -> FortranGenerator.generateWorkGroupReduction1
                        reductionVars
                        codeSeg }) -}
7f0fcb1d76b094a264bd771fadb6038f
  generateWorkGroupReduction1 ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <B,1*U><B,U>x -}
850426a95d579ffe694c7336035bc601
  generateWorkGroupReduction_assgs ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: (\ (reductionVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno])
                   (redIter :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (ds :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Types.[]
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   Language.Fortran.Assg ds1 ds2 expr1 expr2
                   -> case LanguageFortranTools.usesVarName_list
                             reductionVars
                             expr1 of wild1 {
                        GHC.Types.False
                        -> GHC.Types.[]
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        GHC.Types.True
                        -> let {
                             localReductionVar :: Language.Fortran.VarName
                                                    LanguageFortranTools.Anno
                             = case expr1 of wild2 {
                                 DEFAULT -> FortranGenerator.generateWorkGroupReduction_assgs7
                                 Language.Fortran.Var ds3 ds4 lst
                                 -> case LanguageFortranTools.extractVarNames_go lst of wild3 {
                                      [] -> FortranGenerator.generateWorkGroupReduction_assgs7
                                      : y ys
                                      -> case y of wild4 { Language.Fortran.VarName anno str ->
                                         Language.Fortran.VarName
                                           @ LanguageFortranTools.Anno
                                           anno
                                           (GHC.CString.unpackAppendCString#
                                              FortranGenerator.generateWorkGroupReduction_assgs6
                                              str) } } }
                           } in
                           let {
                             localReductionVar1 :: (Language.Fortran.VarName
                                                      LanguageFortranTools.Anno,
                                                    [Language.Fortran.Expr
                                                       LanguageFortranTools.Anno])
                             = (localReductionVar,
                                GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                           } in
                           let {
                             localReductionVar2 :: [(Language.Fortran.VarName
                                                       LanguageFortranTools.Anno,
                                                     [Language.Fortran.Expr
                                                        LanguageFortranTools.Anno])]
                             = GHC.Types.:
                                 @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                    [Language.Fortran.Expr LanguageFortranTools.Anno])
                                 localReductionVar1
                                 (GHC.Types.[]
                                    @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                       [Language.Fortran.Expr LanguageFortranTools.Anno]))
                           } in
                           let {
                             localReductionVar3 :: Language.Fortran.Expr
                                                     LanguageFortranTools.Anno
                             = Language.Fortran.Var
                                 @ LanguageFortranTools.Anno
                                 (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                 LanguageFortranTools.nullSrcSpan
                                 localReductionVar2
                           } in
                           let {
                             localReductionArray :: Language.Fortran.VarName
                                                      LanguageFortranTools.Anno
                             = case expr1 of wild2 {
                                 DEFAULT -> FortranGenerator.generateWorkGroupReduction_assgs1
                                 Language.Fortran.Var ds3 ds4 lst
                                 -> case LanguageFortranTools.extractVarNames_go lst of wild3 {
                                      [] -> FortranGenerator.generateWorkGroupReduction_assgs1
                                      : y ys
                                      -> case y of ww { Language.Fortran.VarName ww1 ww2 ->
                                         Language.Fortran.VarName
                                           @ LanguageFortranTools.Anno
                                           ww1
                                           (GHC.CString.unpackAppendCString#
                                              CodeEmitterUtils.generateLocalReductionArray1
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 ww2
                                                 FortranGenerator.declareGlobalReductionArray1)) } } }
                           } in
                           case LanguageFortranTools.extractPrimaryReductionOp
                                  expr1
                                  expr2 of wild2 {
                             GHC.Base.Nothing
                             -> case LanguageFortranTools.extractPrimaryReductionFunction
                                       expr1
                                       expr2 of wild3 {
                                  []
                                  -> GHC.Types.[]
                                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                  : ipv ipv1
                                  -> GHC.Types.:
                                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                       (Language.Fortran.Assg
                                          @ LanguageFortranTools.Anno
                                          (Data.Map.Internal.Tip
                                             @ GHC.Base.String
                                             @ [GHC.Base.String])
                                          LanguageFortranTools.nullSrcSpan
                                          localReductionVar3
                                          (Language.Fortran.Var
                                             @ LanguageFortranTools.Anno
                                             (Data.Map.Internal.Tip
                                                @ GHC.Base.String
                                                @ [GHC.Base.String])
                                             LanguageFortranTools.nullSrcSpan
                                             (GHC.Types.:
                                                @ (Language.Fortran.VarName
                                                     LanguageFortranTools.Anno,
                                                   [Language.Fortran.Expr
                                                      LanguageFortranTools.Anno])
                                                (Language.Fortran.VarName
                                                   @ LanguageFortranTools.Anno
                                                   (Data.Map.Internal.Tip
                                                      @ GHC.Base.String
                                                      @ [GHC.Base.String])
                                                   wild3,
                                                 GHC.Types.:
                                                   @ (Language.Fortran.Expr
                                                        LanguageFortranTools.Anno)
                                                   localReductionVar3
                                                   (GHC.Types.:
                                                      @ (Language.Fortran.Expr
                                                           LanguageFortranTools.Anno)
                                                      (Language.Fortran.Var
                                                         @ LanguageFortranTools.Anno
                                                         (Data.Map.Internal.Tip
                                                            @ GHC.Base.String
                                                            @ [GHC.Base.String])
                                                         LanguageFortranTools.nullSrcSpan
                                                         (GHC.Types.:
                                                            @ (Language.Fortran.VarName
                                                                 LanguageFortranTools.Anno,
                                                               [Language.Fortran.Expr
                                                                  LanguageFortranTools.Anno])
                                                            (localReductionArray,
                                                             GHC.Types.:
                                                               @ (Language.Fortran.Expr
                                                                    LanguageFortranTools.Anno)
                                                               (Language.Fortran.Var
                                                                  @ LanguageFortranTools.Anno
                                                                  (Data.Map.Internal.Tip
                                                                     @ GHC.Base.String
                                                                     @ [GHC.Base.String])
                                                                  LanguageFortranTools.nullSrcSpan
                                                                  (GHC.Types.:
                                                                     @ (Language.Fortran.VarName
                                                                          LanguageFortranTools.Anno,
                                                                        [Language.Fortran.Expr
                                                                           LanguageFortranTools.Anno])
                                                                     (redIter,
                                                                      GHC.Types.[]
                                                                        @ (Language.Fortran.Expr
                                                                             LanguageFortranTools.Anno))
                                                                     (GHC.Types.[]
                                                                        @ (Language.Fortran.VarName
                                                                             LanguageFortranTools.Anno,
                                                                           [Language.Fortran.Expr
                                                                              LanguageFortranTools.Anno]))))
                                                               (GHC.Types.[]
                                                                  @ (Language.Fortran.Expr
                                                                       LanguageFortranTools.Anno)))
                                                            (GHC.Types.[]
                                                               @ (Language.Fortran.VarName
                                                                    LanguageFortranTools.Anno,
                                                                  [Language.Fortran.Expr
                                                                     LanguageFortranTools.Anno]))))
                                                      (GHC.Types.[]
                                                         @ (Language.Fortran.Expr
                                                              LanguageFortranTools.Anno))))
                                                (GHC.Types.[]
                                                   @ (Language.Fortran.VarName
                                                        LanguageFortranTools.Anno,
                                                      [Language.Fortran.Expr
                                                         LanguageFortranTools.Anno])))))
                                       (GHC.Types.[]
                                          @ (Language.Fortran.Fortran LanguageFortranTools.Anno)) }
                             GHC.Base.Just op
                             -> GHC.Types.:
                                  @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                  (Language.Fortran.Assg
                                     @ LanguageFortranTools.Anno
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                     LanguageFortranTools.nullSrcSpan
                                     localReductionVar3
                                     (Language.Fortran.Bin
                                        @ LanguageFortranTools.Anno
                                        (Data.Map.Internal.Tip
                                           @ GHC.Base.String
                                           @ [GHC.Base.String])
                                        LanguageFortranTools.nullSrcSpan
                                        op
                                        localReductionVar3
                                        (Language.Fortran.Var
                                           @ LanguageFortranTools.Anno
                                           (Data.Map.Internal.Tip
                                              @ GHC.Base.String
                                              @ [GHC.Base.String])
                                           LanguageFortranTools.nullSrcSpan
                                           (GHC.Types.:
                                              @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                                 [Language.Fortran.Expr LanguageFortranTools.Anno])
                                              (localReductionArray,
                                               GHC.Types.:
                                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                                                 (Language.Fortran.Var
                                                    @ LanguageFortranTools.Anno
                                                    (Data.Map.Internal.Tip
                                                       @ GHC.Base.String
                                                       @ [GHC.Base.String])
                                                    LanguageFortranTools.nullSrcSpan
                                                    (GHC.Types.:
                                                       @ (Language.Fortran.VarName
                                                            LanguageFortranTools.Anno,
                                                          [Language.Fortran.Expr
                                                             LanguageFortranTools.Anno])
                                                       (redIter,
                                                        GHC.Types.[]
                                                          @ (Language.Fortran.Expr
                                                               LanguageFortranTools.Anno))
                                                       (GHC.Types.[]
                                                          @ (Language.Fortran.VarName
                                                               LanguageFortranTools.Anno,
                                                             [Language.Fortran.Expr
                                                                LanguageFortranTools.Anno]))))
                                                 (GHC.Types.[]
                                                    @ (Language.Fortran.Expr
                                                         LanguageFortranTools.Anno)))
                                              (GHC.Types.[]
                                                 @ (Language.Fortran.VarName
                                                      LanguageFortranTools.Anno,
                                                    [Language.Fortran.Expr
                                                       LanguageFortranTools.Anno]))))))
                                  (GHC.Types.[]
                                     @ (Language.Fortran.Fortran
                                          LanguageFortranTools.Anno)) } } }) -}
fa34ac2cb4488629ec8f63508687d4f0
  generateWorkGroupReduction_assgs1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateWorkGroupReduction_assgs2) -}
c3037ba3d43a75410351d78e264e2bd7
  generateWorkGroupReduction_assgs10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DUMMY12"#) -}
04316744594342bfa422a4e541ec0605
  generateWorkGroupReduction_assgs2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   CodeEmitterUtils.generateLocalReductionArray1
                   FortranGenerator.generateWorkGroupReduction_assgs3) -}
1b88a6cc8ea3919bcb7fd36da5af306a
  generateWorkGroupReduction_assgs3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranGenerator.generateWorkGroupReduction_assgs4
                   FortranGenerator.declareGlobalReductionArray1) -}
df3edfc594a6dff7179d881f127d67f7
  generateWorkGroupReduction_assgs4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranGenerator.generateWorkGroupReduction_assgs5) -}
82389c3129b47e1a102f3af832fc4df7
  generateWorkGroupReduction_assgs5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DUMMY11"#) -}
815f16a5dd1c184242a8a501879bec06
  generateWorkGroupReduction_assgs6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("local_"#) -}
ca363c8cfd341bc1577b42a2bd02612d
  generateWorkGroupReduction_assgs7 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   FortranGenerator.generateWorkGroupReduction_assgs8) -}
dec3c3e7ccc4d24007eed9b146922dda
  generateWorkGroupReduction_assgs8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   FortranGenerator.generateWorkGroupReduction_assgs6
                   FortranGenerator.generateWorkGroupReduction_assgs9) -}
cc52303d4cc8ed369fc50d50366b3921
  generateWorkGroupReduction_assgs9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranGenerator.generateWorkGroupReduction_assgs10) -}
"SC:generateLoopInitialisers0" forall (sc :: Language.Fortran.Expr
                                               (Data.Map.Internal.Map
                                                  [GHC.Types.Char] [[GHC.Types.Char]]))
                                      (sc1 :: Language.Fortran.Expr
                                                (Data.Map.Internal.Map
                                                   [GHC.Types.Char] [[GHC.Types.Char]]))
                                      (sc2 :: (Language.Fortran.VarName
                                                 (Data.Map.Internal.Map
                                                    [GHC.Types.Char] [[GHC.Types.Char]]),
                                               Language.Fortran.Expr
                                                 (Data.Map.Internal.Map
                                                    [GHC.Types.Char] [[GHC.Types.Char]]),
                                               Language.Fortran.Expr
                                                 (Data.Map.Internal.Map
                                                    [GHC.Types.Char] [[GHC.Types.Char]]),
                                               Language.Fortran.Expr
                                                 (Data.Map.Internal.Map
                                                    [GHC.Types.Char] [[GHC.Types.Char]])))
                                      (sc3 :: [(Language.Fortran.VarName
                                                  (Data.Map.Internal.Map
                                                     [GHC.Types.Char] [[GHC.Types.Char]]),
                                                Language.Fortran.Expr
                                                  (Data.Map.Internal.Map
                                                     [GHC.Types.Char] [[GHC.Types.Char]]),
                                                Language.Fortran.Expr
                                                  (Data.Map.Internal.Map
                                                     [GHC.Types.Char] [[GHC.Types.Char]]),
                                                Language.Fortran.Expr
                                                  (Data.Map.Internal.Map
                                                     [GHC.Types.Char] [[GHC.Types.Char]]))])
  FortranGenerator.generateLoopInitialisers (GHC.Types.:
                                               @ (Language.Fortran.VarName
                                                    LanguageFortranTools.Anno,
                                                  Language.Fortran.Expr LanguageFortranTools.Anno,
                                                  Language.Fortran.Expr LanguageFortranTools.Anno,
                                                  Language.Fortran.Expr LanguageFortranTools.Anno)
                                               sc2
                                               sc3)
                                            sc1
                                            (GHC.Base.Just
                                               @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                                               sc)
  = FortranGenerator.generateLoopInitialisers_$sgenerateLoopInitialisers
      sc
      sc1
      sc2
      sc3
"SC:generateProductExpr_list0" forall (sc :: Language.Fortran.Expr
                                               (Data.Map.Internal.Map
                                                  [GHC.Types.Char] [[GHC.Types.Char]]))
                                      (sc1 :: [Language.Fortran.Expr
                                                 (Data.Map.Internal.Map
                                                    [GHC.Types.Char] [[GHC.Types.Char]])])
  FortranGenerator.generateProductExpr_list (GHC.Types.:
                                               @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                                               sc
                                               sc1)
  = FortranGenerator.generateGlobalWorkItemsExpr_$sgenerateProductExpr_list
      sc
      sc1
"SC:generateSubtractionExpr_list0" forall (sc :: Language.Fortran.Expr
                                                   (Data.Map.Internal.Map
                                                      [GHC.Types.Char] [[GHC.Types.Char]]))
                                          (sc1 :: [Language.Fortran.Expr
                                                     (Data.Map.Internal.Map
                                                        [GHC.Types.Char] [[GHC.Types.Char]])])
  FortranGenerator.generateSubtractionExpr_list (GHC.Types.:
                                                   @ (Language.Fortran.Expr
                                                        LanguageFortranTools.Anno)
                                                   sc
                                                   sc1)
  = FortranGenerator.generateLoopIterationsExpr_$sgenerateSubtractionExpr_list
      sc
      sc1
"SPEC/FortranGenerator $fDataDecl @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                   (Data.Map.Internal.Map
                                                                                      GHC.Base.String
                                                                                      [GHC.Base.String]))
  Language.Fortran.$fDataDecl @ (Data.Map.Internal.Map
                                   GHC.Base.String [GHC.Base.String])
                              v
  = FortranGenerator.$s$fDataDecl
"SPEC/FortranGenerator $fDataFortran @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                      (Data.Map.Internal.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Internal.Map
                                      GHC.Base.String [GHC.Base.String])
                                 v
  = FortranGenerator.$s$fDataFortran
"SPEC/FortranGenerator $fDataMap @ [Char] @ [String]" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                               [GHC.Types.Char])
                                                                      (v1 :: Data.Data.Data
                                                                               [GHC.Base.String])
                                                                      (v :: Data.Data.Data
                                                                              [GHC.Types.Char])
  Data.Map.Internal.$fDataMap @ [GHC.Types.Char]
                              @ [GHC.Base.String]
                              v
                              v1
                              v2
  = FortranGenerator.$s$fDataDecl_$s$fDataMap
"SPEC/FortranGenerator $fDataMap_$cdataCast2 @ [Char] @ [String]" [orphan] [0] forall (w2 :: GHC.Classes.Ord
                                                                                               [GHC.Types.Char])
                                                                                      (w1 :: Data.Data.Data
                                                                                               [GHC.Base.String])
                                                                                      (w :: Data.Data.Data
                                                                                              [GHC.Types.Char])
  Data.Map.Internal.$fDataMap_$cdataCast2 @ [GHC.Types.Char]
                                          @ [GHC.Base.String]
                                          w
                                          w1
                                          w2
  = FortranGenerator.$s$fDataMap_$cdataCast2
"SPEC/FortranGenerator $fData[] @ [Char]" [orphan] forall (v :: Data.Data.Data
                                                                  [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] v
  = FortranGenerator.$s$fDataDecl_$s$fData[]
"SPEC/FortranGenerator $fData[]7 @ [Char]" [orphan] forall ($dData :: Data.Data.Data
                                                                        [GHC.Types.Char])
  Data.Data.$fData[]7 @ [GHC.Types.Char] $dData
  = FortranGenerator.$s$fData[]7
"SPEC/FortranGenerator $fEqFortran @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                    (Data.Map.Internal.Map
                                                                                       GHC.Base.String
                                                                                       [GHC.Base.String]))
  Language.Fortran.$fEqFortran @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = FortranGenerator.$s$fEqFortran
"SPEC/FortranGenerator $fEqFortran_$c/= @ (Map String [String])" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                            (Data.Map.Internal.Map
                                                                                               GHC.Base.String
                                                                                               [GHC.Base.String]))
  Language.Fortran.$fEqFortran_$c/= @ (Data.Map.Internal.Map
                                         GHC.Base.String [GHC.Base.String])
                                    $dEq
  = FortranGenerator.$s$fEqFortran_$s$fEqFortran_$c/=
"SPEC/FortranGenerator $fEqMap @ [Char] @ [String]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                             [GHC.Base.String])
                                                                    (v :: GHC.Classes.Eq
                                                                            [GHC.Types.Char])
  Data.Map.Internal.$fEqMap @ [GHC.Types.Char]
                            @ [GHC.Base.String]
                            v
                            v1
  = FortranGenerator.$s$fEqFortran_$s$fEqMap
"SPEC/FortranGenerator $fEqMap_$c/= @ [Char] @ [String]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                     [GHC.Base.String])
                                                                         ($dEq :: GHC.Classes.Eq
                                                                                    [GHC.Types.Char])
  Data.Map.Internal.$fEqMap_$c/= @ [GHC.Types.Char]
                                 @ [GHC.Base.String]
                                 $dEq
                                 $dEq1
  = FortranGenerator.$s$fEqFortran_$s$fEqMap_$c/=
"SPEC/FortranGenerator $fEqVarName @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                    (Data.Map.Internal.Map
                                                                                       GHC.Base.String
                                                                                       [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = FortranGenerator.$s$fEqVarName
"SPEC/FortranGenerator $fShowMap @ [Char] @ [String]" [orphan] forall (v1 :: GHC.Show.Show
                                                                               [GHC.Base.String])
                                                                      (v :: GHC.Show.Show
                                                                              [GHC.Types.Char])
  Data.Map.Internal.$fShowMap @ [GHC.Types.Char]
                              @ [GHC.Base.String]
                              v
                              v1
  = FortranGenerator.$s$fShowMap
"SPEC/FortranGenerator $fShowMap_$cshow @ [Char] @ [String]" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                           [GHC.Base.String])
                                                                             ($dShow :: GHC.Show.Show
                                                                                          [GHC.Types.Char])
  Data.Map.Internal.$fShowMap_$cshow @ [GHC.Types.Char]
                                     @ [GHC.Base.String]
                                     $dShow
                                     $dShow1
  = FortranGenerator.$s$fShowMap_$cshow
"SPEC/FortranGenerator $fShowMap_$cshowList @ [Char] @ [String]" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                               [GHC.Base.String])
                                                                                 ($dShow :: GHC.Show.Show
                                                                                              [GHC.Types.Char])
  Data.Map.Internal.$fShowMap_$cshowList @ [GHC.Types.Char]
                                         @ [GHC.Base.String]
                                         $dShow
                                         $dShow1
  = FortranGenerator.$s$fShowMap_$cshowList
"SPEC/FortranGenerator $fShowMap_$cshowsPrec @ [Char] @ [String]" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                               [GHC.Base.String])
                                                                                      (w :: GHC.Show.Show
                                                                                              [GHC.Types.Char])
  Data.Map.Internal.$fShowMap_$cshowsPrec @ [GHC.Types.Char]
                                          @ [GHC.Base.String]
                                          w
                                          w1
  = FortranGenerator.$s$fShowMap_$cshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

