
==================== FINAL INTERFACE ====================
2018-11-16 12:45:19.319970171 UTC

interface main:Transformer 8043
  interface hash: 86b2096e18b3059f7b7407709b2af7c9
  ABI hash: 26b2dfe20b00517af8ec6e66f41c4695
  export-list hash: 8ef9a03e6b93904e45399289735afbb9
  orphan hash: 7d38311b95c71b3c1fcaff93d4da2b47
  flag hash: 7853c119b27f3f568e863cba4679c19c
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Transformer.combineKernelProgUnit_foldl
  Transformer.paralleliseProgUnit_foldl
module dependencies: CombineKernels ConstantFolding
                     F95IntrinsicFunctions Language.Fortran Language.Fortran.Lexer
                     Language.Fortran.Parser Language.Fortran.PreProcess
                     LanguageFortranTools LoopAnalysis MiniPP PreProcessor
                     SubroutineTable TupleTable VarAccessAnalysis VarDependencyAnalysis
                     Warning
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      haskell-src-1.0.3.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      process-1.6.3.0 syb-0.7 text-1.2.3.1 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Data b150502d549600eff3202c16ff6cf22d
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Data.Typeable.Internal 0b0201144a992d956fd13a21fc2d4b48
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Environment 7fdede11f96719870569cb0da1adac2f
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  containers-0.5.11.0:Data.Map.Internal e02d23495520de11b8e9f3c9c93a4d11
import  -/  directory-1.3.1.5:System.Directory 3989d404cf62c9bbd5d0a078de68acbe
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  CombineKernels 2fdafb443a7a90b889719c88ff97277f
  exports: 29c7da1aedac033f1133ad4600c499c4
  combineKernelsProgUnit 3bd9fffb0375748e5c5689676b959dc1
import  -/  ConstantFolding 39845b6f4a7f89f874e37dcfd7205ec0
  exports: f1a67b4208c0b7aa4a493b15d88b8c27
  foldConstants 2e477940b7ac6a0f5483efcc171891dd
import  -/  Language.Fortran e2add56600673959dbdfe1ac093795c9
  exports: 6ca1e7b188145fc0c602707ea4a1c428
  Assg c3a5a5c7c0380c697e6a5cda4cc060bd
  Block c8f6dc9d55c3b3cbc94e3fb30057f310
  Expr 6304956f2901eead56a8fac1e90d4904
  For 5816e0af6d8df16d1771d2006bcf3abf
  Fortran cab0cd6287333175c6b9d87427982518
  OpenCLMap e48fa1b14eab97eb69b2edc5f2c10ce8
  OpenCLReduce d14e8e442939b0e4bb37da5a0da04484
  Var 4b8ab01fc12afd12d9f52ad45e3004a1
  VarName 361ec85699986b0b7f4d68a05374d64d
  srcSpan c13b4efea655d094fcf2aa6fb6fdfaaf
  tag b8f62820610738e1e6006f26ed48bd55
import  -/  Language.Fortran.Parser 94f87e312918e2e0d84323268977b8af
  exports: 811e5416839040be903a08c9e7bce6b9
import  -/  LanguageFortranTools 737e8abc5de089abcd0ce62660f9d159
  exports: a5a994dcb8ba92c93a8a354a063275b0
  Anno 1420203ed9c39fcf982d2ff37c01ae68
  appendAnnotation 0cb1dda6325719e67f26de8d69e9d691
  appendAnnotationMap 50267667683b6ec2d29dd181c59a4fea
  appendFortran_recursive a4e0a6baa3b66014183e44ccf0a12047
  compilerName 716783fc2180cf5d40b0847b268cbee2
  errorLocationFormatting 9c9c0273432833def2860c2509392832
  extractFirstChildFor cb1e1b3f65db98fed1f95106ee8ee930
  extractLoopVars ab5343506b38be9c29b0a8a0873f663b
  extractVarNames 920113507cf2d36f1a1834c3a88c2c59
  generateSrcSpan 14c58888c86ebb60674149bdcf574778
  getLoopVar 995e5eb39ecbdc26753715677fd95021
  listRemoveDuplications cc90c431c334b3429c5de18c32c0abd0
  listSubtract 40ed5a52f1d2f2210a51ecab157379fd
  nullAnno b5ec3f8914fec256ad2e53b761b9bd52
  outputExprFormatting 071110acbe7f8df82378c3e15acadb0d
  outputTab e52db0602fff64fd09a0948045bb72a5
  removeAllAnnotations 88271269b0a76b96d931a508ee3978d3
  removeLoopConstructs_recursive 34f5362b635daa521636f09aab132d56
import  -/  LoopAnalysis 69ef6e86dc526123f4bf1eb83c17a1da
  exports: 81917bb7213edf4585c056611b705767
  analyseLoop_map ababe2d42161e460226c2fabd5e9c946
  analyseLoop_reduce 613fa8cb6bcbbab2979d6951bbc6551d
  getErrorAnnotations d0a07e24994ddb82d6d6048559c7aa99
  getReads a7be1a230a2b411e0fd874ee78b017bb
  getReductionVarNames d08c389d967ae1b3aa7efd3ff97b2256
  getWrites 081b9a02e0bdc143064bca7a14aed08a
import  -/  MiniPP a097deb7cf80506ea342d468c387cbc7
  exports: 333d60b501b5f68150299a62b5d71c5d
import  -/  SubroutineTable 489825aeafffaefb2cc10b4978448116
  exports: 2909798395eea1f9c7c6a08b6d2a2760
  MkSubRec 34e26216a9d2d4a97920de2d2cb5080c
  SubroutineTable 5a91cdd7134da8dba28aec7592f36133
  subAst 8e8730275a44d60a77f7af5bd3645916
  subSrcFile 8e8730275a44d60a77f7af5bd3645916
import  -/  VarAccessAnalysis 53752df4324502d602d68f0512d6b3c9
  exports: 7d36a7dfcc704fd9b4303a1ab3c7be89
  VarAccessAnalysis 6eba2d91974ef76d532f7c235d4d961a
  analyseAllVarAccess_progUnit e7cc16dc934986186ae9d6da7df6ad4a
  getNonTempVars 902b39df5c90ea9341608aa427d00dde
  getPrexistingVars e0d2cbd38ee60be110b1aeee86e420a5
  getValueAtSrcSpan c331f40e666b6ff9fd3404effa137ea6
import  -/  VarDependencyAnalysis 396f6429b909c284662b818c101482ab
  exports: 9e709a7a646c79ec724f173b4bb12fe5
  VarDependencyAnalysis f3229ce6e96b539cda21a3387a751730
  analyseDependencies b936fb9dd6b83675d33a5ed764048126
  loopCarriedDependencyCheck 89d79345f8c95009c523d7a21dbafc43
  loopCarriedDependencyCheck_reductionWithIteration a09487224bd4addd62a76bbf344feb2e
import  -/  Warning b5ec059e95d91647264308e84d2ed3ea
  exports: d9b5419f40dd7650497f479a7fe0214a
import  -/  process-1.6.3.0:System.Process 17a215e760465e01e09a5bb6ca1a6adb
import  -/  syb-0.7:Data.Generics 2ddc257f9ac35414fc37ff4d19b4d388
import  -/  syb-0.7:Data.Generics.Aliases a5097c06261967df51d59247bf1d4958
import  -/  syb-0.7:Data.Generics.Schemes 58bc96c8ed0bed4ad53424f237efe8b8
02c0fef0f261438d876ddc20674e846b
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Fortran
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataFortran6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Fortran
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Fortran
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tFortran)
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Fortran
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataFortran1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Fortran
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap) -}
8ff646c82fa111a0e72a3940b6342ac3
  $s$fDataFortran_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ (Data.Map.Internal.Map [GHC.Types.Char])
                     @ [GHC.Base.String]
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ (* -> *)
                        @ Data.Map.Internal.Map
                        @ [GHC.Types.Char]
                        Data.Map.Internal.$fDataMap17
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7))
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ [GHC.Types.Char]
                        Data.Data.$fData[]3
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7)))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Data.Map.Internal.Map
                                                                       [GHC.Types.Char]
                                                                       [GHC.Base.String]>_N)
                  (Data.Map.Internal.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.fromListConstr)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.mapDataType)
                  (\ @ t :: * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d. Data.Data.Data d => c (t d)) ->
                   GHC.Base.Nothing
                     @ (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])))
                  (Data.Map.Internal.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap6
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R)
                  (Data.Map.Internal.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     Transformer.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
efc4f2f0b73951c2e463631316eb3903
  $s$fDataFortran_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]3
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ GHC.Types.Char
                        Data.Data.$fData[]3
                        Data.Data.$fDataChar7))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[[GHC.Types.Char]]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ (ds :: [[GHC.Types.Char]]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [[GHC.Types.Char]]) -> Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c [[GHC.Types.Char]]))
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
3911a55f09fb2236804244f288e6840b
  $s$fDataMap_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   (w3 :: Data.Typeable.Internal.Typeable t) ->
                 Data.Map.Internal.$w$cdataCast2
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   Data.Data.$fData[]_$s$fData[]
                   Transformer.$s$fDataFortran_$s$fData[]
                   @ t
                   @ c
                   w3) -}
6c6dbe253b47b5ca1d7f27ce85975f06
  $s$fDataProgUnit ::
    Data.Data.Data
      (Language.Fortran.ProgUnit
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ProgUnit
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.ProgUnit
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataProgUnit6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.ProgUnit
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataProgUnit_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (\ (ds :: Language.Fortran.ProgUnit
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   case ds of wild {
                     Language.Fortran.Main ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cMain
                     Language.Fortran.Sub ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cSub
                     Language.Fortran.Function ds1 ds2 ds3 ds4 ds5 ds6 ds7
                     -> Language.Fortran.$cFunction
                     Language.Fortran.Module ds1 ds2 ds3 ds4 ds5 ds6 ds7
                     -> Language.Fortran.$cModule
                     Language.Fortran.BlockData ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cBlockData
                     Language.Fortran.PSeq ds1 ds2 ds3 ds4 -> Language.Fortran.$cPSeq
                     Language.Fortran.Prog ds1 ds2 ds3 -> Language.Fortran.$cProg
                     Language.Fortran.NullProg ds1 ds2 -> Language.Fortran.$cNullProg
                     Language.Fortran.IncludeProg ds1 ds2 ds3 ds4
                     -> Language.Fortran.$cIncludeProg })
                  (\ (ds :: Language.Fortran.ProgUnit
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tProgUnit)
                  (Language.Fortran.$fDataProgUnit_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.ProgUnit
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataProgUnit1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.ProgUnit
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.ProgUnit
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataProgUnit_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fDataFortran_$s$fDataMap) -}
7001681b335a632ce7654d02f3efbc6e
  $s$fData[]7 :: Data.Typeable.Internal.TypeRep [[GHC.Types.Char]]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ [GHC.Types.Char]
                   Data.Data.$fData[]3
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ []
                      @ GHC.Types.Char
                      Data.Data.$fData[]3
                      Data.Data.$fDataChar7)) -}
92ee9643b6285bb05caad55a6d320cee
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.Fortran.VarName LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     Transformer.$s$fEq(,)_$s$fEqVarName
                     Transformer.$s$fEq(,)_$s$fEqExpr)
                  Transformer.$s$fEq(,)_$s$fEq(,)_$c/= -}
35ca9d4460f81899264eb740c6a76fcf
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno)
    -> (Language.Fortran.VarName LanguageFortranTools.Anno,
        Language.Fortran.Expr LanguageFortranTools.Anno)
    -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SL),1*U(1*U(U,1*U),U)><S(SL),1*U(1*U(U,1*U),U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno))
                   (y :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                          Language.Fortran.Expr LanguageFortranTools.Anno)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case Language.Fortran.$fEqVarName_$c==
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        Transformer.$s$fEq(,)_$s$fEqMap
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.Fortran.$fEqArgList_$c==
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             Transformer.$s$fEq(,)_$s$fEqMap
                             a2
                             b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
a708d2899da23b08e4dd1a0132d2a4e4
  $s$fEq(,)_$s$fEqExpr ::
    GHC.Classes.Eq
      (Language.Fortran.Expr
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqArgList_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fEq(,)_$s$fEqMap)
                  (Language.Fortran.$fEqExpr_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fEq(,)_$s$fEqMap) -}
265b7f740c42d370ef28d4361361e6f7
  $s$fEq(,)_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Internal.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  Transformer.$s$fEq(,)_$s$fEqMap_$c/= -}
b688a4caeabf30bb2e5e1fb90c004614
  $s$fEq(,)_$s$fEqMap_$c/= ::
    Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEq[]_$s$fEq[]2
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
79c58457b541c9ae815ff945f253913f
  $s$fEq(,)_$s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fEq(,)_$s$fEqMap)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Transformer.$s$fEq(,)_$s$fEqMap) -}
a8202a819e8ffdb9135769a5507ce079
  $sfindWithDefault1 ::
    a
    -> GHC.Base.String -> Data.Map.Internal.Map GHC.Base.String a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><S,1*U><S,1*U> -}
d57e596e40373817daca6e82c4a76c1b
  $sinsert_$sgo13 ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
d12476ab2c5e0aa5275965e7ecb35e5d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Transformer.$trModule3
                   Transformer.$trModule1) -}
a3134c5b94988a6c5984ccb3b51189d3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Transformer.$trModule2) -}
4b7e7834c425bad2f2754f3dd29d1d0e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Transformer"#) -}
a29424957063501333a863dbb9de6c12
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Transformer.$trModule4) -}
e9fbe2513227c18b27fec1c8741b3dcf
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
711e2a1cfc5eb7bdd83f944d76ae6b1d
  $wcombineKernelProgUnit_foldl ::
    GHC.Base.Maybe GHC.Types.Float
    -> SubroutineTable.SubroutineTable
    -> [(GHC.Base.String, GHC.Base.String)]
    -> GHC.Base.String
    -> (# SubroutineTable.SubroutineTable,
          [(GHC.Base.String, GHC.Base.String)] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.Maybe GHC.Types.Float)
                   (ww :: SubroutineTable.SubroutineTable)
                   (ww1 :: [(GHC.Base.String, GHC.Base.String)])
                   (w1 :: GHC.Base.String) ->
                 let {
                   subrec :: SubroutineTable.SubRec
                   = Transformer.$sfindWithDefault1
                       @ SubroutineTable.SubRec
                       Transformer.combineKernelProgUnit_foldl3
                       w1
                       ww
                 } in
                 let {
                   combinedProgUnit :: Language.Fortran.ProgUnit
                                         LanguageFortranTools.Anno
                   = CombineKernels.combineKernelsProgUnit
                       @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                       Transformer.$s$fDataProgUnit
                       w
                       (Transformer.combineKernelProgUnit_foldl2
                          (SubroutineTable.subAst subrec))
                 } in
                 let {
                   filename :: GHC.Base.String
                   = case subrec of wild { SubroutineTable.MkSubRec ds1 ds2 ds3 ->
                     ds2 }
                 } in
                 (# Transformer.$sinsert_$sgo13
                      @ SubroutineTable.SubRec
                      w1
                      w1
                      (SubroutineTable.MkSubRec
                         combinedProgUnit
                         filename
                         (GHC.Types.[] @ GHC.Base.String))
                      ww,
                    GHC.Base.++
                      @ (GHC.Base.String, GHC.Base.String)
                      ww1
                      (GHC.Types.:
                         @ (GHC.Base.String, GHC.Base.String)
                         (filename,
                          Data.Generics.Schemes.everything
                            @ [GHC.Types.Char]
                            (GHC.Base.++ @ GHC.Types.Char)
                            Transformer.combineKernelProgUnit_foldl1
                            @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                            Transformer.$s$fDataProgUnit
                            combinedProgUnit)
                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) #)) -}
0c072737bdaaaa1e9d67ed286e7305aa
  $wparalleliseProgUnit_foldl ::
    [GHC.Base.String]
    -> SubroutineTable.SubroutineTable
    -> SubroutineTable.SubroutineTable
    -> [(GHC.Base.String, GHC.Base.String)]
    -> GHC.Base.String
    -> (# SubroutineTable.SubroutineTable,
          [(GHC.Base.String, GHC.Base.String)] #)
  {- Arity: 5, Strictness: <L,U><L,U><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: SubroutineTable.SubroutineTable)
                   (ww :: SubroutineTable.SubroutineTable)
                   (ww1 :: [(GHC.Base.String, GHC.Base.String)])
                   (w2 :: GHC.Base.String) ->
                 let {
                   subrec :: SubroutineTable.SubRec
                   = Transformer.$sfindWithDefault1
                       @ SubroutineTable.SubRec
                       Transformer.paralleliseProgUnit_foldl6
                       w2
                       w1
                 } in
                 let {
                   filename :: GHC.Base.String
                   = case subrec of wild { SubroutineTable.MkSubRec ds1 ds2 ds3 ->
                     ds2 }
                 } in
                 let {
                   parallelisedProgUnit :: Language.Fortran.ProgUnit
                                             LanguageFortranTools.Anno
                   = let {
                       progUnit :: Language.Fortran.ProgUnit LanguageFortranTools.Anno
                       = case subrec of wild { SubroutineTable.MkSubRec ds1 ds2 ds3 ->
                         ds1 }
                     } in
                     let {
                       accessAnalysis :: VarAccessAnalysis.VarAccessAnalysis
                       = case VarAccessAnalysis.$wanalyseAllVarAccess
                                w
                                (GHC.Types.:
                                   @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                                   progUnit
                                   (GHC.Types.[]
                                      @ (Language.Fortran.ProgUnit
                                           LanguageFortranTools.Anno))) of ww2 { (#,,,#) ww3 ww4 ww5 ww6 ->
                         (ww3, ww4, ww5, ww6) }
                     } in
                     let {
                       lvl131 :: forall d b.
                                 Data.Data.Data d =>
                                 Data.Functor.Identity.Identity (d -> b) -> d -> b
                         {- Arity: 3,
                            Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><C(S),1*C1(U)><L,1*U> -}
                       = \ @ d
                           @ b
                           ($dData2 :: Data.Data.Data d)
                           (ds1 :: Data.Functor.Identity.Identity (d -> b))
                           (x :: d) ->
                         ds1 `cast` (Data.Functor.Identity.N:Identity[0] <d -> b>_R)
                           (case Transformer.paralleliseProgUnit_foldl5 of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                            case Data.Typeable.Internal.typeRepFingerprint
                                   @ *
                                   @ d
                                   (Data.Data.$p1Data @ d $dData2)
                                     `cast`
                                   (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                            case GHC.Prim.eqWord# dt dt2 of lwild {
                              DEFAULT -> x
                              1#
                              -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                                   DEFAULT -> x
                                   1#
                                   -> (Transformer.isolateAndParalleliseForLoops
                                         filename
                                         w1
                                         accessAnalysis
                                         x `cast`
                                         (UnsafeCo representational d (Language.Fortran.Fortran
                                                                         LanguageFortranTools.Anno)))
                                        `cast`
                                      (UnsafeCo representational (Language.Fortran.Fortran
                                                                    LanguageFortranTools.Anno) d) } } } })
                     } in
                     let {
                       lvl132 :: Language.Fortran.Block LanguageFortranTools.Anno
                                 -> Data.Functor.Identity.Identity
                                      (Language.Fortran.Block
                                         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                         {- Arity: 1, Strictness: <L,U>,
                            Unfolding: InlineRule (1, True, False)
                                       (\ (block :: Language.Fortran.Block
                                                      LanguageFortranTools.Anno) ->
                                        Language.Fortran.$fDataBlock_$cgfoldl
                                          @ (Data.Map.Internal.Map
                                               GHC.Base.String [GHC.Base.String])
                                          Transformer.$s$fDataFortran_$s$fDataMap
                                          @ Data.Functor.Identity.Identity
                                          lvl131
                                            `cast`
                                          (forall (d :: <*>_N) (b :: <*>_N).
                                           <Data.Data.Data d>_R
                                           ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                                           ->_R <d>_R
                                           ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                                          Language.Fortran.$fDataArg7
                                            `cast`
                                          (forall (g :: <*>_N).
                                           <g>_R
                                           ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                                          block) -}
                       = \ (block :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                         Transformer.paralleliseProgUnit_foldl4
                           lvl131
                             `cast`
                           (forall (d :: <*>_N) (b :: <*>_N).
                            <Data.Data.Data d>_R
                            ->_R <Data.Functor.Identity.Identity (d -> b)>_R
                            ->_R <d>_R
                            ->_R Sym (Data.Functor.Identity.N:Identity[0] <b>_R))
                           Language.Fortran.$fDataArg7
                             `cast`
                           (forall (g :: <*>_N).
                            <g>_R ->_R Sym (Data.Functor.Identity.N:Identity[0] <g>_R))
                           block
                     } in
                     Data.Generics.Schemes.everywhere
                       (\ @ a ($dData :: Data.Data.Data a) ->
                        case Transformer.paralleliseProgUnit_foldl1 of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                        case Data.Typeable.Internal.typeRepFingerprint
                               @ *
                               @ a
                               (Data.Data.$p1Data @ a $dData)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                        case GHC.Prim.eqWord# dt dt2 of lwild {
                          DEFAULT -> GHC.Base.id @ a
                          1#
                          -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                               DEFAULT -> GHC.Base.id @ a
                               1#
                               -> lvl132
                                    `cast`
                                  (UnsafeCo representational (Language.Fortran.Block
                                                                LanguageFortranTools.Anno) a
                                   ->_R Data.Functor.Identity.N:Identity[0]
                                            (UnsafeCo representational (Language.Fortran.Block
                                                                          LanguageFortranTools.Anno) a)) } } } })
                       @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                       Transformer.$s$fDataProgUnit
                       (ConstantFolding.foldConstants progUnit)
                 } in
                 (# Transformer.$sinsert_$sgo13
                      @ SubroutineTable.SubRec
                      w2
                      w2
                      (SubroutineTable.MkSubRec
                         parallelisedProgUnit
                         filename
                         (GHC.Types.[] @ GHC.Base.String))
                      ww,
                    GHC.Base.++
                      @ (GHC.Base.String, GHC.Base.String)
                      ww1
                      (GHC.Types.:
                         @ (GHC.Base.String, GHC.Base.String)
                         (filename,
                          Data.Generics.Schemes.everything
                            @ [GHC.Types.Char]
                            (GHC.Base.++ @ GHC.Types.Char)
                            Transformer.combineKernelProgUnit_foldl1
                            @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                            Transformer.$s$fDataProgUnit
                            parallelisedProgUnit)
                         (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) #)) -}
6a9af9340609cfcf089a517f76daa20e
  combineKernelProgUnit_foldl ::
    GHC.Base.Maybe GHC.Types.Float
    -> (SubroutineTable.SubroutineTable,
        [(GHC.Base.String, GHC.Base.String)])
    -> GHC.Base.String
    -> (SubroutineTable.SubroutineTable,
        [(GHC.Base.String, GHC.Base.String)])
  {- Arity: 3, Strictness: <L,U><S,1*U(U,1*U)><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.Maybe GHC.Types.Float)
                   (w1 :: (SubroutineTable.SubroutineTable,
                           [(GHC.Base.String, GHC.Base.String)]))
                   (w2 :: GHC.Base.String) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case Transformer.$wcombineKernelProgUnit_foldl
                        w
                        ww1
                        ww2
                        w2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
c5f42702aacb25aff2e527b836a03d93
  combineKernelProgUnit_foldl1 ::
    Data.Data.Data a => a -> [GHC.Types.Char]
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
7c739118e232a8a35db6af8f03d3f59e
  combineKernelProgUnit_foldl2 ::
    Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
  {- Unfolding: (Data.Generics.Schemes.everywhere
                   LanguageFortranTools.removeAllAnnotations1
                   @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   Transformer.$s$fDataProgUnit) -}
a06af0560768d4532a46834cd28ff935
  combineKernelProgUnit_foldl3 :: SubroutineTable.SubRec
  {- Strictness: x -}
c02ef581734081299f0fb3fd6b7d5735
  isolateAndParalleliseForLoops ::
    GHC.Base.String
    -> SubroutineTable.SubroutineTable
    -> VarAccessAnalysis.VarAccessAnalysis
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U,U,U)><S,1*U> -}
1d1611291ad3f7fb87f3328b5dad3762
  paralleliseProgUnit_foldl ::
    [GHC.Base.String]
    -> SubroutineTable.SubroutineTable
    -> (SubroutineTable.SubroutineTable,
        [(GHC.Base.String, GHC.Base.String)])
    -> GHC.Base.String
    -> (SubroutineTable.SubroutineTable,
        [(GHC.Base.String, GHC.Base.String)])
  {- Arity: 4, Strictness: <L,U><L,U><S,1*U(1*U,1*U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: SubroutineTable.SubroutineTable)
                   (w2 :: (SubroutineTable.SubroutineTable,
                           [(GHC.Base.String, GHC.Base.String)]))
                   (w3 :: GHC.Base.String) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case Transformer.$wparalleliseProgUnit_foldl
                        w
                        w1
                        ww1
                        ww2
                        w3 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
929b1512e715b0519ad206f2dcb47aa2
  paralleliseProgUnit_foldl1 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Block
                        11270035641402173581##
                        8631095044655209212##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataBlock3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.Block LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.Block
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.Block
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            Transformer.paralleliseProgUnit_foldl3)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            Transformer.paralleliseProgUnit_foldl2
                            Transformer.paralleliseProgUnit_foldl3))) } }) -}
ccc58675900196556cbd5cebd9534859
  paralleliseProgUnit_foldl2 :: Data.Typeable.Internal.TypeRep []
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ []
                        15300440589168157478##
                        15016221815972113379##
                        GHC.Types.$trModule
                        GHC.Types.$tc[]1
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ []
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
2158a786d215d522ab58d829b1089793
  paralleliseProgUnit_foldl3 ::
    Data.Typeable.Internal.TypeRep [GHC.Types.Char]
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Char
                        8424092006618324671##
                        2724268014499746065##
                        GHC.Types.$trModule
                        GHC.Types.$tcChar1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ GHC.Types.Char
                   Transformer.paralleliseProgUnit_foldl2
                   (Data.Typeable.Internal.TrTyCon
                      @ *
                      @ GHC.Types.Char
                      ww8
                      ww9
                      ww10
                      ww11
                      ww12) }) -}
8b71783ae4f12cd02717b9d81dc768f9
  paralleliseProgUnit_foldl4 ::
    (forall d b.
     Data.Data.Data d =>
     Data.Functor.Identity.Identity (d -> b)
     -> d -> Data.Functor.Identity.Identity b)
    -> (forall g. g -> Data.Functor.Identity.Identity g)
    -> Language.Fortran.Block
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Data.Functor.Identity.Identity
         (Language.Fortran.Block
            (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Unfolding: (Language.Fortran.$fDataBlock_$cgfoldl
                   @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                   Transformer.$s$fDataFortran_$s$fDataMap
                   @ Data.Functor.Identity.Identity) -}
788341554a91a781ee25192243a458fb
  paralleliseProgUnit_foldl5 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Fortran
                        1898037638716600659##
                        3599167482411011499##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataFortran3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.Fortran
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.Fortran
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            Transformer.paralleliseProgUnit_foldl3)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            Transformer.paralleliseProgUnit_foldl2
                            Transformer.paralleliseProgUnit_foldl3))) } }) -}
e4b3dc4762eb64f24c13e03b729ab053
  paralleliseProgUnit_foldl6 :: SubroutineTable.SubRec
  {- Strictness: x -}
"SPEC/Transformer $fDataFortran @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                 (Data.Map.Internal.Map
                                                                                    GHC.Base.String
                                                                                    [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Internal.Map
                                      GHC.Base.String [GHC.Base.String])
                                 v
  = Transformer.$s$fDataFortran
"SPEC/Transformer $fDataMap @ [Char] @ [String]" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                          [GHC.Types.Char])
                                                                 (v1 :: Data.Data.Data
                                                                          [GHC.Base.String])
                                                                 (v :: Data.Data.Data
                                                                         [GHC.Types.Char])
  Data.Map.Internal.$fDataMap @ [GHC.Types.Char]
                              @ [GHC.Base.String]
                              v
                              v1
                              v2
  = Transformer.$s$fDataFortran_$s$fDataMap
"SPEC/Transformer $fDataMap_$cdataCast2 @ [Char] @ [String]" [orphan] [0] forall (w2 :: GHC.Classes.Ord
                                                                                          [GHC.Types.Char])
                                                                                 (w1 :: Data.Data.Data
                                                                                          [GHC.Base.String])
                                                                                 (w :: Data.Data.Data
                                                                                         [GHC.Types.Char])
  Data.Map.Internal.$fDataMap_$cdataCast2 @ [GHC.Types.Char]
                                          @ [GHC.Base.String]
                                          w
                                          w1
                                          w2
  = Transformer.$s$fDataMap_$cdataCast2
"SPEC/Transformer $fDataProgUnit @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                  (Data.Map.Internal.Map
                                                                                     GHC.Base.String
                                                                                     [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit @ (Data.Map.Internal.Map
                                       GHC.Base.String [GHC.Base.String])
                                  v
  = Transformer.$s$fDataProgUnit
"SPEC/Transformer $fData[] @ [Char]" [orphan] forall (v :: Data.Data.Data
                                                             [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] v
  = Transformer.$s$fDataFortran_$s$fData[]
"SPEC/Transformer $fData[]7 @ [Char]" [orphan] forall ($dData :: Data.Data.Data
                                                                   [GHC.Types.Char])
  Data.Data.$fData[]7 @ [GHC.Types.Char] $dData
  = Transformer.$s$fData[]7
"SPEC/Transformer $fEq(,) @ (VarName Anno) @ (Expr Anno)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                   (Language.Fortran.Expr
                                                                                      LanguageFortranTools.Anno))
                                                                          (v :: GHC.Classes.Eq
                                                                                  (Language.Fortran.VarName
                                                                                     LanguageFortranTools.Anno))
  GHC.Classes.$fEq(,) @ (Language.Fortran.VarName
                           LanguageFortranTools.Anno)
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                      v
                      v1
  = Transformer.$s$fEq(,)
"SPEC/Transformer $fEq(,)_$c/= @ (VarName Anno) @ (Expr Anno)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                           (Language.Fortran.Expr
                                                                                              LanguageFortranTools.Anno))
                                                                               ($dEq :: GHC.Classes.Eq
                                                                                          (Language.Fortran.VarName
                                                                                             LanguageFortranTools.Anno))
  GHC.Classes.$fEq(,)_$c/= @ (Language.Fortran.VarName
                                LanguageFortranTools.Anno)
                           @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                           $dEq
                           $dEq1
  = Transformer.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Transformer $fEqExpr @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                            (Data.Map.Internal.Map
                                                                               GHC.Base.String
                                                                               [GHC.Base.String]))
  Language.Fortran.$fEqExpr @ (Data.Map.Internal.Map
                                 GHC.Base.String [GHC.Base.String])
                            v
  = Transformer.$s$fEq(,)_$s$fEqExpr
"SPEC/Transformer $fEqMap @ [Char] @ [String]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                        [GHC.Base.String])
                                                               (v :: GHC.Classes.Eq
                                                                       [GHC.Types.Char])
  Data.Map.Internal.$fEqMap @ [GHC.Types.Char]
                            @ [GHC.Base.String]
                            v
                            v1
  = Transformer.$s$fEq(,)_$s$fEqMap
"SPEC/Transformer $fEqMap_$c/= @ [Char] @ [String]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                [GHC.Base.String])
                                                                    ($dEq :: GHC.Classes.Eq
                                                                               [GHC.Types.Char])
  Data.Map.Internal.$fEqMap_$c/= @ [GHC.Types.Char]
                                 @ [GHC.Base.String]
                                 $dEq
                                 $dEq1
  = Transformer.$s$fEq(,)_$s$fEqMap_$c/=
"SPEC/Transformer $fEqVarName @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                               (Data.Map.Internal.Map
                                                                                  GHC.Base.String
                                                                                  [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = Transformer.$s$fEq(,)_$s$fEqVarName
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

