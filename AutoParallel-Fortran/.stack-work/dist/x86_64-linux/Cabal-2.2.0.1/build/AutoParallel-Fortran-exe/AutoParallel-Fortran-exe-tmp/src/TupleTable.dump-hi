
==================== FINAL INTERFACE ====================
2018-11-16 12:45:15.953542179 UTC

interface main:TupleTable 8043
  interface hash: da2a4b93f146c5ef2cb60d69d926b7aa
  ABI hash: 9543227f4059aed2c2dc3596ceb46ace
  export-list hash: 505981d0e1221454809760b406ae9f8d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7853c119b27f3f568e863cba4679c19c
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  TupleTable.collapseIterTable
  TupleTable.getLeastTuple
  TupleTable.getMostTuple
  TupleTable.insertIntoTupleTable
  TupleTable.lookupTupleTable
  TupleTable.tupleTableElementGreaterThan
  TupleTable.tupleTableNotEmpty
  TupleTable.TupleTable{TupleTable.Empty TupleTable.LoopIterRecord}
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     Warning
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      haskell-src-1.0.3.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      process-1.6.3.0 syb-0.7 text-1.2.3.1 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  containers-0.5.11.0:Data.Map.Internal e02d23495520de11b8e9f3c9c93a4d11
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  LanguageFortranTools 737e8abc5de089abcd0ce62660f9d159
  exports: a5a994dcb8ba92c93a8a354a063275b0
b26b283eeacedafac56c2ef2a8ac4582
  $fEqTupleTable :: GHC.Classes.Eq TupleTable.TupleTable
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TupleTable.TupleTable
                  TupleTable.$fEqTupleTable_$c==
                  TupleTable.$fEqTupleTable_$c/= -}
b26b283eeacedafac56c2ef2a8ac4582
  $fEqTupleTable_$c/= ::
    TupleTable.TupleTable -> TupleTable.TupleTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: TupleTable.TupleTable) (y :: TupleTable.TupleTable) ->
                 case TupleTable.$fEqTupleTable_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b26b283eeacedafac56c2ef2a8ac4582
  $fEqTupleTable_$c== ::
    TupleTable.TupleTable -> TupleTable.TupleTable -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
b26b283eeacedafac56c2ef2a8ac4582
  $fShowTupleTable :: GHC.Show.Show TupleTable.TupleTable
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TupleTable.TupleTable
                  TupleTable.$fShowTupleTable_$cshowsPrec
                  TupleTable.$fShowTupleTable_$cshow
                  TupleTable.$fShowTupleTable_$cshowList -}
b26b283eeacedafac56c2ef2a8ac4582
  $fShowTupleTable1 :: TupleTable.TupleTable -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (TupleTable.$fShowTupleTable_$cshowsPrec
                   TupleTable.$fShowTupleTable2) -}
cce715c52b6ebe8dafd8e88fa8cc0c00
  $fShowTupleTable2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b26b283eeacedafac56c2ef2a8ac4582
  $fShowTupleTable_$cshow :: TupleTable.TupleTable -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TupleTable.TupleTable) ->
                 TupleTable.$fShowTupleTable_$s$cshowsPrec
                   x
                   0#
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b26b283eeacedafac56c2ef2a8ac4582
  $fShowTupleTable_$cshowList ::
    [TupleTable.TupleTable] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [TupleTable.TupleTable]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TupleTable.TupleTable
                   TupleTable.$fShowTupleTable1
                   ls
                   s) -}
b26b283eeacedafac56c2ef2a8ac4582
  $fShowTupleTable_$cshowsPrec ::
    GHC.Types.Int -> TupleTable.TupleTable -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
b26b283eeacedafac56c2ef2a8ac4582
  $fShowTupleTable_$s$cshowsPrec ::
    TupleTable.TupleTable -> GHC.Prim.Int# -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
c7408bd6e3cd5ceac438354cd744fe5b
  $slookup1 ::
    GHC.Types.Int
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Map.Internal.Map GHC.Types.Int a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TupleTable.$wpoly_go1 @ a ww1 w1 }) -}
b1b168f03c00826189a7b61068c9fe85
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11689744979058103407##
                   15973450942028410861##
                   TupleTable.$trModule
                   TupleTable.$tc'Empty2
                   0#
                   TupleTable.$tc'Empty1) -}
4115c199a0dc262f6ab358d05bf0c4b2
  $tc'Empty1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
501bd4e8b3a699453e04acf4a2663fc5
  $tc'Empty2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TupleTable.$tc'Empty3) -}
89c2463bca004bf35017aa0c791a0d2f
  $tc'Empty3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Empty"#) -}
404deb329ceef59e3c1cdf9a9f4c8b77
  $tc'LoopIterRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13860080776177324570##
                   13486183583481724195##
                   TupleTable.$trModule
                   TupleTable.$tc'LoopIterRecord2
                   0#
                   TupleTable.$tc'LoopIterRecord1) -}
9a7e198f5c27ac698085bb4c79378d1c
  $tc'LoopIterRecord1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c69354537cc2beb95aac7f65f6f950e
  $tc'LoopIterRecord2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TupleTable.$tc'LoopIterRecord3) -}
d559bdeb8f5889ad66ca5455aa22d35c
  $tc'LoopIterRecord3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoopIterRecord"#) -}
cca3705915fe855f37441054fe98d7a0
  $tcTupleTable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2887414267986608281##
                   14419732381365034305##
                   TupleTable.$trModule
                   TupleTable.$trModule1
                   0#
                   GHC.Types.krep$*) -}
17e7ae11e49cf483e5dcd0b745da8bc1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TupleTable.$trModule3
                   TupleTable.$trModule1) -}
1dae0a172459ba7f23aa2ecaf34a9439
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TupleTable.$trModule2) -}
03c2571c8151f48b0704759323e60fdb
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TupleTable"#) -}
b9857e5b57923d8b579830af97b0b68c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TupleTable.$trModule4) -}
772cc25d74f161c5bc8cc865162d1a7c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
7a865c0b83038163cd2aec0e0888d529
  $w$sgo13 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
3681d75fb08abc52be4e23f8bb08371e
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
4601aee26d6e3726a099297571365dc9
  $wpoly_go13 ::
    a -> GHC.Prim.Int# -> Data.Map.Internal.Map GHC.Types.Int a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><S,1*U>,
     Inline: [0] -}
b26b283eeacedafac56c2ef2a8ac4582
  data TupleTable
    = LoopIterRecord (Data.Map.Internal.Map
                        GHC.Types.Int TupleTable.TupleTable)
    | Empty
a57ded5266286183c97ae88a4eb0153c
  collapseIterTable :: TupleTable.TupleTable -> TupleTable.TupleTable
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: TupleTable.TupleTable) ->
                 case ds of wild {
                   TupleTable.LoopIterRecord iterTable
                   -> case Data.Map.Internal.keys_go
                             @ GHC.Types.Int
                             @ TupleTable.TupleTable
                             (GHC.Types.[] @ GHC.Types.Int)
                             iterTable of wild1 {
                        [] -> TupleTable.Empty
                        : ipv ipv1
                        -> case GHC.Base.map
                                  @ GHC.Types.Int
                                  @ TupleTable.TupleTable
                                  (\ (x :: GHC.Types.Int) ->
                                   case x of ww { GHC.Types.I# ww1 ->
                                   TupleTable.$wpoly_go13
                                     @ TupleTable.TupleTable
                                     TupleTable.Empty
                                     ww1
                                     iterTable })
                                  wild1 of wild2 {
                             [] -> TupleTable.Empty
                             : ipv2 ipv3
                             -> TupleTable.collapseIterTable_$sgo2
                                  (case ipv of ww { GHC.Types.I# ww1 ->
                                   case GHC.Magic.lazy
                                          @ GHC.Types.Int
                                          ww of dt { GHC.Types.I# ipv4 ->
                                   Data.Map.Internal.Bin
                                     @ GHC.Types.Int
                                     @ TupleTable.TupleTable
                                     1#
                                     dt
                                     ipv2
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ TupleTable.TupleTable)
                                     (Data.Map.Internal.Tip
                                        @ GHC.Types.Int
                                        @ TupleTable.TupleTable) } })
                                  ipv3
                                  ipv1 } }
                   TupleTable.Empty -> TupleTable.collapseIterTable1 }) -}
e89b93de761ae28f9766b5f22f940773
  collapseIterTable1 :: TupleTable.TupleTable
  {- Strictness: x -}
06ead0cd9cd11dac5c74c0c9ad4a65fa
  collapseIterTable_$sgo2 ::
    Data.Map.Internal.Map GHC.Types.Int TupleTable.TupleTable
    -> [TupleTable.TupleTable]
    -> [GHC.Types.Int]
    -> TupleTable.TupleTable
  {- Arity: 3, Strictness: <L,U><L,1*U><S,1*U>m1 -}
e360fb528131c6b69dc308dec81017c9
  getLeastTuple :: TupleTable.TupleTable -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U> -}
5159f02e211c2a98d9d0d987a663a5f0
  getMostTuple :: TupleTable.TupleTable -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U> -}
0b18ad5b31137e5f1c6b8ae819bb8131
  insertIntoTupleTable ::
    [GHC.Types.Int] -> TupleTable.TupleTable -> TupleTable.TupleTable
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
2319e329fc5ac331707fae6ec1e8216f
  lookupTupleTable ::
    [GHC.Types.Int]
    -> TupleTable.TupleTable -> GHC.Base.Maybe TupleTable.TupleTable
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
1546b10f1539886245d66a0fdbf1608c
  tupleTableElementGreaterThan ::
    [GHC.Types.Int] -> [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
2974d2cc1435969c7eb3caa661378f9e
  tupleTableNotEmpty :: TupleTable.TupleTable -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TupleTable.TupleTable) ->
                 case ds of wild {
                   TupleTable.LoopIterRecord ipv -> GHC.Types.True
                   TupleTable.Empty -> GHC.Types.False }) -}
instance GHC.Classes.Eq [TupleTable.TupleTable]
  = TupleTable.$fEqTupleTable
instance GHC.Show.Show [TupleTable.TupleTable]
  = TupleTable.$fShowTupleTable
"SC:$cshowsPrec0" forall (sc :: TupleTable.TupleTable)
                         (sc1 :: GHC.Prim.Int#)
  TupleTable.$fShowTupleTable_$cshowsPrec (GHC.Types.I# sc1) sc
  = TupleTable.$fShowTupleTable_$s$cshowsPrec sc sc1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

