
==================== FINAL INTERFACE ====================
2018-11-16 12:45:19.874503004 UTC

interface main:CodeEmitterUtils 8043
  interface hash: 25e6f1c7916386d40264299c62342d9e
  ABI hash: 8c8f697b86f52412aeee8a88a6067ee0
  export-list hash: e29a2b01fb771904633bff8cc099ecaa
  orphan hash: dacd6913be7838072d5dc13dd009ecbe
  flag hash: 7853c119b27f3f568e863cba4679c19c
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  CodeEmitterUtils.adaptForReadScalarDecls
  CodeEmitterUtils.addDimension
  CodeEmitterUtils.addIntent
  CodeEmitterUtils.addNewDimensionClaus
  CodeEmitterUtils.anyChildGenerated
  CodeEmitterUtils.appendDimension
  CodeEmitterUtils.applyIntent
  CodeEmitterUtils.chunk_size
  CodeEmitterUtils.chunk_size_varname
  CodeEmitterUtils.collectDecls
  CodeEmitterUtils.constructDeclTree
  CodeEmitterUtils.containsParameterAttr
  CodeEmitterUtils.convertScalarToOneDimArray
  CodeEmitterUtils.declareScalarPointer_decl
  CodeEmitterUtils.emitDeclStr
  CodeEmitterUtils.extractDeclaration_varname
  CodeEmitterUtils.extractDeclaration_varname'
  CodeEmitterUtils.extractDeclaration_varnameSrcSpan
  CodeEmitterUtils.extractDimensionAttr
  CodeEmitterUtils.extractKernelArguments
  CodeEmitterUtils.extractOriginalCode
  CodeEmitterUtils.extractOriginalCode_Offset
  CodeEmitterUtils.extractOriginalCode_Offset1
  CodeEmitterUtils.extractintentAttrs
  CodeEmitterUtils.generateGloablReductionArrayArgStr
  CodeEmitterUtils.generateGlobalReductionArray
  CodeEmitterUtils.generateLocalReductionArray
  CodeEmitterUtils.generateLocalReductionArrayArgStr
  CodeEmitterUtils.generateLocalReductionVar
  CodeEmitterUtils.generatePtrScalarAssignment
  CodeEmitterUtils.generateReductionIterator
  CodeEmitterUtils.getDeclRank
  CodeEmitterUtils.getDimensionExprs
  CodeEmitterUtils.getFirstBlockSrc
  CodeEmitterUtils.getFirstFortranSrc
  CodeEmitterUtils.getGlobalID
  CodeEmitterUtils.getGroupID
  CodeEmitterUtils.getGroupSize
  CodeEmitterUtils.getLocalId
  CodeEmitterUtils.getLocalSize
  CodeEmitterUtils.getModuleName
  CodeEmitterUtils.getNumberGroups
  CodeEmitterUtils.getOriginalDeclaration
  CodeEmitterUtils.globalMemSpaceAcc
  CodeEmitterUtils.hostModuleName
  CodeEmitterUtils.initModuleName
  CodeEmitterUtils.insertDecl
  CodeEmitterUtils.insertDecls
  CodeEmitterUtils.isGenerated
  CodeEmitterUtils.isIntent
  CodeEmitterUtils.localChunkSize
  CodeEmitterUtils.localMemBarrier
  CodeEmitterUtils.localMemSpaceAcc
  CodeEmitterUtils.mergeDeclWithPrevious_recurse
  CodeEmitterUtils.nthVar
  CodeEmitterUtils.numGroupsVar
  CodeEmitterUtils.numGroupsVarName
  CodeEmitterUtils.nunitsVar
  CodeEmitterUtils.paramCheck_attr
  CodeEmitterUtils.paramCheck_type
  CodeEmitterUtils.reductionIteratorDecl
  CodeEmitterUtils.removeIntentFromDecl
  CodeEmitterUtils.removeIntentFromType
  CodeEmitterUtils.replaceIntent
  CodeEmitterUtils.scalarPointerVar
  CodeEmitterUtils.scalarPointerVarName
  CodeEmitterUtils.splitOnChar
  CodeEmitterUtils.splitOnChar'
  CodeEmitterUtils.startPosition
  CodeEmitterUtils.statePtrDecl
  CodeEmitterUtils.statePtrVar
  CodeEmitterUtils.statePtrVarName
  CodeEmitterUtils.stateVar
  CodeEmitterUtils.stateVarDecl
  CodeEmitterUtils.stateVarName
  CodeEmitterUtils.stripAttrs
  CodeEmitterUtils.stripDeclAttrs
  CodeEmitterUtils.varBufVar
  CodeEmitterUtils.varBufVarName
  CodeEmitterUtils.varSizeVar
  CodeEmitterUtils.varSizeVarName
  CodeEmitterUtils.KernelArgsIndexMap
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     Warning
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      haskell-src-1.0.3.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      process-1.6.3.0 syb-0.7 text-1.2.3.1 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Data.Data b150502d549600eff3202c16ff6cf22d
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  containers-0.5.11.0:Data.Map.Internal e02d23495520de11b8e9f3c9c93a4d11
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Language.Fortran e2add56600673959dbdfe1ac093795c9
  exports: 6ca1e7b188145fc0c602707ea4a1c428
  ArrayT df8e826bb4708d07e8721be5c8d45d67
  Assg c3a5a5c7c0380c697e6a5cda4cc060bd
  Attr 3b46645d85b9c008a9510c0f3d8ec026
  BaseType 4771b9af523aad0f39b02040c5046e99
  Block d58adfcbfbefac7829b419bc0d801569
  Block c8f6dc9d55c3b3cbc94e3fb30057f310
  Con a93b732ad49402af2de80d19cc1ec61c
  DSeq 47a895ea6d8257711194047a71e0445b
  Decl bf5604fd57dfb9f698111c9b30ee5605
  Decl e30f41d3f2effdd4b4a22fa8cf8c0055
  Dimension b79abe0a80c3378dabfaecd6caadd60e
  Expr 6304956f2901eead56a8fac1e90d4904
  Fortran cab0cd6287333175c6b9d87427982518
  InOut 4ca931ba089fb936bd60462edea6e28f
  Integer 8082a45204513974002220b5341d5b33
  Intent 64eed4dba58057526c5557fc43b7435b
  IntentAttr 99ba40de9dfc0f3564a116b2fbf4b556
  NullDecl 45d5aec73d28a957747606cd484f0d37
  NullExpr adfc15f00ad4bfbe033d167983c94995
  OpenCLMap e48fa1b14eab97eb69b2edc5f2c10ce8
  OpenCLReduce d14e8e442939b0e4bb37da5a0da04484
  Parameter 924117a56a70c8f286ca9bc6dcb90263
  Program 607f4435fb994a8c5b83bd9f7709b3c3
  SrcLoc af6592465c21031ac12547ec948ff586
  SrcSpan 667dadf32292a4602702274000a648d8
  Type 6b8210ea10d2538ca4598cfb9584c470
  Var 4b8ab01fc12afd12d9f52ad45e3004a1
  VarName a39ab087efdb6eba24247b07097f591c
  VarName 361ec85699986b0b7f4d68a05374d64d
  srcSpan c13b4efea655d094fcf2aa6fb6fdfaaf
import  -/  LanguageFortranTools 737e8abc5de089abcd0ce62660f9d159
  exports: a5a994dcb8ba92c93a8a354a063275b0
  Anno 1420203ed9c39fcf982d2ff37c01ae68
  extractAssigneeFromDecl d4ecaf52b7147befe912a1b31720faf2
  generateArrayVar 41f69fa556436cb7a4d3721607926c4e
  generateFSeq 5dcba2026db65bc794f7f492a806bcd7
  generateIntConstant 6662a08fe79ba459b5e48087464e69d4
  generateVar 15f2fb62881f8fb31d49eabe4798345c
  listRemoveDuplications cc90c431c334b3429c5de18c32c0abd0
  listSubtract 40ed5a52f1d2f2210a51ecab157379fd
  nullAnno b5ec3f8914fec256ad2e53b761b9bd52
  nullSrcSpan d9f6701836bf1a31425d57566b44db7b
  outputExprFormatting 071110acbe7f8df82378c3e15acadb0d
  replaceAllOccurences_varname cff8581a492a2237821e0a1c44d1e722
  tabInc ff394e4c2d3b4f4a9436013fcb176452
  usesVarName_list 7c75ad65f572a2cb7160776fea4e5c98
  varNameStr 4f55193896441ff99d96346c5aacd560
import  -/  syb-0.7:Data.Generics 2ddc257f9ac35414fc37ff4d19b4d388
import  -/  syb-0.7:Data.Generics.Aliases a5097c06261967df51d59247bf1d4958
import  -/  syb-0.7:Data.Generics.Schemes 58bc96c8ed0bed4ad53424f237efe8b8
15db48ac82735d3b30415cc2e91a0508
  $s$fDataDecl ::
    Data.Data.Data
      (Language.Fortran.Decl
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Decl
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Decl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataDecl6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Decl
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataDecl_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Decl
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tDecl)
                  (Language.Fortran.$fDataDecl_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Decl
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataDecl1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Decl
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Decl
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataDecl_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataDecl_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap) -}
cc6bcfe81637b6a6794f9e4b3c7c1f15
  $s$fDataDecl5 ::
    Data.Typeable.Internal.TypeRep
      (Language.Fortran.Decl
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ Language.Fortran.Decl
                   @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                   Language.Fortran.$fDataDecl6
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ (Data.Map.Internal.Map [GHC.Types.Char])
                      @ [GHC.Base.String]
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ (* -> *)
                         @ Data.Map.Internal.Map
                         @ [GHC.Types.Char]
                         Data.Map.Internal.$fDataMap17
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Types.Char
                            Data.Data.$fData[]3
                            Data.Data.$fDataChar7))
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ []
                         @ [GHC.Types.Char]
                         Data.Data.$fData[]3
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Types.Char
                            Data.Data.$fData[]3
                            Data.Data.$fDataChar7)))) -}
5aa36eff5f0f2863e41941ff76954a9c
  $s$fDataDecl_$ctoConstr ::
    Language.Fortran.Decl
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w362 :: Language.Fortran.Decl
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case w362 of wild {
                   Language.Fortran.Decl ds ds1 ds2 ds3 -> Language.Fortran.$cDecl
                   Language.Fortran.Namelist ds ds1 -> Language.Fortran.$cNamelist
                   Language.Fortran.DataDecl ds ds1 -> Language.Fortran.$cDataDecl
                   Language.Fortran.Equivalence ds ds1 ds2
                   -> Language.Fortran.$cEquivalence
                   Language.Fortran.AttrStmt ds ds1 ds2 -> Language.Fortran.$cAttrStmt
                   Language.Fortran.AccessStmt ds ds1 ds2
                   -> Language.Fortran.$cAccessStmt
                   Language.Fortran.ExternalStmt ds ds1
                   -> Language.Fortran.$cExternalStmt
                   Language.Fortran.Interface ds ds1 ds2
                   -> Language.Fortran.$cInterface
                   Language.Fortran.Common ds ds1 ds2 ds3 -> Language.Fortran.$cCommon
                   Language.Fortran.DerivedTypeDef ds ds1 ds2 ds3 ds4 ds5
                   -> Language.Fortran.$cDerivedTypeDef
                   Language.Fortran.Include ds ds1 -> Language.Fortran.$cInclude
                   Language.Fortran.DSeq ds ds1 ds2 -> Language.Fortran.$cDSeq
                   Language.Fortran.TextDecl ds ds1 -> Language.Fortran.$cTextDecl
                   Language.Fortran.NullDecl ds ds1 -> Language.Fortran.$cNullDecl
                   Language.Fortran.MeasureUnitDef ds ds1 ds2
                   -> Language.Fortran.$cMeasureUnitDef }) -}
1dc287b2f76638ccb378ff6b26f4967d
  $s$fDataDecl_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ (Data.Map.Internal.Map [GHC.Types.Char])
                     @ [GHC.Base.String]
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ (* -> *)
                        @ Data.Map.Internal.Map
                        @ [GHC.Types.Char]
                        Data.Map.Internal.$fDataMap17
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7))
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ [GHC.Types.Char]
                        Data.Data.$fData[]3
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7)))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Data.Map.Internal.Map
                                                                       [GHC.Types.Char]
                                                                       [GHC.Base.String]>_N)
                  (Data.Map.Internal.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.fromListConstr)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.mapDataType)
                  (\ @ t :: * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d. Data.Data.Data d => c (t d)) ->
                   GHC.Base.Nothing
                     @ (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])))
                  (Data.Map.Internal.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap6
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R)
                  (Data.Map.Internal.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
8fd6c740b106a16f6974df1c8cf95838
  $s$fDataDecl_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]3
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ GHC.Types.Char
                        Data.Data.$fData[]3
                        Data.Data.$fDataChar7))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[[GHC.Types.Char]]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ (ds :: [[GHC.Types.Char]]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [[GHC.Types.Char]]) -> Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c [[GHC.Types.Char]]))
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
ab79d231cdf352893762d620f4d6d3be
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Fortran
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataFortran6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Fortran
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Fortran
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tFortran)
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Fortran
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataFortran1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Fortran
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap) -}
c0bf90456693b483604da777608f522e
  $s$fDataFortran5 ::
    Data.Typeable.Internal.TypeRep
      (Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ Language.Fortran.Fortran
                   @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                   Language.Fortran.$fDataFortran6
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ (Data.Map.Internal.Map [GHC.Types.Char])
                      @ [GHC.Base.String]
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ (* -> *)
                         @ Data.Map.Internal.Map
                         @ [GHC.Types.Char]
                         Data.Map.Internal.$fDataMap17
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Types.Char
                            Data.Data.$fData[]3
                            Data.Data.$fDataChar7))
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ []
                         @ [GHC.Types.Char]
                         Data.Data.$fData[]3
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Types.Char
                            Data.Data.$fData[]3
                            Data.Data.$fDataChar7)))) -}
c9e6b9bc7cc9d9361f446463ff7a81ca
  $s$fDataFortran_$ctoConstr ::
    Language.Fortran.Fortran
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w362 :: Language.Fortran.Fortran
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case w362 of wild {
                   Language.Fortran.Assg ds ds1 ds2 ds3 -> Language.Fortran.$cAssg
                   Language.Fortran.For ds ds1 ds2 ds3 ds4 ds5 ds6
                   -> Language.Fortran.$cFor
                   Language.Fortran.DoWhile ds ds1 ds2 ds3
                   -> Language.Fortran.$cDoWhile
                   Language.Fortran.FSeq ds ds1 ds2 ds3 -> Language.Fortran.$cFSeq
                   Language.Fortran.If ds ds1 ds2 ds3 ds4 ds5 -> Language.Fortran.$cIf
                   Language.Fortran.Allocate ds ds1 ds2 ds3
                   -> Language.Fortran.$cAllocate
                   Language.Fortran.Backspace ds ds1 ds2
                   -> Language.Fortran.$cBackspace
                   Language.Fortran.Call ds ds1 ds2 ds3 -> Language.Fortran.$cCall
                   Language.Fortran.Open ds ds1 ds2 -> Language.Fortran.$cOpen
                   Language.Fortran.Close ds ds1 ds2 -> Language.Fortran.$cClose
                   Language.Fortran.Continue ds ds1 -> Language.Fortran.$cContinue
                   Language.Fortran.Cycle ds ds1 ds2 -> Language.Fortran.$cCycle
                   Language.Fortran.DataStmt ds ds1 ds2 -> Language.Fortran.$cDataStmt
                   Language.Fortran.Deallocate ds ds1 ds2 ds3
                   -> Language.Fortran.$cDeallocate
                   Language.Fortran.Endfile ds ds1 ds2 -> Language.Fortran.$cEndfile
                   Language.Fortran.Exit ds ds1 ds2 -> Language.Fortran.$cExit
                   Language.Fortran.Format ds ds1 ds2 -> Language.Fortran.$cFormat
                   Language.Fortran.Forall ds ds1 ds2 ds3 -> Language.Fortran.$cForall
                   Language.Fortran.Goto ds ds1 ds2 -> Language.Fortran.$cGoto
                   Language.Fortran.Nullify ds ds1 ds2 -> Language.Fortran.$cNullify
                   Language.Fortran.Inquire ds ds1 ds2 ds3
                   -> Language.Fortran.$cInquire
                   Language.Fortran.Pause ds ds1 ds2 -> Language.Fortran.$cPause
                   Language.Fortran.Rewind ds ds1 ds2 -> Language.Fortran.$cRewind
                   Language.Fortran.Stop ds ds1 ds2 -> Language.Fortran.$cStop
                   Language.Fortran.Where ds ds1 ds2 ds3 ds4
                   -> Language.Fortran.$cWhere
                   Language.Fortran.Write ds ds1 ds2 ds3 -> Language.Fortran.$cWrite
                   Language.Fortran.PointerAssg ds ds1 ds2 ds3
                   -> Language.Fortran.$cPointerAssg
                   Language.Fortran.Return ds ds1 ds2 -> Language.Fortran.$cReturn
                   Language.Fortran.Label ds ds1 ds2 ds3 -> Language.Fortran.$cLabel
                   Language.Fortran.Print ds ds1 ds2 ds3 -> Language.Fortran.$cPrint
                   Language.Fortran.ReadS ds ds1 ds2 ds3 -> Language.Fortran.$cReadS
                   Language.Fortran.TextStmt ds ds1 ds2 -> Language.Fortran.$cTextStmt
                   Language.Fortran.NullStmt ds ds1 -> Language.Fortran.$cNullStmt
                   Language.Fortran.SelectStmt ds ds1 ds2 ds3 ds4
                   -> Language.Fortran.$cSelectStmt
                   Language.Fortran.OpenCLMap ds ds1 ds2 ds3 ds4 ds5 ds6
                   -> Language.Fortran.$cOpenCLMap
                   Language.Fortran.OpenCLReduce ds ds1 ds2 ds3 ds4 ds5 ds6 ds7
                   -> Language.Fortran.$cOpenCLReduce
                   Language.Fortran.OpenCLSeq ds ds1 ds2 ds3 ds4
                   -> Language.Fortran.$cOpenCLSeq
                   Language.Fortran.OpenCLBufferRead ds ds1 ds2
                   -> Language.Fortran.$cOpenCLBufferRead
                   Language.Fortran.OpenCLBufferWrite ds ds1 ds2
                   -> Language.Fortran.$cOpenCLBufferWrite }) -}
2c7799db0b05158917e4bee801602c5c
  $s$fDataMap_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   (w3 :: Data.Typeable.Internal.Typeable t) ->
                 Data.Map.Internal.$w$cdataCast2
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   Data.Data.$fData[]_$s$fData[]
                   CodeEmitterUtils.$s$fDataDecl_$s$fData[]
                   @ t
                   @ c
                   w3) -}
e2b78241f5ecddd8d1dd567460a730be
  $s$fDataProgUnit ::
    Data.Data.Data
      (Language.Fortran.ProgUnit
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ProgUnit
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.ProgUnit
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataProgUnit6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.ProgUnit
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataProgUnit_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (\ (ds :: Language.Fortran.ProgUnit
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   case ds of wild {
                     Language.Fortran.Main ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cMain
                     Language.Fortran.Sub ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cSub
                     Language.Fortran.Function ds1 ds2 ds3 ds4 ds5 ds6 ds7
                     -> Language.Fortran.$cFunction
                     Language.Fortran.Module ds1 ds2 ds3 ds4 ds5 ds6 ds7
                     -> Language.Fortran.$cModule
                     Language.Fortran.BlockData ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cBlockData
                     Language.Fortran.PSeq ds1 ds2 ds3 ds4 -> Language.Fortran.$cPSeq
                     Language.Fortran.Prog ds1 ds2 ds3 -> Language.Fortran.$cProg
                     Language.Fortran.NullProg ds1 ds2 -> Language.Fortran.$cNullProg
                     Language.Fortran.IncludeProg ds1 ds2 ds3 ds4
                     -> Language.Fortran.$cIncludeProg })
                  (\ (ds :: Language.Fortran.ProgUnit
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tProgUnit)
                  (Language.Fortran.$fDataProgUnit_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.ProgUnit
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataProgUnit1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.ProgUnit
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.ProgUnit
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataProgUnit_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fDataDecl_$s$fDataMap) -}
20ae140940ddcc90cd034fffaf7ba1db
  $s$fDataProgUnit5 ::
    Data.Typeable.Internal.TypeRep
      (Language.Fortran.ProgUnit
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ Language.Fortran.ProgUnit
                   @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                   Language.Fortran.$fDataProgUnit6
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ (Data.Map.Internal.Map [GHC.Types.Char])
                      @ [GHC.Base.String]
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ (* -> *)
                         @ Data.Map.Internal.Map
                         @ [GHC.Types.Char]
                         Data.Map.Internal.$fDataMap17
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Types.Char
                            Data.Data.$fData[]3
                            Data.Data.$fDataChar7))
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ []
                         @ [GHC.Types.Char]
                         Data.Data.$fData[]3
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Types.Char
                            Data.Data.$fData[]3
                            Data.Data.$fDataChar7)))) -}
1999741c3dd86ac9c995b5da4e331027
  $s$fData[] ::
    Data.Data.Data
      [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     Data.Data.$fData[]3
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ Language.Fortran.ProgUnit
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        Language.Fortran.$fDataProgUnit6
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ (Data.Map.Internal.Map [GHC.Types.Char])
                           @ [GHC.Base.String]
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ (* -> *)
                              @ Data.Map.Internal.Map
                              @ [GHC.Types.Char]
                              Data.Map.Internal.$fDataMap17
                              (Data.Typeable.Internal.mkTrApp
                                 @ *
                                 @ *
                                 @ []
                                 @ GHC.Types.Char
                                 Data.Data.$fData[]3
                                 Data.Data.$fDataChar7))
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ [GHC.Types.Char]
                              Data.Data.$fData[]3
                              (Data.Typeable.Internal.mkTrApp
                                 @ *
                                 @ *
                                 @ []
                                 @ GHC.Types.Char
                                 Data.Data.$fData[]3
                                 Data.Data.$fDataChar7)))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[Language.Fortran.ProgUnit
                                                                        LanguageFortranTools.Anno]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgunfold
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (\ (ds :: [Language.Fortran.ProgUnit LanguageFortranTools.Anno]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [Language.Fortran.ProgUnit LanguageFortranTools.Anno]) ->
                   Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c [Language.Fortran.ProgUnit LanguageFortranTools.Anno]))
                  (Data.Data.$fData[]_$cgmapT
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapQl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapQr
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapQ
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapQi
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapM
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapMp
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapMo
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     CodeEmitterUtils.$s$fDataProgUnit) -}
87422a99fed98cd0fa7ae750241fa3fe
  $s$fData[]1 ::
    Data.Typeable.Internal.TypeRep
      [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   Data.Data.$fData[]3
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.ProgUnit
                      @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                      Language.Fortran.$fDataProgUnit6
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map [GHC.Types.Char])
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ [GHC.Types.Char]
                            Data.Map.Internal.$fDataMap17
                            (Data.Typeable.Internal.mkTrApp
                               @ *
                               @ *
                               @ []
                               @ GHC.Types.Char
                               Data.Data.$fData[]3
                               Data.Data.$fDataChar7))
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ [GHC.Types.Char]
                            Data.Data.$fData[]3
                            (Data.Typeable.Internal.mkTrApp
                               @ *
                               @ *
                               @ []
                               @ GHC.Types.Char
                               Data.Data.$fData[]3
                               Data.Data.$fDataChar7))))) -}
77d514f39de213d1c1b84c953c02bcce
  $s$fData[]7 :: Data.Typeable.Internal.TypeRep [[GHC.Types.Char]]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ [GHC.Types.Char]
                   Data.Data.$fData[]3
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ []
                      @ GHC.Types.Char
                      Data.Data.$fData[]3
                      Data.Data.$fDataChar7)) -}
416c5c7d38469e3e1763303db2edfba7
  $s$fEqAttr ::
    GHC.Classes.Eq
      (Language.Fortran.Attr
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Attr
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqAttr_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fEqAttr_$s$fEqMap)
                  CodeEmitterUtils.$s$fEqAttr_$s$fEqAttr_$c/= -}
85f6a1db42ce3054500cb4b6a4aec51e
  $s$fEqAttr_$s$fEqAttr_$c/= ::
    Language.Fortran.Attr
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.Attr
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Fortran.Attr
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                   (y :: Language.Fortran.Attr
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case Language.Fortran.$fEqAttr_$c==
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        CodeEmitterUtils.$s$fEqAttr_$s$fEqMap
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f4254a363145c21cbb3a693fe1871180
  $s$fEqAttr_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Internal.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  CodeEmitterUtils.$s$fEqAttr_$s$fEqMap_$c/= -}
67bf66f2a4c4da5e64e9ba4cb2a30fa4
  $s$fEqAttr_$s$fEqMap_$c/= ::
    Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEq[]_$s$fEq[]2
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
24fa9401137455f22e7118f732b95da8
  $s$fEqIntentAttr ::
    GHC.Classes.Eq
      (Language.Fortran.IntentAttr
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.IntentAttr
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (\ (ds :: Language.Fortran.IntentAttr
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                     (ds1 :: Language.Fortran.IntentAttr
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   case ds of wild {
                     Language.Fortran.In a1
                     -> case ds1 of wild1 {
                          DEFAULT -> GHC.Types.False
                          Language.Fortran.In b1
                          -> Data.Map.Internal.$fEqMap_$c==
                               @ [GHC.Types.Char]
                               @ [GHC.Base.String]
                               GHC.Classes.$fEq[]_$s$fEq[]1
                               GHC.Classes.$fEq[]_$s$fEq[]2
                               a1
                               b1 }
                     Language.Fortran.Out a1
                     -> case ds1 of wild1 {
                          DEFAULT -> GHC.Types.False
                          Language.Fortran.Out b1
                          -> Data.Map.Internal.$fEqMap_$c==
                               @ [GHC.Types.Char]
                               @ [GHC.Base.String]
                               GHC.Classes.$fEq[]_$s$fEq[]1
                               GHC.Classes.$fEq[]_$s$fEq[]2
                               a1
                               b1 }
                     Language.Fortran.InOut a1
                     -> case ds1 of wild1 {
                          DEFAULT -> GHC.Types.False
                          Language.Fortran.InOut b1
                          -> Data.Map.Internal.$fEqMap_$c==
                               @ [GHC.Types.Char]
                               @ [GHC.Base.String]
                               GHC.Classes.$fEq[]_$s$fEq[]1
                               GHC.Classes.$fEq[]_$s$fEq[]2
                               a1
                               b1 } })
                  CodeEmitterUtils.$s$fEqIntentAttr_$s$fEqIntentAttr_$c/= -}
729dda0f54df7a064fcc59caf1d6b96b
  $s$fEqIntentAttr_$s$fEqIntentAttr_$c/= ::
    Language.Fortran.IntentAttr
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.IntentAttr
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Fortran.IntentAttr
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                   (y :: Language.Fortran.IntentAttr
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case x of wild {
                   Language.Fortran.In a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Fortran.In b1
                        -> case Data.Map.Internal.$fEqMap_$c==
                                  @ [GHC.Types.Char]
                                  @ [GHC.Base.String]
                                  GHC.Classes.$fEq[]_$s$fEq[]1
                                  GHC.Classes.$fEq[]_$s$fEq[]2
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Language.Fortran.Out a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Fortran.Out b1
                        -> case Data.Map.Internal.$fEqMap_$c==
                                  @ [GHC.Types.Char]
                                  @ [GHC.Base.String]
                                  GHC.Classes.$fEq[]_$s$fEq[]1
                                  GHC.Classes.$fEq[]_$s$fEq[]2
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Language.Fortran.InOut a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.Fortran.InOut b1
                        -> case Data.Map.Internal.$fEqMap_$c==
                                  @ [GHC.Types.Char]
                                  @ [GHC.Base.String]
                                  GHC.Classes.$fEq[]_$s$fEq[]1
                                  GHC.Classes.$fEq[]_$s$fEq[]2
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
f049aed12f10b79b5f434ada97ea68d0
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fEqAttr_$s$fEqMap)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     CodeEmitterUtils.$s$fEqAttr_$s$fEqMap) -}
176e1a1e891a07264450be7d2e6c4fb4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CodeEmitterUtils.$trModule3
                   CodeEmitterUtils.$trModule1) -}
5550ee0e1629b3984e13324dee1ef4de
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS CodeEmitterUtils.$trModule2) -}
4973af512c07ef48aa241dfc5d8fe064
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CodeEmitterUtils"#) -}
e6881cff77b09525362b4ed46ee4ab84
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS CodeEmitterUtils.$trModule4) -}
57def97c70c76bb6acf1e221f2c6c6c0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
3e446d4c1f53315c9a922cb93fc1e1de
  $wadaptForReadScalarDecls ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> (# [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Decl LanguageFortranTools.Anno],
          [Language.Fortran.Decl LanguageFortranTools.Anno],
          Language.Fortran.Fortran LanguageFortranTools.Anno,
          [Language.Fortran.VarName LanguageFortranTools.Anno] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: [Language.Fortran.VarName
                            LanguageFortranTools.Anno])
                   (ww :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (ww1 :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (ww2 :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                 (# let {
                      z :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                      = CodeEmitterUtils.adaptForReadScalarDecls_go1 ww
                    } in
                    letrec {
                      go2 :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                             -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                        case ds of wild {
                          [] -> z
                          : y ys
                          -> case CodeEmitterUtils.$wgetDeclRank y of ww3 {
                               DEFAULT
                               -> GHC.Types.:
                                    @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                    y
                                    (go2 ys)
                               0# -> go2 ys } }
                    } in
                    go2 ww,
                    ww1,
                    let {
                      z :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                      = CodeEmitterUtils.adaptForReadScalarDecls_go ww2
                    } in
                    letrec {
                      go2 :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                             -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                        case ds of wild {
                          [] -> z
                          : y ys
                          -> case CodeEmitterUtils.$wgetDeclRank y of ww3 {
                               DEFAULT
                               -> GHC.Types.:
                                    @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                    y
                                    (go2 ys)
                               0# -> go2 ys } }
                    } in
                    go2 ww2,
                    LanguageFortranTools.extractPriorToFor1, w #)) -}
a808d571252aba995abf68d0593b864e
  $waddIntent ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> (# Language.Fortran.Attr LanguageFortranTools.Anno,
          [Language.Fortran.Attr LanguageFortranTools.Anno] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
8128c03003e786d2b213d6f4687800d4
  $waddNewDimensionClaus ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> (# Language.Fortran.Attr LanguageFortranTools.Anno,
          [Language.Fortran.Attr LanguageFortranTools.Anno] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Inline: [0] -}
9286e0f44cbc6fefe76cac09830aaa31
  $wextractOriginalCode_Offset ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Base.String]
    -> Language.Fortran.SrcSpan
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(U)><L,1*U(U)><S,U><L,1*U(1*U(A,1*U(U),A),1*U(A,1*U(U),A))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: [GHC.Base.String])
                   (w1 :: Language.Fortran.SrcSpan) ->
                 case GHC.List.$wlenAcc @ [GHC.Types.Char] w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.># ww2 0# of lwild {
                   DEFAULT -> GHC.Types.[] @ GHC.Types.Char
                   1#
                   -> case w1 of wild { (,) ds ds1 ->
                      case ds of wild1 { Language.Fortran.SrcLoc f lineStart columnStart ->
                      case ds1 of wild2 { Language.Fortran.SrcLoc ds2 lineEnd columnEnd ->
                      case lineStart of wild3 { GHC.Types.I# x ->
                      case ww of wild4 { GHC.Types.I# y ->
                      case lineEnd of wild5 { GHC.Types.I# x1 ->
                      case ww1 of wild6 { GHC.Types.I# y1 ->
                      let {
                        y2 :: GHC.Prim.Int# = GHC.Prim.+# x1 y1
                      } in
                      let {
                        x2 :: GHC.Prim.Int# = GHC.Prim.-# (GHC.Prim.+# x y) 1#
                      } in
                      case GHC.Prim.<# 0# y2 of lwild1 {
                        DEFAULT
                        -> case GHC.Prim.<=# x2 0# of lwild2 {
                             DEFAULT -> Data.OldList.unlines (GHC.Types.[] @ GHC.Base.String)
                             1# -> CodeEmitterUtils.extractOriginalCode2 }
                        1#
                        -> case GHC.Prim.<=# x2 0# of lwild2 {
                             DEFAULT
                             -> Data.OldList.unlines
                                  (CodeEmitterUtils.$wunsafeDrop
                                     @ GHC.Base.String
                                     x2
                                     (GHC.List.$wunsafeTake @ [GHC.Types.Char] y2 w))
                             1#
                             -> Data.OldList.unlines
                                  (GHC.List.$wunsafeTake
                                     @ [GHC.Types.Char]
                                     y2
                                     w) } } } } } } } } } } }) -}
f3f06d666c59c9694784276f72e91070
  $wgetDeclRank ::
    Language.Fortran.Decl LanguageFortranTools.Anno -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Language.Fortran.Decl
                           LanguageFortranTools.Anno) ->
                 let {
                   extractedDimensions :: [Language.Fortran.Attr
                                             LanguageFortranTools.Anno]
                   = Data.Generics.Schemes.everything
                       @ [Language.Fortran.Attr LanguageFortranTools.Anno]
                       (GHC.Base.++ @ (Language.Fortran.Attr LanguageFortranTools.Anno))
                       CodeEmitterUtils.adaptForReadScalarDecls1
                       @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                       CodeEmitterUtils.$s$fDataDecl
                       w
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fEqAttr
                        extractedDimensions
                        (GHC.Types.[]
                           @ (Language.Fortran.Attr LanguageFortranTools.Anno)) of wild {
                   GHC.Types.False
                   -> case extractedDimensions of wild1 {
                        [] -> case GHC.List.badHead ret_ty GHC.Prim.Int# of {}
                        : x ds1
                        -> case x of wild2 {
                             DEFAULT -> 0#
                             Language.Fortran.Dimension ds exprs
                             -> GHC.List.$wlenAcc
                                  @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno)
                                  exprs
                                  0# } }
                   GHC.Types.True -> 0# }) -}
9ca56fc75c81c1782b05cd57ab05a22f
  $winsertDecl ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> (# LanguageFortranTools.Anno,
          Language.Fortran.Decl LanguageFortranTools.Anno,
          Language.Fortran.Decl LanguageFortranTools.Anno #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
72054b9d83c61270b273be300dc41a64
  $wsplitOnChar' ::
    GHC.Types.Char
    -> GHC.Base.String
    -> GHC.Base.String
    -> (# GHC.Base.String, [GHC.Base.String] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Char)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String) ->
                 case w2 of wild {
                   [] -> (# w1, GHC.Types.[] @ GHC.Base.String #)
                   : x xs
                   -> case w of wild1 { GHC.Types.C# x1 ->
                      case x of wild2 { GHC.Types.C# y ->
                      case GHC.Prim.eqChar# x1 y of lwild {
                        DEFAULT
                        -> CodeEmitterUtils.getModuleName_$s$wsplitOnChar'
                             xs
                             (GHC.Base.++
                                @ GHC.Types.Char
                                w1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   wild2
                                   (GHC.Types.[] @ GHC.Types.Char)))
                             x1
                        1#
                        -> (# w1,
                              case CodeEmitterUtils.getModuleName_$s$wsplitOnChar'
                                     xs
                                     (GHC.Types.[] @ GHC.Types.Char)
                                     x1 of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ GHC.Base.String ww1 ww2 } #) } } } }) -}
45abf8e4691cafc73af95c6b7a28caef
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
a362b65ea0725f7db5a6bef1066d4d7e
  type KernelArgsIndexMap =
    Data.Map.Internal.Map
      (Language.Fortran.VarName LanguageFortranTools.Anno) GHC.Types.Int
0ef99613439bca815c4b15fea9bf651f
  adaptForReadScalarDecls ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> ([Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno])
    -> ([Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno],
        [Language.Fortran.Decl LanguageFortranTools.Anno],
        Language.Fortran.Fortran LanguageFortranTools.Anno,
        [Language.Fortran.VarName LanguageFortranTools.Anno])
  {- Arity: 2, Strictness: <L,U><S,1*U(U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w1 :: ([Language.Fortran.Decl LanguageFortranTools.Anno],
                           [Language.Fortran.Decl LanguageFortranTools.Anno],
                           [Language.Fortran.Decl LanguageFortranTools.Anno])) ->
                 case w1 of ww { (,,) ww1 ww2 ww3 ->
                 case CodeEmitterUtils.$wadaptForReadScalarDecls
                        w
                        ww1
                        ww2
                        ww3 of ww4 { (#,,,,#) ww5 ww6 ww7 ww8 ww9 ->
                 (ww5, ww6, ww7, ww8, ww9) } }) -}
80fcafff3e797b3b532f90b83a8c725b
  adaptForReadScalarDecls1 ::
    Data.Data.Data a =>
    a -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ a
                   ($dData :: Data.Data.Data a)
                   (eta :: a)[OneShot] ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ a
                        (Data.Data.$p1Data @ a $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case CodeEmitterUtils.adaptForReadScalarDecls2 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                        1#
                        -> CodeEmitterUtils.extractDimensionAttr
                             eta
                               `cast`
                             (UnsafeCo representational a (Language.Fortran.Attr
                                                             LanguageFortranTools.Anno)) } } } }) -}
4fa846ab0d5b1f95257b5cafa429a6ba
  adaptForReadScalarDecls2 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Attr
                        15144293881790897351##
                        2024379006762117907##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataAttr3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.Attr
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.Attr
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            CodeEmitterUtils.adaptForReadScalarDecls4)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            CodeEmitterUtils.adaptForReadScalarDecls3
                            CodeEmitterUtils.adaptForReadScalarDecls4))) } }) -}
25590c736e80dbb2015ccf2ca335a35a
  adaptForReadScalarDecls3 :: Data.Typeable.Internal.TypeRep []
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ []
                        15300440589168157478##
                        15016221815972113379##
                        GHC.Types.$trModule
                        GHC.Types.$tc[]1
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ []
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
f71546d008cd5980ed4ba85255945d55
  adaptForReadScalarDecls4 ::
    Data.Typeable.Internal.TypeRep [GHC.Types.Char]
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Char
                        8424092006618324671##
                        2724268014499746065##
                        GHC.Types.$trModule
                        GHC.Types.$tcChar1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ GHC.Types.Char
                   CodeEmitterUtils.adaptForReadScalarDecls3
                   (Data.Typeable.Internal.TrTyCon
                      @ *
                      @ GHC.Types.Char
                      ww8
                      ww9
                      ww10
                      ww11
                      ww12) }) -}
2ad69cd74e172bf0290693546845b377
  adaptForReadScalarDecls_go ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 1, Strictness: <S,1*U> -}
7025e2f6bfe0b9eb7b286c3239f94bad
  adaptForReadScalarDecls_go1 ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 1, Strictness: <S,1*U> -}
a9344bed1b35efab801dfc99840353ba
  addDimension ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (decl :: Language.Fortran.Decl
                              LanguageFortranTools.Anno)
                   (start :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (end :: Language.Fortran.Expr LanguageFortranTools.Anno) ->
                 case Data.Generics.Schemes.everything
                        @ [Language.Fortran.Attr LanguageFortranTools.Anno]
                        (GHC.Base.++ @ (Language.Fortran.Attr LanguageFortranTools.Anno))
                        CodeEmitterUtils.adaptForReadScalarDecls1
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fDataDecl
                        decl of wild {
                   []
                   -> let {
                        lvl97 :: [Language.Fortran.Attr LanguageFortranTools.Anno]
                                 -> [Language.Fortran.Attr LanguageFortranTools.Anno]
                          {- Arity: 1 -}
                        = CodeEmitterUtils.addNewDimensionClaus start end
                      } in
                      Data.Generics.Schemes.everywhere
                        (\ @ a ($dData :: Data.Data.Data a) ->
                         case CodeEmitterUtils.addDimension1 of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                         case Data.Typeable.Internal.typeRepFingerprint
                                @ *
                                @ a
                                (Data.Data.$p1Data @ a $dData)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                         case GHC.Prim.eqWord# dt dt2 of lwild {
                           DEFAULT -> GHC.Base.id @ a
                           1#
                           -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                                DEFAULT -> GHC.Base.id @ a
                                1#
                                -> lvl97
                                     `cast`
                                   (UnsafeCo representational [Language.Fortran.Attr
                                                                 LanguageFortranTools.Anno] a
                                    ->_R UnsafeCo representational [Language.Fortran.Attr
                                                                      LanguageFortranTools.Anno] a) } } } })
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fDataDecl
                        decl
                   : ipv ipv1
                   -> let {
                        lvl97 :: Language.Fortran.Attr LanguageFortranTools.Anno
                                 -> Language.Fortran.Attr LanguageFortranTools.Anno
                          {- Arity: 1 -}
                        = CodeEmitterUtils.appendDimension start end
                      } in
                      Data.Generics.Schemes.everywhere
                        (\ @ a ($dData :: Data.Data.Data a) ->
                         case CodeEmitterUtils.adaptForReadScalarDecls2 of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                         case Data.Typeable.Internal.typeRepFingerprint
                                @ *
                                @ a
                                (Data.Data.$p1Data @ a $dData)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                         case GHC.Prim.eqWord# dt dt2 of lwild {
                           DEFAULT -> GHC.Base.id @ a
                           1#
                           -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                                DEFAULT -> GHC.Base.id @ a
                                1#
                                -> lvl97
                                     `cast`
                                   (UnsafeCo representational (Language.Fortran.Attr
                                                                 LanguageFortranTools.Anno) a
                                    ->_R UnsafeCo representational (Language.Fortran.Attr
                                                                      LanguageFortranTools.Anno) a) } } } })
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fDataDecl
                        decl }) -}
e274aa2de626cdd8813d21385b443d16
  addDimension1 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Attr
                        15144293881790897351##
                        2024379006762117907##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataAttr3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ [Language.Fortran.Attr LanguageFortranTools.Anno]
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ []
                      @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                      CodeEmitterUtils.adaptForReadScalarDecls3
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ Language.Fortran.Attr
                         @ LanguageFortranTools.Anno
                         (Data.Typeable.Internal.TrTyCon
                            @ (* -> *)
                            @ Language.Fortran.Attr
                            ww8
                            ww9
                            ww10
                            ww11
                            ww12)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ (Data.Map.Internal.Map GHC.Base.String)
                            @ [GHC.Base.String]
                            (Data.Typeable.Internal.mkTrApp
                               @ *
                               @ (* -> *)
                               @ Data.Map.Internal.Map
                               @ GHC.Base.String
                               (Data.Typeable.Internal.TrTyCon
                                  @ (* -> * -> *)
                                  @ Data.Map.Internal.Map
                                  ww2
                                  ww3
                                  ww4
                                  ww5
                                  ww6)
                               CodeEmitterUtils.adaptForReadScalarDecls4)
                            (Data.Typeable.Internal.mkTrApp
                               @ *
                               @ *
                               @ []
                               @ GHC.Base.String
                               CodeEmitterUtils.adaptForReadScalarDecls3
                               CodeEmitterUtils.adaptForReadScalarDecls4)))) } }) -}
8590dae26a75de68642841cea89e11cb
  addIntent ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                   (w1 :: [Language.Fortran.Attr LanguageFortranTools.Anno]) ->
                 case CodeEmitterUtils.$waddIntent w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   ww1
                   ww2 }) -}
53a4549dc1dc4eb27026919e6d9050e1
  addNewDimensionClaus ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>m2,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (w2 :: [Language.Fortran.Attr LanguageFortranTools.Anno]) ->
                 case CodeEmitterUtils.$waddNewDimensionClaus
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   ww1
                   ww2 }) -}
a47909ed49b643642a451b7b1cc8c3d3
  anyChildGenerated ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ast :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 Data.Generics.Schemes.everything
                   @ GHC.Types.Bool
                   GHC.Classes.||
                   CodeEmitterUtils.anyChildGenerated1
                   @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   CodeEmitterUtils.$s$fDataFortran
                   ast) -}
1302f23375461a15e9d8b2441ff66055
  anyChildGenerated1 :: Data.Data.Data a => a -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ a
                   ($dData :: Data.Data.Data a)
                   (eta :: a)[OneShot] ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ a
                        (Data.Data.$p1Data @ a $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case CodeEmitterUtils.anyChildGenerated2 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> CodeEmitterUtils.isGenerated
                             eta
                               `cast`
                             (UnsafeCo representational a (Language.Fortran.Fortran
                                                             LanguageFortranTools.Anno)) } } } }) -}
f9aa94b451359d5f0379c8f7534c0add
  anyChildGenerated2 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Fortran
                        1898037638716600659##
                        3599167482411011499##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataFortran3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.Fortran
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.Fortran
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            CodeEmitterUtils.adaptForReadScalarDecls4)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            CodeEmitterUtils.adaptForReadScalarDecls3
                            CodeEmitterUtils.adaptForReadScalarDecls4))) } }) -}
4fedb70fc953af61370b3f5eb4d61ba2
  appendDimension ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Attr LanguageFortranTools.Anno
    -> Language.Fortran.Attr LanguageFortranTools.Anno
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (start :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (end :: Language.Fortran.Expr LanguageFortranTools.Anno)
                   (ds :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT -> wild
                   Language.Fortran.Dimension anno lst
                   -> Language.Fortran.Dimension
                        @ LanguageFortranTools.Anno
                        anno
                        (GHC.Base.augment
                           @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                              Language.Fortran.Expr LanguageFortranTools.Anno)
                           (\ @ b
                              (c :: (Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno)
                                    -> b -> b)[OneShot]
                              (n :: b)[OneShot] ->
                            GHC.Base.foldr
                              @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno)
                              @ b
                              c
                              n
                              lst)
                           (GHC.Types.:
                              @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno)
                              (start, end)
                              (GHC.Types.[]
                                 @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                    Language.Fortran.Expr LanguageFortranTools.Anno)))) }) -}
4e5f03cb89dc9ee478313101df9adf05
  applyIntent ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (intent :: Language.Fortran.IntentAttr
                                LanguageFortranTools.Anno)
                   (decl :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 case Data.Generics.Schemes.everything
                        @ [Language.Fortran.IntentAttr LanguageFortranTools.Anno]
                        (GHC.Base.++
                           @ (Language.Fortran.IntentAttr LanguageFortranTools.Anno))
                        CodeEmitterUtils.applyIntent2
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fDataDecl
                        decl of wild {
                   []
                   -> let {
                        lvl97 :: [Language.Fortran.Attr LanguageFortranTools.Anno]
                                 -> [Language.Fortran.Attr LanguageFortranTools.Anno]
                          {- Arity: 1 -}
                        = CodeEmitterUtils.addIntent intent
                      } in
                      Data.Generics.Schemes.everywhere
                        (\ @ a ($dData :: Data.Data.Data a) ->
                         case CodeEmitterUtils.addDimension1 of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                         case Data.Typeable.Internal.typeRepFingerprint
                                @ *
                                @ a
                                (Data.Data.$p1Data @ a $dData)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                         case GHC.Prim.eqWord# dt dt2 of lwild {
                           DEFAULT -> GHC.Base.id @ a
                           1#
                           -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                                DEFAULT -> GHC.Base.id @ a
                                1#
                                -> lvl97
                                     `cast`
                                   (UnsafeCo representational [Language.Fortran.Attr
                                                                 LanguageFortranTools.Anno] a
                                    ->_R UnsafeCo representational [Language.Fortran.Attr
                                                                      LanguageFortranTools.Anno] a) } } } })
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fDataDecl
                        decl
                   : ipv ipv1
                   -> let {
                        lvl97 :: Language.Fortran.IntentAttr LanguageFortranTools.Anno
                                 -> Language.Fortran.IntentAttr LanguageFortranTools.Anno
                          {- Arity: 1, Strictness: <L,A>,
                             Unfolding: InlineRule (1, True, True)
                                        (\ (oldIntent :: Language.Fortran.IntentAttr
                                                           LanguageFortranTools.Anno) ->
                                         intent) -}
                        = \ (oldIntent :: Language.Fortran.IntentAttr
                                            LanguageFortranTools.Anno) ->
                          intent
                      } in
                      Data.Generics.Schemes.everywhere
                        (\ @ a ($dData :: Data.Data.Data a) ->
                         case CodeEmitterUtils.applyIntent1 of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                         case Data.Typeable.Internal.typeRepFingerprint
                                @ *
                                @ a
                                (Data.Data.$p1Data @ a $dData)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                         case GHC.Prim.eqWord# dt dt2 of lwild {
                           DEFAULT -> GHC.Base.id @ a
                           1#
                           -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                                DEFAULT -> GHC.Base.id @ a
                                1#
                                -> lvl97
                                     `cast`
                                   (UnsafeCo representational (Language.Fortran.IntentAttr
                                                                 LanguageFortranTools.Anno) a
                                    ->_R UnsafeCo representational (Language.Fortran.IntentAttr
                                                                      LanguageFortranTools.Anno) a) } } } })
                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fDataDecl
                        decl }) -}
2b0c8ac1d4bf07e8e46b0668214bf44d
  applyIntent1 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.IntentAttr
                        1418980594563321583##
                        15871466327150306728##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataIntentAttr4
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.IntentAttr
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.IntentAttr
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            CodeEmitterUtils.adaptForReadScalarDecls4)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            CodeEmitterUtils.adaptForReadScalarDecls3
                            CodeEmitterUtils.adaptForReadScalarDecls4))) } }) -}
90e982dbb9a055160539a18bdaa89a46
  applyIntent2 ::
    Data.Data.Data a =>
    a -> [Language.Fortran.IntentAttr LanguageFortranTools.Anno]
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dData :: Data.Data.Data a)
                   (eta :: a)[OneShot] ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ a
                        (Data.Data.$p1Data @ a $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case CodeEmitterUtils.applyIntent1 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Types.[]
                        @ (Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Types.[]
                             @ (Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                        1#
                        -> GHC.Types.:
                             @ (Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                             eta
                               `cast`
                             (UnsafeCo representational a (Language.Fortran.IntentAttr
                                                             LanguageFortranTools.Anno))
                             (GHC.Types.[]
                                @ (Language.Fortran.IntentAttr
                                     LanguageFortranTools.Anno)) } } } }) -}
cbf27ec364431ac05eaddec07dcb1571
  chunk_size :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m4,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.chunk_size1) -}
0ea468185508474bba7fae9a30c7d011
  chunk_size1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.chunk_size2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
c2d01607047a7fc1aafcfe9dd2ab5a16
  chunk_size2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.chunk_size_varname,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
20d2200e20c68766f39441ca32ad5524
  chunk_size_varname ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.chunk_size_varname1) -}
bbd7f8242447f863c678ad5b7cba0e1a
  chunk_size_varname1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.chunk_size_varname2) -}
ca0b58eb25d492ded5c8a27e2900c5ca
  chunk_size_varname2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("chunk_size"#) -}
8994ef720c2d73bd8ad683e0a4ccd151
  collectDecls ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (previousDecls :: [Language.Fortran.Decl
                                        LanguageFortranTools.Anno])
                   (currentDecl :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.mergeDeclWithPrevious_recurse
                   previousDecls
                   currentDecl) -}
a4f94f5d2a771e15d40bf6798148f2d6
  constructDeclTree ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.Fortran.Decl
                             LanguageFortranTools.Anno]) ->
                 case ds of wild {
                   [] -> CodeEmitterUtils.constructDeclTree1
                   : decl ds1
                   -> case ds1 of wild1 {
                        [] -> decl
                        : ipv ipv1
                        -> Language.Fortran.DSeq
                             @ LanguageFortranTools.Anno
                             (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                             decl
                             (CodeEmitterUtils.constructDeclTree_$sconstructDeclTree
                                ipv
                                ipv1) } }) -}
d94a2943d14b8b7f717496dbd2f828de
  constructDeclTree1 ::
    Language.Fortran.Decl LanguageFortranTools.Anno
  {- Strictness: m14,
     Unfolding: (Language.Fortran.NullDecl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan) -}
2ab56244cb7846075b17b5ea599d43f3
  constructDeclTree_$sconstructDeclTree ::
    Language.Fortran.Decl
      (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.Decl
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
bfa9b18c4c4efcd4e197f7bba662bcd1
  containsParameterAttr ::
    Language.Fortran.Decl LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (decl :: Language.Fortran.Decl
                              LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.containsParameterAttr_$sgo
                   (Language.Fortran.$fDataDecl_$cgmapQ
                      @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                      CodeEmitterUtils.$s$fDataDecl_$s$fDataMap
                      @ GHC.Types.Bool
                      CodeEmitterUtils.containsParameterAttr1
                      decl)) -}
88679650e57ee8414667aa5f272fbb49
  containsParameterAttr1 :: Data.Data.Data d => d -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ d
                   ($dData :: Data.Data.Data d)
                   (eta :: d)[OneShot] ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ d
                        (Data.Data.$p1Data @ d $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <d>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case CodeEmitterUtils.containsParameterAttr2 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> CodeEmitterUtils.paramCheck_type
                             eta
                               `cast`
                             (UnsafeCo representational d (Language.Fortran.Type
                                                             LanguageFortranTools.Anno)) } } } }) -}
5a5341102fbe9675274b92fb552551a4
  containsParameterAttr2 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Type
                        5041943942817465598##
                        7039049096440602731##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataType3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.Type LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.Type
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.Type
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            CodeEmitterUtils.adaptForReadScalarDecls4)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            CodeEmitterUtils.adaptForReadScalarDecls3
                            CodeEmitterUtils.adaptForReadScalarDecls4))) } }) -}
ff677cb5a9920da169377d7e5ddc80e5
  containsParameterAttr_$sgo :: [GHC.Types.Bool] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
658c1fdf379023308f5a12ebbfde92b9
  convertScalarToOneDimArray ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (decl :: Language.Fortran.Decl
                              LanguageFortranTools.Anno) ->
                 case CodeEmitterUtils.$wgetDeclRank decl of ww {
                   DEFAULT -> decl
                   0#
                   -> CodeEmitterUtils.addDimension
                        decl
                        CodeEmitterUtils.convertScalarToOneDimArray3
                        CodeEmitterUtils.convertScalarToOneDimArray1 }) -}
4ce385dc4a6b72362a875b41fe93800a
  convertScalarToOneDimArray1 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.convertScalarToOneDimArray2) -}
a7347aa729900b351112e7227adb9460
  convertScalarToOneDimArray2 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        1#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
e287229c9e01b5eefafc287ea34c0007
  convertScalarToOneDimArray3 ::
    Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m8,
     Unfolding: (Language.Fortran.NullExpr
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan) -}
01a7cc16b030ffe6a1523056231ff238
  declareScalarPointer_decl ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (decl :: Language.Fortran.Decl
                              LanguageFortranTools.Anno) ->
                 let {
                   varname :: Language.Fortran.VarName LanguageFortranTools.Anno
                   = case LanguageFortranTools.$wextractAssigneeFromDecl
                            decl of ww { (#,#) ww1 ww2 ->
                     Language.Fortran.VarName @ LanguageFortranTools.Anno ww1 ww2 }
                 } in
                 LanguageFortranTools.replaceAllOccurences_varname
                   @ Language.Fortran.Decl
                   CodeEmitterUtils.$s$fDataDecl
                   (CodeEmitterUtils.addDimension
                      decl
                      CodeEmitterUtils.convertScalarToOneDimArray3
                      CodeEmitterUtils.convertScalarToOneDimArray1)
                   varname
                   (case varname of wild { Language.Fortran.VarName ds str ->
                    Language.Fortran.VarName
                      @ LanguageFortranTools.Anno
                      (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                      (GHC.Base.++
                         @ GHC.Types.Char
                         str
                         CodeEmitterUtils.declareScalarPointer_decl1) })) -}
7c410283b53cd2f62bc3f37b84996b76
  declareScalarPointer_decl1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.declareScalarPointer_decl2) -}
9a31b39d49568b1a9bcfdd82c78ad5cf
  declareScalarPointer_decl2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ptr"#) -}
d1e68a6d5cf2ea0c71d0302649f9d9a9
  emitDeclStr ::
    [GHC.Types.Char] -> Language.Fortran.Variable -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (typestr :: [GHC.Types.Char])
                   (varstr :: Language.Fortran.Variable) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   typestr
                   (GHC.CString.unpackAppendCString#
                      CodeEmitterUtils.emitDeclStr3
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (LanguageFortranTools.outputExprFormatting
                            (Language.Fortran.Var
                               @ LanguageFortranTools.Anno
                               (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                               LanguageFortranTools.nullSrcSpan
                               (GHC.Types.:
                                  @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                     [Language.Fortran.Expr LanguageFortranTools.Anno])
                                  (Language.Fortran.VarName
                                     @ LanguageFortranTools.Anno
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                                     varstr,
                                   GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                                  (GHC.Types.[]
                                     @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                                        [Language.Fortran.Expr LanguageFortranTools.Anno])))))
                         CodeEmitterUtils.emitDeclStr1))) -}
fdc12222a80e643557ea4eee642ecc18
  emitDeclStr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.emitDeclStr2) -}
13d0cf8ae21ec2a5142b1b7fe968e97a
  emitDeclStr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
906e8b28c797d74d0731f14776d8591e
  emitDeclStr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" :: "#) -}
4c56904ee29d2c1912319b753b7323b8
  extractDeclaration_varname ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 Data.Generics.Schemes.everything
                   @ [Language.Fortran.Decl LanguageFortranTools.Anno]
                   (GHC.Base.++ @ (Language.Fortran.Decl LanguageFortranTools.Anno))
                   (\ @ a ($dData :: Data.Data.Data a) (eta :: a)[OneShot] ->
                    case Data.Typeable.Internal.typeRepFingerprint
                           @ *
                           @ a
                           (Data.Data.$p1Data @ a $dData)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                    case CodeEmitterUtils.extractDeclaration_varname1 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                    case GHC.Prim.eqWord# dt dt2 of lwild {
                      DEFAULT
                      -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                      1#
                      -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                           DEFAULT
                           -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                           1#
                           -> CodeEmitterUtils.extractDeclaration_varname'
                                varname
                                eta
                                  `cast`
                                (UnsafeCo representational a (Language.Fortran.Decl
                                                                LanguageFortranTools.Anno)) } } } })
                   @ (Language.Fortran.Program LanguageFortranTools.Anno)
                   CodeEmitterUtils.$s$fData[]
                   program) -}
fd49c004e2c78817178d6eced1bd8997
  extractDeclaration_varname' ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (ds :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   Language.Fortran.Decl anno src lst typ
                   -> let {
                        lvl97 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                        = GHC.Types.:
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                            varname
                            (GHC.Types.[]
                               @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                      } in
                      let {
                        $sexit :: GHC.Prim.Void#
                                  -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                          <join 1> {- Arity: 1, Strictness: <L,A> -}
                        = \ (void :: GHC.Prim.Void#)[OneShot] ->
                          letrec {
                            go2 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno,
                                     GHC.Base.Maybe GHC.Types.Int)]
                                   -> GHC.Types.Bool
                                   -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                              <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                            = \ (ds1 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                          Language.Fortran.Expr LanguageFortranTools.Anno,
                                          GHC.Base.Maybe GHC.Types.Int)])
                                (eta :: GHC.Types.Bool) ->
                              case ds1 of wild1 {
                                []
                                -> case eta of wild2 {
                                     GHC.Types.False
                                     -> GHC.Types.[]
                                          @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                     GHC.Types.True
                                     -> GHC.Types.:
                                          @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                          wild
                                          (GHC.Types.[]
                                             @ (Language.Fortran.Decl LanguageFortranTools.Anno)) }
                                : y ys
                                -> case eta of wild2 {
                                     GHC.Types.False
                                     -> case y of wild3 { (,,) ds2 expr ds3 ->
                                        go2 ys (LanguageFortranTools.usesVarName_list lvl97 expr) }
                                     GHC.Types.True -> go2 ys GHC.Types.True } }
                          } in
                          let {
                            $sgo2 :: [(Language.Fortran.Expr
                                         (Data.Map.Internal.Map
                                            [GHC.Types.Char] [[GHC.Types.Char]]),
                                       Language.Fortran.Expr
                                         (Data.Map.Internal.Map
                                            [GHC.Types.Char] [[GHC.Types.Char]]),
                                       GHC.Base.Maybe GHC.Types.Int)]
                                     -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                              <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (sc :: [(Language.Fortran.Expr
                                           (Data.Map.Internal.Map
                                              [GHC.Types.Char] [[GHC.Types.Char]]),
                                         Language.Fortran.Expr
                                           (Data.Map.Internal.Map
                                              [GHC.Types.Char] [[GHC.Types.Char]]),
                                         GHC.Base.Maybe GHC.Types.Int)]) ->
                              case sc of wild1 {
                                []
                                -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                : y ys
                                -> case y of wild2 { (,,) ds1 expr ds2 ->
                                   go2 ys (LanguageFortranTools.usesVarName_list lvl97 expr) } }
                          } in
                          $sgo2 lst
                      } in
                      let {
                        exit :: GHC.Types.Bool
                                -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (eta :: GHC.Types.Bool)[OneShot] ->
                          case eta of wild1 {
                            GHC.Types.False
                            -> letrec {
                                 $sgo2 :: [(Language.Fortran.Expr
                                              (Data.Map.Internal.Map
                                                 [GHC.Types.Char] [[GHC.Types.Char]]),
                                            Language.Fortran.Expr
                                              (Data.Map.Internal.Map
                                                 [GHC.Types.Char] [[GHC.Types.Char]]),
                                            GHC.Base.Maybe GHC.Types.Int)]
                                          -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                                   <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (sc :: [(Language.Fortran.Expr
                                                (Data.Map.Internal.Map
                                                   [GHC.Types.Char] [[GHC.Types.Char]]),
                                              Language.Fortran.Expr
                                                (Data.Map.Internal.Map
                                                   [GHC.Types.Char] [[GHC.Types.Char]]),
                                              GHC.Base.Maybe GHC.Types.Int)]) ->
                                   case sc of wild2 {
                                     []
                                     -> GHC.Types.:
                                          @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                          wild
                                          (GHC.Types.[]
                                             @ (Language.Fortran.Decl LanguageFortranTools.Anno))
                                     : y ys -> $sgo2 ys }
                               } in
                               letrec {
                                 go2 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                          Language.Fortran.Expr LanguageFortranTools.Anno,
                                          GHC.Base.Maybe GHC.Types.Int)]
                                        -> GHC.Types.Bool
                                        -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                                   <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                                 = \ (ds1 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                               Language.Fortran.Expr LanguageFortranTools.Anno,
                                               GHC.Base.Maybe GHC.Types.Int)])
                                     (eta1 :: GHC.Types.Bool) ->
                                   case ds1 of wild2 {
                                     []
                                     -> case eta1 of wild3 {
                                          GHC.Types.False
                                          -> GHC.Types.[]
                                               @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                          GHC.Types.True
                                          -> GHC.Types.:
                                               @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                               wild
                                               (GHC.Types.[]
                                                  @ (Language.Fortran.Decl
                                                       LanguageFortranTools.Anno)) }
                                     : y ys
                                     -> case eta1 of wild3 {
                                          GHC.Types.False
                                          -> case y of wild4 { (,,) ds2 expr ds3 ->
                                             go2
                                               ys
                                               (LanguageFortranTools.usesVarName_list lvl97 expr) }
                                          GHC.Types.True -> $sgo2 ys } }
                               } in
                               let {
                                 $sgo3 :: [(Language.Fortran.Expr
                                              (Data.Map.Internal.Map
                                                 [GHC.Types.Char] [[GHC.Types.Char]]),
                                            Language.Fortran.Expr
                                              (Data.Map.Internal.Map
                                                 [GHC.Types.Char] [[GHC.Types.Char]]),
                                            GHC.Base.Maybe GHC.Types.Int)]
                                          -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                                   <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (sc :: [(Language.Fortran.Expr
                                                (Data.Map.Internal.Map
                                                   [GHC.Types.Char] [[GHC.Types.Char]]),
                                              Language.Fortran.Expr
                                                (Data.Map.Internal.Map
                                                   [GHC.Types.Char] [[GHC.Types.Char]]),
                                              GHC.Base.Maybe GHC.Types.Int)]) ->
                                   case sc of wild2 {
                                     []
                                     -> GHC.Types.[]
                                          @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                     : y ys
                                     -> case y of wild3 { (,,) ds1 expr ds2 ->
                                        go2
                                          ys
                                          (LanguageFortranTools.usesVarName_list lvl97 expr) } }
                               } in
                               $sgo3 lst
                            GHC.Types.True
                            -> GHC.Types.:
                                 @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                 wild
                                 (GHC.Types.[]
                                    @ (Language.Fortran.Decl LanguageFortranTools.Anno)) }
                      } in
                      letrec {
                        $sgo2 :: [(Language.Fortran.Expr
                                     (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   Language.Fortran.Expr
                                     (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   GHC.Base.Maybe GHC.Types.Int)]
                                 -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [(Language.Fortran.Expr
                                       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     Language.Fortran.Expr
                                       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     GHC.Base.Maybe GHC.Types.Int)]) ->
                          case sc of wild1 {
                            []
                            -> GHC.Types.:
                                 @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                 wild
                                 (GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno))
                            : y ys -> $sgo2 ys }
                      } in
                      letrec {
                        go2 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno,
                                 GHC.Base.Maybe GHC.Types.Int)]
                               -> GHC.Types.Bool
                               -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                          <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                        = \ (ds1 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                      Language.Fortran.Expr LanguageFortranTools.Anno,
                                      GHC.Base.Maybe GHC.Types.Int)])
                            (eta :: GHC.Types.Bool) ->
                          case ds1 of wild1 {
                            [] -> exit eta
                            : y ys
                            -> case eta of wild2 {
                                 GHC.Types.False
                                 -> case y of wild3 { (,,) expr ds2 ds3 ->
                                    go2 ys (LanguageFortranTools.usesVarName_list lvl97 expr) }
                                 GHC.Types.True -> $sgo2 ys } }
                      } in
                      let {
                        $sgo3 :: [(Language.Fortran.Expr
                                     (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   Language.Fortran.Expr
                                     (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   GHC.Base.Maybe GHC.Types.Int)]
                                 -> [Language.Fortran.Decl LanguageFortranTools.Anno]
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [(Language.Fortran.Expr
                                       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     Language.Fortran.Expr
                                       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     GHC.Base.Maybe GHC.Types.Int)]) ->
                          case sc of wild1 {
                            [] -> $sexit GHC.Prim.void#
                            : y ys
                            -> case y of wild2 { (,,) expr ds1 ds2 ->
                               go2 ys (LanguageFortranTools.usesVarName_list lvl97 expr) } }
                      } in
                      $sgo3 lst }) -}
4fe001676847c98dbeb860f639c542b2
  extractDeclaration_varname1 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Decl
                        9188850777785548874##
                        14769666604673014076##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataDecl3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.Decl
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.Decl
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            CodeEmitterUtils.adaptForReadScalarDecls4)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            CodeEmitterUtils.adaptForReadScalarDecls3
                            CodeEmitterUtils.adaptForReadScalarDecls4))) } }) -}
e4b9c0551b03cd30b255f987e3d38c32
  extractDeclaration_varnameSrcSpan ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> [Language.Fortran.SrcSpan]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno)
                   (ds :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ Language.Fortran.SrcSpan
                   Language.Fortran.Decl ds1 src lst ds2
                   -> let {
                        lvl97 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                        = GHC.Types.:
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                            varname
                            (GHC.Types.[]
                               @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                      } in
                      let {
                        $sexit :: GHC.Prim.Void# -> [Language.Fortran.SrcSpan]
                          <join 1> {- Arity: 1, Strictness: <L,A> -}
                        = \ (void :: GHC.Prim.Void#)[OneShot] ->
                          letrec {
                            go2 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno,
                                     GHC.Base.Maybe GHC.Types.Int)]
                                   -> GHC.Types.Bool -> [Language.Fortran.SrcSpan]
                              <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                            = \ (ds3 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                          Language.Fortran.Expr LanguageFortranTools.Anno,
                                          GHC.Base.Maybe GHC.Types.Int)])
                                (eta :: GHC.Types.Bool) ->
                              case ds3 of wild1 {
                                []
                                -> case eta of wild2 {
                                     GHC.Types.False -> GHC.Types.[] @ Language.Fortran.SrcSpan
                                     GHC.Types.True
                                     -> GHC.Types.:
                                          @ Language.Fortran.SrcSpan
                                          src
                                          (GHC.Types.[] @ Language.Fortran.SrcSpan) }
                                : y ys
                                -> case eta of wild2 {
                                     GHC.Types.False
                                     -> case y of wild3 { (,,) ds4 expr ds5 ->
                                        go2 ys (LanguageFortranTools.usesVarName_list lvl97 expr) }
                                     GHC.Types.True -> go2 ys GHC.Types.True } }
                          } in
                          let {
                            $sgo2 :: [(Language.Fortran.Expr
                                         (Data.Map.Internal.Map
                                            [GHC.Types.Char] [[GHC.Types.Char]]),
                                       Language.Fortran.Expr
                                         (Data.Map.Internal.Map
                                            [GHC.Types.Char] [[GHC.Types.Char]]),
                                       GHC.Base.Maybe GHC.Types.Int)]
                                     -> [Language.Fortran.SrcSpan]
                              <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (sc :: [(Language.Fortran.Expr
                                           (Data.Map.Internal.Map
                                              [GHC.Types.Char] [[GHC.Types.Char]]),
                                         Language.Fortran.Expr
                                           (Data.Map.Internal.Map
                                              [GHC.Types.Char] [[GHC.Types.Char]]),
                                         GHC.Base.Maybe GHC.Types.Int)]) ->
                              case sc of wild1 {
                                [] -> GHC.Types.[] @ Language.Fortran.SrcSpan
                                : y ys
                                -> case y of wild2 { (,,) ds3 expr ds4 ->
                                   go2 ys (LanguageFortranTools.usesVarName_list lvl97 expr) } }
                          } in
                          $sgo2 lst
                      } in
                      let {
                        exit :: GHC.Types.Bool -> [Language.Fortran.SrcSpan]
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (eta :: GHC.Types.Bool)[OneShot] ->
                          case eta of wild1 {
                            GHC.Types.False
                            -> letrec {
                                 $sgo2 :: [(Language.Fortran.Expr
                                              (Data.Map.Internal.Map
                                                 [GHC.Types.Char] [[GHC.Types.Char]]),
                                            Language.Fortran.Expr
                                              (Data.Map.Internal.Map
                                                 [GHC.Types.Char] [[GHC.Types.Char]]),
                                            GHC.Base.Maybe GHC.Types.Int)]
                                          -> [Language.Fortran.SrcSpan]
                                   <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (sc :: [(Language.Fortran.Expr
                                                (Data.Map.Internal.Map
                                                   [GHC.Types.Char] [[GHC.Types.Char]]),
                                              Language.Fortran.Expr
                                                (Data.Map.Internal.Map
                                                   [GHC.Types.Char] [[GHC.Types.Char]]),
                                              GHC.Base.Maybe GHC.Types.Int)]) ->
                                   case sc of wild2 {
                                     []
                                     -> GHC.Types.:
                                          @ Language.Fortran.SrcSpan
                                          src
                                          (GHC.Types.[] @ Language.Fortran.SrcSpan)
                                     : y ys -> $sgo2 ys }
                               } in
                               letrec {
                                 go2 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                          Language.Fortran.Expr LanguageFortranTools.Anno,
                                          GHC.Base.Maybe GHC.Types.Int)]
                                        -> GHC.Types.Bool -> [Language.Fortran.SrcSpan]
                                   <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                                 = \ (ds3 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                               Language.Fortran.Expr LanguageFortranTools.Anno,
                                               GHC.Base.Maybe GHC.Types.Int)])
                                     (eta1 :: GHC.Types.Bool) ->
                                   case ds3 of wild2 {
                                     []
                                     -> case eta1 of wild3 {
                                          GHC.Types.False -> GHC.Types.[] @ Language.Fortran.SrcSpan
                                          GHC.Types.True
                                          -> GHC.Types.:
                                               @ Language.Fortran.SrcSpan
                                               src
                                               (GHC.Types.[] @ Language.Fortran.SrcSpan) }
                                     : y ys
                                     -> case eta1 of wild3 {
                                          GHC.Types.False
                                          -> case y of wild4 { (,,) ds4 expr ds5 ->
                                             go2
                                               ys
                                               (LanguageFortranTools.usesVarName_list lvl97 expr) }
                                          GHC.Types.True -> $sgo2 ys } }
                               } in
                               let {
                                 $sgo3 :: [(Language.Fortran.Expr
                                              (Data.Map.Internal.Map
                                                 [GHC.Types.Char] [[GHC.Types.Char]]),
                                            Language.Fortran.Expr
                                              (Data.Map.Internal.Map
                                                 [GHC.Types.Char] [[GHC.Types.Char]]),
                                            GHC.Base.Maybe GHC.Types.Int)]
                                          -> [Language.Fortran.SrcSpan]
                                   <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (sc :: [(Language.Fortran.Expr
                                                (Data.Map.Internal.Map
                                                   [GHC.Types.Char] [[GHC.Types.Char]]),
                                              Language.Fortran.Expr
                                                (Data.Map.Internal.Map
                                                   [GHC.Types.Char] [[GHC.Types.Char]]),
                                              GHC.Base.Maybe GHC.Types.Int)]) ->
                                   case sc of wild2 {
                                     [] -> GHC.Types.[] @ Language.Fortran.SrcSpan
                                     : y ys
                                     -> case y of wild3 { (,,) ds3 expr ds4 ->
                                        go2
                                          ys
                                          (LanguageFortranTools.usesVarName_list lvl97 expr) } }
                               } in
                               $sgo3 lst
                            GHC.Types.True
                            -> GHC.Types.:
                                 @ Language.Fortran.SrcSpan
                                 src
                                 (GHC.Types.[] @ Language.Fortran.SrcSpan) }
                      } in
                      letrec {
                        $sgo2 :: [(Language.Fortran.Expr
                                     (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   Language.Fortran.Expr
                                     (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   GHC.Base.Maybe GHC.Types.Int)]
                                 -> [Language.Fortran.SrcSpan]
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [(Language.Fortran.Expr
                                       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     Language.Fortran.Expr
                                       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     GHC.Base.Maybe GHC.Types.Int)]) ->
                          case sc of wild1 {
                            []
                            -> GHC.Types.:
                                 @ Language.Fortran.SrcSpan
                                 src
                                 (GHC.Types.[] @ Language.Fortran.SrcSpan)
                            : y ys -> $sgo2 ys }
                      } in
                      letrec {
                        go2 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                 Language.Fortran.Expr LanguageFortranTools.Anno,
                                 GHC.Base.Maybe GHC.Types.Int)]
                               -> GHC.Types.Bool -> [Language.Fortran.SrcSpan]
                          <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                        = \ (ds3 :: [(Language.Fortran.Expr LanguageFortranTools.Anno,
                                      Language.Fortran.Expr LanguageFortranTools.Anno,
                                      GHC.Base.Maybe GHC.Types.Int)])
                            (eta :: GHC.Types.Bool) ->
                          case ds3 of wild1 {
                            [] -> exit eta
                            : y ys
                            -> case eta of wild2 {
                                 GHC.Types.False
                                 -> case y of wild3 { (,,) expr ds4 ds5 ->
                                    go2 ys (LanguageFortranTools.usesVarName_list lvl97 expr) }
                                 GHC.Types.True -> $sgo2 ys } }
                      } in
                      let {
                        $sgo3 :: [(Language.Fortran.Expr
                                     (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   Language.Fortran.Expr
                                     (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                   GHC.Base.Maybe GHC.Types.Int)]
                                 -> [Language.Fortran.SrcSpan]
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [(Language.Fortran.Expr
                                       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     Language.Fortran.Expr
                                       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                     GHC.Base.Maybe GHC.Types.Int)]) ->
                          case sc of wild1 {
                            [] -> $sexit GHC.Prim.void#
                            : y ys
                            -> case y of wild2 { (,,) expr ds3 ds4 ->
                               go2 ys (LanguageFortranTools.usesVarName_list lvl97 expr) } }
                      } in
                      $sgo3 lst }) -}
101bc7ae6d70d3aeeed057d9ea7153c0
  extractDimensionAttr ::
    Language.Fortran.Attr LanguageFortranTools.Anno
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (attr :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case attr of wild {
                   DEFAULT
                   -> GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   Language.Fortran.Dimension ds ds1
                   -> GHC.Types.:
                        @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                        wild
                        (GHC.Types.[]
                           @ (Language.Fortran.Attr LanguageFortranTools.Anno)) }) -}
adc65973956af36e0df4f009aa573df4
  extractKernelArguments ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
  {- Arity: 1, Strictness: <S,1*U> -}
a640a75ad26214790854876014b66df1
  extractOriginalCode ::
    [GHC.Base.String] -> Language.Fortran.SrcSpan -> GHC.Base.String
  {- Arity: 2,
     Strictness: <S,U><L,1*U(1*U(A,1*U(U),A),1*U(A,1*U(U),A))>,
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: Language.Fortran.SrcSpan) ->
                 CodeEmitterUtils.$wextractOriginalCode_Offset
                   CodeEmitterUtils.extractOriginalCode1
                   CodeEmitterUtils.extractOriginalCode1
                   w
                   w1) -}
30cd0b7076938a8f899e880978d04d30
  extractOriginalCode1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
07958c76c245450a1d03b13d3edc5b98
  extractOriginalCode2 :: GHC.Base.String
  {- Unfolding: (Data.OldList.unlines
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
85fbe1bb5c30c6e9e9bd2f743838c825
  extractOriginalCode_Offset ::
    (GHC.Types.Int, GHC.Types.Int)
    -> [GHC.Base.String] -> Language.Fortran.SrcSpan -> GHC.Base.String
  {- Arity: 3,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,U><L,1*U(1*U(A,1*U(U),A),1*U(A,1*U(U),A))>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: [GHC.Base.String])
                   (w2 :: Language.Fortran.SrcSpan) ->
                 case w of ww { (,) ww1 ww2 ->
                 CodeEmitterUtils.$wextractOriginalCode_Offset ww1 ww2 w1 w2 }) -}
7cf5cf03accdc2cc152e43124b67f738
  extractOriginalCode_Offset1 ::
    [GHC.Base.String] -> Language.Fortran.SrcSpan -> GHC.Base.String
  {- Arity: 2,
     Strictness: <S,U><L,1*U(1*U(A,1*U(U),A),1*U(A,1*U(U),A))>,
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: Language.Fortran.SrcSpan) ->
                 CodeEmitterUtils.$wextractOriginalCode_Offset
                   CodeEmitterUtils.extractOriginalCode1
                   CodeEmitterUtils.extractOriginalCode_Offset2
                   w
                   w1) -}
a6c0e2e4826362e73bd4826da0f3b6fd
  extractOriginalCode_Offset2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
0c20a53f2eabdfb0e254aca85673cc5a
  extractintentAttrs ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> [Language.Fortran.IntentAttr LanguageFortranTools.Anno]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (intentAttr :: Language.Fortran.IntentAttr
                                    LanguageFortranTools.Anno) ->
                 GHC.Types.:
                   @ (Language.Fortran.IntentAttr LanguageFortranTools.Anno)
                   intentAttr
                   (GHC.Types.[]
                      @ (Language.Fortran.IntentAttr LanguageFortranTools.Anno))) -}
fda63e0c83ed993c85c37889f818e10a
  generateGloablReductionArrayArgStr ::
    [GHC.Types.Char]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U(A,1*U)>,
     Unfolding: (\ (accum :: [GHC.Types.Char])
                   (item :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   accum
                   (GHC.CString.unpackAppendCString#
                      CodeEmitterUtils.emitDeclStr2
                      (GHC.Base.++
                         @ GHC.Types.Char
                         LanguageFortranTools.tabInc
                         (GHC.CString.unpackAppendCString#
                            CodeEmitterUtils.generateGloablReductionArrayArgStr1
                            (case item of wild { Language.Fortran.VarName ds1 str ->
                             str }))))) -}
da1da1e28c3c67fb25b392f3757889fb
  generateGloablReductionArrayArgStr1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("__global "#) -}
e32ea7aa7f370591cd37a7e5c600d788
  generateGlobalReductionArray ::
    Language.Fortran.VarName p -> Language.Fortran.VarName p
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ p (w :: Language.Fortran.VarName p) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.VarName
                   @ p
                   ww1
                   (GHC.CString.unpackAppendCString#
                      CodeEmitterUtils.generateGlobalReductionArray2
                      (GHC.Base.++
                         @ GHC.Types.Char
                         ww2
                         (GHC.CString.unpackCString#
                            CodeEmitterUtils.generateGlobalReductionArray1))) }) -}
85db33d566993a076b57500e0b5560f3
  generateGlobalReductionArray1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_array"#) -}
ebfe33de28dc0c0087ffd2ae3c984f11
  generateGlobalReductionArray2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("global_"#) -}
841020e5a975073c6d34180c8c79fc75
  generateLocalReductionArray ::
    Language.Fortran.VarName p -> Language.Fortran.VarName p
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ p (w :: Language.Fortran.VarName p) ->
                 case w of ww { Language.Fortran.VarName ww1 ww2 ->
                 Language.Fortran.VarName
                   @ p
                   ww1
                   (GHC.CString.unpackAppendCString#
                      CodeEmitterUtils.generateLocalReductionArray1
                      (GHC.Base.++
                         @ GHC.Types.Char
                         ww2
                         (GHC.CString.unpackCString#
                            CodeEmitterUtils.generateGlobalReductionArray1))) }) -}
f2abc06d06dc484de8853879939234d8
  generateLocalReductionArray1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("local_"#) -}
30150c1427237059aff3035b67494e43
  generateLocalReductionArrayArgStr ::
    [GHC.Types.Char]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U(A,1*U)>,
     Unfolding: (\ (accum :: [GHC.Types.Char])
                   (item :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   accum
                   (GHC.CString.unpackAppendCString#
                      CodeEmitterUtils.emitDeclStr2
                      (GHC.Base.++
                         @ GHC.Types.Char
                         LanguageFortranTools.tabInc
                         (GHC.CString.unpackAppendCString#
                            CodeEmitterUtils.generateLocalReductionArrayArgStr1
                            (case item of wild { Language.Fortran.VarName ds1 str ->
                             str }))))) -}
eec11b1843197526b7e950dd751ce56e
  generateLocalReductionArrayArgStr1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("__local "#) -}
c345185ec1f0c0d639145b173d02fa1e
  generateLocalReductionVar ::
    Language.Fortran.VarName p -> Language.Fortran.VarName p
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ p (ds :: Language.Fortran.VarName p) ->
                 case ds of wild { Language.Fortran.VarName anno str ->
                 Language.Fortran.VarName
                   @ p
                   anno
                   (GHC.CString.unpackAppendCString# "local_"# str) }) -}
38c3b347853e3dab8c0cc2381b638899
  generatePtrScalarAssignment ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U(U,U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (var :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 Language.Fortran.Assg
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (LanguageFortranTools.generateVar var)
                   (Language.Fortran.Var
                      @ LanguageFortranTools.Anno
                      (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                      LanguageFortranTools.nullSrcSpan
                      (GHC.Types.:
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])
                         (CodeEmitterUtils.scalarPointerVarName var,
                          CodeEmitterUtils.generatePtrScalarAssignment1)
                         (GHC.Types.[]
                            @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                               [Language.Fortran.Expr LanguageFortranTools.Anno]))))) -}
8e45dcb694d2fd8650aad64cced1bd39
  generatePtrScalarAssignment1 ::
    [Language.Fortran.Expr LanguageFortranTools.Anno]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                   CodeEmitterUtils.convertScalarToOneDimArray1
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
c24e7fcca4cd8df63c3405344e647fc8
  generateReductionIterator ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.generateReductionIterator1) -}
a800235f3ed1a29cf1756d5a629cf281
  generateReductionIterator1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.generateReductionIterator2) -}
7752ad50262cdd28cc1fcce49d0943fd
  generateReductionIterator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("r_iter"#) -}
e376d7a2bfc0222995189db58df374e5
  getDeclRank ::
    Language.Fortran.Decl LanguageFortranTools.Anno -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 case CodeEmitterUtils.$wgetDeclRank w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
b248bdfa5806e3adf7e4ad6ec7214f1b
  getDimensionExprs ::
    Language.Fortran.Attr LanguageFortranTools.Anno
    -> [(Language.Fortran.Expr LanguageFortranTools.Anno,
         Language.Fortran.Expr LanguageFortranTools.Anno)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Types.[]
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno)
                   Language.Fortran.Dimension ds1 exprs -> exprs }) -}
9cf45418d5cb843fac18ae83d77570f3
  getFirstBlockSrc ::
    Language.Fortran.Block LanguageFortranTools.Anno
    -> [Language.Fortran.SrcSpan]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*U(U,U),A,A)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (codeSeg :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                 GHC.Types.:
                   @ Language.Fortran.SrcSpan
                   (Language.Fortran.$fSpanBlock_$csrcSpan
                      @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                      codeSeg)
                   (GHC.Types.[] @ Language.Fortran.SrcSpan)) -}
c47c1eb88f9f069c0886fcbb9ccdcd2c
  getFirstFortranSrc ::
    Language.Fortran.Block LanguageFortranTools.Anno
    -> [Language.Fortran.SrcSpan]
  {- Arity: 1, Strictness: <S,1*U(A,A,A,A,A,1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                 case ds of wild { Language.Fortran.Block ds1 ds2 ds3 ds4 ds5 fortran ->
                 GHC.Types.:
                   @ Language.Fortran.SrcSpan
                   (Language.Fortran.$fSpanFortran_$csrcSpan
                      @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                      fortran)
                   (GHC.Types.[] @ Language.Fortran.SrcSpan) }) -}
efeae72fe364812039d27cb38a5f64be
  getGlobalID ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (globalIdVar :: Language.Fortran.Expr
                                     LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getGlobalID4,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         globalIdVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
13eb332bc1975f15ace38dfd1f027ed9
  getGlobalID1 :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Con
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.getGlobalID2) -}
c4655d6ae03dad71accae07ad0a43d40
  getGlobalID2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.getGlobalID3) -}
a55f5e15214a92233fb92515660d9c77
  getGlobalID3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("0"#) -}
aaa4101065eaaa421f55be74396815f4
  getGlobalID4 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getGlobalID5) -}
6e6330e2fbffce6979f6bb5d3bc96319
  getGlobalID5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.getGlobalID6) -}
0a611268061f5981856f870107531d9a
  getGlobalID6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("get_global_id"#) -}
a3fe9fda6b7355d8626c16b16b0333ed
  getGroupID ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (groupIdVar :: Language.Fortran.Expr
                                    LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getGroupID1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         groupIdVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
dbfb7fada6221374bd4bd6bd183da302
  getGroupID1 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getGroupID2) -}
eb3210f7eb32a20295fc96abc52ffa13
  getGroupID2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.getGroupID3) -}
6118569f414bc24011a90323bd2e00f0
  getGroupID3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("get_group_id"#) -}
4a539898fc2becc7e1d4b5a311b54ba6
  getGroupSize ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (groupSizeVar :: Language.Fortran.Expr
                                      LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getGroupSize1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         groupSizeVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
4dbb1a4b4077512353cc732c5742e34a
  getGroupSize1 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getGroupSize2) -}
d41bbe42fc775f8d8f0583dc44f664b0
  getGroupSize2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.getGroupSize3) -}
fae4894f9f1296c3869e8dc63a2d11f2
  getGroupSize3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("get_group_size"#) -}
a71dbee76e7eee9fe2b46d20683876e4
  getLocalId ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (localIdVar :: Language.Fortran.Expr
                                    LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getLocalId1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         localIdVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
7104778bc87bb1351bac298f95d70b9f
  getLocalId1 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getLocalId2) -}
a253de38142a1961742b83cd36a0c041
  getLocalId2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.getLocalId3) -}
88152d3ca41f59bc8331d1be4d4d5b52
  getLocalId3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("get_local_id"#) -}
3ad1cc6fe39a911a941c17a82e8f704b
  getLocalSize ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (localSizeVar :: Language.Fortran.Expr
                                      LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getLocalSize1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         localSizeVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
a6d2e7c2b8f9e25cd5e35364f2e8e752
  getLocalSize1 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getLocalSize2) -}
42a1fa8f0ad16ff44a1dbdfa7516ef34
  getLocalSize2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.getLocalSize3) -}
755d566477fe914ec49314c80126e7cc
  getLocalSize3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("get_local_size"#) -}
08c878a160b5f82d2e0b7b82f5587526
  getModuleName :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (filename :: GHC.Base.String) ->
                 case CodeEmitterUtils.getModuleName_$s$wsplitOnChar'
                        filename
                        (GHC.Types.[] @ GHC.Types.Char)
                        '/'# of ww { (#,#) ww1 ww2 ->
                 CodeEmitterUtils.getModuleName_$sgo
                   (GHC.List.lastError @ GHC.Base.String)
                   ww1
                   ww2 }) -}
b9023d602403bcefafbed66c3f3ecad4
  getModuleName_$s$wsplitOnChar' ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.Char#
    -> (# GHC.Base.String, [GHC.Base.String] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
c8f350126ee53911875178b8541e7ef8
  getModuleName_$sgo ::
    [GHC.Types.Char]
    -> [GHC.Types.Char] -> [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,1*U><S,1*U> -}
9634b1888ff0a0e47e226b6f431acade
  getNumberGroups ::
    Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (numberGroupsVar :: Language.Fortran.Expr
                                         LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.getNumberGroups1,
                       GHC.Types.:
                         @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                         numberGroupsVar
                         (GHC.Types.:
                            @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                            CodeEmitterUtils.getGlobalID1
                            (GHC.Types.[]
                               @ (Language.Fortran.Expr LanguageFortranTools.Anno))))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
20bee72c40e00f6fc28126e37a256339
  getNumberGroups1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.getNumberGroups2) -}
c174703b829fa5552b9959a9266884f4
  getNumberGroups2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.getNumberGroups3) -}
55a4024feb4ba471731f9c71d0f693d7
  getNumberGroups3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("get_num_groups"#) -}
48b97c90bed9520ef716269d869a849b
  getOriginalDeclaration ::
    [GHC.Base.String]
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ (originalLines :: [GHC.Base.String])
                   (varname :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (program :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case Data.Generics.Schemes.everything
                        @ [Language.Fortran.SrcSpan]
                        (GHC.Base.++ @ Language.Fortran.SrcSpan)
                        (\ @ a ($dData :: Data.Data.Data a) (eta :: a)[OneShot] ->
                         case Data.Typeable.Internal.typeRepFingerprint
                                @ *
                                @ a
                                (Data.Data.$p1Data @ a $dData)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                         case CodeEmitterUtils.extractDeclaration_varname1 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                         case GHC.Prim.eqWord# dt dt2 of lwild {
                           DEFAULT -> GHC.Types.[] @ Language.Fortran.SrcSpan
                           1#
                           -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                                DEFAULT -> GHC.Types.[] @ Language.Fortran.SrcSpan
                                1#
                                -> CodeEmitterUtils.extractDeclaration_varnameSrcSpan
                                     varname
                                     eta
                                       `cast`
                                     (UnsafeCo representational a (Language.Fortran.Decl
                                                                     LanguageFortranTools.Anno)) } } } })
                        @ (Language.Fortran.Program LanguageFortranTools.Anno)
                        CodeEmitterUtils.$s$fData[]
                        program of wild {
                   [] -> GHC.Base.Nothing @ GHC.Base.String
                   : ipv ipv1
                   -> GHC.Base.Just
                        @ GHC.Base.String
                        (CodeEmitterUtils.$wextractOriginalCode_Offset
                           CodeEmitterUtils.extractOriginalCode1
                           CodeEmitterUtils.extractOriginalCode1
                           originalLines
                           ipv) }) -}
c3090c6d5fc0705a836528136598c21b
  globalMemSpaceAcc :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.globalMemSpaceAcc1) -}
c4ba6e25340ba79982c94f9137392b90
  globalMemSpaceAcc1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("!$ACC MemSpace global"#) -}
cef448dfe91be2c9f4fc7d4a32ed1b0a
  hostModuleName :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (moduleName :: [GHC.Types.Char]) ->
                 GHC.Base.build
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      (GHC.CString.unpackFoldrCString#
                         @ b
                         CodeEmitterUtils.hostModuleName1
                         c
                         n)
                      moduleName)) -}
094a62c308144474cfa5c217eb922824
  hostModuleName1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_host"#) -}
39265a81956d2e3703f93bbf9d45d975
  initModuleName :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (moduleName :: [GHC.Types.Char]) ->
                 GHC.Base.build
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      (GHC.CString.unpackFoldrCString#
                         @ b
                         CodeEmitterUtils.initModuleName1
                         c
                         n)
                      moduleName)) -}
45dd313921855262f323f636af488c0a
  initModuleName1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_init"#) -}
a61d68e0859730e27d3cc877e803394a
  insertDecl ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m12,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.Decl LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 case CodeEmitterUtils.$winsertDecl
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Language.Fortran.DSeq @ LanguageFortranTools.Anno ww1 ww2 ww3 }) -}
e3c179c56b6bf1bd87d87f48413ba5bd
  insertDecls ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 2, Strictness: <L,1*U><S,1*U>m12,
     Unfolding: InlineRule (2, True, False)
                (\ (newDecls :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (declTree :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 CodeEmitterUtils.insertDecl
                   (CodeEmitterUtils.constructDeclTree newDecls)
                   declTree) -}
a6cbf5ec63bb0eac68e262025d1d96ad
  isGenerated ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (codeSeg :: Language.Fortran.Fortran
                                 LanguageFortranTools.Anno) ->
                 case Language.Fortran.$fSpanFortran_$csrcSpan
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        codeSeg of wild { (,) ds ds1 ->
                 case ds of wild1 { Language.Fortran.SrcLoc f lineStart columnStart ->
                 case ds1 of wild2 { Language.Fortran.SrcLoc ds2 lineEnd columnEnd ->
                 case GHC.Classes.$fEqModule_$s$c==
                        f
                        CodeEmitterUtils.isGenerated3 of wild3 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case lineStart of wild4 { GHC.Types.I# x ->
                      case x of wild5 {
                        DEFAULT -> GHC.Base.eqString f CodeEmitterUtils.isGenerated1
                        -1#
                        -> case lineEnd of wild6 { GHC.Types.I# x1 ->
                           case x1 of wild7 {
                             DEFAULT -> GHC.Base.eqString f CodeEmitterUtils.isGenerated1
                             -1# -> GHC.Types.True } } } } } } } }) -}
c5e39702ad0c391ba340bef949c4af91
  isGenerated1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.isGenerated2) -}
38e1455a0995ebfebf5937eaea9b1425
  isGenerated2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("generated"#) -}
37cead4b9470af8f688b71fbbfbe6a8c
  isGenerated3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.isGenerated4) -}
521a2d62c203327bbd84a257b156eac1
  isGenerated4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<unknown>"#) -}
403be5c246c83e942597c352b6f1ee6b
  isIntent ::
    Language.Fortran.Attr LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.Fortran.Intent ds1 ds2 -> GHC.Types.True }) -}
39b24b427051956c8f7a41962d041055
  localChunkSize :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m4,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.localChunkSize1) -}
69a3d9f707079754e43d7b43b8fb21fa
  localChunkSize1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.localChunkSize2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
644ed7762112cc3c9cd6dbc735078f9a
  localChunkSize2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.localChunkSize3,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
2e167adc0bd407274dbe1047a6430bd4
  localChunkSize3 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.localChunkSize4) -}
3dc3b392cba2ddd7a6de0bbc24df4dff
  localChunkSize4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.localChunkSize5) -}
4544306c2ed6c23fe6fde2d67a4cc135
  localChunkSize5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("local_chunk_size"#) -}
c6187a0f6b074f2bdce3f4f00e82b819
  localMemBarrier :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.localMemBarrier1) -}
cb0784f3193142c9e38ebdf87db306d4
  localMemBarrier1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("call barrier(CLK_LOCAL_MEM_FENCE)\n"#) -}
41fdfd73416017a116e661dbf2e6645e
  localMemSpaceAcc :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.localMemSpaceAcc1) -}
8aa92dced9e6f5b4dfda221ec3952d1d
  localMemSpaceAcc1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" !$ACC MemSpace local"#) -}
af8a4cf0e20a195d96836e8776989b48
  mergeDeclWithPrevious_recurse ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
6f0d6c0d1160f43374c27dd7871487b3
  nthVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m4,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.nthVar1) -}
45b93455f08b41f76f3890bd7f79afa6
  nthVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.nthVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
1beb8a754c6bfca7fcc14282b4344633
  nthVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.nthVar3,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
ec246bce87581698dda5a1d1540dd713
  nthVar3 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.nthVar4) -}
106d9ea1322240ea042152b82390464e
  nthVar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.nthVar5) -}
339b45a8c900e4ebdc418940f0337703
  nthVar5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NTH"#) -}
1cdbf07531d7681b57d2fbb6296f5748
  numGroupsVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m4,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.numGroupsVar1) -}
67469b905262c515095994d18fc6f68e
  numGroupsVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.numGroupsVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
dbf13cb9547f324118cb9560636accb8
  numGroupsVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.numGroupsVarName,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
00b9057aad1bc9b6a2d6a6b6baeb2070
  numGroupsVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.numGroupsVarName1) -}
73346723fc08d4deb3c12e2f903036c9
  numGroupsVarName1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.numGroupsVarName2) -}
4ff88521d7199d24ea01172334134893
  numGroupsVarName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("num_groups"#) -}
1451401abe946cff7de97b4d11538bff
  nunitsVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m4,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.nunitsVar1) -}
62744ba52d947d5e5723c014fc0c0911
  nunitsVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.nunitsVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
0aa0b966a078f1da29b6524f6fdbe220
  nunitsVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.nunitsVar3,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
66821a65effe4222dfa1cafa45a3964b
  nunitsVar3 :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.nunitsVar4) -}
9245b72f81599b8383a2945ea4e22980
  nunitsVar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.nunitsVar5) -}
7e0775a2fb4e5ff639333a6caffe3361
  nunitsVar5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NUNITS"#) -}
998d53245debe63392dc7d8e23094cb5
  paramCheck_attr ::
    Language.Fortran.Attr LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.Fortran.Parameter ds1 -> GHC.Types.True }) -}
f40fbb0818142de97e848fc6a6813e5b
  paramCheck_type ::
    Language.Fortran.Type LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.Fortran.Type
                            LanguageFortranTools.Anno) ->
                 case ds of wild {
                   Language.Fortran.BaseType ds1 baseT attrList ds2 ds3
                   -> CodeEmitterUtils.paramCheck_type_$sgo attrList
                   Language.Fortran.ArrayT ds1 ds2 baseT attrList ds3 ds4
                   -> CodeEmitterUtils.paramCheck_type_$sgo attrList }) -}
1cb8cd9f880c47cca27ccc9df6da3d8c
  paramCheck_type_$sgo ::
    [Language.Fortran.Attr
       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e4649905d609eea8bf7ef6b4026f3327
  reductionIteratorDecl :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   CodeEmitterUtils.reductionIteratorDecl1
                   CodeEmitterUtils.generateReductionIterator1) -}
7bb66cfd42c3a5d75c24aaaed10de0a9
  reductionIteratorDecl1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Integer :: "#) -}
54ba55367b26fceb5c5f8383250325f3
  removeIntentFromDecl ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                CodeEmitterUtils.removeIntentFromDecl1
                  `cast`
                (<Language.Fortran.Decl LanguageFortranTools.Anno>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.Fortran.Decl
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R) -}
2778a0225b706dbddf329fe10de6f2e4
  removeIntentFromDecl1 ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Data.Functor.Identity.Identity
         (Language.Fortran.Decl
            (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (decl :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 Language.Fortran.$fDataDecl1
                   @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                   CodeEmitterUtils.$s$fDataDecl_$s$fDataMap
                   CodeEmitterUtils.removeIntentFromDecl2
                   decl) -}
e720b017081083e70fdb1c5115c26747
  removeIntentFromDecl2 :: Data.Data.Data b => b -> b
  {- Arity: 1,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ b ($dData :: Data.Data.Data b) ->
                 case CodeEmitterUtils.containsParameterAttr2 of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ b
                        (Data.Data.$p1Data @ b $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <b>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT -> GHC.Base.id @ b
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT -> GHC.Base.id @ b
                        1#
                        -> CodeEmitterUtils.removeIntentFromType
                             `cast`
                           (UnsafeCo representational (Language.Fortran.Type
                                                         LanguageFortranTools.Anno) b
                            ->_R UnsafeCo representational (Language.Fortran.Type
                                                              LanguageFortranTools.Anno) b) } } } }) -}
74caa1c6050a31444e1e66693908b9b9
  removeIntentFromType ::
    Language.Fortran.Type LanguageFortranTools.Anno
    -> Language.Fortran.Type LanguageFortranTools.Anno
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.Fortran.Type
                            LanguageFortranTools.Anno) ->
                 case ds of wild {
                   Language.Fortran.BaseType anno btype attrList expr1 expr2
                   -> Language.Fortran.BaseType
                        @ LanguageFortranTools.Anno
                        anno
                        btype
                        (GHC.List.filter
                           @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                           CodeEmitterUtils.removeIntentFromType1
                           attrList)
                        expr1
                        expr2
                   Language.Fortran.ArrayT anno exprList btype attrList expr1 expr2
                   -> Language.Fortran.ArrayT
                        @ LanguageFortranTools.Anno
                        anno
                        exprList
                        btype
                        (GHC.List.filter
                           @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                           CodeEmitterUtils.removeIntentFromType1
                           attrList)
                        expr1
                        expr2 }) -}
a380b44f9b7a5295eb96fc02bf8c4193
  removeIntentFromType1 ::
    Language.Fortran.Attr LanguageFortranTools.Anno -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.Fortran.Attr LanguageFortranTools.Anno) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.True
                   Language.Fortran.Intent ds ds1 -> GHC.Types.False }) -}
2a18614bbd21033e7bba1a44239fe5b5
  replaceIntent ::
    Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> Language.Fortran.IntentAttr LanguageFortranTools.Anno
    -> Language.Fortran.IntentAttr LanguageFortranTools.Anno
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (newIntent :: Language.Fortran.IntentAttr
                                   LanguageFortranTools.Anno)
                   (oldIntent :: Language.Fortran.IntentAttr
                                   LanguageFortranTools.Anno) ->
                 newIntent) -}
2b8415c44884a949467343a4531fde75
  scalarPointerVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,1*U(A,1*U)>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (varname :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.scalarPointerVarName varname,
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
a0992b634ba3ae26ac202d5a574dc0ba
  scalarPointerVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(A,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case ds of wild { Language.Fortran.VarName ds1 str ->
                 Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         (GHC.CString.unpackFoldrCString#
                            @ b
                            CodeEmitterUtils.declareScalarPointer_decl2
                            c
                            n)
                         str)) }) -}
b507f094cbd8b99582a04c5f4e512c7e
  splitOnChar ::
    GHC.Types.Char -> GHC.Base.String -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (char :: GHC.Types.Char) (str :: GHC.Base.String) ->
                 CodeEmitterUtils.splitOnChar'
                   char
                   (GHC.Types.[] @ GHC.Types.Char)
                   str) -}
17017bc8ae7233d44cd6e5f5e7e4175c
  splitOnChar' ::
    GHC.Types.Char
    -> GHC.Base.String -> GHC.Base.String -> [GHC.Base.String]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><S,1*U>m2,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Char)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String) ->
                 case CodeEmitterUtils.$wsplitOnChar'
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Base.String ww1 ww2 }) -}
e3b5edc266de575d2450102fe0d7dc12
  startPosition :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m4,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.startPosition1) -}
aa5ac44d10ee760000bba48f08d1ee4f
  startPosition1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.startPosition2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
52855a75619454b5a1b875f8d57b5a5e
  startPosition2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.startPosition3,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
2a66987da05d685dd7f67272b4020061
  startPosition3 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.startPosition4) -}
80ac6113340b8a489d020030c55e0933
  startPosition4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.startPosition5) -}
0ae3038c53e8f5d9edc3cd5fc3545652
  startPosition5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("start_position"#) -}
6fbf470467cb76ebc02fdb09af684f31
  statePtrDecl :: Language.Fortran.Decl LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Decl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.statePtrDecl7
                   CodeEmitterUtils.statePtrDecl1) -}
8a2dc20cd950868b55c287023c57c1d6
  statePtrDecl1 :: Language.Fortran.Type LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.BaseType
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.statePtrDecl6
                   CodeEmitterUtils.statePtrDecl2
                   CodeEmitterUtils.convertScalarToOneDimArray3
                   CodeEmitterUtils.convertScalarToOneDimArray3) -}
8716f6932e2ab37c6c3a1ac33e8a88f1
  statePtrDecl2 :: [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Attr LanguageFortranTools.Anno)
                   CodeEmitterUtils.statePtrDecl3
                   (GHC.Types.[]
                      @ (Language.Fortran.Attr LanguageFortranTools.Anno))) -}
29680d8ead827f56fb7782ee155f6e0c
  statePtrDecl3 :: Language.Fortran.Attr LanguageFortranTools.Anno
  {- Strictness: m14,
     Unfolding: (Language.Fortran.Dimension
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.statePtrDecl4) -}
a132b6ed9a4828ff30d9fe9f5726b27f
  statePtrDecl4 ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                      Language.Fortran.Expr LanguageFortranTools.Anno)
                   CodeEmitterUtils.statePtrDecl5
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno))) -}
d73c5289fd1015943380bbe1daeac437
  statePtrDecl5 ::
    (Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.convertScalarToOneDimArray3,
                  CodeEmitterUtils.convertScalarToOneDimArray1)) -}
597449b1617e55e3ff9cd7d9935fe5e9
  statePtrDecl6 ::
    Language.Fortran.BaseType LanguageFortranTools.Anno
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.Fortran.Integer
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])) -}
6b41fe9d479da37c5bafe60dde5e28db
  statePtrDecl7 ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      GHC.Base.Maybe GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                      Language.Fortran.Expr LanguageFortranTools.Anno,
                      GHC.Base.Maybe GHC.Types.Int)
                   CodeEmitterUtils.statePtrDecl8
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno,
                         GHC.Base.Maybe GHC.Types.Int))) -}
a39d35cb6c826b70238f12ee567b64c3
  statePtrDecl8 ::
    (Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.statePtrVar,
                  CodeEmitterUtils.convertScalarToOneDimArray3,
                  GHC.Base.Nothing @ GHC.Types.Int)) -}
3fb709bde6d12247e9691c0516f6e3a8
  statePtrVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m4,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.statePtrVar1) -}
88a825d19344c5fc9b4b596b914be890
  statePtrVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.statePtrVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
977dcc48cda4a30b5ca6ae336dc60e94
  statePtrVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.statePtrVarName,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
9c984821f0774a5a1178f268f6750ce2
  statePtrVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.statePtrVarName1) -}
8ed125523c4c8f2a789f830f5f73e9c1
  statePtrVarName1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.statePtrVarName2) -}
526ed5052463cccd3159cf9f4ecd1ad5
  statePtrVarName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("state_ptr"#) -}
3f53e146df7302a12b9fd257bd63d409
  stateVar :: Language.Fortran.Expr LanguageFortranTools.Anno
  {- Strictness: m4,
     Unfolding: (Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.stateVar1) -}
943b0992f68742eae85572ef13730790
  stateVar1 ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      [Language.Fortran.Expr LanguageFortranTools.Anno])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                      [Language.Fortran.Expr LanguageFortranTools.Anno])
                   CodeEmitterUtils.stateVar2
                   (GHC.Types.[]
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno]))) -}
fbdc474a2db78fad16a162996577177f
  stateVar2 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     [Language.Fortran.Expr LanguageFortranTools.Anno])
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.stateVarName,
                  GHC.Types.[]
                    @ (Language.Fortran.Expr LanguageFortranTools.Anno))) -}
e74fd8294e53b2d82c62b6c144ccd828
  stateVarDecl :: Language.Fortran.Decl LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.Decl
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   CodeEmitterUtils.stateVarDecl2
                   CodeEmitterUtils.stateVarDecl1) -}
2770db346d6d63bb3cdd01efbd678f02
  stateVarDecl1 :: Language.Fortran.Type LanguageFortranTools.Anno
  {- Strictness: m1,
     Unfolding: (Language.Fortran.BaseType
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.statePtrDecl6
                   (GHC.Types.[] @ (Language.Fortran.Attr LanguageFortranTools.Anno))
                   CodeEmitterUtils.convertScalarToOneDimArray3
                   CodeEmitterUtils.convertScalarToOneDimArray3) -}
85ea371802d85edf068e65447631066e
  stateVarDecl2 ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      GHC.Base.Maybe GHC.Types.Int)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                      Language.Fortran.Expr LanguageFortranTools.Anno,
                      GHC.Base.Maybe GHC.Types.Int)
                   CodeEmitterUtils.stateVarDecl3
                   (GHC.Types.[]
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                         Language.Fortran.Expr LanguageFortranTools.Anno,
                         GHC.Base.Maybe GHC.Types.Int))) -}
a5a67c0c95c59b9765413092744fa586
  stateVarDecl3 ::
    (Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m,
     Unfolding: ((CodeEmitterUtils.stateVar,
                  CodeEmitterUtils.convertScalarToOneDimArray3,
                  GHC.Base.Nothing @ GHC.Types.Int)) -}
7ce6027e1fbd8db817f4221bb775d0d5
  stateVarName :: Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: m,
     Unfolding: (Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   CodeEmitterUtils.stateVarName1) -}
5dc09d3517d56851caf23dc40a4e2896
  stateVarName1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.stateVarName2) -}
b83e914e1a2d1e17b14cb0d325ad299e
  stateVarName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("state"#) -}
4829ddac690110f1087a1203565a20da
  stripAttrs ::
    [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> [Language.Fortran.Attr LanguageFortranTools.Anno]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (a :: [Language.Fortran.Attr LanguageFortranTools.Anno]) ->
                 GHC.Types.[]
                   @ (Language.Fortran.Attr LanguageFortranTools.Anno)) -}
9ed59ae0657e5329ed1f0cc9026b0602
  stripDeclAttrs ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> Language.Fortran.Decl LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (decl :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 Data.Generics.Schemes.everywhere
                   CodeEmitterUtils.stripDeclAttrs1
                   @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   CodeEmitterUtils.$s$fDataDecl
                   decl) -}
cb0ebb5cd8ae45568318a269a73b9f2d
  stripDeclAttrs1 :: Data.Data.Data a => a -> a
  {- Arity: 1,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ a ($dData :: Data.Data.Data a) ->
                 case CodeEmitterUtils.addDimension1 of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ a
                        (Data.Data.$p1Data @ a $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT -> GHC.Base.id @ a
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT -> GHC.Base.id @ a
                        1#
                        -> CodeEmitterUtils.stripAttrs
                             `cast`
                           (UnsafeCo representational [Language.Fortran.Attr
                                                         LanguageFortranTools.Anno] a
                            ->_R UnsafeCo representational [Language.Fortran.Attr
                                                              LanguageFortranTools.Anno] a) } } } }) -}
c337aec07510fd5de5d06e72660c910d
  varBufVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,1*U(A,1*U)>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (varName :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.varSizeVarName varName,
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
531c1d60d8048f848a8a3ba87087ab56
  varBufVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(A,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case ds of wild { Language.Fortran.VarName ds1 str ->
                 Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         (GHC.CString.unpackFoldrCString#
                            @ b
                            CodeEmitterUtils.varBufVarName1
                            c
                            n)
                         str)) }) -}
dd3ddf161b5650b5a690ef67c598c193
  varBufVarName1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_buf"#) -}
c428d4bd9834da916e242cbf4d22fdee
  varSizeVar ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,1*U(A,1*U)>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (varName :: Language.Fortran.VarName
                                 LanguageFortranTools.Anno) ->
                 Language.Fortran.Var
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   LanguageFortranTools.nullSrcSpan
                   (GHC.Types.:
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                         [Language.Fortran.Expr LanguageFortranTools.Anno])
                      (CodeEmitterUtils.varSizeVarName varName,
                       GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                            [Language.Fortran.Expr LanguageFortranTools.Anno])))) -}
c503113eabf760574b114f4a179ded4c
  varSizeVarName ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U(A,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                 case ds of wild { Language.Fortran.VarName ds1 str ->
                 Language.Fortran.VarName
                   @ LanguageFortranTools.Anno
                   (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         (GHC.CString.unpackFoldrCString#
                            @ b
                            CodeEmitterUtils.varSizeVarName1
                            c
                            n)
                         str)) }) -}
910d81c192cc66690c5d0842661c9baa
  varSizeVarName1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_sz"#) -}
"SC:$wsplitOnChar'0" [0] forall (sc :: [GHC.Types.Char])
                                (sc1 :: [GHC.Types.Char])
                                (sc2 :: GHC.Prim.Char#)
  CodeEmitterUtils.$wsplitOnChar' (GHC.Types.C# sc2) sc1 sc
  = CodeEmitterUtils.getModuleName_$s$wsplitOnChar' sc sc1 sc2
"SC:constructDeclTree0" forall (sc :: Language.Fortran.Decl
                                        (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]))
                               (sc1 :: [Language.Fortran.Decl
                                          (Data.Map.Internal.Map
                                             [GHC.Types.Char] [[GHC.Types.Char]])])
  CodeEmitterUtils.constructDeclTree (GHC.Types.:
                                        @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                        sc
                                        sc1)
  = CodeEmitterUtils.constructDeclTree_$sconstructDeclTree sc sc1
"SPEC/CodeEmitterUtils $fDataDecl @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                   (Data.Map.Internal.Map
                                                                                      GHC.Base.String
                                                                                      [GHC.Base.String]))
  Language.Fortran.$fDataDecl @ (Data.Map.Internal.Map
                                   GHC.Base.String [GHC.Base.String])
                              v
  = CodeEmitterUtils.$s$fDataDecl
"SPEC/CodeEmitterUtils $fDataDecl5 @ (Map String [String])" [orphan] forall ($dData1 :: Data.Data.Data
                                                                                          (Data.Map.Internal.Map
                                                                                             GHC.Base.String
                                                                                             [GHC.Base.String]))
  Language.Fortran.$fDataDecl5 @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               $dData1
  = CodeEmitterUtils.$s$fDataDecl5
"SPEC/CodeEmitterUtils $fDataDecl_$ctoConstr @ (Map String [String])" [orphan] [0] forall (w :: Data.Data.Data
                                                                                                  (Data.Map.Internal.Map
                                                                                                     GHC.Base.String
                                                                                                     [GHC.Base.String]))
  Language.Fortran.$fDataDecl_$ctoConstr @ (Data.Map.Internal.Map
                                              GHC.Base.String [GHC.Base.String])
                                         w
  = CodeEmitterUtils.$s$fDataDecl_$ctoConstr
"SPEC/CodeEmitterUtils $fDataFortran @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                      (Data.Map.Internal.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Internal.Map
                                      GHC.Base.String [GHC.Base.String])
                                 v
  = CodeEmitterUtils.$s$fDataFortran
"SPEC/CodeEmitterUtils $fDataFortran5 @ (Map String [String])" [orphan] forall ($dData1 :: Data.Data.Data
                                                                                             (Data.Map.Internal.Map
                                                                                                GHC.Base.String
                                                                                                [GHC.Base.String]))
  Language.Fortran.$fDataFortran5 @ (Data.Map.Internal.Map
                                       GHC.Base.String [GHC.Base.String])
                                  $dData1
  = CodeEmitterUtils.$s$fDataFortran5
"SPEC/CodeEmitterUtils $fDataFortran_$ctoConstr @ (Map
                                                    String [String])" [orphan] [0] forall (w :: Data.Data.Data
                                                                                                                                                         (Data.Map.Internal.Map
                                                                                                                                                            GHC.Base.String
                                                                                                                                                            [GHC.Base.String]))
  Language.Fortran.$fDataFortran_$ctoConstr @ (Data.Map.Internal.Map
                                                 GHC.Base.String [GHC.Base.String])
                                            w
  = CodeEmitterUtils.$s$fDataFortran_$ctoConstr
"SPEC/CodeEmitterUtils $fDataMap @ [Char] @ [String]" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                               [GHC.Types.Char])
                                                                      (v1 :: Data.Data.Data
                                                                               [GHC.Base.String])
                                                                      (v :: Data.Data.Data
                                                                              [GHC.Types.Char])
  Data.Map.Internal.$fDataMap @ [GHC.Types.Char]
                              @ [GHC.Base.String]
                              v
                              v1
                              v2
  = CodeEmitterUtils.$s$fDataDecl_$s$fDataMap
"SPEC/CodeEmitterUtils $fDataMap_$cdataCast2 @ [Char] @ [String]" [orphan] [0] forall (w2 :: GHC.Classes.Ord
                                                                                               [GHC.Types.Char])
                                                                                      (w1 :: Data.Data.Data
                                                                                               [GHC.Base.String])
                                                                                      (w :: Data.Data.Data
                                                                                              [GHC.Types.Char])
  Data.Map.Internal.$fDataMap_$cdataCast2 @ [GHC.Types.Char]
                                          @ [GHC.Base.String]
                                          w
                                          w1
                                          w2
  = CodeEmitterUtils.$s$fDataMap_$cdataCast2
"SPEC/CodeEmitterUtils $fDataProgUnit @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                       (Data.Map.Internal.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit @ (Data.Map.Internal.Map
                                       GHC.Base.String [GHC.Base.String])
                                  v
  = CodeEmitterUtils.$s$fDataProgUnit
"SPEC/CodeEmitterUtils $fDataProgUnit5 @ (Map String [String])" [orphan] forall ($dData1 :: Data.Data.Data
                                                                                              (Data.Map.Internal.Map
                                                                                                 GHC.Base.String
                                                                                                 [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit5 @ (Data.Map.Internal.Map
                                        GHC.Base.String [GHC.Base.String])
                                   $dData1
  = CodeEmitterUtils.$s$fDataProgUnit5
"SPEC/CodeEmitterUtils $fData[] @ (ProgUnit Anno)" [orphan] forall (v :: Data.Data.Data
                                                                           (Language.Fortran.ProgUnit
                                                                              LanguageFortranTools.Anno))
  Data.Data.$fData[] @ (Language.Fortran.ProgUnit
                          LanguageFortranTools.Anno)
                     v
  = CodeEmitterUtils.$s$fData[]
"SPEC/CodeEmitterUtils $fData[] @ [Char]" [orphan] forall (v :: Data.Data.Data
                                                                  [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] v
  = CodeEmitterUtils.$s$fDataDecl_$s$fData[]
"SPEC/CodeEmitterUtils $fData[]7 @ (ProgUnit Anno)" [orphan] forall ($dData :: Data.Data.Data
                                                                                 (Language.Fortran.ProgUnit
                                                                                    LanguageFortranTools.Anno))
  Data.Data.$fData[]7 @ (Language.Fortran.ProgUnit
                           LanguageFortranTools.Anno)
                      $dData
  = CodeEmitterUtils.$s$fData[]1
"SPEC/CodeEmitterUtils $fData[]7 @ [Char]" [orphan] forall ($dData :: Data.Data.Data
                                                                        [GHC.Types.Char])
  Data.Data.$fData[]7 @ [GHC.Types.Char] $dData
  = CodeEmitterUtils.$s$fData[]7
"SPEC/CodeEmitterUtils $fEqAttr @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                 (Data.Map.Internal.Map
                                                                                    GHC.Base.String
                                                                                    [GHC.Base.String]))
  Language.Fortran.$fEqAttr @ (Data.Map.Internal.Map
                                 GHC.Base.String [GHC.Base.String])
                            v
  = CodeEmitterUtils.$s$fEqAttr
"SPEC/CodeEmitterUtils $fEqAttr_$c/= @ (Map String [String])" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                         (Data.Map.Internal.Map
                                                                                            GHC.Base.String
                                                                                            [GHC.Base.String]))
  Language.Fortran.$fEqAttr_$c/= @ (Data.Map.Internal.Map
                                      GHC.Base.String [GHC.Base.String])
                                 $dEq
  = CodeEmitterUtils.$s$fEqAttr_$s$fEqAttr_$c/=
"SPEC/CodeEmitterUtils $fEqIntentAttr @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                       (Data.Map.Internal.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fEqIntentAttr @ (Data.Map.Internal.Map
                                       GHC.Base.String [GHC.Base.String])
                                  v
  = CodeEmitterUtils.$s$fEqIntentAttr
"SPEC/CodeEmitterUtils $fEqIntentAttr_$c/= @ (Map String [String])" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                               (Data.Map.Internal.Map
                                                                                                  GHC.Base.String
                                                                                                  [GHC.Base.String]))
  Language.Fortran.$fEqIntentAttr_$c/= @ (Data.Map.Internal.Map
                                            GHC.Base.String [GHC.Base.String])
                                       $dEq
  = CodeEmitterUtils.$s$fEqIntentAttr_$s$fEqIntentAttr_$c/=
"SPEC/CodeEmitterUtils $fEqMap @ [Char] @ [String]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                             [GHC.Base.String])
                                                                    (v :: GHC.Classes.Eq
                                                                            [GHC.Types.Char])
  Data.Map.Internal.$fEqMap @ [GHC.Types.Char]
                            @ [GHC.Base.String]
                            v
                            v1
  = CodeEmitterUtils.$s$fEqAttr_$s$fEqMap
"SPEC/CodeEmitterUtils $fEqMap_$c/= @ [Char] @ [String]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                     [GHC.Base.String])
                                                                         ($dEq :: GHC.Classes.Eq
                                                                                    [GHC.Types.Char])
  Data.Map.Internal.$fEqMap_$c/= @ [GHC.Types.Char]
                                 @ [GHC.Base.String]
                                 $dEq
                                 $dEq1
  = CodeEmitterUtils.$s$fEqAttr_$s$fEqMap_$c/=
"SPEC/CodeEmitterUtils $fEqVarName @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                    (Data.Map.Internal.Map
                                                                                       GHC.Base.String
                                                                                       [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = CodeEmitterUtils.$s$fEqVarName
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

