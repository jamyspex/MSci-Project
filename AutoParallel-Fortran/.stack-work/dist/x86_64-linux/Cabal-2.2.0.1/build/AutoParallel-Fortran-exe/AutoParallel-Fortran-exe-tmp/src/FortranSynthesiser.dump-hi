
==================== FINAL INTERFACE ====================
2018-11-16 12:45:25.022098744 UTC

interface main:FortranSynthesiser 8043
  interface hash: 80efe961ed672e8940058d6f5dc566b5
  ABI hash: 63731a14e36fadd2c470227857a1a3a1
  export-list hash: 8ef0a670b6211351916e8803e2605336
  orphan hash: 00afa1c980476cd23e68f6ce23627d2c
  flag hash: 7853c119b27f3f568e863cba4679c19c
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  FortranSynthesiser.checkForImplicitNone
  FortranSynthesiser.defaultFilename
  FortranSynthesiser.extractParamDecls
  FortranSynthesiser.generateKernelName
  FortranSynthesiser.generateKernelNameOLD
  FortranSynthesiser.generateOriginalFileName
  FortranSynthesiser.generateRangeRelDecls
  FortranSynthesiser.generateStateName
  FortranSynthesiser.getArgsAndLocalVarsForLoopBody
  FortranSynthesiser.getLocalDeclStrs
  FortranSynthesiser.getLocalDeclStrs_OLD
  FortranSynthesiser.getMissingArgDeclStrs
  FortranSynthesiser.isImplicitNone
  FortranSynthesiser.matchParameterDecl
  FortranSynthesiser.matchVarNameInDecl
  FortranSynthesiser.produceCodeBlock
  FortranSynthesiser.produceCode_fortran
  FortranSynthesiser.produceCode_prog
  FortranSynthesiser.produceCode_progUnit
  FortranSynthesiser.readOriginalFileLines
  FortranSynthesiser.removeIntent
  FortranSynthesiser.restoreUsedModuleDecls
  FortranSynthesiser.restoreUsedModuleDecls'
  FortranSynthesiser.synthesisElses
  FortranSynthesiser.synthesisUses
  FortranSynthesiser.synthesiseArgList
  FortranSynthesiser.synthesiseAssg
  FortranSynthesiser.synthesiseAttr
  FortranSynthesiser.synthesiseAttrList
  FortranSynthesiser.synthesiseBaseType
  FortranSynthesiser.synthesiseBufferAccess
  FortranSynthesiser.synthesiseBufferDeclaration
  FortranSynthesiser.synthesiseBufferIndexNames
  FortranSynthesiser.synthesiseBufferLoads
  FortranSynthesiser.synthesiseBufferLoads_kernel
  FortranSynthesiser.synthesiseBufferMake
  FortranSynthesiser.synthesiseBufferStores
  FortranSynthesiser.synthesiseCall
  FortranSynthesiser.synthesiseDecl
  FortranSynthesiser.synthesiseDeclList
  FortranSynthesiser.synthesiseDecl_Acc
  FortranSynthesiser.synthesiseDecls
  FortranSynthesiser.synthesiseDecls_Acc
  FortranSynthesiser.synthesiseESeq
  FortranSynthesiser.synthesiseFor
  FortranSynthesiser.synthesiseIf
  FortranSynthesiser.synthesiseInitModule
  FortranSynthesiser.synthesiseKernelCall
  FortranSynthesiser.synthesiseKernelCaseAlternative
  FortranSynthesiser.synthesiseKernels
  FortranSynthesiser.synthesiseOpenCLBufferRead
  FortranSynthesiser.synthesiseOpenCLBufferWrite
  FortranSynthesiser.synthesiseOpenCLMap
  FortranSynthesiser.synthesiseOpenCLReduce
  FortranSynthesiser.synthesiseRangeExpr
  FortranSynthesiser.synthesiseSetOclArg
  FortranSynthesiser.synthesiseSizeStatements
  FortranSynthesiser.synthesiseSizeStatements_kernel
  FortranSynthesiser.synthesiseStateDefinitions
  FortranSynthesiser.synthesiseSuperKernel
  FortranSynthesiser.synthesiseSuperKernelModule
  FortranSynthesiser.synthesiseSuperKernelName
  FortranSynthesiser.synthesiseType
  FortranSynthesiser.synthesiseUse
  FortranSynthesiser.traverseDSeq
module dependencies: CodeEmitterUtils F95IntrinsicFunctions
                     FortranGenerator Language.Fortran Language.Fortran.Lexer
                     Language.Fortran.Parser Language.Fortran.PreProcess
                     LanguageFortranTools MiniPP Platform PreProcessor SubroutineTable
                     Warning
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      haskell-src-1.0.3.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      process-1.6.3.0 syb-0.7 text-1.2.3.1 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Data b150502d549600eff3202c16ff6cf22d
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  containers-0.5.11.0:Data.Map.Internal e02d23495520de11b8e9f3c9c93a4d11
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 7c23d64c612d25581166e736f62b7377
import  -/  directory-1.3.1.5:System.Directory 3989d404cf62c9bbd5d0a078de68acbe
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  CodeEmitterUtils 8c8f697b86f52412aeee8a88a6067ee0
  exports: e29a2b01fb771904633bff8cc099ecaa
  KernelArgsIndexMap a362b65ea0725f7db5a6bef1066d4d7e
  adaptForReadScalarDecls 0ef99613439bca815c4b15fea9bf651f
  anyChildGenerated a47909ed49b643642a451b7b1cc8c3d3
  collectDecls 8994ef720c2d73bd8ad683e0a4ccd151
  convertScalarToOneDimArray 658c1fdf379023308f5a12ebbfde92b9
  emitDeclStr d1e68a6d5cf2ea0c71d0302649f9d9a9
  extractDeclaration_varname 4c56904ee29d2c1912319b753b7323b8
  extractKernelArguments adc65973956af36e0df4f009aa573df4
  extractOriginalCode a640a75ad26214790854876014b66df1
  extractOriginalCode_Offset 85fbe1bb5c30c6e9e9bd2f743838c825
  extractOriginalCode_Offset1 7cf5cf03accdc2cc152e43124b67f738
  generateGlobalReductionArray e32ea7aa7f370591cd37a7e5c600d788
  generateLocalReductionArray 841020e5a975073c6d34180c8c79fc75
  generateLocalReductionVar c345185ec1f0c0d639145b173d02fa1e
  generateReductionIterator c24e7fcca4cd8df63c3405344e647fc8
  getDeclRank e376d7a2bfc0222995189db58df374e5
  getFirstFortranSrc c47c1eb88f9f069c0886fcbb9ccdcd2c
  getGlobalID efeae72fe364812039d27cb38a5f64be
  getGroupID a3fe9fda6b7355d8626c16b16b0333ed
  getLocalId a71dbee76e7eee9fe2b46d20683876e4
  getModuleName 08c878a160b5f82d2e0b7b82f5587526
  initModuleName 39265a81956d2e3703f93bbf9d45d975
  isGenerated a6cbf5ec63bb0eac68e262025d1d96ad
  localChunkSize 39b24b427051956c8f7a41962d041055
  localMemBarrier c6187a0f6b074f2bdce3f4f00e82b819
  localMemSpaceAcc 41fdfd73416017a116e661dbf2e6645e
  nthVar 6f0d6c0d1160f43374c27dd7871487b3
  nunitsVar 1451401abe946cff7de97b4d11538bff
  paramCheck_attr 998d53245debe63392dc7d8e23094cb5
  reductionIteratorDecl e4649905d609eea8bf7ef6b4026f3327
  removeIntentFromDecl 54ba55367b26fceb5c5f8383250325f3
  scalarPointerVarName a0992b634ba3ae26ac202d5a574dc0ba
  startPosition e3b5edc266de575d2450102fe0d7dc12
  statePtrDecl 6fbf470467cb76ebc02fdb09af684f31
  statePtrVarName 9c984821f0774a5a1178f268f6750ce2
  stateVarDecl e74fd8294e53b2d82c62b6c144ccd828
  stateVarName 7ce6027e1fbd8db817f4221bb775d0d5
  stripDeclAttrs 9ed59ae0657e5329ed1f0cc9026b0602
  varBufVarName 531c1d60d8048f848a8a3ba87087ab56
  varSizeVarName c503113eabf760574b114f4a179ded4c
import  -/  FortranGenerator 2f897b974498c9ae931dccb37cb72ff1
  exports: c3d733850e89ef125b28092452fc15ee
  adaptOriginalDeclaration_varname 9402dd8b66a21c32f67e420034b9e01b
  declareGlobalReductionArray 2897834a03a5f427c98bbf7ca40ad7e9
  declareLocalReductionArray f7d01c51a6e4aea70bdf3870dce43e2d
  declareScalarPointer bf98e1b56aa63e4f6cb88b3b05d36d40
  generateArgList 8d6ef0f8e90c4e4bd9a29ab4e4073dc5
  generateFinalHostReduction 7598762235367b3dcb623a9f3a11a867
  generateGlobalWorkItemsExpr 3a01abbb82d8a3ffee4ff72f77afe6df
  generateIfNoElse 5969bf7875def38abf819bac55926c03
  generateKernelDeclarations 35903063d7cac8c9d2752ad046977fb4
  generateLoop bfbaf6eb782414dccc202e1a7f0eb255
  generateLoopInitialisers 3e194c168efcc19873e375a64e8c66ff
  generateReductionArrayAssignment be358623d56ef441e876e87d369597e8
  generateSizeStatements_decls 1e38414cad22b91b2259b1919eb64298
  generateWorkGroupReduction 36e8f24d81f2e92d96ee18967cb81b71
import  -/  Language.Fortran e2add56600673959dbdfe1ac093795c9
  exports: 6ca1e7b188145fc0c602707ea4a1c428
  ArgList b3f677704555eeaf5d66d846d43ac778
  ArgList 6304956f2901eead56a8fac1e90d4904
  ArgName 9acaf710a8bc920f63e26e943ae5d9fe
  Assg c3a5a5c7c0380c697e6a5cda4cc060bd
  Attr 3b46645d85b9c008a9510c0f3d8ec026
  BaseType 4771b9af523aad0f39b02040c5046e99
  BaseType c66c0bcbb42951ba147c66147650e364
  Bin ce8c88108b295f664e1eddaeffc220f4
  Block d58adfcbfbefac7829b419bc0d801569
  Block c8f6dc9d55c3b3cbc94e3fb30057f310
  Call ecfba85593faf88229821091dac9ee3b
  Character c1880a43c50c1e75d2e98c7d3e7a5ed6
  Con a93b732ad49402af2de80d19cc1ec61c
  DSeq 47a895ea6d8257711194047a71e0445b
  Decl bf5604fd57dfb9f698111c9b30ee5605
  Decl e30f41d3f2effdd4b4a22fa8cf8c0055
  Dimension b79abe0a80c3378dabfaecd6caadd60e
  ESeq 6a34050ad6d9661fc16dd8420fa213a1
  Expr 6304956f2901eead56a8fac1e90d4904
  FSeq 779df6dd417159b80814ee837ce7e2c0
  For 5816e0af6d8df16d1771d2006bcf3abf
  Fortran cab0cd6287333175c6b9d87427982518
  If 70f325448a0ac0d3e601c0f9e1e99ec6
  In 806c6682e4ffdab4776e23b5c0c82c42
  Integer 8082a45204513974002220b5341d5b33
  Intent 64eed4dba58057526c5557fc43b7435b
  Main 629cfaddbdc7c7695ac0c3caf82e7b4f
  Module 3f2427a8624160bd644d1d74ace31090
  NullDecl 45d5aec73d28a957747606cd484f0d37
  NullExpr adfc15f00ad4bfbe033d167983c94995
  NullStmt ea47243779318c110f98776b706a62f7
  OpenCLBufferRead 9d6facba2ab5a4549c7d415b86d2a12f
  OpenCLBufferWrite fd57e16ab494e9f928a6973a79663ac9
  OpenCLMap e48fa1b14eab97eb69b2edc5f2c10ce8
  OpenCLReduce d14e8e442939b0e4bb37da5a0da04484
  Out 73ab48e8c681e54cbcbcdb76de251cbb
  Parameter 924117a56a70c8f286ca9bc6dcb90263
  ProgUnit 573fa2fe80c5713ab0c018712ac118d8
  Program 607f4435fb994a8c5b83bd9f7709b3c3
  Real efcfab18e0d8f1dbab722c8ce1c4fbc7
  RelLT 99f52e83374f4ebfeeb48496c9e98b9d
  SrcLoc af6592465c21031ac12547ec948ff586
  SrcSpan 667dadf32292a4602702274000a648d8
  Sub 5dc1ce79c5eeb19c143322b2405ae2c8
  SubName 9b06404c654299d20e94c12ba761aaab
  Type 6b8210ea10d2538ca4598cfb9584c470
  Use 8c26fe492485a1d27d329f8234d19f1d
  Uses 8347678f6676bd3eacaa7f87ac9bd303
  VarName a39ab087efdb6eba24247b07097f591c
  VarName 361ec85699986b0b7f4d68a05374d64d
  srcSpan c13b4efea655d094fcf2aa6fb6fdfaaf
import  -/  Language.Fortran.Parser 94f87e312918e2e0d84323268977b8af
  exports: 811e5416839040be903a08c9e7bce6b9
  context_parse 6610a48809622d4a196db687835026bd
import  -/  LanguageFortranTools 737e8abc5de089abcd0ce62660f9d159
  exports: a5a994dcb8ba92c93a8a354a063275b0
  Anno 1420203ed9c39fcf982d2ff37c01ae68
  ModuleVarsTable 364600a9c3152b88c1d8dd54bf6543e7
  appendFortran_recursive a4e0a6baa3b66014183e44ccf0a12047
  applyGeneratedSrcSpans c887472fe8f7b8f174b1bbcd7a24b63d
  commentSeparator a1809b3eac0161e3eb38096b43673ea6
  compilerName 716783fc2180cf5d40b0847b268cbee2
  extractAllVarNames ee05f387e04b6558115e3d72c09a12c7
  extractArgName 20910af79192242a6c20a87676f19776
  extractAssigneeFromDecl d4ecaf52b7147befe912a1b31720faf2
  extractBaseType 9c876ee28a1e0ede2d9dfb4c0dd4f4ab
  extractBufferReads 5c8431efe64da625bcd884a777cf7d00
  extractBufferWrites 41e6c1201ca2212536e0a9c5c5f69678
  extractIndent 1772713b50a8871ac6d17dec231b70bb
  extractKernels ad07c0817a81bb6887a1071b5ccd2396
  extractOpenCLReduces fd9b35e80a59167580dd0eec2038c50b
  extractReductionVarNames f1c370a27378ad56f7061a79135d5ec4
  extractVarNames 920113507cf2d36f1a1834c3a88c2c59
  findDeclLine 950eed49da10706f0d7595c6d086e83b
  generateAdditionExpr ebefe7ed371ea5a025889e090db2effe
  generateAssgCode 20710a75ff0344432f71c139fc360606
  generateDivisionExpr 93d1e6cd3eb2354ecf60e3f1d019d728
  generateIntConstant 6662a08fe79ba459b5e48087464e69d4
  generateProductExpr a907e73ddd0bd196a78de8c20b92f95f
  generateSubtractionExpr 5bd05c27c551cc874ced7ab020963e53
  generateVar 15f2fb62881f8fb31d49eabe4798345c
  getLoopVars 56d05664396f319d962054d4d9204453
  getSrcSpanNonIntersection 888ca4734f39f6a84076707dd127b382
  getUses 546711d9aa71da48ce05b7658ca41089
  listConcatUnique 28a5be85845b4739b6b5219484213c70
  listIntersection a852f434f0160ba789329974e5d10cb7
  listRemoveDuplications cc90c431c334b3429c5de18c32c0abd0
  listSubtract 40ed5a52f1d2f2210a51ecab157379fd
  nullAnno b5ec3f8914fec256ad2e53b761b9bd52
  nullSrcSpan d9f6701836bf1a31425d57566b44db7b
  outputExprFormatting 071110acbe7f8df82378c3e15acadb0d
  outputTab e52db0602fff64fd09a0948045bb72a5
  replaceAllOccurences_varnamePairs ed241b9e5508b14981874e4cbdda5859
  runCpp 8eb1c63d1865e2844971cfc264b7ab2c
  split 0b04a17d804ef793673f1d8e5862fa5d
  tabInc ff394e4c2d3b4f4a9436013fcb176452
  varNameStr 4f55193896441ff99d96346c5aacd560
import  -/  MiniPP a097deb7cf80506ea342d468c387cbc7
  exports: 333d60b501b5f68150299a62b5d71c5d
  miniPPD b56de9bd6a2b35dda368ae986f54e527
  showSubName 040e81eadbd4a8c13158384a98b5db52
import  -/  Platform f89bd200c7cba5fa5e54a4e955c967a6
  exports: 612c87f0d4dc6be168827153c73a5d6a
  CPU 7c0e3beaf4dc92e74cf3f853f62a97a7
  GPU ce7eeea50c582c5c921f4fd476914b6b
  Platform bf96e413e1e314750414fc6f536fbeb9
import  -/  SubroutineTable 489825aeafffaefb2cc10b4978448116
  exports: 2909798395eea1f9c7c6a08b6d2a2760
  ArgumentTranslation 8348e1a77786e26b1f7b22c18902f0b2
  SubroutineArgumentTranslationMap df561bf3ea00515057d6f613cca42ac5
  SubroutineTable 5a91cdd7134da8dba28aec7592f36133
  emptyArgumentTranslation 3e9b0463e44bc3bbfaf2a704af2cd611
  extractSubroutines f854b3ebdcc0b473eecaa94fdd4aae62
  getSubroutineArgumentTranslation e63282a12c346d0a2b049af61157e4b2
  subAst 8e8730275a44d60a77f7af5bd3645916
  translateArguments 31c40fcf4e74076c79a8ed17a0fdcb58
import  -/  Warning b5ec059e95d91647264308e84d2ed3ea
  exports: d9b5419f40dd7650497f479a7fe0214a
import  -/  syb-0.7:Data.Generics 2ddc257f9ac35414fc37ff4d19b4d388
import  -/  syb-0.7:Data.Generics.Aliases a5097c06261967df51d59247bf1d4958
import  -/  syb-0.7:Data.Generics.Schemes 58bc96c8ed0bed4ad53424f237efe8b8
d76135032a722e84fb899f8e0fcb6207
  $s$fDataArg ::
    Data.Data.Data
      (Language.Fortran.Arg
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Arg
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Arg
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataArg15
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Arg
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataArg_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataArg_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Arg
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   case ds of wild { Language.Fortran.Arg ds1 ds2 ds3 ->
                   Language.Fortran.$cArg })
                  (\ (ds :: Language.Fortran.Arg
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tArg)
                  (Language.Fortran.$fDataArg_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Arg
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataArg6
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Arg
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Arg
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataArg_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataArg_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataArg_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataArg_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataArg_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataArg_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataArg_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap) -}
4bd523fe432a8ae6585ba9beb78ae591
  $s$fDataArg_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ (Data.Map.Internal.Map [GHC.Types.Char])
                     @ [GHC.Base.String]
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ (* -> *)
                        @ Data.Map.Internal.Map
                        @ [GHC.Types.Char]
                        Data.Map.Internal.$fDataMap17
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7))
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ [GHC.Types.Char]
                        Data.Data.$fData[]3
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7)))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Data.Map.Internal.Map
                                                                       [GHC.Types.Char]
                                                                       [GHC.Base.String]>_N)
                  (Data.Map.Internal.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.fromListConstr)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.mapDataType)
                  (\ @ t :: * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d. Data.Data.Data d => c (t d)) ->
                   GHC.Base.Nothing
                     @ (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])))
                  (Data.Map.Internal.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap6
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R)
                  (Data.Map.Internal.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     FortranSynthesiser.$s$fDataArg_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
56ca9b4dcf036b19a80d552c24db4e89
  $s$fDataArg_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]3
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ GHC.Types.Char
                        Data.Data.$fData[]3
                        Data.Data.$fDataChar7))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[[GHC.Types.Char]]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ (ds :: [[GHC.Types.Char]]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [[GHC.Types.Char]]) -> Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c [[GHC.Types.Char]]))
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
6923d9339d425b908538b941c1993834
  $s$fDataBlock ::
    Data.Data.Data
      (Language.Fortran.Block
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Block
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Block
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataBlock9
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Block
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataBlock_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Block
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   case ds of wild { Language.Fortran.Block ds1 ds2 ds3 ds4 ds5 ds6 ->
                   Language.Fortran.$cBlock })
                  (\ (ds :: Language.Fortran.Block
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tBlock)
                  (Language.Fortran.$fDataBlock_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Block
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataBlock1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Block
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Block
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataBlock_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataBlock_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap) -}
a535b5dfaf035714c626b2febad9a732
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Fortran
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataFortran6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Fortran
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Fortran
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tFortran)
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Fortran
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataFortran1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Fortran
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap) -}
51d0f25002cb413782c2cf494c588981
  $s$fDataMap_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   (w3 :: Data.Typeable.Internal.Typeable t) ->
                 Data.Map.Internal.$w$cdataCast2
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   Data.Data.$fData[]_$s$fData[]
                   FortranSynthesiser.$s$fDataArg_$s$fData[]
                   @ t
                   @ c
                   w3) -}
a1f9fd9b77a99ae7c58e4eb33f2cd6ab
  $s$fDataProgUnit ::
    Data.Data.Data
      (Language.Fortran.ProgUnit
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ProgUnit
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.ProgUnit
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataProgUnit6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.ProgUnit
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataProgUnit_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (\ (ds :: Language.Fortran.ProgUnit
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   case ds of wild {
                     Language.Fortran.Main ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cMain
                     Language.Fortran.Sub ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cSub
                     Language.Fortran.Function ds1 ds2 ds3 ds4 ds5 ds6 ds7
                     -> Language.Fortran.$cFunction
                     Language.Fortran.Module ds1 ds2 ds3 ds4 ds5 ds6 ds7
                     -> Language.Fortran.$cModule
                     Language.Fortran.BlockData ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cBlockData
                     Language.Fortran.PSeq ds1 ds2 ds3 ds4 -> Language.Fortran.$cPSeq
                     Language.Fortran.Prog ds1 ds2 ds3 -> Language.Fortran.$cProg
                     Language.Fortran.NullProg ds1 ds2 -> Language.Fortran.$cNullProg
                     Language.Fortran.IncludeProg ds1 ds2 ds3 ds4
                     -> Language.Fortran.$cIncludeProg })
                  (\ (ds :: Language.Fortran.ProgUnit
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tProgUnit)
                  (Language.Fortran.$fDataProgUnit_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.ProgUnit
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataProgUnit1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.ProgUnit
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.ProgUnit
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataProgUnit_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fDataArg_$s$fDataMap) -}
d0d29b8b213c6e7e0fd7a23ce1da5fd1
  $s$fData[] ::
    Data.Data.Data
      [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     Data.Data.$fData[]3
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ Language.Fortran.ProgUnit
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        Language.Fortran.$fDataProgUnit6
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ (Data.Map.Internal.Map [GHC.Types.Char])
                           @ [GHC.Base.String]
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ (* -> *)
                              @ Data.Map.Internal.Map
                              @ [GHC.Types.Char]
                              Data.Map.Internal.$fDataMap17
                              (Data.Typeable.Internal.mkTrApp
                                 @ *
                                 @ *
                                 @ []
                                 @ GHC.Types.Char
                                 Data.Data.$fData[]3
                                 Data.Data.$fDataChar7))
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ [GHC.Types.Char]
                              Data.Data.$fData[]3
                              (Data.Typeable.Internal.mkTrApp
                                 @ *
                                 @ *
                                 @ []
                                 @ GHC.Types.Char
                                 Data.Data.$fData[]3
                                 Data.Data.$fDataChar7)))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[Language.Fortran.ProgUnit
                                                                        LanguageFortranTools.Anno]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgunfold
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (\ (ds :: [Language.Fortran.ProgUnit LanguageFortranTools.Anno]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [Language.Fortran.ProgUnit LanguageFortranTools.Anno]) ->
                   Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c [Language.Fortran.ProgUnit LanguageFortranTools.Anno]))
                  (Data.Data.$fData[]_$cgmapT
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapQl
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapQr
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapQ
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapQi
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapM
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapMp
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit)
                  (Data.Data.$fData[]_$cgmapMo
                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                     FortranSynthesiser.$s$fDataProgUnit) -}
aca58c1e338862910ddc17a0b9b23162
  $s$fData[]1 ::
    Data.Typeable.Internal.TypeRep
      [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   Data.Data.$fData[]3
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.ProgUnit
                      @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                      Language.Fortran.$fDataProgUnit6
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map [GHC.Types.Char])
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ [GHC.Types.Char]
                            Data.Map.Internal.$fDataMap17
                            (Data.Typeable.Internal.mkTrApp
                               @ *
                               @ *
                               @ []
                               @ GHC.Types.Char
                               Data.Data.$fData[]3
                               Data.Data.$fDataChar7))
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ [GHC.Types.Char]
                            Data.Data.$fData[]3
                            (Data.Typeable.Internal.mkTrApp
                               @ *
                               @ *
                               @ []
                               @ GHC.Types.Char
                               Data.Data.$fData[]3
                               Data.Data.$fDataChar7))))) -}
3ee6a8dea1d123ea64b67a8f8b850a9a
  $s$fData[]7 :: Data.Typeable.Internal.TypeRep [[GHC.Types.Char]]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ [GHC.Types.Char]
                   Data.Data.$fData[]3
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ []
                      @ GHC.Types.Char
                      Data.Data.$fData[]3
                      Data.Data.$fDataChar7)) -}
ac954a678a35fff1b2bda81d21c6f0ca
  $s$fEqFortran ::
    GHC.Classes.Eq
      (Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqBlock_$c==1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqFortran_$s$fEqMap)
                  FortranSynthesiser.$s$fEqFortran_$s$fEqFortran_$c/= -}
c7eaa8efe6564fdefe0505c32d32c129
  $s$fEqFortran_$s$fEqFortran_$c/= ::
    Language.Fortran.Fortran
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                   (y :: Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case Language.Fortran.$fEqBlock_$c==1
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        FortranSynthesiser.$s$fEqFortran_$s$fEqMap
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
62867485c2713ba20223bc55d79989f4
  $s$fEqFortran_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Internal.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  FortranSynthesiser.$s$fEqFortran_$s$fEqMap_$c/= -}
b9200adf781c2e8d3c690ed75bac6dce
  $s$fEqFortran_$s$fEqMap_$c/= ::
    Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEq[]_$s$fEq[]2
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bb5953e44b0617e5eb61d6726f990b2f
  $s$fEqUses ::
    GHC.Classes.Eq
      (Language.Fortran.Uses
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Uses
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqBlock_$c==4
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqFortran_$s$fEqMap)
                  (Language.Fortran.$fEqUses_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqFortran_$s$fEqMap) -}
856a40f646d05ebe466dd521381c77ba
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqFortran_$s$fEqMap)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fEqFortran_$s$fEqMap) -}
879653aafc66f8caa77c391b284d7d4f
  $s$fOrdMap ::
    GHC.Classes.Ord
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  FortranSynthesiser.$s$fEqFortran_$s$fEqMap
                  (Data.Map.Internal.$fOrdMap_$ccompare
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$c<
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$c<=
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$c>
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$c>=
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$cmax
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$cmin
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2) -}
68a59fc15ea47c12384803c20b2b7e18
  $s$fOrdVarName ::
    GHC.Classes.Ord
      (Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  FortranSynthesiser.$s$fEqVarName
                  (Language.Fortran.$fOrdVarName_$ccompare
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdMap)
                  (Language.Fortran.$fOrdVarName_$c<
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdMap)
                  (Language.Fortran.$fOrdVarName_$c<=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdMap)
                  (\ (a :: Language.Fortran.VarName
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                     (b :: Language.Fortran.VarName
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$fOrdVarName_$c<
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdMap
                     b
                     a)
                  (Language.Fortran.$fOrdVarName_$c>=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdMap)
                  (Language.Fortran.$fOrdVarName_$cmax
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdMap)
                  (Language.Fortran.$fOrdVarName_$cmin
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     FortranSynthesiser.$s$fOrdMap) -}
a379cb7ef4539d5a73e8fb7a6ac73ab5
  $s$fOrdVarName_$cmax ::
    Language.Fortran.VarName
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w362 :: Language.Fortran.VarName
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                   (w363 :: Language.Fortran.VarName
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case w362 of ww { Language.Fortran.VarName ww1 ww2 ->
                 case w363 of ww3 { Language.Fortran.VarName ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ ([GHC.Types.Char], [GHC.Base.String])
                        (GHC.Classes.$fOrd(,)
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           GHC.Classes.$fOrd[]_$s$fOrd[]1
                           GHC.Classes.$fOrd[]_$s$fOrd[]2)
                        (Data.Map.Internal.$fDataMap_go
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                           ww4)
                        (Data.Map.Internal.$fDataMap_go
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                           ww1) of wild {
                   GHC.Types.LT
                   -> Language.Fortran.VarName
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        ww1
                        ww2
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww5 ww2 of wild1 {
                        DEFAULT
                        -> Language.Fortran.VarName
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             ww4
                             ww5
                        GHC.Types.LT
                        -> Language.Fortran.VarName
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             ww1
                             ww2 }
                   GHC.Types.GT
                   -> Language.Fortran.VarName
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        ww4
                        ww5 } } }) -}
27a3d04e7fed17d0091aed186b0042ae
  $s$fOrdVarName_$cmin ::
    Language.Fortran.VarName
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w362 :: Language.Fortran.VarName
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                   (w363 :: Language.Fortran.VarName
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case w362 of ww { Language.Fortran.VarName ww1 ww2 ->
                 case w363 of ww3 { Language.Fortran.VarName ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ ([GHC.Types.Char], [GHC.Base.String])
                        (GHC.Classes.$fOrd(,)
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           GHC.Classes.$fOrd[]_$s$fOrd[]1
                           GHC.Classes.$fOrd[]_$s$fOrd[]2)
                        (Data.Map.Internal.$fDataMap_go
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                           ww4)
                        (Data.Map.Internal.$fDataMap_go
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                           ww1) of wild {
                   GHC.Types.LT
                   -> Language.Fortran.VarName
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        ww4
                        ww5
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww5 ww2 of wild1 {
                        DEFAULT
                        -> Language.Fortran.VarName
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             ww1
                             ww2
                        GHC.Types.LT
                        -> Language.Fortran.VarName
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             ww4
                             ww5 }
                   GHC.Types.GT
                   -> Language.Fortran.VarName
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        ww1
                        ww2 } } }) -}
176843d441ea94d9d64847faf52767ce
  $sfromList ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Data.Set.Internal.Set
         (Language.Fortran.VarName LanguageFortranTools.Anno)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.Fortran.VarName
                             LanguageFortranTools.Anno]) ->
                 case ds of wild {
                   []
                   -> Data.Set.Internal.Tip
                        @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { Language.Fortran.VarName ipv ipv1 ->
                           Data.Set.Internal.Bin
                             @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                             1#
                             dt
                             (Data.Set.Internal.Tip
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                             (Data.Set.Internal.Tip
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno)) }
                        : ipv ipv1
                        -> case x of ww { Language.Fortran.VarName ww1 ww2 ->
                           case ipv of ww3 { Language.Fortran.VarName ww4 ww5 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ ([GHC.Types.Char], [GHC.Base.String])
                                  FortranSynthesiser.$sfromList1
                                  (Data.Map.Internal.$fDataMap_go
                                     @ [GHC.Types.Char]
                                     @ [GHC.Base.String]
                                     (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                                     ww1)
                                  (Data.Map.Internal.$fDataMap_go
                                     @ [GHC.Types.Char]
                                     @ [GHC.Base.String]
                                     (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                                     ww4) of wild2 {
                             GHC.Types.LT
                             -> FortranSynthesiser.$sfromList_$s$wgo3
                                  ww4
                                  ww5
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                     1#
                                     ww
                                     (Data.Set.Internal.Tip
                                        @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                                     (Data.Set.Internal.Tip
                                        @ (Language.Fortran.VarName LanguageFortranTools.Anno)))
                                  1#
                             GHC.Types.EQ
                             -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww2 ww5 of wild3 {
                                  DEFAULT
                                  -> FortranSynthesiser.$sfromList_$sgo4
                                       ww3
                                       ipv1
                                       (Data.Set.Internal.Bin
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                          1#
                                          ww
                                          (Data.Set.Internal.Tip
                                             @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                                          (Data.Set.Internal.Tip
                                             @ (Language.Fortran.VarName
                                                  LanguageFortranTools.Anno)))
                                  GHC.Types.LT
                                  -> FortranSynthesiser.$sfromList_$s$wgo3
                                       ww4
                                       ww5
                                       ipv1
                                       (Data.Set.Internal.Bin
                                          @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                          1#
                                          ww
                                          (Data.Set.Internal.Tip
                                             @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                                          (Data.Set.Internal.Tip
                                             @ (Language.Fortran.VarName
                                                  LanguageFortranTools.Anno)))
                                       1# }
                             GHC.Types.GT
                             -> FortranSynthesiser.$sfromList_$sgo4
                                  ww3
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                     1#
                                     ww
                                     (Data.Set.Internal.Tip
                                        @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                                     (Data.Set.Internal.Tip
                                        @ (Language.Fortran.VarName
                                             LanguageFortranTools.Anno))) } } } } }) -}
09fd400bee29fa3ae7cbea5ba9743367
  $sfromList1 ::
    GHC.Classes.Ord ([GHC.Types.Char], [GHC.Base.String])
  {- Unfolding: (GHC.Classes.$fOrd(,)
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   GHC.Classes.$fOrd[]_$s$fOrd[]1
                   GHC.Classes.$fOrd[]_$s$fOrd[]2) -}
80cfbf463c11fdd2385c659f85ad342b
  $sfromList_$s$wgo3 ::
    Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]
    -> [GHC.Types.Char]
    -> [Language.Fortran.VarName
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Data.Set.Internal.Set
         (Language.Fortran.VarName
            (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]))
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set
         (Language.Fortran.VarName LanguageFortranTools.Anno)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,1*U><L,U> -}
9ffe02d79d271a16eb8926779ef5310a
  $sfromList_$sgo4 ::
    Language.Fortran.VarName
      (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.VarName
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> Data.Set.Internal.Set
         (Language.Fortran.VarName
            (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]))
    -> Data.Set.Internal.Set
         (Language.Fortran.VarName LanguageFortranTools.Anno)
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
a299675fa33836a3c2cbe6bf956c2d0f
  $sinsert_go13 ::
    GHC.Classes.Ord k1 =>
    k1
    -> k1
    -> a1
    -> Data.Map.Internal.Map k1 a1
    -> Data.Map.Internal.Map k1 a1
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><L,U><S,1*U> -}
1cea1a75a765f304709c33c82d02207f
  $sinsert_go3 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
4b6793e47a0ffe34f3104c86555f893f
  $slookup1 ::
    Language.Fortran.Variable
    -> Data.Map.Internal.Map Language.Fortran.Variable a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
2d8be7f107b066b7f45e91cae81099c7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FortranSynthesiser.$trModule3
                   FortranSynthesiser.$trModule1) -}
970ecdcef61781be85262f9a7e87d778
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FortranSynthesiser.$trModule2) -}
8feebcf431a70522641be6a2afcdc1c2
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FortranSynthesiser"#) -}
3967b1095f4993dd9fe33c60a26e1bf2
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS FortranSynthesiser.$trModule4) -}
e6a6b6a997c42e94fb825be0c6cd097e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
67d7306088869b75a4a27d31de746596
  $wcheckForImplicitNone ::
    GHC.Base.String -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   ds :: ([GHC.Base.String], GHC.Base.String)
                   = FortranSynthesiser.$wgo
                       (Data.OldList.lines w)
                       (GHC.Types.[] @ GHC.Base.String)
                       (GHC.Types.[] @ GHC.Types.Char)
                 } in
                 (# case ds of wild { (,) other_code_lines maybeImplicitNone ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Data.OldList.unlines other_code_lines)
                      FortranSynthesiser.checkForImplicitNone1 },
                    case ds of wild { (,) other_code_lines maybeImplicitNone ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      maybeImplicitNone
                      FortranSynthesiser.checkForImplicitNone1 } #)) -}
2f58d35fdf64db1fcb6e0df8913d1d45
  $wgenerateKernelName ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <L,1*U><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (ww :: GHC.Base.String)
                   (ww1 :: GHC.Types.Int) ->
                 case CodeEmitterUtils.getModuleName_$s$wsplitOnChar'
                        ww
                        (GHC.Types.[] @ GHC.Types.Char)
                        '/'# of ww2 { (#,#) ww3 ww4 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (CodeEmitterUtils.getModuleName_$sgo
                      (GHC.List.lastError @ GHC.Base.String)
                      ww3
                      ww4)
                   (GHC.CString.unpackAppendCString#
                      FortranSynthesiser.generateKernelName1
                      (GHC.Base.++
                         @ GHC.Types.Char
                         w
                         (GHC.CString.unpackAppendCString#
                            FortranSynthesiser.generateKernelName1
                            (case ww1 of ww5 { GHC.Types.I# ww6 ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    ww6
                                    (GHC.Types.[] @ GHC.Types.Char) of ww7 { (#,#) ww8 ww9 ->
                             GHC.Types.: @ GHC.Types.Char ww8 ww9 } })))) }) -}
62646963e65f600dc3a6cfe2a225b8ca
  $wgetArgsAndLocalVarsForLoopBody ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (# [GHC.Base.String], [GHC.Base.String] #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Language.Fortran.Fortran
                           LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 let {
                   origSubArgs_strs :: [GHC.Base.String]
                   = GHC.Base.map
                       @ (Language.Fortran.ArgName LanguageFortranTools.Anno)
                       @ [GHC.Types.Char]
                       FortranSynthesiser.getArgsAndLocalVarsForLoopBody4
                       (Data.Generics.Schemes.everything
                          @ [Language.Fortran.ArgName LanguageFortranTools.Anno]
                          (GHC.Base.++
                             @ (Language.Fortran.ArgName LanguageFortranTools.Anno))
                          FortranSynthesiser.getArgsAndLocalVarsForLoopBody2
                          @ (Language.Fortran.Arg LanguageFortranTools.Anno)
                          FortranSynthesiser.$s$fDataArg
                          (case Data.Generics.Schemes.everything
                                  @ [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
                                  (GHC.Base.++
                                     @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno))
                                  SubroutineTable.addToSubroutineTable1
                                  @ (Language.Fortran.Program LanguageFortranTools.Anno)
                                  SubroutineTable.$s$fData(,)1
                                  w1 of wild {
                             []
                             -> case GHC.List.badHead
                                ret_ty (Language.Fortran.Arg LanguageFortranTools.Anno)
                                of {}
                             : x ds1
                             -> case x of wild1 {
                                  DEFAULT
                                  -> case FortranSynthesiser.getArgsAndLocalVarsForLoopBody1
                                     ret_ty (Language.Fortran.Arg LanguageFortranTools.Anno)
                                     of {}
                                  Language.Fortran.Sub ds ds2 ds3 ds4 args ds5 -> args } }))
                 } in
                 let {
                   allVars_strs :: [GHC.Base.String]
                   = FortranSynthesiser.getArgsAndLocalVarsForLoopBody_go3
                       (GHC.Types.[] @ [GHC.Types.Char])
                       (FortranSynthesiser.$sfromList
                          (Data.Generics.Schemes.everything
                             @ [Language.Fortran.VarName LanguageFortranTools.Anno]
                             (GHC.Base.++
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                             LanguageFortranTools.extractAllVarNames1
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                             FortranSynthesiser.$s$fDataFortran
                             w))
                 } in
                 (# GHC.List.filter
                      @ [GHC.Types.Char]
                      (\ (v :: GHC.Base.String) ->
                       case GHC.List.elem
                              @ GHC.Base.String
                              GHC.Classes.$fEq[]_$s$fEq[]1
                              v
                              origSubArgs_strs of wild {
                         GHC.Types.False -> GHC.Types.True
                         GHC.Types.True -> GHC.Types.False })
                      allVars_strs,
                    GHC.List.filter
                      @ [GHC.Types.Char]
                      (\ (v :: GHC.Base.String) ->
                       GHC.List.elem
                         @ GHC.Base.String
                         GHC.Classes.$fEq[]_$s$fEq[]1
                         v
                         origSubArgs_strs)
                      allVars_strs #)) -}
e5cc26003a6cb3b0e93e8dec658660b6
  $wgetLocalDeclStrs ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (Language.Fortran.Decl LanguageFortranTools.Anno,
        Language.Fortran.Fortran LanguageFortranTools.Anno)
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (# GHC.Base.String, GHC.Base.String, GHC.Base.String #)
  {- Arity: 5, Strictness: <L,1*U><L,1*U><L,1*U(A,1*U)><L,1*U><L,U>,
     Inline: [0] -}
40a9fa14e56645f3f8be7aef626b2aa1
  $wgetLocalDeclStrs_OLD ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 4, Strictness: <L,1*U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (w :: [Language.Fortran.VarName
                            LanguageFortranTools.Anno])
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (w2 :: [GHC.Base.String])
                   (w3 :: GHC.Base.String) ->
                 let {
                   localVars_strs :: [GHC.Base.String]
                   = let {
                       allArgs_strs :: [GHC.Base.String]
                       = GHC.Base.map
                           @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                           @ [GHC.Types.Char]
                           LanguageFortranTools.varNameStr
                           w
                     } in
                     letrec {
                       go12 :: [[GHC.Types.Char]]
                               -> Data.Set.Internal.Set
                                    (Language.Fortran.VarName LanguageFortranTools.Anno)
                               -> [[GHC.Types.Char]]
                         {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                       = \ (z' :: [[GHC.Types.Char]])
                           (ds :: Data.Set.Internal.Set
                                    (Language.Fortran.VarName LanguageFortranTools.Anno)) ->
                         case ds of wild {
                           Data.Set.Internal.Bin dt x l r
                           -> case x of wild1 { Language.Fortran.VarName ds1 str ->
                              go12
                                (case GHC.List.elem
                                        @ GHC.Base.String
                                        GHC.Classes.$fEq[]_$s$fEq[]1
                                        str
                                        allArgs_strs of wild2 {
                                   GHC.Types.False -> GHC.Types.: @ [GHC.Types.Char] str (go12 z' r)
                                   GHC.Types.True -> go12 z' r })
                                l }
                           Data.Set.Internal.Tip -> z' }
                     } in
                     go12
                       (GHC.Types.[] @ [GHC.Types.Char])
                       (FortranSynthesiser.$sfromList
                          (Data.Generics.Schemes.everything
                             @ [Language.Fortran.VarName LanguageFortranTools.Anno]
                             (GHC.Base.++
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno))
                             LanguageFortranTools.extractAllVarNames1
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                             FortranSynthesiser.$s$fDataFortran
                             w1))
                 } in
                 (# GHC.CString.unpackAppendCString#
                      FortranSynthesiser.getLocalDeclStrs_OLD3
                      (case localVars_strs of wild {
                         [] -> FortranSynthesiser.checkForImplicitNone1
                         : x xs1
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              (Data.OldList.intercalate_$spoly_go
                                 @ GHC.Types.Char
                                 x
                                 (Data.OldList.prependToAll
                                    @ [GHC.Types.Char]
                                    FortranSynthesiser.getLocalDeclStrs_OLD1
                                    xs1))
                              FortranSynthesiser.checkForImplicitNone1 }),
                    let {
                      origDeclLines :: [GHC.Base.String]
                      = GHC.List.filter
                          @ [GHC.Types.Char]
                          LanguageFortranTools.findDeclLine
                          w2
                    } in
                    Data.OldList.unlines
                      (GHC.Base.map
                         @ [GHC.Types.Char]
                         @ [GHC.Types.Char]
                         (\ (x :: [GHC.Types.Char]) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            w3
                            (FortranSynthesiser.removeIntent
                               (Data.OldList.unlines
                                  (GHC.List.filter
                                     @ [GHC.Types.Char]
                                     (FortranSynthesiser.matchVarNameInDecl x)
                                     origDeclLines))))
                         localVars_strs) #)) -}
6b56dda9d80a294a8abdcc898f19a7eb
  $wgetMissingArgDeclStrs ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> [GHC.Types.Char]
    -> (# [GHC.Types.Char], [GHC.Types.Char] #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (w2 :: [GHC.Types.Char]) ->
                 (# GHC.Base.++
                      @ GHC.Types.Char
                      w2
                      (GHC.CString.unpackAppendCString#
                         FortranSynthesiser.getMissingArgDeclStrs1
                         (case w of wild {
                            [] -> FortranSynthesiser.checkForImplicitNone1
                            : x xs1
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 (Data.OldList.intercalate_$spoly_go
                                    @ GHC.Types.Char
                                    x
                                    (Data.OldList.prependToAll
                                       @ [GHC.Types.Char]
                                       FortranSynthesiser.getLocalDeclStrs_OLD1
                                       xs1))
                                 FortranSynthesiser.checkForImplicitNone1 })),
                    let {
                      origDeclLines :: [GHC.Base.String]
                      = GHC.List.filter
                          @ [GHC.Types.Char]
                          LanguageFortranTools.findDeclLine
                          w1
                    } in
                    case GHC.Base.map
                           @ [GHC.Types.Char]
                           @ [GHC.Types.Char]
                           (\ (var_name :: GHC.Base.String) ->
                            Data.OldList.unlines
                              (GHC.List.filter
                                 @ [GHC.Types.Char]
                                 (FortranSynthesiser.matchVarNameInDecl var_name)
                                 origDeclLines))
                           w of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : ds1 ds2
                      -> FortranSynthesiser.getMissingArgDeclStrs_go ds2 ds1 } #)) -}
4ee4d567b50b38d93a1d72821914737c
  $wgo ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> ([GHC.Base.String], GHC.Base.String)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>m, Inline: [0] -}
e246a59a632c055bf391f2a209dc3f67
  $wisImplicitNone ::
    [GHC.Base.String]
    -> GHC.Base.String -> (# [GHC.Base.String], GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Base.String]) (w :: GHC.Base.String) ->
                 let {
                   chunks :: [GHC.Base.String] = Data.OldList.words w
                 } in
                 case GHC.List.elem
                        @ [GHC.Types.Char]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        FortranSynthesiser.isImplicitNone3
                        chunks of wild {
                   GHC.Types.False
                   -> (# GHC.Base.++
                           @ [GHC.Types.Char]
                           ww
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              w
                              (GHC.Types.[] @ [GHC.Types.Char])),
                         GHC.Types.[] @ GHC.Types.Char #)
                   GHC.Types.True
                   -> case GHC.List.elem
                             @ [GHC.Types.Char]
                             GHC.Classes.$fEq[]_$s$fEq[]1
                             FortranSynthesiser.isImplicitNone1
                             chunks of wild1 {
                        GHC.Types.False
                        -> (# GHC.Base.++
                                @ [GHC.Types.Char]
                                ww
                                (GHC.Types.:
                                   @ [GHC.Types.Char]
                                   w
                                   (GHC.Types.[] @ [GHC.Types.Char])),
                              GHC.Types.[] @ GHC.Types.Char #)
                        GHC.Types.True -> (# ww, w #) } }) -}
0bd35008b55dd3df625b877136569c85
  $wpoly_go13 ::
    a
    -> LanguageFortranTools.Anno
    -> Language.Fortran.Variable
    -> Data.Map.Internal.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a
    -> a
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><S,1*U>, Inline: [0] -}
4b2f4c2f3cd2c300cd5b10e1366c373f
  $wproduceCode_prog ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.String
    -> LanguageFortranTools.ModuleVarsTable
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w1 :: [GHC.Base.String])
                   (w2 :: [GHC.Base.String])
                   (w3 :: GHC.Types.Bool)
                   (w4 :: GHC.Base.String)
                   (w5 :: GHC.Base.String)
                   (ww :: Language.Fortran.Program LanguageFortranTools.Anno)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: LanguageFortranTools.ModuleVarsTable)
                   (w6 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case LanguageFortranTools.$wpreProcessingHelper
                        w1
                        w2
                        w3
                        ww1
                        w6 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,,) preproc_inp ds ds2 ->
                 (# ipv,
                    let {
                      lvl499 :: (Language.Fortran.Program LanguageFortranTools.Anno,
                                 GHC.Base.String)
                      = (ww, ww1)
                    } in
                    let {
                      ipv2 :: [GHC.Base.String] = Data.OldList.lines preproc_inp
                    } in
                    letrec {
                      go12 :: [Language.Fortran.ProgUnit LanguageFortranTools.Anno]
                              -> [GHC.Types.Char] -> [GHC.Types.Char]
                        <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                      = \ (ds4 :: [Language.Fortran.ProgUnit LanguageFortranTools.Anno])
                          (eta :: [GHC.Types.Char]) ->
                        case ds4 of wild1 {
                          [] -> eta
                          : y ys
                          -> go12
                               ys
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  eta
                                  (FortranSynthesiser.$wproduceCode_progUnit
                                     w
                                     (Data.Map.Internal.Tip
                                        @ SubroutineTable.SubNameStr
                                        @ SubroutineTable.ArgumentTranslation)
                                     lvl499
                                     ww2
                                     w4
                                     w5
                                     ipv2
                                     y)) }
                    } in
                    go12 ww (GHC.Types.[] @ GHC.Types.Char) #) } }) -}
2b67ead7a560b89f73829431657da01a
  $wproduceCode_progUnit ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> LanguageFortranTools.ModuleVarsTable
    -> GHC.Base.String
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U(U,A)><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
05ff692dd223ca163626923ed5092b51
  $wrestoreUsedModuleDecls' ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> LanguageFortranTools.ModuleVarsTable
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,1*U><L,U>, Inline: [0] -}
59c8d97d7f029711189f3ad76f02e4e7
  $wsynthesisElses ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 6, Strictness: <L,U(U,A)><L,U><L,U><S,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
0c5e0efb1ccf249d6fa9746fc817f2ec
  $wsynthesiseArgList ::
    Language.Fortran.Expr LanguageFortranTools.Anno -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.Fortran.Expr
                            LanguageFortranTools.Anno) ->
                 GHC.CString.unpackAppendCString#
                   FortranSynthesiser.synthesiseArgList3
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (FortranSynthesiser.synthesiseESeq ww)
                      FortranSynthesiser.synthesiseArgList1)) -}
6f4e8ff190916ebcf574325f5137f1ff
  $wsynthesiseAssg ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: [GHC.Base.String])
                   (w2 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w2 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseAssg2
                   Language.Fortran.Assg anno src expr1 expr2
                   -> case CodeEmitterUtils.isGenerated wild of wild1 {
                        GHC.Types.False -> CodeEmitterUtils.extractOriginalCode w1 src
                        GHC.Types.True
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             w
                             (GHC.Base.++
                                @ GHC.Types.Char
                                (LanguageFortranTools.outputExprFormatting expr1)
                                (GHC.CString.unpackAppendCString#
                                   FortranSynthesiser.synthesiseAssg1
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      (LanguageFortranTools.outputExprFormatting expr2)
                                      FortranSynthesiser.checkForImplicitNone1))) } }) -}
7e6659f2a5fa603fd95f0ab762025fe0
  $wsynthesiseBufferLoads ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 let {
                   translatedVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno]
                   = GHC.Base.map
                       @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                       @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                       (\ (var :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                        SubroutineTable.$sfindWithDefault3
                          @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                          var
                          var
                          w2)
                       w3
                 } in
                 (# letrec {
                      go12 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                              -> [GHC.Types.Char] -> GHC.Base.String
                        <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                      = \ (ds :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                          (eta :: [GHC.Types.Char]) ->
                        case ds of wild {
                          [] -> eta
                          : y ys
                          -> go12
                               ys
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  eta
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     w
                                     (GHC.CString.unpackAppendCString#
                                        FortranSynthesiser.synthesiseBufferDeclaration2
                                        (case y of wild1 { Language.Fortran.VarName ds1 str ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           str
                                           FortranSynthesiser.synthesiseBufferLoads5 })))) }
                    } in
                    go12 translatedVars (GHC.Types.[] @ GHC.Types.Char),
                    letrec {
                      go12 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                              -> [GHC.Types.Int] -> [GHC.Types.Char] -> GHC.Base.String
                        <join 3> {- Arity: 3, Strictness: <S,1*U><L,1*U><S,1*U> -}
                      = \ (ds :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                          (_ys :: [GHC.Types.Int])
                          (eta :: [GHC.Types.Char]) ->
                        case ds of wild {
                          [] -> eta
                          : ipv ipv1
                          -> case _ys of wild1 {
                               [] -> eta
                               : ipv2 ipv3
                               -> go12
                                    ipv1
                                    ipv3
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       eta
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          w
                                          (GHC.CString.unpackAppendCString#
                                             FortranSynthesiser.synthesiseBufferLoads4
                                             (case ipv of wild2 { Language.Fortran.VarName ds1 str ->
                                              let {
                                                z1 :: [GHC.Types.Char]
                                                = GHC.CString.unpackFoldrCString#
                                                    @ [GHC.Types.Char]
                                                    CodeEmitterUtils.varBufVarName1
                                                    FortranSynthesiser.synthesiseBufferIndexNames3
                                                    (GHC.CString.unpackAppendCString#
                                                       FortranSynthesiser.synthesiseBufferLoads3
                                                       (GHC.Base.++
                                                          @ GHC.Types.Char
                                                          str
                                                          FortranSynthesiser.synthesiseBufferLoads1))
                                              } in
                                              letrec {
                                                go14 :: [GHC.Types.Char] -> [GHC.Types.Char]
                                                  {- Arity: 1, Strictness: <S,1*U> -}
                                                = \ (ds2 :: [GHC.Types.Char]) ->
                                                  case ds2 of wild3 {
                                                    [] -> z1
                                                    : y ys
                                                    -> GHC.Types.:
                                                         @ GHC.Types.Char
                                                         (GHC.Unicode.toUpper y)
                                                         (go14 ys) }
                                              } in
                                              go14 str })))) } }
                    } in
                    go12
                      w3
                      (GHC.Base.map
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                         @ GHC.Types.Int
                         (\ (x :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                          case x of ww { Language.Fortran.VarName ww1 ww2 ->
                          FortranSynthesiser.$wpoly_go13
                            @ GHC.Types.Int
                            FortranSynthesiser.synthesiseBufferIndexNames1
                            ww1
                            ww2
                            w1 })
                         translatedVars)
                      (GHC.Types.[] @ GHC.Types.Char) #)) -}
7ef410d0129af18f0108ba99f83eb9e6
  $wsynthesiseBufferLoads_kernel ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> Language.Fortran.Block LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseBufferLoads
                   w
                   w1
                   w2
                   (LanguageFortranTools.listRemoveDuplications
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                      FortranSynthesiser.$s$fEqVarName
                      (GHC.Types.:
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                         CodeEmitterUtils.statePtrVarName
                         (let {
                            exit :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                                    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                              <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (eta :: [Language.Fortran.VarName
                                           LanguageFortranTools.Anno])[OneShot] ->
                              GHC.Base.++
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                (LanguageFortranTools.listRemoveDuplications
                                   @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                   FortranSynthesiser.$s$fEqVarName
                                   eta)
                                (let {
                                   z1 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                                   = GHC.Base.map
                                       @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                       @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                       FortranSynthesiser.synthesiseBufferLoads_kernel2
                                       (Data.Generics.Schemes.everything
                                          @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                          (GHC.Base.++
                                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                                          LanguageFortranTools.extractBufferReads1
                                          @ (Language.Fortran.Block LanguageFortranTools.Anno)
                                          FortranSynthesiser.$s$fDataBlock
                                          w3)
                                 } in
                                 letrec {
                                   go12 :: [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                           -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                                     {- Arity: 1, Strictness: <S,1*U> -}
                                   = \ (ds :: [Language.Fortran.Fortran
                                                 LanguageFortranTools.Anno]) ->
                                     case ds of wild {
                                       [] -> z1
                                       : y ys
                                       -> GHC.Types.:
                                            @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                            (case y of wild1 {
                                               DEFAULT
                                               -> FortranSynthesiser.synthesiseBufferLoads_kernel1
                                               Language.Fortran.OpenCLBufferWrite ds1 ds2 var
                                               -> var })
                                            (go12 ys) }
                                 } in
                                 go12
                                   (Data.Generics.Schemes.everything
                                      @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                      (GHC.Base.++
                                         @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                                      LanguageFortranTools.extractBufferWrites1
                                      @ (Language.Fortran.Block LanguageFortranTools.Anno)
                                      FortranSynthesiser.$s$fDataBlock
                                      w3))
                          } in
                          letrec {
                            go12 :: [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                                    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                              <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                            = \ (ds :: [Language.Fortran.Fortran LanguageFortranTools.Anno])
                                (eta :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                              case ds of wild {
                                [] -> exit eta
                                : y ys
                                -> go12
                                     ys
                                     (GHC.Base.++
                                        @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                        eta
                                        (CodeEmitterUtils.extractKernelArguments y)) }
                          } in
                          go12
                            (Data.Generics.Schemes.everything
                               @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                               (GHC.Base.++
                                  @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                               LanguageFortranTools.extractKernels1
                               @ (Language.Fortran.Block LanguageFortranTools.Anno)
                               FortranSynthesiser.$s$fDataBlock
                               w3)
                            (GHC.Types.[]
                               @ (Language.Fortran.VarName LanguageFortranTools.Anno)))))) -}
41acd893fefd10f2321bcb4102295dc5
  $wsynthesiseBufferStores ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 let {
                   translatedVars :: [Language.Fortran.VarName
                                        LanguageFortranTools.Anno]
                   = GHC.Base.map
                       @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                       @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                       (\ (var :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                        SubroutineTable.$sfindWithDefault3
                          @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                          var
                          var
                          w2)
                       w3
                 } in
                 (# letrec {
                      go12 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                              -> [GHC.Types.Char] -> GHC.Base.String
                        <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                      = \ (ds :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                          (eta :: [GHC.Types.Char]) ->
                        case ds of wild {
                          [] -> eta
                          : y ys
                          -> go12
                               ys
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  eta
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     w
                                     (GHC.CString.unpackAppendCString#
                                        FortranSynthesiser.synthesiseBufferDeclaration2
                                        (case y of wild1 { Language.Fortran.VarName ds1 str ->
                                         GHC.Base.++
                                           @ GHC.Types.Char
                                           str
                                           FortranSynthesiser.synthesiseBufferLoads5 })))) }
                    } in
                    go12 translatedVars (GHC.Types.[] @ GHC.Types.Char),
                    letrec {
                      go12 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                              -> [GHC.Types.Int] -> [GHC.Types.Char] -> GHC.Base.String
                        <join 3> {- Arity: 3, Strictness: <S,1*U><L,1*U><S,1*U> -}
                      = \ (ds :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                          (_ys :: [GHC.Types.Int])
                          (eta :: [GHC.Types.Char]) ->
                        case ds of wild {
                          [] -> eta
                          : ipv ipv1
                          -> case _ys of wild1 {
                               [] -> eta
                               : ipv2 ipv3
                               -> go12
                                    ipv1
                                    ipv3
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       eta
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          w
                                          (GHC.CString.unpackAppendCString#
                                             FortranSynthesiser.synthesiseBufferStores1
                                             (case ipv of wild2 { Language.Fortran.VarName ds1 str ->
                                              let {
                                                z1 :: [GHC.Types.Char]
                                                = GHC.CString.unpackFoldrCString#
                                                    @ [GHC.Types.Char]
                                                    CodeEmitterUtils.varBufVarName1
                                                    FortranSynthesiser.synthesiseBufferIndexNames3
                                                    (GHC.CString.unpackAppendCString#
                                                       FortranSynthesiser.synthesiseBufferLoads3
                                                       (GHC.Base.++
                                                          @ GHC.Types.Char
                                                          str
                                                          FortranSynthesiser.synthesiseBufferLoads1))
                                              } in
                                              letrec {
                                                go14 :: [GHC.Types.Char] -> [GHC.Types.Char]
                                                  {- Arity: 1, Strictness: <S,1*U> -}
                                                = \ (ds2 :: [GHC.Types.Char]) ->
                                                  case ds2 of wild3 {
                                                    [] -> z1
                                                    : y ys
                                                    -> GHC.Types.:
                                                         @ GHC.Types.Char
                                                         (GHC.Unicode.toUpper y)
                                                         (go14 ys) }
                                              } in
                                              go14 str })))) } }
                    } in
                    go12
                      w3
                      (GHC.Base.map
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                         @ GHC.Types.Int
                         (\ (x :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                          case x of ww { Language.Fortran.VarName ww1 ww2 ->
                          FortranSynthesiser.$wpoly_go13
                            @ GHC.Types.Int
                            FortranSynthesiser.synthesiseBufferIndexNames1
                            ww1
                            ww2
                            w1 })
                         translatedVars)
                      (GHC.Types.[] @ GHC.Types.Char) #)) -}
e3bfcb9290fde9db88273f5cb5105159
  $wsynthesiseCall ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: [GHC.Base.String])
                   (w2 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w2 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseCall2
                   Language.Fortran.Call anno src expr args
                   -> let {
                        $j :: GHC.Base.String <join 0>
                        = GHC.Base.++
                            @ GHC.Types.Char
                            w
                            (GHC.CString.unpackAppendCString#
                               FortranSynthesiser.synthesiseCall1
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (LanguageFortranTools.outputExprFormatting expr)
                                  (case args of ww { Language.Fortran.ArgList ww1 ww2 ->
                                   GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.CString.unpackAppendCString#
                                        FortranSynthesiser.synthesiseArgList3
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           (FortranSynthesiser.synthesiseESeq ww2)
                                           FortranSynthesiser.synthesiseArgList1))
                                     FortranSynthesiser.checkForImplicitNone1 })))
                      } in
                      case Data.Generics.Schemes.everything
                             @ GHC.Types.Bool
                             GHC.Classes.||
                             CodeEmitterUtils.anyChildGenerated1
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                             CodeEmitterUtils.$s$fDataFortran
                             wild of wild1 {
                        GHC.Types.False
                        -> case CodeEmitterUtils.isGenerated wild of wild2 {
                             GHC.Types.False
                             -> CodeEmitterUtils.$wextractOriginalCode_Offset
                                  CodeEmitterUtils.extractOriginalCode1
                                  CodeEmitterUtils.extractOriginalCode1
                                  w1
                                  src
                             GHC.Types.True -> $j }
                        GHC.Types.True -> $j } }) -}
c48cce9d169ceb4c8977f01382714eb2
  $wsynthesiseKernelCall ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.String
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,1*U>, Inline: [0] -}
c351e1e119fa10c01ee78b0a9eb60697
  $wsynthesiseOpenCLBufferRead ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.String
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.Fortran.Program
                            LanguageFortranTools.Anno)
                   (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w1 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseOpenCLBufferRead4
                   Language.Fortran.OpenCLBufferRead anno src varName
                   -> case FortranGenerator.$wgenerateKernelDeclarations
                             ww
                             wild of ww1 { (#,,#) ww2 ww3 ww4 ->
                      case ww2 of wild1 {
                        []
                        -> case FortranSynthesiser.synthesiseOpenCLBufferRead3
                           ret_ty GHC.Base.String
                           of {}
                        : readDecl ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (FortranSynthesiser.synthesiseBufferAccess
                                w
                                FortranSynthesiser.synthesiseOpenCLBufferRead1
                                readDecl)
                             FortranSynthesiser.checkForImplicitNone1 } } }) -}
5c842edcce56d28190dfb3540642b749
  $wsynthesiseOpenCLBufferWrite ::
    Language.Fortran.Program LanguageFortranTools.Anno
    -> GHC.Base.String
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.Fortran.Program
                            LanguageFortranTools.Anno)
                   (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w1 of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseOpenCLBufferWrite4
                   Language.Fortran.OpenCLBufferWrite anno src varName
                   -> case FortranGenerator.$wgenerateKernelDeclarations
                             ww
                             wild of ww1 { (#,,#) ww2 ww3 ww4 ->
                      case ww3 of wild1 {
                        []
                        -> case FortranSynthesiser.synthesiseOpenCLBufferWrite3
                           ret_ty GHC.Base.String
                           of {}
                        : writeDecl ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (FortranSynthesiser.synthesiseBufferAccess
                                w
                                FortranSynthesiser.synthesiseOpenCLBufferWrite1
                                writeDecl)
                             FortranSynthesiser.checkForImplicitNone1 } } }) -}
2607cc2c24d33543a3f6000d04351bbe
  $wsynthesiseOpenCLMap ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,1*U(U,A)><S,1*U>,
     Inline: [0] -}
d902fa3d1d1fb71328d5fbe20829ba99
  $wsynthesiseOpenCLReduce ::
    Platform.Platform
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,1*U(U,A)><S,1*U>,
     Inline: [0] -}
63e42e460d2a19225d39098a60eb1ac1
  $wsynthesiseSizeStatements ::
    GHC.Base.String
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
93f578b0f36509b79bae0001ca5ab9c0
  $wsynthesiseSizeStatements_kernel ::
    GHC.Base.String
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (# GHC.Base.String, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseSizeStatements
                   w
                   (let {
                      exit :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                              -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                        <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (eta :: [Language.Fortran.VarName
                                     LanguageFortranTools.Anno])[OneShot] ->
                        LanguageFortranTools.listRemoveDuplications
                          @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                          FortranSynthesiser.$s$fEqVarName
                          (GHC.Base.++
                             @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                             (LanguageFortranTools.listRemoveDuplications
                                @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                FortranSynthesiser.$s$fEqVarName
                                eta)
                             (let {
                                z1 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                                = GHC.Base.map
                                    @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                                    @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                    FortranSynthesiser.synthesiseSizeStatements_kernel2
                                    (Data.Generics.Schemes.everything
                                       @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                       (GHC.Base.++
                                          @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                                       LanguageFortranTools.extractBufferReads1
                                       @ (Language.Fortran.Program LanguageFortranTools.Anno)
                                       FortranSynthesiser.$s$fData[]
                                       w1)
                              } in
                              letrec {
                                go12 :: [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                        -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                                  {- Arity: 1, Strictness: <S,1*U> -}
                                = \ (ds :: [Language.Fortran.Fortran LanguageFortranTools.Anno]) ->
                                  case ds of wild {
                                    [] -> z1
                                    : y ys
                                    -> GHC.Types.:
                                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                         (case y of wild1 {
                                            DEFAULT
                                            -> FortranSynthesiser.synthesiseSizeStatements_kernel1
                                            Language.Fortran.OpenCLBufferWrite ds1 ds2 var -> var })
                                         (go12 ys) }
                              } in
                              go12
                                (Data.Generics.Schemes.everything
                                   @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                                   (GHC.Base.++
                                      @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                                   LanguageFortranTools.extractBufferWrites1
                                   @ (Language.Fortran.Program LanguageFortranTools.Anno)
                                   FortranSynthesiser.$s$fData[]
                                   w1)))
                    } in
                    letrec {
                      go12 :: [Language.Fortran.Fortran LanguageFortranTools.Anno]
                              -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                              -> [Language.Fortran.VarName LanguageFortranTools.Anno]
                        <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                      = \ (ds :: [Language.Fortran.Fortran LanguageFortranTools.Anno])
                          (eta :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                        case ds of wild {
                          [] -> exit eta
                          : y ys
                          -> go12
                               ys
                               (GHC.Base.++
                                  @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                  eta
                                  (CodeEmitterUtils.extractKernelArguments y)) }
                    } in
                    go12
                      (Data.Generics.Schemes.everything
                         @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                         (GHC.Base.++
                            @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                         LanguageFortranTools.extractKernels1
                         @ (Language.Fortran.Program LanguageFortranTools.Anno)
                         FortranSynthesiser.$s$fData[]
                         w1)
                      (GHC.Types.[]
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)))
                   w1) -}
5fd1ae06a75353221279f7c56eea4fbc
  $wsynthesiseSuperKernel ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(GHC.Base.String, GHC.Base.String)]
    -> (# GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,1*U><S,1*U>,
     Inline: [0] -}
0c7d6074a0e228c98079bda1f7d4ac82
  $wsynthesiseSuperKernelModule ::
    GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(GHC.Base.String, GHC.Base.String)]
    -> (# GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: [(Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String)])
                   (w3 :: [(GHC.Base.String, GHC.Base.String)]) ->
                 let {
                   ds :: (GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap)
                   = case FortranSynthesiser.$wsynthesiseSuperKernel
                            w
                            LanguageFortranTools.outputTab
                            w1
                            w2
                            w3 of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (# GHC.CString.unpackAppendCString#
                      FortranSynthesiser.synthesiseSuperKernelModule4
                      (GHC.Base.++
                         @ GHC.Types.Char
                         w
                         (GHC.CString.unpackAppendCString#
                            FortranSynthesiser.synthesiseSuperKernelModule3
                            (GHC.CString.unpackAppendCString#
                               FortranSynthesiser.checkForImplicitNone2
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  LanguageFortranTools.tabInc
                                  (GHC.CString.unpackAppendCString#
                                     FortranSynthesiser.synthesiseSuperKernelModule2
                                     (GHC.CString.unpackAppendCString#
                                        FortranSynthesiser.checkForImplicitNone2
                                        (let {
                                           exit :: [GHC.Types.Char] -> [GHC.Types.Char]
                                             <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (eta :: [GHC.Types.Char])[OneShot] ->
                                             GHC.Base.++
                                               @ GHC.Types.Char
                                               eta
                                               (case ds of wild { (,) superKernelCode allKernelArgsMap ->
                                                GHC.Base.++
                                                  @ GHC.Types.Char
                                                  superKernelCode
                                                  (GHC.CString.unpackAppendCString#
                                                     FortranSynthesiser.synthesiseSuperKernelModule1
                                                     w) })
                                         } in
                                         letrec {
                                           go12 :: [(GHC.Base.String, GHC.Base.String)]
                                                   -> [GHC.Types.Char] -> [GHC.Types.Char]
                                             <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                                           = \ (ds1 :: [(GHC.Base.String, GHC.Base.String)])
                                               (eta :: [GHC.Types.Char]) ->
                                             case ds1 of wild {
                                               [] -> exit eta
                                               : y ys
                                               -> go12
                                                    ys
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       eta
                                                       (case y of wild1 { (,) x ds2 -> x })) }
                                         } in
                                         go12 w3 (GHC.Types.[] @ GHC.Types.Char)))))))),
                    case ds of wild { (,) superKernelCode allKernelArgsMap ->
                    allKernelArgsMap } #)) -}
24aec9dc392e7d2d0c600d2ad60a7650
  $wsynthesiseUse ::
    GHC.Base.String
    -> Language.Fortran.Uses LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Uses LanguageFortranTools.Anno) ->
                 case w1 of wild {
                   Language.Fortran.Use ds ds1 ds2 ds3
                   -> case ds1 of wild1 { (,) moduleName ds4 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        w
                        (GHC.CString.unpackAppendCString#
                           FortranSynthesiser.synthesisUses1
                           (GHC.Base.++
                              @ GHC.Types.Char
                              moduleName
                              FortranSynthesiser.checkForImplicitNone1)) }
                   Language.Fortran.UseNil ipv
                   -> FortranSynthesiser.synthesiseUse1 }) -}
1cc7a2c8bafdf14a6f0a316e9ac342f2
  checkForImplicitNone ::
    GHC.Base.String -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 1, Strictness: <L,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case FortranSynthesiser.$wcheckForImplicitNone
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
f53f3a67768cf2097d2a892f027bd344
  checkForImplicitNone1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.checkForImplicitNone2) -}
3ed02275c8441b81c5a1d2e2bc3b0a9a
  checkForImplicitNone2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
8828d089cb4a21f6e6cbde8f9163e685
  defaultFilename :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> FortranSynthesiser.defaultFilename3
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> GHC.CString.unpackAppendCString#
                             FortranSynthesiser.defaultFilename2
                             x
                        : ipv ipv1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             x
                             (GHC.CString.unpackAppendCString#
                                FortranSynthesiser.defaultFilename1
                                (FortranSynthesiser.defaultFilename_$sdefaultFilename
                                   ipv
                                   ipv1)) } }) -}
6b11e27140c9177c3d09adcb163fd717
  defaultFilename1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
83fa3624b79b8fb97a2f47d286109a7a
  defaultFilename2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("par_"#) -}
4ee6b2769014d205c8516d64afbd463c
  defaultFilename3 :: GHC.Base.String
  {- Strictness: x -}
bc799a39e148a3ad50ed41e2938a5ea9
  defaultFilename_$sdefaultFilename ::
    [GHC.Types.Char] -> [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
03a912ced42f0a634b37a34534d4e13b
  extractParamDecls ::
    Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 1,
     Unfolding: (Data.Generics.Schemes.everything
                   @ [Language.Fortran.Decl LanguageFortranTools.Anno]
                   (GHC.Base.++ @ (Language.Fortran.Decl LanguageFortranTools.Anno))
                   FortranSynthesiser.extractParamDecls1
                   @ (Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   FortranSynthesiser.$s$fDataProgUnit) -}
9f7b530493d41f137ba9f18cf48b47f8
  extractParamDecls1 ::
    Data.Data.Data a =>
    a -> [Language.Fortran.Decl LanguageFortranTools.Anno]
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ a ($dData :: Data.Data.Data a) ->
                 let {
                   lvl499 :: GHC.Fingerprint.Type.Fingerprint
                   = Data.Typeable.Internal.typeRepFingerprint
                       @ *
                       @ a
                       (Data.Data.$p1Data @ a $dData)
                         `cast`
                       (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                 } in
                 \ (a1 :: a) ->
                 case lvl499 of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case FortranSynthesiser.extractParamDecls2 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                        1#
                        -> case a1
                                  `cast`
                                (UnsafeCo representational a (Language.Fortran.Decl
                                                                LanguageFortranTools.Anno)) of wild2 {
                             DEFAULT
                             -> GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                             Language.Fortran.Decl ds ds1 ds2 ds3
                             -> case ds3 of wild3 {
                                  Language.Fortran.BaseType ds4 ds5 ds6 ds7 ds8
                                  -> case ds6 of wild4 {
                                       []
                                       -> GHC.Types.[]
                                            @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                       : ds9 ds10
                                       -> case ds9 of wild5 {
                                            DEFAULT
                                            -> GHC.Types.[]
                                                 @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                                            Language.Fortran.Parameter ds11
                                            -> case ds10 of wild6 {
                                                 []
                                                 -> GHC.Types.:
                                                      @ (Language.Fortran.Decl
                                                           LanguageFortranTools.Anno)
                                                      wild2
                                                      (GHC.Types.[]
                                                         @ (Language.Fortran.Decl
                                                              LanguageFortranTools.Anno))
                                                 : ipv ipv1
                                                 -> GHC.Types.[]
                                                      @ (Language.Fortran.Decl
                                                           LanguageFortranTools.Anno) } } }
                                  Language.Fortran.ArrayT ipv ipv1 ipv2 ipv3 ipv4 ipv5
                                  -> GHC.Types.[]
                                       @ (Language.Fortran.Decl
                                            LanguageFortranTools.Anno) } } } } } }) -}
17f8fb4560712f6983c0eb3908e29bc9
  extractParamDecls2 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Decl
                        9188850777785548874##
                        14769666604673014076##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataDecl3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.Decl LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.Decl
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.Decl
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      FortranSynthesiser.extractParamDecls3) }) -}
1b73287328ea1e1fda36726dcc023b00
  extractParamDecls3 ::
    Data.Typeable.Internal.TypeRep
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ (Data.Map.Internal.Map GHC.Base.String)
                   @ [GHC.Base.String]
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ (* -> *)
                      @ Data.Map.Internal.Map
                      @ GHC.Base.String
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> * -> *)
                         @ Data.Map.Internal.Map
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      FortranSynthesiser.extractParamDecls5)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ []
                      @ GHC.Base.String
                      FortranSynthesiser.extractParamDecls4
                      FortranSynthesiser.extractParamDecls5) }) -}
668e0345bf7dff4aa201560da34404cf
  extractParamDecls4 :: Data.Typeable.Internal.TypeRep []
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ []
                        15300440589168157478##
                        15016221815972113379##
                        GHC.Types.$trModule
                        GHC.Types.$tc[]1
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ []
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
88e00810ae8eeb9883978399c22b6cb8
  extractParamDecls5 ::
    Data.Typeable.Internal.TypeRep [GHC.Types.Char]
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Char
                        8424092006618324671##
                        2724268014499746065##
                        GHC.Types.$trModule
                        GHC.Types.$tcChar1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ GHC.Types.Char
                   FortranSynthesiser.extractParamDecls4
                   (Data.Typeable.Internal.TrTyCon
                      @ *
                      @ GHC.Types.Char
                      ww8
                      ww9
                      ww10
                      ww11
                      ww12) }) -}
57551425f5b2141399de32a6570ea5a9
  generateKernelName ::
    GHC.Base.String -> Language.Fortran.SrcSpan -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U><S(S(SLL)L),1*U(1*U(1*U,1*U(U),A),A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String) (w1 :: Language.Fortran.SrcSpan) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Language.Fortran.SrcLoc ww4 ww5 ww6 ->
                 FortranSynthesiser.$wgenerateKernelName w ww4 ww5 } }) -}
665a2192b2e683091fa14f734599b41c
  generateKernelName1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_"#) -}
2eea3ad608a3223f5bb1c427a6f83993
  generateKernelNameOLD ::
    GHC.Base.String
    -> Language.Fortran.SrcSpan
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U><S(S(SLL)L),1*U(1*U(1*U,1*U(U),A),A)><L,A>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.SrcSpan)
                   (w2 :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Language.Fortran.SrcLoc ww4 ww5 ww6 ->
                 FortranSynthesiser.$wgenerateKernelName w ww4 ww5 } }) -}
9703b7b089dc4e5fd089faab763f7ab4
  generateOriginalFileName :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> FortranSynthesiser.generateOriginalFileName2
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> GHC.CString.unpackAppendCString#
                             FortranSynthesiser.generateOriginalFileName1
                             x
                        : ipv ipv1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             x
                             (GHC.CString.unpackAppendCString#
                                FortranSynthesiser.defaultFilename1
                                (FortranSynthesiser.generateOriginalFileName_$sgenerateOriginalFileName
                                   ipv
                                   ipv1)) } }) -}
cf7e279163d8a6b1bc6c74308ecb6764
  generateOriginalFileName1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("original_"#) -}
f92c8b83da9b81caa4c8a6e90a2843b8
  generateOriginalFileName2 :: GHC.Base.String
  {- Strictness: x -}
1f7dbf3235cb9d7b75908d6ba1168382
  generateOriginalFileName_$sgenerateOriginalFileName ::
    [GHC.Types.Char] -> [[GHC.Types.Char]] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
3114b9f3af0094d75eb78584c08715f2
  generateRangeRelDecls ::
    [(Language.Fortran.VarName LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (loopvartups :: [(Language.Fortran.VarName
                                       LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno,
                                     Language.Fortran.Expr LanguageFortranTools.Anno)])
                   (tabs :: GHC.Base.String) ->
                 let {
                   loopvarnames :: [GHC.Base.String]
                   = Data.OldList.nubBy
                       @ GHC.Base.String
                       GHC.Base.eqString
                       (GHC.Base.map
                          @ (Language.Fortran.VarName LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno,
                             Language.Fortran.Expr LanguageFortranTools.Anno)
                          @ [GHC.Types.Char]
                          FortranSynthesiser.generateRangeRelDecls6
                          loopvartups)
                 } in
                 let {
                   z1 :: [[GHC.Types.Char]]
                   = GHC.Base.map
                       @ [GHC.Types.Char]
                       @ [GHC.Types.Char]
                       (\ (v :: [GHC.Types.Char]) ->
                        GHC.Base.++
                          @ GHC.Types.Char
                          tabs
                          (GHC.CString.unpackAppendCString#
                             FortranSynthesiser.generateRangeRelDecls5
                             (GHC.Base.++
                                @ GHC.Types.Char
                                v
                                FortranSynthesiser.generateRangeRelDecls3)))
                       loopvarnames
                 } in
                 letrec {
                   go12 :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [[GHC.Types.Char]]) ->
                     case ds of wild {
                       [] -> z1
                       : y ys
                       -> GHC.Types.:
                            @ [GHC.Types.Char]
                            (GHC.Base.++
                               @ GHC.Types.Char
                               tabs
                               (GHC.CString.unpackAppendCString#
                                  FortranSynthesiser.generateRangeRelDecls5
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     y
                                     FortranSynthesiser.generateRangeRelDecls1)))
                            (go12 ys) }
                 } in
                 Data.OldList.unlines (go12 loopvarnames)) -}
0e6593b08c01c0325491129a9fa0b0e2
  generateRangeRelDecls1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.generateRangeRelDecls2) -}
8594153caa73f42ba114ce1098737fad
  generateRangeRelDecls2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_range"#) -}
802e13b6d2175c68141c0a44868cc2fd
  generateRangeRelDecls3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.generateRangeRelDecls4) -}
4f729e4f50272017bd971beb91aff1f6
  generateRangeRelDecls4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_rel"#) -}
6864ab28851660d95fd94e76363e7a91
  generateRangeRelDecls5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("integer :: "#) -}
ad114754fca291728b6b58be2d8e377a
  generateRangeRelDecls6 ::
    (Language.Fortran.VarName LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno,
     Language.Fortran.Expr LanguageFortranTools.Anno)
    -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LS)LLL),1*U(1*U(A,1*U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Language.Fortran.VarName LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Expr LanguageFortranTools.Anno)) ->
                 case ds of wild { (,,,) v ds1 ds2 ds3 ->
                 LanguageFortranTools.varNameStr v }) -}
46a7f2e7eee7abc83ae5af2fb0f4f3c9
  generateStateName :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (kernelName :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   FortranSynthesiser.generateStateName1
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b1
                         (c :: GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ GHC.Types.Char
                            @ b1
                            @ GHC.Types.Char
                            c
                            GHC.Unicode.toUpper)
                         n
                         kernelName))) -}
82bccb3040323715f3fccf2eabb22c1a
  generateStateName1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ST_"#) -}
86b0d33ef1e3c324764320f5b96bac6e
  getArgsAndLocalVarsForLoopBody ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> ([GHC.Base.String], [GHC.Base.String])
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wgetArgsAndLocalVarsForLoopBody
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
5596f908a69d78505dc6306dffbebb57
  getArgsAndLocalVarsForLoopBody1 ::
    (Language.Fortran.Arg LanguageFortranTools.Anno)
  {- Strictness: x -}
ea437efd20d37cb6ab15c8ae442e5489
  getArgsAndLocalVarsForLoopBody2 ::
    Data.Data.Data a =>
    a -> [Language.Fortran.ArgName LanguageFortranTools.Anno]
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ a
                   ($dData :: Data.Data.Data a)
                   (eta :: a)[OneShot] ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ a
                        (Data.Data.$p1Data @ a $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case FortranSynthesiser.getArgsAndLocalVarsForLoopBody3 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Types.[]
                        @ (Language.Fortran.ArgName LanguageFortranTools.Anno)
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Types.[]
                             @ (Language.Fortran.ArgName LanguageFortranTools.Anno)
                        1#
                        -> LanguageFortranTools.extractArgName
                             eta
                               `cast`
                             (UnsafeCo representational a (Language.Fortran.ArgName
                                                             LanguageFortranTools.Anno)) } } } }) -}
9806ec194ee3fc17c8e5a7704cf14537
  getArgsAndLocalVarsForLoopBody3 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.ArgName
                        4187460949675603402##
                        17695948308021011151##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataArgName3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.ArgName LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.ArgName
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.ArgName
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            FortranSynthesiser.extractParamDecls5)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            FortranSynthesiser.extractParamDecls4
                            FortranSynthesiser.extractParamDecls5))) } }) -}
abbd389405ea3b7f674f72928ac1def8
  getArgsAndLocalVarsForLoopBody4 ::
    Language.Fortran.ArgName LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.ArgName LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT -> FortranSynthesiser.getArgsAndLocalVarsForLoopBody5
                   Language.Fortran.ArgName ds1 an -> an }) -}
73d7bde383b89e44a596ce94a7d387a0
  getArgsAndLocalVarsForLoopBody5 :: GHC.Base.String
  {- Strictness: x -}
3870b624408a625e0a51f2f5715d510e
  getArgsAndLocalVarsForLoopBody_go3 ::
    [[GHC.Types.Char]]
    -> Data.Set.Internal.Set
         (Language.Fortran.VarName LanguageFortranTools.Anno)
    -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
ba0455070a026bbc9ca11560db5fe446
  getLocalDeclStrs ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (Language.Fortran.Decl LanguageFortranTools.Anno,
        Language.Fortran.Fortran LanguageFortranTools.Anno)
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String, GHC.Base.String, GHC.Base.String)
  {- Arity: 6,
     Strictness: <L,1*U><L,1*U><L,1*U(A,1*U)><L,1*U><L,U><L,A>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w1 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w2 :: (Language.Fortran.Decl LanguageFortranTools.Anno,
                           Language.Fortran.Fortran LanguageFortranTools.Anno))
                   (w3 :: [GHC.Base.String])
                   (w4 :: GHC.Base.String)
                   (w5 :: GHC.Base.String) ->
                 case FortranSynthesiser.$wgetLocalDeclStrs
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
47fe3fb48b99c931f15de46030864822
  getLocalDeclStrs_OLD ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 5, Strictness: <L,1*U><L,U><L,1*U><L,U><L,A>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (w2 :: [GHC.Base.String])
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Base.String) ->
                 case FortranSynthesiser.$wgetLocalDeclStrs_OLD
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
56ab71ad82194862d7accb4786b77d27
  getLocalDeclStrs_OLD1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.getLocalDeclStrs_OLD2) -}
f4ca0fb83c46613482cc0e6757aaadc2
  getLocalDeclStrs_OLD2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (","#) -}
071bc5235318fb8d5d419d944e296463
  getLocalDeclStrs_OLD3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("! Local vars: "#) -}
a9ed0c11173c2a38132a7a539d644ef1
  getMissingArgDeclStrs ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> [GHC.Types.Char]
    -> ([GHC.Types.Char], [GHC.Types.Char])
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Base.String])
                   (w1 :: [GHC.Base.String])
                   (w2 :: [GHC.Types.Char]) ->
                 case FortranSynthesiser.$wgetMissingArgDeclStrs
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
9bd656e5bc6d5de715da3af50dc030f4
  getMissingArgDeclStrs1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("! Missing args: "#) -}
ed2d6b835554d1523f33ecd851cf8ae8
  getMissingArgDeclStrs_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
4ecd411c490c1704d368c17895dffb66
  isImplicitNone ::
    ([GHC.Base.String], GHC.Base.String)
    -> GHC.Base.String -> ([GHC.Base.String], GHC.Base.String)
  {- Arity: 2, Strictness: <S,1*U(U,A)><S,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ([GHC.Base.String], GHC.Base.String))
                   (w1 :: GHC.Base.String) ->
                 case w of ww { (,) ww1 ww2 ->
                 case FortranSynthesiser.$wisImplicitNone
                        ww1
                        w1 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
11f868d81d308440e790318fb4473775
  isImplicitNone1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.isImplicitNone2) -}
90f4b5b0e8c04ecfed130ac4d9a84f08
  isImplicitNone2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("none"#) -}
8b9d9db183cf348fdbfa05e29facd7d4
  isImplicitNone3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.isImplicitNone4) -}
2ec5c69f6b38941241300393a0401ba3
  isImplicitNone4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("implicit"#) -}
63ec47cac9db7723447ed116252951e6
  matchParameterDecl :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (line :: GHC.Base.String) ->
                 GHC.List.elem
                   @ [GHC.Types.Char]
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   FortranSynthesiser.matchParameterDecl2
                   (Data.OldList.words
                      (GHC.List.filter
                         @ GHC.Types.Char
                         FortranSynthesiser.matchParameterDecl1
                         line))) -}
69642a50fb0bf70e9aac213eb8d4231f
  matchParameterDecl1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 case ds of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.True ','# -> GHC.Types.False } }) -}
3d39ffd2f1598b9c974403836e614b03
  matchParameterDecl2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.matchParameterDecl3) -}
6958d7a1222688d5c4776f9e95e86a9f
  matchParameterDecl3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("parameter"#) -}
41a84036f57677d0a78ab2af44e80846
  matchVarNameInDecl ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (var_name :: GHC.Base.String)
                   (line :: GHC.Base.String) ->
                 let {
                   exit :: GHC.Base.String -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (eta :: GHC.Base.String)[OneShot] ->
                     GHC.Base.eqString eta var_name
                 } in
                 letrec {
                   go12 :: [GHC.Types.Char] -> GHC.Base.String -> GHC.Types.Bool
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (s :: [GHC.Types.Char]) (eta :: GHC.Base.String) ->
                     case GHC.List.dropWhile
                            @ GHC.Types.Char
                            GHC.Unicode.isSpace
                            s of wild {
                       [] -> exit eta
                       : ipv ipv1
                       -> case GHC.List.$wbreak
                                 @ GHC.Types.Char
                                 GHC.Unicode.isSpace
                                 wild of ww { (#,#) ww1 ww2 ->
                          go12 ww2 ww1 } }
                 } in
                 go12 line (GHC.List.lastError @ GHC.Base.String)) -}
aeeb64d78e7685ae489baafea1d9e626
  produceCodeBlock ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> LanguageFortranTools.ModuleVarsTable
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.Maybe
         (Language.Fortran.Fortran LanguageFortranTools.Anno)
    -> Language.Fortran.Block LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U(U,A)><L,U><L,U><S,U><L,1*U><L,1*U><L,1*U><S(LLLLLS),1*U(U,U,U,U(U(U,U(U),U),U(U,U(U),U)),U,U)> -}
fdce47a9b1212c6b1535c12afc050ffa
  produceCode_fortran ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U(U,A)><L,U><L,U><S,1*U> -}
9f8e32d485c5cac083e5c9b7832621b0
  produceCode_prog ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> Platform.Platform
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
    -> ((Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String),
        LanguageFortranTools.ModuleVarsTable)
    -> GHC.Types.IO GHC.Base.String
  {- Arity: 10,
     Strictness: <L,U><L,A><L,U><L,U><L,A><L,U><L,U><L,U><S(SL),1*U(1*U(U,U),U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.produceCode_prog1
                  `cast`
                (<CodeEmitterUtils.KernelArgsIndexMap>_R
                 ->_R <SubroutineTable.SubroutineArgumentTranslationMap>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <Platform.Platform>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <((Language.Fortran.Program LanguageFortranTools.Anno,
                         GHC.Base.String),
                        LanguageFortranTools.ModuleVarsTable)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
79893deea6962016c48622ed28771407
  produceCode_prog1 ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> Platform.Platform
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
    -> ((Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String),
        LanguageFortranTools.ModuleVarsTable)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 10,
     Strictness: <L,U><L,A><L,U><L,U><L,A><L,U><L,U><L,U><S(SL),1*U(1*U(U,U),U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (10, True, False)
                (\ (w :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w1 :: SubroutineTable.SubroutineArgumentTranslationMap)
                   (w2 :: [GHC.Base.String])
                   (w3 :: [GHC.Base.String])
                   (w4 :: Platform.Platform)
                   (w5 :: GHC.Types.Bool)
                   (w6 :: GHC.Base.String)
                   (w7 :: GHC.Base.String)
                   (w8 :: ((Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String),
                           LanguageFortranTools.ModuleVarsTable))
                   (w9 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w8 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 FortranSynthesiser.$wproduceCode_prog
                   w
                   w2
                   w3
                   w5
                   w6
                   w7
                   ww4
                   ww5
                   ww2
                   w9 } }) -}
efeafb68d5f3b327b43e452be8ffc7b0
  produceCode_progUnit ::
    CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.SubroutineArgumentTranslationMap
    -> ((Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String),
        LanguageFortranTools.ModuleVarsTable)
    -> GHC.Base.String
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 7,
     Strictness: <L,U><L,U><S,1*U(U(U,A),U)><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ (w :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w1 :: SubroutineTable.SubroutineArgumentTranslationMap)
                   (w2 :: ((Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String),
                           LanguageFortranTools.ModuleVarsTable))
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Base.String)
                   (w5 :: [GHC.Base.String])
                   (w6 :: Language.Fortran.ProgUnit LanguageFortranTools.Anno) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wproduceCode_progUnit
                   w
                   w1
                   ww1
                   ww2
                   w3
                   w4
                   w5
                   w6 }) -}
c5be82253f0ad29b8265fdc0a4116acd
  readOriginalFileLines ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Types.IO [GHC.Base.String]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                FortranSynthesiser.readOriginalFileLines1
                  `cast`
                (<[GHC.Base.String]>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)) -}
f6aa2522a5312077c3b826bc8dc45be5
  readOriginalFileLines1 ::
    [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (cppDFlags :: [GHC.Base.String])
                   (cppXFlags :: [GHC.Base.String])
                   (fixedForm :: GHC.Types.Bool)
                   (filename :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case LanguageFortranTools.$wpreProcessingHelper
                        cppDFlags
                        cppXFlags
                        fixedForm
                        filename
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,,) preproc_inp ds ds2 ->
                 (# ipv, Data.OldList.lines preproc_inp #) } }) -}
8a97a87382a2e44c52da3ce47e2c8464
  removeIntent :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U> -}
22e824160977915e067b73fb352a9f9f
  restoreUsedModuleDecls ::
    Language.Fortran.Decl LanguageFortranTools.Anno
    -> LanguageFortranTools.ModuleVarsTable
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <L,1*U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (blockDecl :: Language.Fortran.Decl LanguageFortranTools.Anno)
                   (modVarTable :: LanguageFortranTools.ModuleVarsTable) ->
                 FortranSynthesiser.restoreUsedModuleDecls'
                   (FortranSynthesiser.traverseDSeq
                      @ LanguageFortranTools.Anno
                      blockDecl
                      (GHC.Types.[] @ (Language.Fortran.Decl LanguageFortranTools.Anno)))
                   modVarTable) -}
2a4f26436e4be61dd615e9f6d5279e9d
  restoreUsedModuleDecls' ::
    [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> LanguageFortranTools.ModuleVarsTable
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <L,1*U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (w1 :: LanguageFortranTools.ModuleVarsTable) ->
                 case FortranSynthesiser.$wrestoreUsedModuleDecls'
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
133e5f609aabada3562d384c662e020a
  synthesisElses ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (Language.Fortran.Expr LanguageFortranTools.Anno,
        Language.Fortran.Fortran LanguageFortranTools.Anno)
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(U,A)><L,U><L,U><S,1*U><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: GHC.Base.String)
                   (w4 :: (Language.Fortran.Expr LanguageFortranTools.Anno,
                           Language.Fortran.Fortran LanguageFortranTools.Anno)) ->
                 case w4 of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wsynthesisElses w w1 w2 w3 ww1 ww2 }) -}
a93d4335b64f00156dc1045c33cc668b
  synthesisUses ::
    GHC.Base.String
    -> Language.Fortran.Uses LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><S,1*U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (ds :: Language.Fortran.Uses LanguageFortranTools.Anno) ->
                 case ds of wild {
                   Language.Fortran.Use ds1 ds2 ds3 ds4
                   -> case ds2 of wild1 { (,) str rename ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        tabs
                        (GHC.CString.unpackAppendCString#
                           FortranSynthesiser.synthesisUses1
                           (GHC.Base.++
                              @ GHC.Types.Char
                              str
                              FortranSynthesiser.checkForImplicitNone1)) }
                   Language.Fortran.UseNil ipv -> GHC.Types.[] @ GHC.Types.Char }) -}
d62b8d6fa2510873a7e36b17429a6bd9
  synthesisUses1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("use "#) -}
eb91c55dc6ffbbd7f3ca70f48f386575
  synthesiseArgList ::
    Language.Fortran.ArgList LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(A,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.ArgList LanguageFortranTools.Anno) ->
                 case w of ww { Language.Fortran.ArgList ww1 ww2 ->
                 FortranSynthesiser.$wsynthesiseArgList ww2 }) -}
c6ce50960382274aae1578ecd1b20b28
  synthesiseArgList1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseArgList2) -}
d5f1666979f2e12db39fbf5daed43d53
  synthesiseArgList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
18492a46e178f2fbfef39467422ec8dc
  synthesiseArgList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("("#) -}
23387967490fda1591da2bb7129f9796
  synthesiseAssg ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><L,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseAssg w1 w2 w3) -}
4d019645cb14be0d2bc6c40d59d61c7f
  synthesiseAssg1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" = "#) -}
92feac603c67d58f83db099c0b23cf19
  synthesiseAssg2 :: GHC.Base.String
  {- Strictness: x -}
98abccb8c31e103e851da57acb5741ed
  synthesiseAttr ::
    Language.Fortran.Attr LanguageFortranTools.Anno -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.Fortran.Attr
                            LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseAttr12
                   Language.Fortran.Parameter ds1
                   -> FortranSynthesiser.matchParameterDecl2
                   Language.Fortran.Intent ds1 intentAttr
                   -> GHC.CString.unpackAppendCString#
                        FortranSynthesiser.synthesiseAttr11
                        (case intentAttr of wild1 {
                           Language.Fortran.In ds2 -> FortranSynthesiser.synthesiseAttr8
                           Language.Fortran.Out ds2 -> FortranSynthesiser.synthesiseAttr5
                           Language.Fortran.InOut ipv -> FortranSynthesiser.synthesiseAttr2 })
                   Language.Fortran.Dimension ds1 exprList
                   -> GHC.CString.unpackAppendCString#
                        FortranSynthesiser.synthesiseAttr1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (FortranSynthesiser.synthesiseRangeExpr exprList)
                           FortranSynthesiser.synthesiseArgList1) }) -}
6df1729f7a78a8fe55006c5e376bfaa5
  synthesiseAttr1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dimension("#) -}
4dbdd30f71029c4e7f65cb7985b63143
  synthesiseAttr10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("In"#) -}
854750675ec09c9c95068d113c2d5c9f
  synthesiseAttr11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("intent("#) -}
343fc7de287de52820b3c4c555e5d9c7
  synthesiseAttr12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseAttr13) -}
364eb059c728102ec7415ec58422e8ad
  synthesiseAttr13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[Incompatible attribute]"#) -}
38600698be958f6651ee4d6a81c7d522
  synthesiseAttr2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranSynthesiser.synthesiseAttr3
                   FortranSynthesiser.synthesiseArgList1) -}
1c81d749cc310ee57ecb9973f8e70385
  synthesiseAttr3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseAttr4) -}
660a50baceaba3a0c550d4a0c069e368
  synthesiseAttr4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InOut"#) -}
8a449083838c3dcc62659c569641a19c
  synthesiseAttr5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranSynthesiser.synthesiseAttr6
                   FortranSynthesiser.synthesiseArgList1) -}
b7829f26fe9c43f143b8f6236cbedba1
  synthesiseAttr6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseAttr7) -}
943f8d8b3bec87e81d6ab79aec4b0519
  synthesiseAttr7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Out"#) -}
97eebc45f46b1040d845c8cfff7dc03d
  synthesiseAttr8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   FortranSynthesiser.synthesiseAttr9
                   FortranSynthesiser.synthesiseArgList1) -}
b5314e879d3581905340611ad95fea3e
  synthesiseAttr9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseAttr10) -}
efce78cf2c4513774002b5c9891ef154
  synthesiseAttrList ::
    [Language.Fortran.Attr LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.Fortran.Attr
                             LanguageFortranTools.Anno]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : attr ds1
                   -> case ds1 of wild1 {
                        []
                        -> case attr of wild2 {
                             DEFAULT -> FortranSynthesiser.synthesiseAttr12
                             Language.Fortran.Parameter ds2 -> GHC.Types.[] @ GHC.Types.Char
                             Language.Fortran.Intent ds2 intentAttr
                             -> GHC.CString.unpackAppendCString#
                                  FortranSynthesiser.synthesiseAttr11
                                  (case intentAttr of wild3 {
                                     Language.Fortran.In ds3 -> FortranSynthesiser.synthesiseAttr8
                                     Language.Fortran.Out ds3 -> FortranSynthesiser.synthesiseAttr5
                                     Language.Fortran.InOut ipv
                                     -> FortranSynthesiser.synthesiseAttr2 })
                             Language.Fortran.Dimension ds2 exprList
                             -> GHC.CString.unpackAppendCString#
                                  FortranSynthesiser.synthesiseAttr1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     (FortranSynthesiser.synthesiseRangeExpr exprList)
                                     FortranSynthesiser.synthesiseArgList1) }
                        : ipv ipv1
                        -> let {
                             attrStrList :: [GHC.Base.String]
                             = FortranSynthesiser.synthesiseAttrList_$sgo attr wild1
                           } in
                           case GHC.Classes.$fEq[]_$s$c==1
                                  attrStrList
                                  (GHC.Types.[] @ GHC.Base.String) of wild2 {
                             GHC.Types.False
                             -> case attrStrList of wild3 {
                                  [] -> case GHC.List.scanl2 ret_ty GHC.Base.String of {}
                                  : ds2 xs -> FortranSynthesiser.synthesiseAttrList_go xs ds2 }
                             GHC.Types.True -> FortranSynthesiser.synthesiseAttrList1 } } }) -}
3e99f998d32e759420f10dd8add7bfc6
  synthesiseAttrList1 :: GHC.Base.String
  {- Strictness: x -}
6111f557ebec2f69c4e5f8dcd12b0524
  synthesiseAttrList_$sgo ::
    Language.Fortran.Attr
      (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [Language.Fortran.Attr
          (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])]
    -> [[GHC.Types.Char]]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
7441db507874ce9a5bdd8e59dc2211a4
  synthesiseAttrList_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
d6127b3c280c27107434578035b27dc7
  synthesiseBaseType ::
    Language.Fortran.BaseType LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.BaseType LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseBaseType7
                   Language.Fortran.Integer ds1
                   -> FortranSynthesiser.synthesiseBaseType5
                   Language.Fortran.Real ds1 -> FortranSynthesiser.synthesiseBaseType3
                   Language.Fortran.Character ds1
                   -> FortranSynthesiser.synthesiseBaseType1 }) -}
e736882f2214a6e600e00d02b75a12fa
  synthesiseBaseType1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseBaseType2) -}
22ede49e9f5d0734a9274d66e47c1a34
  synthesiseBaseType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("character"#) -}
c591fca94cb1a16b9e64c57ca696f506
  synthesiseBaseType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseBaseType4) -}
35eee8bd771db6be12aa20904833fb48
  synthesiseBaseType4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("real"#) -}
d9fad4b3f705655bdae8e0dd6338d374
  synthesiseBaseType5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseBaseType6) -}
a0d4c5e83a28571fa59f771ec41edea5
  synthesiseBaseType6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("integer"#) -}
4c2a3b59a0ebefb5f85797d8718d6a1f
  synthesiseBaseType7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseBaseType8) -}
cf41dec3b4a5e8bc27c12144a61a4c26
  synthesiseBaseType8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[Incompatible type]"#) -}
dcb257756969fa4653abd2f3cdedeb36
  synthesiseBufferAccess ::
    GHC.Base.String
    -> GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><S,1*U> -}
9c3d598c1276a3914c0b1acfab87dae2
  synthesiseBufferDeclaration ::
    GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (decl :: Language.Fortran.Decl LanguageFortranTools.Anno) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   tabs
                   (GHC.CString.unpackAppendCString#
                      FortranSynthesiser.synthesiseBufferDeclaration2
                      (case LanguageFortranTools.$wextractAssigneeFromDecl
                              decl of ww { (#,#) ww1 ww2 ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         ww2
                         FortranSynthesiser.synthesiseBufferDeclaration1 }))) -}
e6855697cea3856552890265ff792917
  synthesiseBufferDeclaration1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   CodeEmitterUtils.varBufVarName1) -}
9980d324b021817150b3800532f6ecce
  synthesiseBufferDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("integer(8) :: "#) -}
cfe610696a5c3a108785a588d1f23c36
  synthesiseBufferIndexNames ::
    (GHC.Num.Num b, GHC.Show.Show b) =>
    [GHC.Types.Char]
    -> Data.Map.Internal.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) b
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,U(A,A,A,1*C1(U),A,A,1*C1(U))><L,U(A,C(U),A)><L,U><L,U><L,U><S,U>,
     Unfolding: (\ @ b
                   ($dNum :: GHC.Num.Num b)
                   ($dShow :: GHC.Show.Show b)
                   (tabs :: [GHC.Types.Char])
                   (allKernelArgsMap :: Data.Map.Internal.Map
                                          (Language.Fortran.VarName LanguageFortranTools.Anno) b)
                   (argTranslation :: SubroutineTable.ArgumentTranslation)
                   (vars :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 letrec {
                   go12 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                           -> [b] -> [[GHC.Types.Char]]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                       (_ys :: [b]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ [GHC.Types.Char]
                       : ipv ipv1
                       -> case _ys of wild1 {
                            [] -> GHC.Types.[] @ [GHC.Types.Char]
                            : ipv2 ipv3
                            -> GHC.Types.:
                                 @ [GHC.Types.Char]
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    tabs
                                    (GHC.CString.unpackAppendCString#
                                       FortranSynthesiser.synthesiseBufferIndexNames4
                                       (case ipv of wild2 { Language.Fortran.VarName ds1 str ->
                                        let {
                                          z1 :: [GHC.Types.Char]
                                          = GHC.CString.unpackFoldrCString#
                                              @ [GHC.Types.Char]
                                              CodeEmitterUtils.varBufVarName1
                                              FortranSynthesiser.synthesiseBufferIndexNames3
                                              (GHC.CString.unpackAppendCString#
                                                 FortranSynthesiser.synthesiseBufferIndexNames2
                                                 (GHC.Show.show @ b $dShow ipv2))
                                        } in
                                        letrec {
                                          go14 :: [GHC.Types.Char] -> [GHC.Types.Char]
                                            {- Arity: 1, Strictness: <S,1*U> -}
                                          = \ (ds2 :: [GHC.Types.Char]) ->
                                            case ds2 of wild3 {
                                              [] -> z1
                                              : y ys
                                              -> GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Unicode.toUpper y)
                                                   (go14 ys) }
                                        } in
                                        go14 str })))
                                 (go12 ipv1 ipv3) } }
                 } in
                 Data.OldList.unlines
                   (go12
                      vars
                      (let {
                         lvl499 :: b
                         = GHC.Num.negate
                             @ b
                             $dNum
                             (GHC.Num.fromInteger
                                @ b
                                $dNum
                                FortranSynthesiser.synthesiseBufferIndexNames5)
                       } in
                       GHC.Base.map
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                         @ b
                         (\ (x :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                          case x of ww { Language.Fortran.VarName ww1 ww2 ->
                          case SubroutineTable.$wpoly_go13
                                 @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                 ww
                                 ww1
                                 ww2
                                 argTranslation of ww4 { Language.Fortran.VarName ww5 ww6 ->
                          FortranSynthesiser.$wpoly_go13
                            @ b
                            lvl499
                            ww5
                            ww6
                            allKernelArgsMap } })
                         vars))) -}
161495ed9df8610e4205ef30311ad264
  synthesiseBufferIndexNames1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
99e01060a877878c5e6eaaba45c234cb
  synthesiseBufferIndexNames2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_IDX = "#) -}
792dea70b85fde7e63508414360cee48
  synthesiseBufferIndexNames3 ::
    GHC.Types.Char -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>m2,
     Unfolding: (\ (x :: GHC.Types.Char)
                   (ys :: [GHC.Types.Char])[OneShot] ->
                 GHC.Types.: @ GHC.Types.Char (GHC.Unicode.toUpper x) ys) -}
0c7c1aa9a2c53e1ad143e133b5cd316c
  synthesiseBufferIndexNames4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("integer, parameter ::"#) -}
8f94b04e4046c775c9e9bd9dfb7f3364
  synthesiseBufferIndexNames5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
708663b953ca066c93d0662e3b0cca41
  synthesiseBufferIndexNames_$ssynthesiseBufferIndexNames ::
    [GHC.Types.Char]
    -> Data.Map.Internal.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) GHC.Types.Int
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>,
     Unfolding: (\ (tabs :: [GHC.Types.Char])
                   (allKernelArgsMap :: Data.Map.Internal.Map
                                          (Language.Fortran.VarName LanguageFortranTools.Anno)
                                          GHC.Types.Int)
                   (argTranslation :: SubroutineTable.ArgumentTranslation)
                   (vars :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 letrec {
                   go12 :: [Language.Fortran.VarName LanguageFortranTools.Anno]
                           -> [GHC.Types.Int] -> [[GHC.Types.Char]]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                       (_ys :: [GHC.Types.Int]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ [GHC.Types.Char]
                       : ipv ipv1
                       -> case _ys of wild1 {
                            [] -> GHC.Types.[] @ [GHC.Types.Char]
                            : ipv2 ipv3
                            -> GHC.Types.:
                                 @ [GHC.Types.Char]
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    tabs
                                    (GHC.CString.unpackAppendCString#
                                       FortranSynthesiser.synthesiseBufferIndexNames4
                                       (case ipv of wild2 { Language.Fortran.VarName ds1 str ->
                                        let {
                                          z1 :: [GHC.Types.Char]
                                          = GHC.CString.unpackFoldrCString#
                                              @ [GHC.Types.Char]
                                              CodeEmitterUtils.varBufVarName1
                                              FortranSynthesiser.synthesiseBufferIndexNames3
                                              (GHC.CString.unpackAppendCString#
                                                 FortranSynthesiser.synthesiseBufferIndexNames2
                                                 (case ipv2 of ww2 { GHC.Types.I# ww3 ->
                                                  case GHC.Show.$wshowSignedInt
                                                         0#
                                                         ww3
                                                         (GHC.Types.[]
                                                            @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                  GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))
                                        } in
                                        letrec {
                                          go14 :: [GHC.Types.Char] -> [GHC.Types.Char]
                                            {- Arity: 1, Strictness: <S,1*U> -}
                                          = \ (ds2 :: [GHC.Types.Char]) ->
                                            case ds2 of wild3 {
                                              [] -> z1
                                              : y ys
                                              -> GHC.Types.:
                                                   @ GHC.Types.Char
                                                   (GHC.Unicode.toUpper y)
                                                   (go14 ys) }
                                        } in
                                        go14 str })))
                                 (go12 ipv1 ipv3) } }
                 } in
                 Data.OldList.unlines
                   (go12
                      vars
                      (GHC.Base.map
                         @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                         @ GHC.Types.Int
                         (\ (x :: Language.Fortran.VarName LanguageFortranTools.Anno) ->
                          case x of ww { Language.Fortran.VarName ww1 ww2 ->
                          case SubroutineTable.$wpoly_go13
                                 @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                                 ww
                                 ww1
                                 ww2
                                 argTranslation of ww4 { Language.Fortran.VarName ww5 ww6 ->
                          FortranSynthesiser.$wpoly_go13
                            @ GHC.Types.Int
                            FortranSynthesiser.synthesiseBufferIndexNames1
                            ww5
                            ww6
                            allKernelArgsMap } })
                         vars))) -}
be96eec5b13990c31030a51e99eb15a6
  synthesiseBufferLoads ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case FortranSynthesiser.$wsynthesiseBufferLoads
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
34374fae38f7d7a1851b2be36dd91b8e
  synthesiseBufferLoads1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseBufferLoads2) -}
58277e1a6de9dbc1dc07dec677f683bf
  synthesiseBufferLoads2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_buf)\n"#) -}
e16aa11062e743fa6c95aa9c5590f31c
  synthesiseBufferLoads3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_IDX, "#) -}
4cdcf078991f8b5fbbe70a682ab3b39a
  synthesiseBufferLoads4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("call oclLoadBuffer("#) -}
b64973e4cb34fc43751def3fc322bb2c
  synthesiseBufferLoads5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseBufferLoads6) -}
be7a5f241ac0955a3cb795b225814954
  synthesiseBufferLoads6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_buf\n"#) -}
8e98dd8d98421d6d38163d6b0f885b60
  synthesiseBufferLoads_kernel ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> Language.Fortran.Block LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: Language.Fortran.Block LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseBufferLoads_kernel
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
aec2745cac71c805e8520d97c37b1fe6
  synthesiseBufferLoads_kernel1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: x -}
c5ad4086aaf7b7ddd57e9cab12bc8c03
  synthesiseBufferLoads_kernel2 ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseBufferLoads_kernel3
                   Language.Fortran.OpenCLBufferRead ds1 ds2 var -> var }) -}
ecba441931ad57ddf3d4a7d1b2669743
  synthesiseBufferLoads_kernel3 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: x -}
364c8439678327d069ea1bcfb50c023d
  synthesiseBufferMake ::
    GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
09875403c7ffe2a71cb480f3532016a7
  synthesiseBufferStores ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> SubroutineTable.ArgumentTranslation
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: CodeEmitterUtils.KernelArgsIndexMap)
                   (w2 :: SubroutineTable.ArgumentTranslation)
                   (w3 :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case FortranSynthesiser.$wsynthesiseBufferStores
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
a7a99ca6fd6d640e942c3356b48c7eed
  synthesiseBufferStores1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("call oclStoreBuffer("#) -}
df33ff7d70a8ce873b0ae14292066079
  synthesiseCall ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><L,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseCall w1 w2 w3) -}
66b078ee772a196da91e71eb92947f90
  synthesiseCall1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("call "#) -}
64a806eb2231a6a7133615a167dc0e6a
  synthesiseCall2 :: GHC.Base.String
  {- Strictness: x -}
fed2ae206d8a8b05e17b234b30402f52
  synthesiseDecl ::
    GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
a267e18be8efdf79d5d7577d26c21bb1
  synthesiseDecl1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" :: "#) -}
64d1b35d649f97ac9218e18d46e4ab29
  synthesiseDeclList ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno,
      GHC.Base.Maybe GHC.Types.Int)]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [(Language.Fortran.Expr
                              LanguageFortranTools.Anno,
                            Language.Fortran.Expr LanguageFortranTools.Anno,
                            GHC.Base.Maybe GHC.Types.Int)]) ->
                 case ds of wild {
                   [] -> FortranSynthesiser.synthesiseDeclList2
                   : ds1 xs
                   -> case ds1 of wild1 { (,,) expr1 expr2 maybeInt ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (LanguageFortranTools.outputExprFormatting expr1)
                        (let {
                           n :: [GHC.Types.Char]
                           = let {
                               n1 :: [GHC.Types.Char]
                               = case xs of wild2 {
                                   [] -> GHC.Types.[] @ GHC.Types.Char
                                   : ipv ipv1
                                   -> GHC.CString.unpackAppendCString#
                                        FortranSynthesiser.synthesiseDeclList1
                                        (FortranSynthesiser.synthesiseDeclList_$ssynthesiseDeclList
                                           ipv
                                           ipv1) }
                             } in
                             case maybeInt of wild2 {
                               GHC.Base.Nothing -> n1
                               GHC.Base.Just a
                               -> GHC.CString.unpackAppendCString#
                                    FortranSynthesiser.synthesiseDeclList1
                                    (case a of ww2 { GHC.Types.I# ww3 ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            ww3
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Base.++_$s++ @ GHC.Types.Char n1 ww5 ww6 } }) }
                         } in
                         case expr2 of wild2 {
                           DEFAULT
                           -> GHC.CString.unpackAppendCString#
                                FortranSynthesiser.synthesiseAssg1
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (LanguageFortranTools.outputExprFormatting wild2)
                                   n)
                           Language.Fortran.NullExpr ds2 ds3 -> n }) } }) -}
68680d862690b861ea5c3fc08d8b8880
  synthesiseDeclList1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", "#) -}
788f28d67f0cc9cbe5a372300d51eeb4
  synthesiseDeclList2 :: GHC.Base.String
  {- Strictness: x -}
6fb1068a60b33c4674f901fab796bbd8
  synthesiseDeclList_$ssynthesiseDeclList ::
    (Language.Fortran.Expr
       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
     Language.Fortran.Expr
       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
     GHC.Base.Maybe GHC.Types.Int)
    -> [(Language.Fortran.Expr
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         GHC.Base.Maybe GHC.Types.Int)]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <S(SLL),1*U(1*U,1*U,1*U)><L,1*U> -}
8a63b8f9405a38a387665028e67d1d4b
  synthesiseDecl_$ssynthesiseDecl ::
    Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]
    -> [(Language.Fortran.Expr
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         GHC.Base.Maybe GHC.Types.Int)]
    -> Language.Fortran.Type
         (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])
    -> [GHC.Types.Char]
    -> [GHC.Types.Char]
  {- Arity: 4, Strictness: <L,A><L,1*U><L,1*U><S,1*U>,
     Unfolding: (\ (sc :: Data.Map.Internal.Map
                            [GHC.Types.Char] [[GHC.Types.Char]])
                   (sc1 :: [(Language.Fortran.Expr
                               (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                             Language.Fortran.Expr
                               (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                             GHC.Base.Maybe GHC.Types.Int)])
                   (sc2 :: Language.Fortran.Type
                             (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]))
                   (sc3 :: [GHC.Types.Char]) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   sc3
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (FortranSynthesiser.synthesiseType sc2)
                      (GHC.CString.unpackAppendCString#
                         FortranSynthesiser.synthesiseDecl1
                         (GHC.Base.++
                            @ GHC.Types.Char
                            (FortranSynthesiser.synthesiseDeclList sc1)
                            FortranSynthesiser.checkForImplicitNone1)))) -}
51930149bbaca60cba84515db4e552a9
  synthesiseDecl_Acc ::
    GHC.Base.String
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U> -}
ffe5d6e7615dabf3cc5af59cc210898c
  synthesiseDecls ::
    GHC.Base.String
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (decls :: [Language.Fortran.Decl LanguageFortranTools.Anno]) ->
                 letrec {
                   go12 :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                           -> [GHC.Types.Char] -> [GHC.Types.Char]
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                       (eta :: [GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> go12
                            ys
                            (GHC.Base.++
                               @ GHC.Types.Char
                               eta
                               (FortranSynthesiser.synthesiseDecl tabs y)) }
                 } in
                 go12 decls (GHC.Types.[] @ GHC.Types.Char)) -}
a3c296588bc838ba4467a9f4a521c22e
  synthesiseDecls_Acc ::
    GHC.Base.String
    -> [Language.Fortran.Decl LanguageFortranTools.Anno]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (decls :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                   (acc :: GHC.Base.String) ->
                 letrec {
                   go12 :: [Language.Fortran.Decl LanguageFortranTools.Anno]
                           -> [GHC.Types.Char] -> [GHC.Types.Char]
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds :: [Language.Fortran.Decl LanguageFortranTools.Anno])
                       (eta :: [GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> go12
                            ys
                            (GHC.Base.++
                               @ GHC.Types.Char
                               eta
                               (FortranSynthesiser.synthesiseDecl_Acc tabs y acc)) }
                 } in
                 go12 decls (GHC.Types.[] @ GHC.Types.Char)) -}
7793b7af0e614160893ebc6a2d953d06
  synthesiseESeq ::
    Language.Fortran.Expr LanguageFortranTools.Anno -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
1d845492dafddd8c62bbef4cf9f68db4
  synthesiseFor ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U(U,A)><L,U><L,U><S,1*U> -}
f02d226eb64f6e4d1b5cdd03f0cf2bf1
  synthesiseIf ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U(U,A)><L,U><L,U><S,1*U> -}
215fd6a565bd75c61e8cbbea1b5a0e84
  synthesiseInitModule ::
    GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> [(GHC.Base.String, GHC.Base.String)]
    -> SubroutineTable.SubroutineTable
    -> GHC.Base.String
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,1*U><L,U> -}
8792ce667e42da22d96ba988b6967985
  synthesiseKernelCall ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SL),1*U(1*U,A)><L,U><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wsynthesiseKernelCall ww1 w1 w2 }) -}
9b872cc80f9f7257e8e892dac34739ff
  synthesiseKernelCaseAlternative ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><S,1*U>,
     Unfolding: (\ (tabs :: GHC.Base.String)
                   (state :: GHC.Base.String)
                   (kernelName :: GHC.Base.String)
                   (ds :: [Language.Fortran.VarName LanguageFortranTools.Anno]) ->
                 case ds of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        FortranSynthesiser.synthesiseKernelCaseAlternative5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           kernelName
                           FortranSynthesiser.synthesiseKernelCaseAlternative3)
                   : ipv ipv1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        tabs
                        (GHC.CString.unpackAppendCString#
                           FortranSynthesiser.synthesiseKernelCaseAlternative2
                           (GHC.Base.++
                              @ GHC.Types.Char
                              state
                              (GHC.CString.unpackAppendCString#
                                 FortranSynthesiser.synthesiseKernelCaseAlternative1
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    tabs
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       LanguageFortranTools.outputTab
                                       (GHC.CString.unpackAppendCString#
                                          FortranSynthesiser.synthesiseCall1
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             kernelName
                                             (GHC.CString.unpackAppendCString#
                                                FortranSynthesiser.synthesiseArgList3
                                                (case ipv of wild1 { Language.Fortran.VarName ds1 str ->
                                                 FortranSynthesiser.synthesiseKernelCaseAlternative_go
                                                   ipv1
                                                   str }))))))))) }) -}
336c4c6c59ef22f091e196b6a15f8d2b
  synthesiseKernelCaseAlternative1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")\n"#) -}
6fd21227b03a5c2bbb6f232e94812130
  synthesiseKernelCaseAlternative2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("case ("#) -}
22276d9a09330c0066c912d0cfe7855c
  synthesiseKernelCaseAlternative3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseKernelCaseAlternative4) -}
768c5c867ea2acbecb92ef89721dde58
  synthesiseKernelCaseAlternative4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", has no args\n"#) -}
65bf091df91c1b66cf571690c9f701f6
  synthesiseKernelCaseAlternative5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \! Skipped call to "#) -}
0aee557c8e992eec26e352fb0056760c
  synthesiseKernelCaseAlternative_go ::
    [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
5f607f85ffa3b3bdc6bba519e23f895f
  synthesiseKernels ::
    Platform.Platform
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> [(GHC.Base.String, GHC.Base.String)]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,1*U(U,A)><S,1*U>,
     Unfolding: (\ (plat :: Platform.Platform)
                   (originalLines :: [GHC.Base.String])
                   (orig_ast :: Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   (prog :: (Language.Fortran.Program LanguageFortranTools.Anno,
                             GHC.Base.String))
                   (codeSeg :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case codeSeg of wild {
                   DEFAULT -> GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)
                   Language.Fortran.OpenCLMap ds src ds1 w ds2 ds3 ds4
                   -> GHC.Types.:
                        @ (GHC.Base.String, GHC.Base.String)
                        (case FortranSynthesiser.$wsynthesiseOpenCLMap
                                (GHC.Types.[] @ GHC.Types.Char)
                                originalLines
                                orig_ast
                                prog
                                wild of ww { (#,#) ww1 ww2 ->
                         (ww1, ww2) })
                        (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                   Language.Fortran.OpenCLReduce ds src ds1 ds2 ds3 ds4 rv ds5
                   -> GHC.Types.:
                        @ (GHC.Base.String, GHC.Base.String)
                        (case FortranSynthesiser.$wsynthesiseOpenCLReduce
                                plat
                                (GHC.Types.[] @ GHC.Types.Char)
                                originalLines
                                orig_ast
                                prog
                                wild of ww { (#,#) ww1 ww2 ->
                         (ww1, ww2) })
                        (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String)) }) -}
0f3b9b200f2f8647f499228bfa6b1ec4
  synthesiseOpenCLBufferRead ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S(SL),1*U(1*U,A)><L,U><L,A><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wsynthesiseOpenCLBufferRead ww1 w1 w3 }) -}
b24df1327b7faf8cf21d8c12f7f2293c
  synthesiseOpenCLBufferRead1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseOpenCLBufferRead2) -}
f7eea6a026cea51382205d1ac3a06fa4
  synthesiseOpenCLBufferRead2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Read"#) -}
f9ad3aa433ef8a73701a996dab05c4e2
  synthesiseOpenCLBufferRead3 ::
    (Language.Fortran.Decl LanguageFortranTools.Anno)
  {- Strictness: x -}
1f91e42f9e4f0ec5eeb341ff60783ee8
  synthesiseOpenCLBufferRead4 :: GHC.Base.String
  {- Strictness: x -}
fc4393693ee6287c6b9f0ae3aaedd88c
  synthesiseOpenCLBufferWrite ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S(SL),1*U(1*U,A)><L,U><L,A><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case w of ww { (,) ww1 ww2 ->
                 FortranSynthesiser.$wsynthesiseOpenCLBufferWrite ww1 w1 w3 }) -}
4c91e7e52807ccea370a4b2d73bb49d7
  synthesiseOpenCLBufferWrite1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   FortranSynthesiser.synthesiseOpenCLBufferWrite2) -}
d07f169cf9849442e8f9f4878c95db99
  synthesiseOpenCLBufferWrite2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Write"#) -}
b19da5c5368d4377a3aef1cf957d9849
  synthesiseOpenCLBufferWrite3 ::
    (Language.Fortran.Decl LanguageFortranTools.Anno)
  {- Strictness: x -}
b94dd57d802e80b0f3939b5dd88b9888
  synthesiseOpenCLBufferWrite4 :: GHC.Base.String
  {- Strictness: x -}
e26a30e145ad036745cc04ec662a16a4
  synthesiseOpenCLMap ::
    Platform.Platform
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 6, Strictness: <L,A><L,U><L,U><L,U><L,1*U(U,A)><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Platform.Platform)
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   (w4 :: (Language.Fortran.Program LanguageFortranTools.Anno,
                           GHC.Base.String))
                   (w5 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseOpenCLMap
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
eb023a755c6299bfa65c9369a57b1d76
  synthesiseOpenCLReduce ::
    Platform.Platform
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> (Language.Fortran.Program LanguageFortranTools.Anno,
        GHC.Base.String)
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,1*U(U,A)><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Platform.Platform)
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.ProgUnit LanguageFortranTools.Anno)
                   (w4 :: (Language.Fortran.Program LanguageFortranTools.Anno,
                           GHC.Base.String))
                   (w5 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseOpenCLReduce
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
8cd2bb41e4104a7ebdc6b59c2218f4ac
  synthesiseRangeExpr ::
    [(Language.Fortran.Expr LanguageFortranTools.Anno,
      Language.Fortran.Expr LanguageFortranTools.Anno)]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [(Language.Fortran.Expr
                              LanguageFortranTools.Anno,
                            Language.Fortran.Expr LanguageFortranTools.Anno)]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) ds3 expr2 ->
                      case ds3 of wild2 {
                        DEFAULT
                        -> case ds2 of wild3 {
                             []
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (LanguageFortranTools.outputExprFormatting wild2)
                                  (GHC.CString.unpackAppendCString#
                                     FortranSynthesiser.synthesiseRangeExpr1
                                     (LanguageFortranTools.outputExprFormatting expr2))
                             : ipv ipv1
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (LanguageFortranTools.outputExprFormatting wild2)
                                  (GHC.CString.unpackAppendCString#
                                     FortranSynthesiser.synthesiseRangeExpr1
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        (LanguageFortranTools.outputExprFormatting expr2)
                                        (GHC.CString.unpackAppendCString#
                                           FortranSynthesiser.getLocalDeclStrs_OLD2
                                           (FortranSynthesiser.synthesiseRangeExpr_$ssynthesiseRangeExpr
                                              ipv
                                              ipv1)))) }
                        Language.Fortran.NullExpr ds4 ds5
                        -> case ds2 of wild3 {
                             [] -> LanguageFortranTools.outputExprFormatting expr2
                             : ipv ipv1
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (LanguageFortranTools.outputExprFormatting expr2)
                                  (GHC.CString.unpackAppendCString#
                                     FortranSynthesiser.getLocalDeclStrs_OLD2
                                     (FortranSynthesiser.synthesiseRangeExpr_$ssynthesiseRangeExpr
                                        ipv
                                        ipv1)) } } } }) -}
0fcb312567d8cd7d787e471353b7ed65
  synthesiseRangeExpr1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (":"#) -}
945c959aeff8d02643475c8e4b87b785
  synthesiseRangeExpr_$ssynthesiseRangeExpr ::
    (Language.Fortran.Expr
       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
     Language.Fortran.Expr
       (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]))
    -> [(Language.Fortran.Expr
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
         Language.Fortran.Expr
           (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]))]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S,1*U> -}
091806bbad89fb9cc016c1242e8461af
  synthesiseSetOclArg ::
    GHC.Base.String
    -> CodeEmitterUtils.KernelArgsIndexMap
    -> Language.Fortran.Decl LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U><S,1*U> -}
a50513b1b01c265d1412452485a28e51
  synthesiseSizeStatements ::
    GHC.Base.String
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w2 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseSizeStatements
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
fff331785c4be44a676de601d99b5b16
  synthesiseSizeStatements_kernel ::
    GHC.Base.String
    -> Language.Fortran.Program LanguageFortranTools.Anno
    -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: Language.Fortran.Program LanguageFortranTools.Anno) ->
                 case FortranSynthesiser.$wsynthesiseSizeStatements_kernel
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
0b5af831efd337a200eaaba8ca5fadd8
  synthesiseSizeStatements_kernel1 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: x -}
8fb3c2a7f4dfe9578ff65906b31d5c8f
  synthesiseSizeStatements_kernel2 ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case ds of wild {
                   DEFAULT -> FortranSynthesiser.synthesiseSizeStatements_kernel3
                   Language.Fortran.OpenCLBufferRead ds1 ds2 var -> var }) -}
247027870d5ea08a2c848fd116825388
  synthesiseSizeStatements_kernel3 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
  {- Strictness: x -}
503d539fa1e40c314fa4187d5e6bca14
  synthesiseStateDefinitions ::
    [(GHC.Base.String, GHC.Base.String)]
    -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)>,
     Unfolding: (\ (ds :: [(GHC.Base.String, GHC.Base.String)])
                   (currentVal :: GHC.Types.Int) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ds1 xs
                   -> case ds1 of wild1 { (,) kernel state ->
                      GHC.CString.unpackAppendCString#
                        FortranSynthesiser.synthesiseStateDefinitions2
                        (GHC.Base.++
                           @ GHC.Types.Char
                           state
                           (GHC.CString.unpackAppendCString#
                              FortranSynthesiser.synthesiseAssg1
                              (case currentVal of ww2 { GHC.Types.I# ww3 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww3
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Base.++_$s++
                                 @ GHC.Types.Char
                                 (GHC.CString.unpackAppendCString#
                                    FortranSynthesiser.synthesiseStateDefinitions1
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       kernel
                                       (GHC.CString.unpackAppendCString#
                                          FortranSynthesiser.checkForImplicitNone2
                                          (FortranSynthesiser.synthesiseStateDefinitions_$ssynthesiseStateDefinitions
                                             (GHC.Prim.+# ww3 1#)
                                             xs))))
                                 ww5
                                 ww6 } }))) } }) -}
3e5e2bcbdf3de3aa4e63b994d2c1ff6c
  synthesiseStateDefinitions1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" !  "#) -}
04ed2f147062a26787a29978ac824fa4
  synthesiseStateDefinitions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("integer, parameter :: "#) -}
f343b3f8f3abb2f56d4fe132692a2f4e
  synthesiseStateDefinitions_$ssynthesiseStateDefinitions ::
    GHC.Prim.Int#
    -> [([GHC.Types.Char], [GHC.Types.Char])] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
ac45e6b8681d9bf56b48b6ce35cf9260
  synthesiseSuperKernel ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(GHC.Base.String, GHC.Base.String)]
    -> (GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,1*U><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: [(Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String)])
                   (w4 :: [(GHC.Base.String, GHC.Base.String)]) ->
                 case FortranSynthesiser.$wsynthesiseSuperKernel
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
e43c3ca7f04257191c736ca555b11d21
  synthesiseSuperKernelModule ::
    GHC.Base.String
    -> GHC.Base.String
    -> [(Language.Fortran.Program LanguageFortranTools.Anno,
         GHC.Base.String)]
    -> [(GHC.Base.String, GHC.Base.String)]
    -> (GHC.Base.String, CodeEmitterUtils.KernelArgsIndexMap)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: [(Language.Fortran.Program LanguageFortranTools.Anno,
                            GHC.Base.String)])
                   (w3 :: [(GHC.Base.String, GHC.Base.String)]) ->
                 case FortranSynthesiser.$wsynthesiseSuperKernelModule
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
3f42746b04a9e3e8df39c6a65ef8bad6
  synthesiseSuperKernelModule1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("end module "#) -}
b13082043f655e438dd6979eefe21108
  synthesiseSuperKernelModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("contains\n\
                 \\n"#) -}
d91f836187496f18b89cc2ff33a0ef94
  synthesiseSuperKernelModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\n"#) -}
34f5a874aac6ee60ddf81d9997906730
  synthesiseSuperKernelModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("module "#) -}
f41002e8da28bdc09f284e40dc77ce5a
  synthesiseSuperKernelName :: [GHC.Base.String] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (originalFilenames :: [GHC.Base.String]) ->
                 case originalFilenames of wild {
                   [] -> case GHC.List.foldl2 ret_ty [GHC.Types.Char] of {}
                   : x xs
                   -> FortranSynthesiser.synthesiseSuperKernelName_go xs x }) -}
74629d993f19921c8d419e4e1b6e822d
  synthesiseSuperKernelName_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
de0404b9c23a83f6fff131334fe5272e
  synthesiseType ::
    Language.Fortran.Type LanguageFortranTools.Anno -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.Fortran.Type
                            LanguageFortranTools.Anno) ->
                 case ds of wild {
                   Language.Fortran.BaseType anno base attrList expr1 expr2
                   -> let {
                        n :: [GHC.Types.Char]
                        = let {
                            n1 :: [GHC.Types.Char]
                            = case FortranSynthesiser.synthesiseAttrList attrList of wild1 {
                                [] -> GHC.Types.[] @ GHC.Types.Char
                                : ipv ipv1
                                -> GHC.CString.unpackAppendCString#
                                     FortranSynthesiser.synthesiseDeclList1
                                     wild1 }
                          } in
                          case LanguageFortranTools.outputExprFormatting expr1 of wild1 {
                            [] -> n1
                            : ipv ipv1
                            -> GHC.CString.unpackAppendCString#
                                 FortranSynthesiser.synthesiseType2
                                 (GHC.Base.++_$s++
                                    @ GHC.Types.Char
                                    (GHC.CString.unpackAppendCString#
                                       FortranSynthesiser.synthesiseArgList2
                                       n1)
                                    ipv
                                    ipv1) }
                      } in
                      case base of wild1 {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             FortranSynthesiser.synthesiseBaseType7
                             n
                        Language.Fortran.Integer ds1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             FortranSynthesiser.synthesiseBaseType5
                             n
                        Language.Fortran.Real ds1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             FortranSynthesiser.synthesiseBaseType3
                             n
                        Language.Fortran.Character ds1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             FortranSynthesiser.synthesiseBaseType1
                             n }
                   Language.Fortran.ArrayT ipv ipv1 ipv2 ipv3 ipv4 ipv5
                   -> FortranSynthesiser.synthesiseType1 }) -}
a0c73467f0559225e4fb60a59e1104c9
  synthesiseType1 :: GHC.Base.String
  {- Strictness: x -}
289d769ab2537d28aa16b89dbd0d4fb5
  synthesiseType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("(kind="#) -}
02ab750804aeb5452c2034a8954fed66
  synthesiseUse ::
    (Language.Fortran.Program LanguageFortranTools.Anno,
     GHC.Base.String)
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> Language.Fortran.Uses LanguageFortranTools.Anno
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><S,1*U><L,A><S,1*U>, Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: (Language.Fortran.Program LanguageFortranTools.Anno,
                          GHC.Base.String))
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Base.String])
                   (w3 :: Language.Fortran.Uses LanguageFortranTools.Anno) ->
                 FortranSynthesiser.$wsynthesiseUse w1 w3) -}
c6309f425ecbfebbd58650ffcf50d110
  synthesiseUse1 :: GHC.Base.String
  {- Strictness: x -}
9b7c9b41869ee97dd50b3df62003dfcc
  traverseDSeq ::
    Language.Fortran.Decl p
    -> [Language.Fortran.Decl p] -> [Language.Fortran.Decl p]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
"SC:defaultFilename0" forall (sc :: [GHC.Types.Char])
                             (sc1 :: [[GHC.Types.Char]])
  FortranSynthesiser.defaultFilename (GHC.Types.:
                                        @ GHC.Base.String
                                        sc
                                        sc1)
  = FortranSynthesiser.defaultFilename_$sdefaultFilename sc sc1
"SC:generateOriginalFileName0" forall (sc :: [GHC.Types.Char])
                                      (sc1 :: [[GHC.Types.Char]])
  FortranSynthesiser.generateOriginalFileName (GHC.Types.:
                                                 @ GHC.Base.String
                                                 sc
                                                 sc1)
  = FortranSynthesiser.generateOriginalFileName_$sgenerateOriginalFileName
      sc
      sc1
"SC:synthesiseDecl0" forall (sc :: Data.Map.Internal.Map
                                     [GHC.Types.Char] [[GHC.Types.Char]])
                            (sc1 :: [(Language.Fortran.Expr
                                        (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                      Language.Fortran.Expr
                                        (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]),
                                      GHC.Base.Maybe GHC.Types.Int)])
                            (sc2 :: Language.Fortran.Type
                                      (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]]))
                            (sc3 :: [GHC.Types.Char])
  FortranSynthesiser.synthesiseDecl sc3
                                    (Language.Fortran.Decl
                                       @ LanguageFortranTools.Anno
                                       sc
                                       LanguageFortranTools.nullSrcSpan
                                       sc1
                                       sc2)
  = FortranSynthesiser.synthesiseDecl_$ssynthesiseDecl sc sc1 sc2 sc3
"SC:synthesiseDeclList0" forall (sc :: (Language.Fortran.Expr
                                          (Data.Map.Internal.Map
                                             [GHC.Types.Char] [[GHC.Types.Char]]),
                                        Language.Fortran.Expr
                                          (Data.Map.Internal.Map
                                             [GHC.Types.Char] [[GHC.Types.Char]]),
                                        GHC.Base.Maybe GHC.Types.Int))
                                (sc1 :: [(Language.Fortran.Expr
                                            (Data.Map.Internal.Map
                                               [GHC.Types.Char] [[GHC.Types.Char]]),
                                          Language.Fortran.Expr
                                            (Data.Map.Internal.Map
                                               [GHC.Types.Char] [[GHC.Types.Char]]),
                                          GHC.Base.Maybe GHC.Types.Int)])
  FortranSynthesiser.synthesiseDeclList (GHC.Types.:
                                           @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                              Language.Fortran.Expr LanguageFortranTools.Anno,
                                              GHC.Base.Maybe GHC.Types.Int)
                                           sc
                                           sc1)
  = FortranSynthesiser.synthesiseDeclList_$ssynthesiseDeclList sc sc1
"SC:synthesiseRangeExpr0" forall (sc :: (Language.Fortran.Expr
                                           (Data.Map.Internal.Map
                                              [GHC.Types.Char] [[GHC.Types.Char]]),
                                         Language.Fortran.Expr
                                           (Data.Map.Internal.Map
                                              [GHC.Types.Char] [[GHC.Types.Char]])))
                                 (sc1 :: [(Language.Fortran.Expr
                                             (Data.Map.Internal.Map
                                                [GHC.Types.Char] [[GHC.Types.Char]]),
                                           Language.Fortran.Expr
                                             (Data.Map.Internal.Map
                                                [GHC.Types.Char] [[GHC.Types.Char]]))])
  FortranSynthesiser.synthesiseRangeExpr (GHC.Types.:
                                            @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                                               Language.Fortran.Expr LanguageFortranTools.Anno)
                                            sc
                                            sc1)
  = FortranSynthesiser.synthesiseRangeExpr_$ssynthesiseRangeExpr
      sc
      sc1
"SC:synthesiseStateDefinitions0" forall (sc :: GHC.Prim.Int#)
                                        (sc1 :: [([GHC.Types.Char], [GHC.Types.Char])])
  FortranSynthesiser.synthesiseStateDefinitions sc1 (GHC.Types.I# sc)
  = FortranSynthesiser.synthesiseStateDefinitions_$ssynthesiseStateDefinitions
      sc
      sc1
"SPEC synthesiseBufferIndexNames @ Int" forall ($dShow :: GHC.Show.Show
                                                            GHC.Types.Int)
                                               ($dNum :: GHC.Num.Num GHC.Types.Int)
  FortranSynthesiser.synthesiseBufferIndexNames @ GHC.Types.Int
                                                $dNum
                                                $dShow
  = FortranSynthesiser.synthesiseBufferIndexNames_$ssynthesiseBufferIndexNames
"SPEC/FortranSynthesiser $fDataArg @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                    (Data.Map.Internal.Map
                                                                                       GHC.Base.String
                                                                                       [GHC.Base.String]))
  Language.Fortran.$fDataArg @ (Data.Map.Internal.Map
                                  GHC.Base.String [GHC.Base.String])
                             v
  = FortranSynthesiser.$s$fDataArg
"SPEC/FortranSynthesiser $fDataBlock @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                      (Data.Map.Internal.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fDataBlock @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = FortranSynthesiser.$s$fDataBlock
"SPEC/FortranSynthesiser $fDataFortran @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                        (Data.Map.Internal.Map
                                                                                           GHC.Base.String
                                                                                           [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Internal.Map
                                      GHC.Base.String [GHC.Base.String])
                                 v
  = FortranSynthesiser.$s$fDataFortran
"SPEC/FortranSynthesiser $fDataMap @ [Char] @ [String]" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                                 [GHC.Types.Char])
                                                                        (v1 :: Data.Data.Data
                                                                                 [GHC.Base.String])
                                                                        (v :: Data.Data.Data
                                                                                [GHC.Types.Char])
  Data.Map.Internal.$fDataMap @ [GHC.Types.Char]
                              @ [GHC.Base.String]
                              v
                              v1
                              v2
  = FortranSynthesiser.$s$fDataArg_$s$fDataMap
"SPEC/FortranSynthesiser $fDataMap_$cdataCast2 @ [Char] @ [String]" [orphan] [0] forall (w2 :: GHC.Classes.Ord
                                                                                                 [GHC.Types.Char])
                                                                                        (w1 :: Data.Data.Data
                                                                                                 [GHC.Base.String])
                                                                                        (w :: Data.Data.Data
                                                                                                [GHC.Types.Char])
  Data.Map.Internal.$fDataMap_$cdataCast2 @ [GHC.Types.Char]
                                          @ [GHC.Base.String]
                                          w
                                          w1
                                          w2
  = FortranSynthesiser.$s$fDataMap_$cdataCast2
"SPEC/FortranSynthesiser $fDataProgUnit @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                         (Data.Map.Internal.Map
                                                                                            GHC.Base.String
                                                                                            [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit @ (Data.Map.Internal.Map
                                       GHC.Base.String [GHC.Base.String])
                                  v
  = FortranSynthesiser.$s$fDataProgUnit
"SPEC/FortranSynthesiser $fData[] @ (ProgUnit Anno)" [orphan] forall (v :: Data.Data.Data
                                                                             (Language.Fortran.ProgUnit
                                                                                LanguageFortranTools.Anno))
  Data.Data.$fData[] @ (Language.Fortran.ProgUnit
                          LanguageFortranTools.Anno)
                     v
  = FortranSynthesiser.$s$fData[]
"SPEC/FortranSynthesiser $fData[] @ [Char]" [orphan] forall (v :: Data.Data.Data
                                                                    [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] v
  = FortranSynthesiser.$s$fDataArg_$s$fData[]
"SPEC/FortranSynthesiser $fData[]7 @ (ProgUnit Anno)" [orphan] forall ($dData :: Data.Data.Data
                                                                                   (Language.Fortran.ProgUnit
                                                                                      LanguageFortranTools.Anno))
  Data.Data.$fData[]7 @ (Language.Fortran.ProgUnit
                           LanguageFortranTools.Anno)
                      $dData
  = FortranSynthesiser.$s$fData[]1
"SPEC/FortranSynthesiser $fData[]7 @ [Char]" [orphan] forall ($dData :: Data.Data.Data
                                                                          [GHC.Types.Char])
  Data.Data.$fData[]7 @ [GHC.Types.Char] $dData
  = FortranSynthesiser.$s$fData[]7
"SPEC/FortranSynthesiser $fEqFortran @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                      (Data.Map.Internal.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fEqFortran @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = FortranSynthesiser.$s$fEqFortran
"SPEC/FortranSynthesiser $fEqFortran_$c/= @ (Map String [String])" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                              (Data.Map.Internal.Map
                                                                                                 GHC.Base.String
                                                                                                 [GHC.Base.String]))
  Language.Fortran.$fEqFortran_$c/= @ (Data.Map.Internal.Map
                                         GHC.Base.String [GHC.Base.String])
                                    $dEq
  = FortranSynthesiser.$s$fEqFortran_$s$fEqFortran_$c/=
"SPEC/FortranSynthesiser $fEqMap @ [Char] @ [String]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                               [GHC.Base.String])
                                                                      (v :: GHC.Classes.Eq
                                                                              [GHC.Types.Char])
  Data.Map.Internal.$fEqMap @ [GHC.Types.Char]
                            @ [GHC.Base.String]
                            v
                            v1
  = FortranSynthesiser.$s$fEqFortran_$s$fEqMap
"SPEC/FortranSynthesiser $fEqMap_$c/= @ [Char] @ [String]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                       [GHC.Base.String])
                                                                           ($dEq :: GHC.Classes.Eq
                                                                                      [GHC.Types.Char])
  Data.Map.Internal.$fEqMap_$c/= @ [GHC.Types.Char]
                                 @ [GHC.Base.String]
                                 $dEq
                                 $dEq1
  = FortranSynthesiser.$s$fEqFortran_$s$fEqMap_$c/=
"SPEC/FortranSynthesiser $fEqUses @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                   (Data.Map.Internal.Map
                                                                                      GHC.Base.String
                                                                                      [GHC.Base.String]))
  Language.Fortran.$fEqUses @ (Data.Map.Internal.Map
                                 GHC.Base.String [GHC.Base.String])
                            v
  = FortranSynthesiser.$s$fEqUses
"SPEC/FortranSynthesiser $fEqVarName @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                      (Data.Map.Internal.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = FortranSynthesiser.$s$fEqVarName
"SPEC/FortranSynthesiser $fOrdMap @ [Char] @ [String]" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                                [GHC.Base.String])
                                                                       (v1 :: GHC.Classes.Ord
                                                                                [GHC.Types.Char])
  Data.Map.Internal.$fOrdMap @ [GHC.Types.Char]
                             @ [GHC.Base.String]
                             v1
                             v2
  = FortranSynthesiser.$s$fOrdMap
"SPEC/FortranSynthesiser $fOrdVarName @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Ord
                                                                                       (Data.Map.Internal.Map
                                                                                          GHC.Base.String
                                                                                          [GHC.Base.String]))
  Language.Fortran.$fOrdVarName @ (Data.Map.Internal.Map
                                     GHC.Base.String [GHC.Base.String])
                                v
  = FortranSynthesiser.$s$fOrdVarName
"SPEC/FortranSynthesiser $fOrdVarName_$cmax @ (Map String [String])" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                                 (Data.Map.Internal.Map
                                                                                                    GHC.Base.String
                                                                                                    [GHC.Base.String]))
  Language.Fortran.$fOrdVarName_$cmax @ (Data.Map.Internal.Map
                                           GHC.Base.String [GHC.Base.String])
                                      w
  = FortranSynthesiser.$s$fOrdVarName_$cmax
"SPEC/FortranSynthesiser $fOrdVarName_$cmin @ (Map String [String])" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                                 (Data.Map.Internal.Map
                                                                                                    GHC.Base.String
                                                                                                    [GHC.Base.String]))
  Language.Fortran.$fOrdVarName_$cmin @ (Data.Map.Internal.Map
                                           GHC.Base.String [GHC.Base.String])
                                      w
  = FortranSynthesiser.$s$fOrdVarName_$cmin
"SPEC/FortranSynthesiser fromList @ (VarName Anno)" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                (Language.Fortran.VarName
                                                                                   LanguageFortranTools.Anno))
  Data.Set.Internal.fromList @ (Language.Fortran.VarName
                                  LanguageFortranTools.Anno)
                             $dOrd
  = FortranSynthesiser.$sfromList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

