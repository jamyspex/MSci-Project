
==================== FINAL INTERFACE ====================
2018-11-16 12:45:18.558603826 UTC

interface main:ConstantFolding 8043
  interface hash: f6d84df44aaff4895b3cbf6dfb3b00e3
  ABI hash: 39845b6f4a7f89f874e37dcfd7205ec0
  export-list hash: f1a67b4208c0b7aa4a493b15d88b8c27
  orphan hash: a94242da118a6665fe85e72fd56df63d
  flag hash: 7853c119b27f3f568e863cba4679c19c
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  ConstantFolding.foldConstants
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     Warning
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      haskell-src-1.0.3.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      process-1.6.3.0 syb-0.7 text-1.2.3.1 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Data b150502d549600eff3202c16ff6cf22d
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  containers-0.5.11.0:Data.Map.Internal e02d23495520de11b8e9f3c9c93a4d11
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Language.Fortran e2add56600673959dbdfe1ac093795c9
  exports: 6ca1e7b188145fc0c602707ea4a1c428
  Assg c3a5a5c7c0380c697e6a5cda4cc060bd
  Decl bf5604fd57dfb9f698111c9b30ee5605
  Decl e30f41d3f2effdd4b4a22fa8cf8c0055
  Expr 6304956f2901eead56a8fac1e90d4904
  For 5816e0af6d8df16d1771d2006bcf3abf
  Fortran cab0cd6287333175c6b9d87427982518
  NullExpr adfc15f00ad4bfbe033d167983c94995
  ProgUnit 573fa2fe80c5713ab0c018712ac118d8
  Real efcfab18e0d8f1dbab722c8ce1c4fbc7
  Var 4b8ab01fc12afd12d9f52ad45e3004a1
  VarName a39ab087efdb6eba24247b07097f591c
  VarName 361ec85699986b0b7f4d68a05374d64d
import  -/  LanguageFortranTools 737e8abc5de089abcd0ce62660f9d159
  exports: a5a994dcb8ba92c93a8a354a063275b0
  Anno 1420203ed9c39fcf982d2ff37c01ae68
  ValueTable 50dc4c0e6bda2c24d460032a03e4911d
  addToValueTable 988d13887971f4a96c87369ec2d95570
  addToValueTable_type e8e9923814c648412a3aa91a830906d9
  deleteValueFromTable 1447a72f813f73fb801851722b963123
  evaluateExpr c54884e87e53218b60fc85f5486fa9d3
  evaluateExpr_type a6597bc9b375b42ce8997c5597e3968a
  extractAssignments 5a7dc3b6bc5f6c534391606b447516fb
  extractBaseType 9c876ee28a1e0ede2d9dfb4c0dd4f4ab
  extractDecl e53fbef31ddec405bad6a03c3c79fac8
  extractFortran 14a2022f178918597fbb8d7180b6621e
  extractVarNames 920113507cf2d36f1a1834c3a88c2c59
  generateFloatConstant 8328eb5a24ca03c6663765c1f882e9d3
  listExtractSingleAppearances de57f61448288543306ceaa1bf4628ed
  listSubtract 40ed5a52f1d2f2210a51ecab157379fd
  lookupValueTable 7f34069e25122faca67e824cfc2b6096
  nullAnno b5ec3f8914fec256ad2e53b761b9bd52
  varNameStr 4f55193896441ff99d96346c5aacd560
import  -/  syb-0.7:Data.Generics 2ddc257f9ac35414fc37ff4d19b4d388
import  -/  syb-0.7:Data.Generics.Aliases a5097c06261967df51d59247bf1d4958
import  -/  syb-0.7:Data.Generics.Schemes 58bc96c8ed0bed4ad53424f237efe8b8
7f3e824da5f4f0593218c40382ee5833
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Fortran
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataFortran6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Fortran
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Fortran
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tFortran)
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Fortran
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataFortran1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Fortran
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap) -}
42750a0d3b7102866920d84229437f33
  $s$fDataFortran_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ (Data.Map.Internal.Map [GHC.Types.Char])
                     @ [GHC.Base.String]
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ (* -> *)
                        @ Data.Map.Internal.Map
                        @ [GHC.Types.Char]
                        Data.Map.Internal.$fDataMap17
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7))
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ [GHC.Types.Char]
                        Data.Data.$fData[]3
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7)))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Data.Map.Internal.Map
                                                                       [GHC.Types.Char]
                                                                       [GHC.Base.String]>_N)
                  (Data.Map.Internal.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.fromListConstr)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.mapDataType)
                  (\ @ t :: * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d. Data.Data.Data d => c (t d)) ->
                   GHC.Base.Nothing
                     @ (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])))
                  (Data.Map.Internal.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap6
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R)
                  (Data.Map.Internal.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     ConstantFolding.$s$fDataFortran_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
d1300e4e55f73f70c01e4aa929533b92
  $s$fDataFortran_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]3
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ GHC.Types.Char
                        Data.Data.$fData[]3
                        Data.Data.$fDataChar7))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[[GHC.Types.Char]]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ (ds :: [[GHC.Types.Char]]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [[GHC.Types.Char]]) -> Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c [[GHC.Types.Char]]))
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
a922b77bf8eee723e2710ef8471fdd28
  $s$fDataMap_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   (w3 :: Data.Typeable.Internal.Typeable t) ->
                 Data.Map.Internal.$w$cdataCast2
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   Data.Data.$fData[]_$s$fData[]
                   ConstantFolding.$s$fDataFortran_$s$fData[]
                   @ t
                   @ c
                   w3) -}
1f2f59654851bdaa3fe36906c2023fdf
  $s$fDataProgUnit ::
    Data.Data.Data
      (Language.Fortran.ProgUnit
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.ProgUnit
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.ProgUnit
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataProgUnit6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.ProgUnit
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataProgUnit_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (\ (ds :: Language.Fortran.ProgUnit
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   case ds of wild {
                     Language.Fortran.Main ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cMain
                     Language.Fortran.Sub ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cSub
                     Language.Fortran.Function ds1 ds2 ds3 ds4 ds5 ds6 ds7
                     -> Language.Fortran.$cFunction
                     Language.Fortran.Module ds1 ds2 ds3 ds4 ds5 ds6 ds7
                     -> Language.Fortran.$cModule
                     Language.Fortran.BlockData ds1 ds2 ds3 ds4 ds5 ds6
                     -> Language.Fortran.$cBlockData
                     Language.Fortran.PSeq ds1 ds2 ds3 ds4 -> Language.Fortran.$cPSeq
                     Language.Fortran.Prog ds1 ds2 ds3 -> Language.Fortran.$cProg
                     Language.Fortran.NullProg ds1 ds2 -> Language.Fortran.$cNullProg
                     Language.Fortran.IncludeProg ds1 ds2 ds3 ds4
                     -> Language.Fortran.$cIncludeProg })
                  (\ (ds :: Language.Fortran.ProgUnit
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tProgUnit)
                  (Language.Fortran.$fDataProgUnit_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable2 :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.ProgUnit
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataProgUnit1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.ProgUnit
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.ProgUnit
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataProgUnit_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap)
                  (Language.Fortran.$fDataProgUnit_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fDataFortran_$s$fDataMap) -}
08479e5703c002c95b028ce00ce588b3
  $s$fData[]7 :: Data.Typeable.Internal.TypeRep [[GHC.Types.Char]]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ [GHC.Types.Char]
                   Data.Data.$fData[]3
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ []
                      @ GHC.Types.Char
                      Data.Data.$fData[]3
                      Data.Data.$fDataChar7)) -}
c05f5e517f23e6832b47df4789f15c87
  $s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Internal.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  ConstantFolding.$s$fEqMap_$s$fEqMap_$c/= -}
4e7ffb9dfd19e8a04030f49d461b7fa6
  $s$fEqMap_$s$fEqMap_$c/= ::
    Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEq[]_$s$fEq[]2
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9f3861ccde0b1d5b09e48f88eb3099ae
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fEqMap)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     ConstantFolding.$s$fEqMap) -}
1ad511869ffaeeaa905d9deff91c6ff4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ConstantFolding.$trModule3
                   ConstantFolding.$trModule1) -}
c0f06649b07cbc33e01729bb135d7b10
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ConstantFolding.$trModule2) -}
37922b197c542362b7cceb9d423afc85
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ConstantFolding"#) -}
4b393277dfc143f9d5669c8824ed90a7
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ConstantFolding.$trModule4) -}
6797d69d1075b47378a89d3417d8b2a3
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
2e477940b7ac6a0f5483efcc171891dd
  foldConstants ::
    Language.Fortran.ProgUnit LanguageFortranTools.Anno
    -> Language.Fortran.ProgUnit LanguageFortranTools.Anno
  {- Arity: 1, Strictness: <L,U> -}
"SPEC/ConstantFolding $fDataFortran @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                     (Data.Map.Internal.Map
                                                                                        GHC.Base.String
                                                                                        [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Internal.Map
                                      GHC.Base.String [GHC.Base.String])
                                 v
  = ConstantFolding.$s$fDataFortran
"SPEC/ConstantFolding $fDataMap @ [Char] @ [String]" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                              [GHC.Types.Char])
                                                                     (v1 :: Data.Data.Data
                                                                              [GHC.Base.String])
                                                                     (v :: Data.Data.Data
                                                                             [GHC.Types.Char])
  Data.Map.Internal.$fDataMap @ [GHC.Types.Char]
                              @ [GHC.Base.String]
                              v
                              v1
                              v2
  = ConstantFolding.$s$fDataFortran_$s$fDataMap
"SPEC/ConstantFolding $fDataMap_$cdataCast2 @ [Char] @ [String]" [orphan] [0] forall (w2 :: GHC.Classes.Ord
                                                                                              [GHC.Types.Char])
                                                                                     (w1 :: Data.Data.Data
                                                                                              [GHC.Base.String])
                                                                                     (w :: Data.Data.Data
                                                                                             [GHC.Types.Char])
  Data.Map.Internal.$fDataMap_$cdataCast2 @ [GHC.Types.Char]
                                          @ [GHC.Base.String]
                                          w
                                          w1
                                          w2
  = ConstantFolding.$s$fDataMap_$cdataCast2
"SPEC/ConstantFolding $fDataProgUnit @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                      (Data.Map.Internal.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fDataProgUnit @ (Data.Map.Internal.Map
                                       GHC.Base.String [GHC.Base.String])
                                  v
  = ConstantFolding.$s$fDataProgUnit
"SPEC/ConstantFolding $fData[] @ [Char]" [orphan] forall (v :: Data.Data.Data
                                                                 [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] v
  = ConstantFolding.$s$fDataFortran_$s$fData[]
"SPEC/ConstantFolding $fData[]7 @ [Char]" [orphan] forall ($dData :: Data.Data.Data
                                                                       [GHC.Types.Char])
  Data.Data.$fData[]7 @ [GHC.Types.Char] $dData
  = ConstantFolding.$s$fData[]7
"SPEC/ConstantFolding $fEqMap @ [Char] @ [String]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                            [GHC.Base.String])
                                                                   (v :: GHC.Classes.Eq
                                                                           [GHC.Types.Char])
  Data.Map.Internal.$fEqMap @ [GHC.Types.Char]
                            @ [GHC.Base.String]
                            v
                            v1
  = ConstantFolding.$s$fEqMap
"SPEC/ConstantFolding $fEqMap_$c/= @ [Char] @ [String]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                    [GHC.Base.String])
                                                                        ($dEq :: GHC.Classes.Eq
                                                                                   [GHC.Types.Char])
  Data.Map.Internal.$fEqMap_$c/= @ [GHC.Types.Char]
                                 @ [GHC.Base.String]
                                 $dEq
                                 $dEq1
  = ConstantFolding.$s$fEqMap_$s$fEqMap_$c/=
"SPEC/ConstantFolding $fEqVarName @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                   (Data.Map.Internal.Map
                                                                                      GHC.Base.String
                                                                                      [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = ConstantFolding.$s$fEqVarName
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

