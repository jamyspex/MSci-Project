
==================== FINAL INTERFACE ====================
2018-11-16 12:45:16.676457861 UTC

interface main:VarDependencyAnalysis 8043
  interface hash: 32cfa269e17d9783890c290bdb5de1e4
  ABI hash: 396f6429b909c284662b818c101482ab
  export-list hash: 9e709a7a646c79ec724f173b4bb12fe5
  orphan hash: f20073854439e94a0b5b51a353fdb975
  flag hash: 7853c119b27f3f568e863cba4679c19c
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  VarDependencyAnalysis.analyseDependencies
  VarDependencyAnalysis.constructLoopIterTable
  VarDependencyAnalysis.isIndirectlyDependentOn
  VarDependencyAnalysis.loopCarriedDependencyCheck
  VarDependencyAnalysis.loopCarriedDependencyCheck_reductionWithIteration
  VarDependencyAnalysis.VarDependencyAnalysis
module dependencies: F95IntrinsicFunctions Language.Fortran
                     Language.Fortran.Lexer Language.Fortran.Parser
                     Language.Fortran.PreProcess LanguageFortranTools PreProcessor
                     TupleTable Warning
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      haskell-src-1.0.3.0 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0
                      process-1.6.3.0 syb-0.7 text-1.2.3.1 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Data b150502d549600eff3202c16ff6cf22d
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map f51b9cf04edd738eb6d014be576b3403
import  -/  containers-0.5.11.0:Data.Map.Internal e02d23495520de11b8e9f3c9c93a4d11
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Language.Fortran e2add56600673959dbdfe1ac093795c9
  exports: 6ca1e7b188145fc0c602707ea4a1c428
  Assg c3a5a5c7c0380c697e6a5cda4cc060bd
  Bin ce8c88108b295f664e1eddaeffc220f4
  Expr 6304956f2901eead56a8fac1e90d4904
  For 5816e0af6d8df16d1771d2006bcf3abf
  Fortran cab0cd6287333175c6b9d87427982518
  Minus 83a81930ff6b28393feaec477bd960ce
  Null 1580fcfff05ff5fc8ac22a76d8ac4e12
  OpenCLMap e48fa1b14eab97eb69b2edc5f2c10ce8
  OpenCLReduce d14e8e442939b0e4bb37da5a0da04484
  Plus 18a4412d61780e28c85d747ab521c561
  VarName a39ab087efdb6eba24247b07097f591c
  VarName 361ec85699986b0b7f4d68a05374d64d
import  -/  Language.Fortran.Parser 94f87e312918e2e0d84323268977b8af
  exports: 811e5416839040be903a08c9e7bce6b9
import  -/  LanguageFortranTools 737e8abc5de089abcd0ce62660f9d159
  exports: a5a994dcb8ba92c93a8a354a063275b0
  Anno 1420203ed9c39fcf982d2ff37c01ae68
  ValueTable 50dc4c0e6bda2c24d460032a03e4911d
  addToValueTable 988d13887971f4a96c87369ec2d95570
  appendToMap 77a73b9bc695373ab2fcd5b66619a1a4
  applyGeneratedSrcSpans c887472fe8f7b8f174b1bbcd7a24b63d
  evaluateExpr c54884e87e53218b60fc85f5486fa9d3
  evaluateRange ef0f926a60f9ccf7c9bed0514458aed2
  extractAssignments 5a7dc3b6bc5f6c534391606b447516fb
  extractContainedVars 767cae289da3c9031018929f0cd15574
  extractLoopIters b9ad8bf674c41efab4819c061d4ad364
  extractLoopVars ab5343506b38be9c29b0a8a0873f663b
  extractOperands 8fb945abeb65fded10e8824b0c525de5
  extractVarNames 920113507cf2d36f1a1834c3a88c2c59
  generateArrayVar 41f69fa556436cb7a4d3721607926c4e
  isVar f8582da483272aa2ba7beff35cdca0d2
  listConcatUnique 28a5be85845b4739b6b5219484213c70
  listRemoveDuplications cc90c431c334b3429c5de18c32c0abd0
  listSubtract 40ed5a52f1d2f2210a51ecab157379fd
  nullAnno b5ec3f8914fec256ad2e53b761b9bd52
  nullSrcSpan d9f6701836bf1a31425d57566b44db7b
  outputExprFormatting 071110acbe7f8df82378c3e15acadb0d
import  -/  TupleTable 9543227f4059aed2c2dc3596ceb46ace
  exports: 505981d0e1221454809760b406ae9f8d
  Empty b08f93af68861f68bf697ee2499f620b
  LoopIterRecord f1221c163a2b1de463a450d34132b266
  TupleTable b26b283eeacedafac56c2ef2a8ac4582
  collapseIterTable a57ded5266286183c97ae88a4eb0153c
  getLeastTuple e360fb528131c6b69dc308dec81017c9
  getMostTuple 5159f02e211c2a98d9d0d987a663a5f0
  insertIntoTupleTable 0b18ad5b31137e5f1c6b8ae819bb8131
  lookupTupleTable 2319e329fc5ac331707fae6ec1e8216f
  tupleTableElementGreaterThan 1546b10f1539886245d66a0fdbf1608c
  tupleTableNotEmpty 2974d2cc1435969c7eb3caa661378f9e
import  -/  Warning b5ec059e95d91647264308e84d2ed3ea
  exports: d9b5419f40dd7650497f479a7fe0214a
import  -/  syb-0.7:Data.Generics 2ddc257f9ac35414fc37ff4d19b4d388
import  -/  syb-0.7:Data.Generics.Aliases a5097c06261967df51d59247bf1d4958
import  -/  syb-0.7:Data.Generics.Schemes 58bc96c8ed0bed4ad53424f237efe8b8
b8e1f4b3656320468f8dd83de5121900
  $s$fDataExpr ::
    Data.Data.Data
      (Language.Fortran.Expr
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Expr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataExpr6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Expr
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataExpr_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Expr
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tExpr)
                  (Language.Fortran.$fDataExpr_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Expr
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataExpr1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Expr
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Expr
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataExpr_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataExpr_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap) -}
b301d4e8b41fea1185b31782a1ebc4c5
  $s$fDataExpr_$s$fDataMap ::
    Data.Data.Data
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ (Data.Map.Internal.Map [GHC.Types.Char])
                     @ [GHC.Base.String]
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ (* -> *)
                        @ Data.Map.Internal.Map
                        @ [GHC.Types.Char]
                        Data.Map.Internal.$fDataMap17
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7))
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ [GHC.Types.Char]
                        Data.Data.$fData[]3
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ GHC.Types.Char
                           Data.Data.$fData[]3
                           Data.Data.$fDataChar7)))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Data.Map.Internal.Map
                                                                       [GHC.Types.Char]
                                                                       [GHC.Base.String]>_N)
                  (Data.Map.Internal.$fDataMap_$cgfoldl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgunfold
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.fromListConstr)
                  (\ (ds :: Data.Map.Internal.Map
                              [GHC.Types.Char] [GHC.Base.String]) ->
                   Data.Map.Internal.mapDataType)
                  (\ @ t :: * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d. Data.Data.Data d => c (t d)) ->
                   GHC.Base.Nothing
                     @ (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])))
                  (Data.Map.Internal.$fDataMap_$cdataCast2
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap6
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]>_R)
                  (Data.Map.Internal.$fDataMap_$cgmapQl
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQr
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQ
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapQi
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapM
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMp
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (Data.Map.Internal.$fDataMap_$cgmapMo
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     Data.Data.$fData[]_$s$fData[]
                     VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
9deb7bcbab00fe3673e155f959c47938
  $s$fDataExpr_$s$fData[] :: Data.Data.Data [[GHC.Types.Char]]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [[GHC.Types.Char]]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]3
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ []
                        @ GHC.Types.Char
                        Data.Data.$fData[]3
                        Data.Data.$fDataChar7))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[[GHC.Types.Char]]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgunfold
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ (ds :: [[GHC.Types.Char]]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [[GHC.Types.Char]]) -> Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing @ (c [[GHC.Types.Char]]))
                  (Data.Data.$fData[]_$cgmapT
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQl
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQr
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQ
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapQi
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapM
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMp
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[])
                  (Data.Data.$fData[]_$cgmapMo
                     @ [GHC.Types.Char]
                     Data.Data.$fData[]_$s$fData[]) -}
368307d17120ccb8d792e3bc9fafa98a
  $s$fDataFortran ::
    Data.Data.Data
      (Language.Fortran.Fortran
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Fortran
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Language.Fortran.Fortran
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     Language.Fortran.$fDataFortran6
                     (Data.Typeable.Internal.mkTrApp
                        @ *
                        @ *
                        @ (Data.Map.Internal.Map [GHC.Types.Char])
                        @ [GHC.Base.String]
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ (* -> *)
                           @ Data.Map.Internal.Map
                           @ [GHC.Types.Char]
                           Data.Map.Internal.$fDataMap17
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))
                        (Data.Typeable.Internal.mkTrApp
                           @ *
                           @ *
                           @ []
                           @ [GHC.Types.Char]
                           Data.Data.$fData[]3
                           (Data.Typeable.Internal.mkTrApp
                              @ *
                              @ *
                              @ []
                              @ GHC.Types.Char
                              Data.Data.$fData[]3
                              Data.Data.$fDataChar7))))
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Language.Fortran.Fortran
                                                                       (Data.Map.Internal.Map
                                                                          GHC.Base.String
                                                                          [GHC.Base.String])>_N)
                  (Language.Fortran.$fDataFortran_$cgfoldl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgunfold
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$ctoConstr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (\ (ds :: Language.Fortran.Fortran
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$tFortran)
                  (Language.Fortran.$fDataFortran_$cdataCast1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Language.Fortran.Fortran
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))))
                  (Language.Fortran.$fDataFortran1
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Language.Fortran.Fortran
                           (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Language.Fortran.Fortran
                               (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])>_R)
                  (Language.Fortran.$fDataFortran_$cgmapQl
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQr
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQ
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapQi
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapM
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMp
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap)
                  (Language.Fortran.$fDataFortran_$cgmapMo
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap) -}
12f0b4667d08ca7f039cd55cde7ef860
  $s$fDataMap_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]))
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ t :: * -> * -> *
                   @ c :: * -> *
                   (w3 :: Data.Typeable.Internal.Typeable t) ->
                 Data.Map.Internal.$w$cdataCast2
                   @ [GHC.Types.Char]
                   @ [GHC.Base.String]
                   Data.Data.$fData[]_$s$fData[]
                   VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
                   @ t
                   @ c
                   w3) -}
d8612d71ea011875ad2967bba96382ad
  $s$fData[]7 :: Data.Typeable.Internal.TypeRep [[GHC.Types.Char]]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ [GHC.Types.Char]
                   Data.Data.$fData[]3
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ []
                      @ GHC.Types.Char
                      Data.Data.$fData[]3
                      Data.Data.$fDataChar7)) -}
c45a558df9986398d05e1ac6520c39f3
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.Fortran.Expr LanguageFortranTools.Anno,
       Language.Fortran.Expr LanguageFortranTools.Anno)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr LanguageFortranTools.Anno,
                     Language.Fortran.Expr LanguageFortranTools.Anno)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr
                     VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr
                     VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr) -}
b118647473743ec3ac69e7b5c1872fbc
  $s$fEq(,)_$s$fEqExpr ::
    GHC.Classes.Eq
      (Language.Fortran.Expr
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.Expr
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqArgList_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap)
                  (Language.Fortran.$fEqExpr_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap) -}
78d4d8fe6cb0f99132e72ef6e2ffd996
  $s$fEq(,)_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  (Data.Map.Internal.$fEqMap_$c==
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEq[]_$s$fEq[]2)
                  VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap_$c/= -}
e619a85b149d254d9561266f57d6c57f
  $s$fEq(,)_$s$fEqMap_$c/= ::
    Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                   (y :: Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String]) ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ [GHC.Types.Char]
                        @ [GHC.Base.String]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEq[]_$s$fEq[]2
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f8823781126bd50488bd8a3effb6c635
  $s$fEqVarName ::
    GHC.Classes.Eq
      (Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  (Language.Fortran.$fEqVarName_$c==
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap)
                  (Language.Fortran.$fEqVarName_$c/=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap) -}
76a3725d3d79326271649315a208e52e
  $s$fEq[] ::
    GHC.Classes.Eq [Language.Fortran.Expr LanguageFortranTools.Anno]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.Fortran.Expr LanguageFortranTools.Anno]
                  (GHC.Classes.$fEq[]_$c==
                     @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                     VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr)
                  VarDependencyAnalysis.$s$fEq[]_$s$fEq[]_$c/= -}
24e7e7f368ffa144562cee7c916e548b
  $s$fEq[]_$s$fEq[]_$c/= ::
    [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Language.Fortran.Expr LanguageFortranTools.Anno])
                   (y :: [Language.Fortran.Expr LanguageFortranTools.Anno]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6673e0f0972097103b054fcdc0ca9cb7
  $s$fOrdMap ::
    GHC.Classes.Ord
      (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map [GHC.Types.Char] [GHC.Base.String])
                  VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap
                  (Data.Map.Internal.$fOrdMap_$ccompare
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$c<
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$c<=
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$c>
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$c>=
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$cmax
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2)
                  (Data.Map.Internal.$fOrdMap_$cmin
                     @ [GHC.Types.Char]
                     @ [GHC.Base.String]
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     GHC.Classes.$fOrd[]_$s$fOrd[]2) -}
11e84975fc17878a6f5969dcdbe0f5ca
  $s$fOrdVarName ::
    GHC.Classes.Ord
      (Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Fortran.VarName
                       (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                  VarDependencyAnalysis.$s$fEqVarName
                  (Language.Fortran.$fOrdVarName_$ccompare
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdMap)
                  (Language.Fortran.$fOrdVarName_$c<
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdMap)
                  (Language.Fortran.$fOrdVarName_$c<=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdMap)
                  (\ (a :: Language.Fortran.VarName
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                     (b :: Language.Fortran.VarName
                             (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                   Language.Fortran.$fOrdVarName_$c<
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdMap
                     b
                     a)
                  (Language.Fortran.$fOrdVarName_$c>=
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdMap)
                  (Language.Fortran.$fOrdVarName_$cmax
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdMap)
                  (Language.Fortran.$fOrdVarName_$cmin
                     @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                     VarDependencyAnalysis.$s$fOrdMap) -}
d68c167c569d689ca9a5cd711fd67815
  $s$fOrdVarName_$cmax ::
    Language.Fortran.VarName
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w362 :: Language.Fortran.VarName
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                   (w363 :: Language.Fortran.VarName
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case w362 of ww { Language.Fortran.VarName ww1 ww2 ->
                 case w363 of ww3 { Language.Fortran.VarName ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ ([GHC.Types.Char], [GHC.Base.String])
                        (GHC.Classes.$fOrd(,)
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           GHC.Classes.$fOrd[]_$s$fOrd[]1
                           GHC.Classes.$fOrd[]_$s$fOrd[]2)
                        (Data.Map.Internal.$fDataMap_go
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                           ww4)
                        (Data.Map.Internal.$fDataMap_go
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                           ww1) of wild {
                   GHC.Types.LT
                   -> Language.Fortran.VarName
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        ww1
                        ww2
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww5 ww2 of wild1 {
                        DEFAULT
                        -> Language.Fortran.VarName
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             ww4
                             ww5
                        GHC.Types.LT
                        -> Language.Fortran.VarName
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             ww1
                             ww2 }
                   GHC.Types.GT
                   -> Language.Fortran.VarName
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        ww4
                        ww5 } } }) -}
6f335f31c0e53e698357bf72dfca509d
  $s$fOrdVarName_$cmin ::
    Language.Fortran.VarName
      (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
    -> Language.Fortran.VarName
         (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w362 :: Language.Fortran.VarName
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String]))
                   (w363 :: Language.Fortran.VarName
                              (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])) ->
                 case w362 of ww { Language.Fortran.VarName ww1 ww2 ->
                 case w363 of ww3 { Language.Fortran.VarName ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ ([GHC.Types.Char], [GHC.Base.String])
                        (GHC.Classes.$fOrd(,)
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           GHC.Classes.$fOrd[]_$s$fOrd[]1
                           GHC.Classes.$fOrd[]_$s$fOrd[]2)
                        (Data.Map.Internal.$fDataMap_go
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                           ww4)
                        (Data.Map.Internal.$fDataMap_go
                           @ [GHC.Types.Char]
                           @ [GHC.Base.String]
                           (GHC.Types.[] @ ([GHC.Types.Char], [GHC.Base.String]))
                           ww1) of wild {
                   GHC.Types.LT
                   -> Language.Fortran.VarName
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        ww4
                        ww5
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww5 ww2 of wild1 {
                        DEFAULT
                        -> Language.Fortran.VarName
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             ww1
                             ww2
                        GHC.Types.LT
                        -> Language.Fortran.VarName
                             @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                             ww4
                             ww5 }
                   GHC.Types.GT
                   -> Language.Fortran.VarName
                        @ (Data.Map.Internal.Map GHC.Base.String [GHC.Base.String])
                        ww1
                        ww2 } } }) -}
ca43a2dcea3093309cad4d966a33a2e5
  $sinsert_$sgo13 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> a1
    -> Data.Map.Internal.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a1
    -> Data.Map.Internal.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a1
  {- Arity: 4, Strictness: <L,U><S,1*U(U,U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a1
                   (w :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (w2 :: a1)
                   (w3 :: Data.Map.Internal.Map
                            (Language.Fortran.VarName LanguageFortranTools.Anno) a1) ->
                 case w1 of ww { Language.Fortran.VarName ww1 ww2 ->
                 VarDependencyAnalysis.$w$sgo13 @ a1 w ww1 ww2 w2 w3 }) -}
0fffe5921694ac67a6308fb3ab6b40e9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   VarDependencyAnalysis.$trModule3
                   VarDependencyAnalysis.$trModule1) -}
9824194f12a974ded29bd68a5f5eab6d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS VarDependencyAnalysis.$trModule2) -}
6ae8c8b441473721e6b87f44ce48b8fc
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("VarDependencyAnalysis"#) -}
edd6152bbf85ae086bf383348f705136
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS VarDependencyAnalysis.$trModule4) -}
6b39067ad554c2cea9fa4a421f8141fd
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
74deb17b44f668f177e714e5d3992e51
  $w$sgo1 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
43b268d0897a69dff981ef64cb983bc8
  $w$sgo13 ::
    Language.Fortran.VarName LanguageFortranTools.Anno
    -> LanguageFortranTools.Anno
    -> Language.Fortran.Variable
    -> a1
    -> Data.Map.Internal.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a1
    -> Data.Map.Internal.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
d45f58d8d2ce9e5983d81b25c89def52
  $wconstructLoopIterTable ::
    GHC.Base.Maybe TupleTable.TupleTable
    -> VarDependencyAnalysis.LoopStepTable
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Base.Maybe TupleTable.TupleTable,
          [Language.Fortran.VarName LanguageFortranTools.Anno],
          VarDependencyAnalysis.LoopStepTable #)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*U>, Inline: [0] -}
e510774ef4f1e62c0c69f7f540111cdd
  $wisIndirectlyDependentOn ::
    VarDependencyAnalysis.VarDependencyAnalysis
    -> LanguageFortranTools.Anno
    -> Language.Fortran.Variable
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: VarDependencyAnalysis.VarDependencyAnalysis)
                   (ww :: LanguageFortranTools.Anno)
                   (ww1 :: Language.Fortran.Variable)
                   (w1 :: Language.Fortran.Expr LanguageFortranTools.Anno) ->
                 case GHC.List.elem
                        @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                        VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr
                        w1
                        (VarDependencyAnalysis.$wpoly_go1
                           @ [Language.Fortran.Expr LanguageFortranTools.Anno]
                           (GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                           ww
                           ww1
                           w) of wild {
                   GHC.Types.False
                   -> let {
                        lvl137 :: GHC.Types.Bool
                        = VarDependencyAnalysis.$wisIndirectlyDependentOn'
                            w
                            (Data.Map.Internal.Tip @ GHC.Base.String @ [GHC.Base.String])
                            VarDependencyAnalysis.isIndirectlyDependentOn1
                            w1
                            (GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                      } in
                      letrec {
                        $sgo2 :: [Language.Fortran.Expr
                                    (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])]
                                 -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [Language.Fortran.Expr
                                      (Data.Map.Internal.Map
                                         [GHC.Types.Char] [[GHC.Types.Char]])]) ->
                          case sc of wild1 { [] -> GHC.Types.True : y ys -> $sgo2 ys }
                      } in
                      letrec {
                        go4 :: [Language.Fortran.Expr LanguageFortranTools.Anno]
                               -> GHC.Types.Bool -> GHC.Types.Bool
                          <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                        = \ (ds :: [Language.Fortran.Expr LanguageFortranTools.Anno])
                            (eta :: GHC.Types.Bool) ->
                          case ds of wild1 {
                            [] -> eta
                            : y ys
                            -> case eta of wild2 {
                                 GHC.Types.False
                                 -> case y of wild3 {
                                      DEFAULT -> go4 ys lvl137
                                      Language.Fortran.Var ds1 ds2 lst
                                      -> case LanguageFortranTools.extractVarNames_go lst of wild4 {
                                           [] -> go4 ys lvl137
                                           : y1 ys1
                                           -> case y1 of ww2 { Language.Fortran.VarName ww3 ww4 ->
                                              go4
                                                ys
                                                (VarDependencyAnalysis.$wisIndirectlyDependentOn'
                                                   w
                                                   ww3
                                                   ww4
                                                   w1
                                                   (GHC.Types.[]
                                                      @ (Language.Fortran.Expr
                                                           LanguageFortranTools.Anno))) } } }
                                 GHC.Types.True -> $sgo2 ys } }
                      } in
                      let {
                        $sgo3 :: [Language.Fortran.Expr
                                    (Data.Map.Internal.Map [GHC.Types.Char] [[GHC.Types.Char]])]
                                 -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (sc :: [Language.Fortran.Expr
                                      (Data.Map.Internal.Map
                                         [GHC.Types.Char] [[GHC.Types.Char]])]) ->
                          case sc of wild1 {
                            [] -> GHC.Types.False
                            : y ys
                            -> case y of wild2 {
                                 DEFAULT -> go4 ys lvl137
                                 Language.Fortran.Var ds1 ds2 lst
                                 -> case LanguageFortranTools.extractVarNames_go lst of wild3 {
                                      [] -> go4 ys lvl137
                                      : y1 ys1
                                      -> case y1 of ww2 { Language.Fortran.VarName ww3 ww4 ->
                                         go4
                                           ys
                                           (VarDependencyAnalysis.$wisIndirectlyDependentOn'
                                              w
                                              ww3
                                              ww4
                                              w1
                                              (GHC.Types.[]
                                                 @ (Language.Fortran.Expr
                                                      LanguageFortranTools.Anno))) } } } }
                      } in
                      $sgo3
                        (VarDependencyAnalysis.$wpoly_go1
                           @ [Language.Fortran.Expr LanguageFortranTools.Anno]
                           (GHC.Types.[] @ (Language.Fortran.Expr LanguageFortranTools.Anno))
                           ww
                           ww1
                           w)
                   GHC.Types.True -> GHC.Types.True }) -}
ee8158590221400368cd11d7997bcb97
  $wisIndirectlyDependentOn' ::
    VarDependencyAnalysis.VarDependencyAnalysis
    -> LanguageFortranTools.Anno
    -> Language.Fortran.Variable
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> [Language.Fortran.Expr LanguageFortranTools.Anno]
    -> GHC.Types.Bool
  {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U><L,U>, Inline: [0] -}
c0199d3f31ac038cb718644d461b6870
  $wloopCarriedDependencyCheck ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Types.Bool, GHC.Types.Bool,
          [(Language.Fortran.Expr LanguageFortranTools.Anno,
            Language.Fortran.Expr LanguageFortranTools.Anno)] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
efcbd5dece9a4a8456b6d51c3c110b69
  $wloopCarriedDependencyCheck_reductionWithIteration ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (# GHC.Types.Bool, GHC.Types.Bool,
          [(Language.Fortran.Expr LanguageFortranTools.Anno,
            Language.Fortran.Expr LanguageFortranTools.Anno)] #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
aebf1f040d8b503de55ef7e5940329e3
  $wpoly_go1 ::
    a
    -> LanguageFortranTools.Anno
    -> Language.Fortran.Variable
    -> Data.Map.Internal.Map
         (Language.Fortran.VarName LanguageFortranTools.Anno) a
    -> a
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><S,1*U>, Inline: [0] -}
6e9749cb6c32fbe76601259ed63d3a6e
  $wpoly_go13 ::
    a -> GHC.Prim.Int# -> Data.Map.Internal.Map GHC.Types.Int a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><S,1*U>,
     Inline: [0] -}
1a450bd423b9c4c93727fee1162f6a87
  type ArrayAccessExpressions =
    Data.Map.Internal.Map
      (Language.Fortran.VarName LanguageFortranTools.Anno)
      [[Language.Fortran.Expr LanguageFortranTools.Anno]]
36be3192b493b83701851d342ceb283d
  type LoopStepTable =
    Data.Map.Internal.Map
      (Language.Fortran.VarName LanguageFortranTools.Anno)
      GHC.Types.Float
f3229ce6e96b539cda21a3387a751730
  type VarDependencyAnalysis =
    Data.Map.Internal.Map
      (Language.Fortran.VarName LanguageFortranTools.Anno)
      [Language.Fortran.Expr LanguageFortranTools.Anno]
b936fb9dd6b83675d33a5ed764048126
  analyseDependencies ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> VarDependencyAnalysis.VarDependencyAnalysis
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (codeSeg :: Language.Fortran.Fortran
                                 LanguageFortranTools.Anno) ->
                 VarDependencyAnalysis.analyseDependencies_go
                   (Data.Generics.Schemes.everything
                      @ [Language.Fortran.Fortran LanguageFortranTools.Anno]
                      (GHC.Base.++
                         @ (Language.Fortran.Fortran LanguageFortranTools.Anno))
                      VarDependencyAnalysis.analyseDependencies1
                      @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                      VarDependencyAnalysis.$s$fDataFortran
                      codeSeg)
                   (Data.Map.Internal.Tip
                      @ (Language.Fortran.VarName LanguageFortranTools.Anno)
                      @ [Language.Fortran.Expr LanguageFortranTools.Anno])) -}
b811ab6fb4bb5e2278512c4166a57901
  analyseDependencies1 ::
    Data.Data.Data a =>
    a -> [Language.Fortran.Fortran LanguageFortranTools.Anno]
  {- Arity: 2,
     Strictness: <S(SLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U>,
     Unfolding: (\ @ a
                   ($dData :: Data.Data.Data a)
                   (eta :: a)[OneShot] ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ a
                        (Data.Data.$p1Data @ a $dData)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N) of wild { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case VarDependencyAnalysis.analyseDependencies2 of wild1 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Types.[]
                        @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Types.[]
                             @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                        1#
                        -> LanguageFortranTools.extractAssignments
                             eta
                               `cast`
                             (UnsafeCo representational a (Language.Fortran.Fortran
                                                             LanguageFortranTools.Anno)) } } } }) -}
b2d4c36e163b7abc5411d30913231fe1
  analyseDependencies2 :: GHC.Fingerprint.Type.Fingerprint
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ Language.Fortran.Fortran
                        1898037638716600659##
                        3599167482411011499##
                        Language.Fortran.$trModule
                        Language.Fortran.$fDataFortran3
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> * -> *)
                        @ Data.Map.Internal.Map
                        11323335571407833487##
                        2177232330301466659##
                        Data.Map.Internal.$trModule
                        Data.Map.Internal.$fDataMap9
                        0#
                        GHC.Types.krep$*->*->*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww1 { (#,,,,#) ww2 ww3 ww4 ww5 ww6 ->
                 Data.Typeable.Internal.typeRepFingerprint
                   @ *
                   @ (Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (Data.Typeable.Internal.mkTrApp
                      @ *
                      @ *
                      @ Language.Fortran.Fortran
                      @ LanguageFortranTools.Anno
                      (Data.Typeable.Internal.TrTyCon
                         @ (* -> *)
                         @ Language.Fortran.Fortran
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12)
                      (Data.Typeable.Internal.mkTrApp
                         @ *
                         @ *
                         @ (Data.Map.Internal.Map GHC.Base.String)
                         @ [GHC.Base.String]
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ (* -> *)
                            @ Data.Map.Internal.Map
                            @ GHC.Base.String
                            (Data.Typeable.Internal.TrTyCon
                               @ (* -> * -> *)
                               @ Data.Map.Internal.Map
                               ww2
                               ww3
                               ww4
                               ww5
                               ww6)
                            VarDependencyAnalysis.analyseDependencies4)
                         (Data.Typeable.Internal.mkTrApp
                            @ *
                            @ *
                            @ []
                            @ GHC.Base.String
                            VarDependencyAnalysis.analyseDependencies3
                            VarDependencyAnalysis.analyseDependencies4))) } }) -}
63d87c00473bce94247f254c9fa55efb
  analyseDependencies3 :: Data.Typeable.Internal.TypeRep []
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ (* -> *)
                        @ []
                        15300440589168157478##
                        15016221815972113379##
                        GHC.Types.$trModule
                        GHC.Types.$tc[]1
                        0#
                        GHC.Types.krep$*Arr*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.TrTyCon
                   @ (* -> *)
                   @ []
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
10d58170f0fd14b2f41dfb874d986d01
  analyseDependencies4 ::
    Data.Typeable.Internal.TypeRep [GHC.Types.Char]
  {- Unfolding: (case Data.Typeable.Internal.$wmkTrCon
                        @ *
                        @ GHC.Types.Char
                        8424092006618324671##
                        2724268014499746065##
                        GHC.Types.$trModule
                        GHC.Types.$tcChar1
                        0#
                        GHC.Types.krep$*
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.SomeTypeRep) of ww7 { (#,,,,#) ww8 ww9 ww10 ww11 ww12 ->
                 Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ GHC.Types.Char
                   VarDependencyAnalysis.analyseDependencies3
                   (Data.Typeable.Internal.TrTyCon
                      @ *
                      @ GHC.Types.Char
                      ww8
                      ww9
                      ww10
                      ww11
                      ww12) }) -}
987c94409f7599c0c94def8d1db1b199
  analyseDependencies_go ::
    [Language.Fortran.Fortran LanguageFortranTools.Anno]
    -> VarDependencyAnalysis.VarDependencyAnalysis
    -> VarDependencyAnalysis.VarDependencyAnalysis
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
df58cd4960132403318fc3ed0a13bf36
  constructLoopIterTable ::
    GHC.Base.Maybe TupleTable.TupleTable
    -> VarDependencyAnalysis.LoopStepTable
    -> [Language.Fortran.VarName LanguageFortranTools.Anno]
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Base.Maybe TupleTable.TupleTable,
        [Language.Fortran.VarName LanguageFortranTools.Anno],
        VarDependencyAnalysis.LoopStepTable)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Base.Maybe TupleTable.TupleTable)
                   (w1 :: VarDependencyAnalysis.LoopStepTable)
                   (w2 :: [Language.Fortran.VarName LanguageFortranTools.Anno])
                   (w3 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case VarDependencyAnalysis.$wconstructLoopIterTable
                        w
                        w1
                        w2
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
d46d030d355e4b3f4fa73b3611802fbe
  isIndirectlyDependentOn ::
    VarDependencyAnalysis.VarDependencyAnalysis
    -> Language.Fortran.VarName LanguageFortranTools.Anno
    -> Language.Fortran.Expr LanguageFortranTools.Anno
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><S,1*U(U,U)><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: VarDependencyAnalysis.VarDependencyAnalysis)
                   (w1 :: Language.Fortran.VarName LanguageFortranTools.Anno)
                   (w2 :: Language.Fortran.Expr LanguageFortranTools.Anno) ->
                 case w1 of ww { Language.Fortran.VarName ww1 ww2 ->
                 VarDependencyAnalysis.$wisIndirectlyDependentOn w ww1 ww2 w2 }) -}
4d95ae2000ec533cf09ff975eca231a7
  isIndirectlyDependentOn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   VarDependencyAnalysis.isIndirectlyDependentOn2) -}
5e980f50edf94e408a2515da44625d67
  isIndirectlyDependentOn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DUMMY3"#) -}
89d79345f8c95009c523d7a21dbafc43
  loopCarriedDependencyCheck ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Types.Bool, GHC.Types.Bool,
        [(Language.Fortran.Expr LanguageFortranTools.Anno,
          Language.Fortran.Expr LanguageFortranTools.Anno)])
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case VarDependencyAnalysis.$wloopCarriedDependencyCheck
                        w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
a09487224bd4addd62a76bbf344feb2e
  loopCarriedDependencyCheck_reductionWithIteration ::
    Language.Fortran.Fortran LanguageFortranTools.Anno
    -> Language.Fortran.Fortran LanguageFortranTools.Anno
    -> (GHC.Types.Bool, GHC.Types.Bool,
        [(Language.Fortran.Expr LanguageFortranTools.Anno,
          Language.Fortran.Expr LanguageFortranTools.Anno)])
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.Fortran.Fortran LanguageFortranTools.Anno)
                   (w1 :: Language.Fortran.Fortran LanguageFortranTools.Anno) ->
                 case VarDependencyAnalysis.$wloopCarriedDependencyCheck_reductionWithIteration
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
"SPEC/VarDependencyAnalysis $fDataExpr @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                        (Data.Map.Internal.Map
                                                                                           GHC.Base.String
                                                                                           [GHC.Base.String]))
  Language.Fortran.$fDataExpr @ (Data.Map.Internal.Map
                                   GHC.Base.String [GHC.Base.String])
                              v
  = VarDependencyAnalysis.$s$fDataExpr
"SPEC/VarDependencyAnalysis $fDataFortran @ (Map String [String])" [orphan] forall (v :: Data.Data.Data
                                                                                           (Data.Map.Internal.Map
                                                                                              GHC.Base.String
                                                                                              [GHC.Base.String]))
  Language.Fortran.$fDataFortran @ (Data.Map.Internal.Map
                                      GHC.Base.String [GHC.Base.String])
                                 v
  = VarDependencyAnalysis.$s$fDataFortran
"SPEC/VarDependencyAnalysis $fDataMap @ [Char] @ [String]" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                                    [GHC.Types.Char])
                                                                           (v1 :: Data.Data.Data
                                                                                    [GHC.Base.String])
                                                                           (v :: Data.Data.Data
                                                                                   [GHC.Types.Char])
  Data.Map.Internal.$fDataMap @ [GHC.Types.Char]
                              @ [GHC.Base.String]
                              v
                              v1
                              v2
  = VarDependencyAnalysis.$s$fDataExpr_$s$fDataMap
"SPEC/VarDependencyAnalysis $fDataMap_$cdataCast2 @ [Char] @ [String]" [orphan] [0] forall (w2 :: GHC.Classes.Ord
                                                                                                    [GHC.Types.Char])
                                                                                           (w1 :: Data.Data.Data
                                                                                                    [GHC.Base.String])
                                                                                           (w :: Data.Data.Data
                                                                                                   [GHC.Types.Char])
  Data.Map.Internal.$fDataMap_$cdataCast2 @ [GHC.Types.Char]
                                          @ [GHC.Base.String]
                                          w
                                          w1
                                          w2
  = VarDependencyAnalysis.$s$fDataMap_$cdataCast2
"SPEC/VarDependencyAnalysis $fData[] @ [Char]" [orphan] forall (v :: Data.Data.Data
                                                                       [GHC.Types.Char])
  Data.Data.$fData[] @ [GHC.Types.Char] v
  = VarDependencyAnalysis.$s$fDataExpr_$s$fData[]
"SPEC/VarDependencyAnalysis $fData[]7 @ [Char]" [orphan] forall ($dData :: Data.Data.Data
                                                                             [GHC.Types.Char])
  Data.Data.$fData[]7 @ [GHC.Types.Char] $dData
  = VarDependencyAnalysis.$s$fData[]7
"SPEC/VarDependencyAnalysis $fEq(,) @ (Expr Anno) @ (Expr Anno)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                          (Language.Fortran.Expr
                                                                                             LanguageFortranTools.Anno))
                                                                                 (v :: GHC.Classes.Eq
                                                                                         (Language.Fortran.Expr
                                                                                            LanguageFortranTools.Anno))
  GHC.Classes.$fEq(,) @ (Language.Fortran.Expr
                           LanguageFortranTools.Anno)
                      @ (Language.Fortran.Expr LanguageFortranTools.Anno)
                      v
                      v1
  = VarDependencyAnalysis.$s$fEq(,)
"SPEC/VarDependencyAnalysis $fEqExpr @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                      (Data.Map.Internal.Map
                                                                                         GHC.Base.String
                                                                                         [GHC.Base.String]))
  Language.Fortran.$fEqExpr @ (Data.Map.Internal.Map
                                 GHC.Base.String [GHC.Base.String])
                            v
  = VarDependencyAnalysis.$s$fEq(,)_$s$fEqExpr
"SPEC/VarDependencyAnalysis $fEqMap @ [Char] @ [String]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                  [GHC.Base.String])
                                                                         (v :: GHC.Classes.Eq
                                                                                 [GHC.Types.Char])
  Data.Map.Internal.$fEqMap @ [GHC.Types.Char]
                            @ [GHC.Base.String]
                            v
                            v1
  = VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap
"SPEC/VarDependencyAnalysis $fEqMap_$c/= @ [Char] @ [String]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                          [GHC.Base.String])
                                                                              ($dEq :: GHC.Classes.Eq
                                                                                         [GHC.Types.Char])
  Data.Map.Internal.$fEqMap_$c/= @ [GHC.Types.Char]
                                 @ [GHC.Base.String]
                                 $dEq
                                 $dEq1
  = VarDependencyAnalysis.$s$fEq(,)_$s$fEqMap_$c/=
"SPEC/VarDependencyAnalysis $fEqVarName @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Eq
                                                                                         (Data.Map.Internal.Map
                                                                                            GHC.Base.String
                                                                                            [GHC.Base.String]))
  Language.Fortran.$fEqVarName @ (Data.Map.Internal.Map
                                    GHC.Base.String [GHC.Base.String])
                               v
  = VarDependencyAnalysis.$s$fEqVarName
"SPEC/VarDependencyAnalysis $fEq[] @ (Expr Anno)" [orphan] forall (v :: GHC.Classes.Eq
                                                                          (Language.Fortran.Expr
                                                                             LanguageFortranTools.Anno))
  GHC.Classes.$fEq[] @ (Language.Fortran.Expr
                          LanguageFortranTools.Anno)
                     v
  = VarDependencyAnalysis.$s$fEq[]
"SPEC/VarDependencyAnalysis $fEq[]_$c/= @ (Expr Anno)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                  (Language.Fortran.Expr
                                                                                     LanguageFortranTools.Anno))
  GHC.Classes.$fEq[]_$c/= @ (Language.Fortran.Expr
                               LanguageFortranTools.Anno)
                          $dEq
  = VarDependencyAnalysis.$s$fEq[]_$s$fEq[]_$c/=
"SPEC/VarDependencyAnalysis $fOrdMap @ [Char] @ [String]" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                                   [GHC.Base.String])
                                                                          (v1 :: GHC.Classes.Ord
                                                                                   [GHC.Types.Char])
  Data.Map.Internal.$fOrdMap @ [GHC.Types.Char]
                             @ [GHC.Base.String]
                             v1
                             v2
  = VarDependencyAnalysis.$s$fOrdMap
"SPEC/VarDependencyAnalysis $fOrdVarName @ (Map String [String])" [orphan] forall (v :: GHC.Classes.Ord
                                                                                          (Data.Map.Internal.Map
                                                                                             GHC.Base.String
                                                                                             [GHC.Base.String]))
  Language.Fortran.$fOrdVarName @ (Data.Map.Internal.Map
                                     GHC.Base.String [GHC.Base.String])
                                v
  = VarDependencyAnalysis.$s$fOrdVarName
"SPEC/VarDependencyAnalysis $fOrdVarName_$cmax @ (Map
                                                   String [String])" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                                                                                       (Data.Map.Internal.Map
                                                                                                                                                          GHC.Base.String
                                                                                                                                                          [GHC.Base.String]))
  Language.Fortran.$fOrdVarName_$cmax @ (Data.Map.Internal.Map
                                           GHC.Base.String [GHC.Base.String])
                                      w
  = VarDependencyAnalysis.$s$fOrdVarName_$cmax
"SPEC/VarDependencyAnalysis $fOrdVarName_$cmin @ (Map
                                                   String [String])" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                                                                                       (Data.Map.Internal.Map
                                                                                                                                                          GHC.Base.String
                                                                                                                                                          [GHC.Base.String]))
  Language.Fortran.$fOrdVarName_$cmin @ (Data.Map.Internal.Map
                                           GHC.Base.String [GHC.Base.String])
                                      w
  = VarDependencyAnalysis.$s$fOrdVarName_$cmin
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

