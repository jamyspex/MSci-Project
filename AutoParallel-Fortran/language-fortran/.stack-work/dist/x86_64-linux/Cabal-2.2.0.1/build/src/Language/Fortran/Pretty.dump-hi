
==================== FINAL INTERFACE ====================
2018-11-23 00:50:11.741393044 UTC

interface language-fortran-0.3-DnTmLOXLSgMntUzwJ6Kf9:Language.Fortran.Pretty 8043
  interface hash: a2095a51e09d6666853dcd08e082c2ec
  ABI hash: cf4b18cde1ec0fad205be376bbe2dc44
  export-list hash: e4b434bb908de8ad0af59258a5489c12
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 54fdb6224afc6d6e4ae98ef00e5fbfa4
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.Fortran.Pretty.asCases
  Language.Fortran.Pretty.asDefs
  Language.Fortran.Pretty.asLisp
  Language.Fortran.Pretty.asList
  Language.Fortran.Pretty.asParagraphs
  Language.Fortran.Pretty.asPlain
  Language.Fortran.Pretty.asPlain'
  Language.Fortran.Pretty.asSeq
  Language.Fortran.Pretty.asSet
  Language.Fortran.Pretty.asTuple
  Language.Fortran.Pretty.checkPrec
  Language.Fortran.Pretty.ind
  Language.Fortran.Pretty.indent
  Language.Fortran.Pretty.isEmptyArg
  Language.Fortran.Pretty.isEmptyArgName
  Language.Fortran.Pretty.opPrec
  Language.Fortran.Pretty.optTuple
  Language.Fortran.Pretty.outputFList
  Language.Fortran.Pretty.paren
  Language.Fortran.Pretty.printList
  Language.Fortran.Pretty.showBounds
  Language.Fortran.Pretty.showDU
  Language.Fortran.Pretty.showDV
  Language.Fortran.Pretty.showElseIf
  Language.Fortran.Pretty.showForall
  Language.Fortran.Pretty.showNQ
  Language.Fortran.Pretty.showPartRefList
  Language.Fortran.Pretty.showRanges
  Language.Fortran.Pretty.showUnits
  Language.Fortran.Pretty.showUse
  Language.Fortran.Pretty.show_data
  Language.Fortran.Pretty.show_namelist
  Language.Fortran.Pretty.Alt1{Language.Fortran.Pretty.Alt1}
  Language.Fortran.Pretty.Alt2{Language.Fortran.Pretty.Alt2}
  Language.Fortran.Pretty.Alt3{Language.Fortran.Pretty.Alt3}
  Language.Fortran.Pretty.Alts
  Language.Fortran.Pretty.Indentor{Language.Fortran.Pretty.indR}
  Language.Fortran.Pretty.OutputF{Language.Fortran.Pretty.outputF}
  Language.Fortran.Pretty.OutputG{Language.Fortran.Pretty.outputG}
  Language.Fortran.Pretty.OutputIndF{Language.Fortran.Pretty.outputIndF}
  Language.Fortran.Pretty.OutputIndG{Language.Fortran.Pretty.outputIndG}
module dependencies: Language.Fortran
package dependencies: base-4.11.1.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 syb-0.7
orphans: syb-0.7:Data.Generics.Instances base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Debug.Trace 7d99b5cfd8ae9f4b50938e4fedeaadef
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Language.Fortran 2fddde2e56a583fa28fd1ab9f2c137e9
  exports: 0ab59dfb1ee2e86f4f94b247f95a7e61
  ASeq 6ff0ec063aadfbc11bee5db34e7712df
  Access 75fe774158f02b1f83127ed8fa58c934
  AccessStmt bda68ca6bb19834f8d0599f8577e0173
  Action 5d8dcbe9a2fc9d3dd6d6b3a35fc55014
  Advance 6e1289504d895778a5880589e3222144
  Allocatable b4c493a052aa96ad79130d01da1db671
  Allocate 960edd1bf81cd1c41906f3bfbe0d9da3
  And 0b8240376f26be9a9c03b77ba047e2a8
  Arg ec9c7b7527845203b247eea4a69002cf
  Arg bd018f90b97562255b87a4df59d0b8ff
  ArgList bb4bd4d6188b1c6bac53701fdbe279ca
  ArgList dde1822d48cf08f443c01f56f66525c4
  ArgName 4b14095a10030e563e1b53f189263589
  ArgName be6adf5f27c081e5e81ca1cf786c5c4e
  ArrayCon 8ab8c1413bc6f468d0ce0a152d464ffb
  ArrayT c57f600b4a7ded64e92c3f36bdb15e99
  Assg ac7bc3c4913f10c4e92730edc0188a74
  AssgExpr 03b0214d2ff2b1fc06a50cb4a13a7bdc
  Attr 51f88274fa114a05e64e368073d7d967
  AttrStmt 47e0e201e7334174b046fcd169d857b8
  Backspace d6555f9a519c9e32f05d380db940ca37
  BaseType 67adc6049329903ce26ae289a9f33958
  BaseType aa88ffb66de72a23cf77590eafdaaa1d
  Bin fe8eee0ac4a5494151a62a60b4dc47d2
  BinOp dbc9212b2d4a153830ca8124fdf820a2
  Blank b4c6b844888c64ce0e143567fb80d22a
  Block 0a9e261251dd4e6a0ec432dc326cfd12
  Block b50565c4f403eeb1b94eb27dc8e6a975
  BlockData 3a5f6a6c697bdd240330a20400629fd9
  Bound 9596187657314befcbb24900403f5d48
  Call 6301042b8b4552bd9db1615c2f6779e0
  CallExpr 3a49dce0716fbd57bf98124dfa2bca30
  Character f8727e1a7b63c12ce01f44628f960112
  Close b201c908c4ec26275d3d5dacb7d43e26
  Common 08a3c2143f0453f9aa8a3fe2c381c31e
  Con a5787bcce0973bff2a509945896202df
  ConL 16353f8137e88d999e93b0ab72625989
  ConS c105163b69703313f0892362f849c074
  Concat 213b51fefc94926e925f88f6260d2108
  Continue d0531bfa83ca0232f39e3f5604b8119c
  Cycle 5899b66a1b2dcfd3d8c0f2886140a7f3
  DSeq 112767b1af7c88a46dfbf2f3c2980c6b
  Data 785249bc9ff0ddaf603cf85633a47bf2
  DataDecl bc75665ecfd31320f957000c6cd54ca8
  DataForm e3467c6449d2e00a1661edc3157f07e4
  DataStmt ce32419f177602f5cdaf38fd22906f16
  Deallocate 427a8ef2df1d0a88e30ec7c19f2b8bc1
  Decl dd14b6fc53a0cb3cd4e56dd5ea2ffb5a
  Decl 7ece643e5a8b068c6e933cb3bafeb231
  Delim 960e486fde1c20b268d419fb3c1e770a
  Delimiter 1a622ac54cba3c91e3556fd8e4ff71aa
  DerivedType 65dbe25bbf776847486563b09b087dde
  DerivedTypeDef f28e6107ec9f705d5b7ecfe43a868e7e
  Dimension 5f2c4845d2a061138e516bc06292d35d
  Direct 0e16e21252ccb84497299821d5c13a8a
  Div 3d284199d0b0c4cb12a4c4debd1bf9c4
  DoWhile 949f2256f48ca3797ec81034255573a3
  ESeq 3889fc75ada5aa03da425f9880f3c87f
  End 8bb77d3fc0c1ec18ca80b37b63c110df
  Endfile bf9ff94241edf4a9202c48c385c2a551
  Eor a7b55f360a9942156fd9a2639d344bee
  Equivalence acf05144431f1b7f663d1a1b5cb3d910
  Err b33a0effef789c2d4e7bf86c8713a8b4
  Exist a7e1365bd3a5fce4a67d32c80bc7ad48
  Exit f16479808e80038053e7b0fab2cdd601
  Expr dde1822d48cf08f443c01f56f66525c4
  External b974ffe4fd703a99de0eb075baa2c8f1
  ExternalStmt 76bbf12449681feb98c2f903782f2a4d
  FMT 9ee482d732176e5738ac38d75335b1e6
  FSeq a2197e1510040f021ffd50a979035903
  File e351523e5f0e9da44af36742c22843ab
  Floating 1dccf866ad870c7a6ad965a365bbb958
  For ffc3bc0b33c7be3e212928865ae9efd6
  Forall aa67bf1e8b493de81f961618c272865f
  Form 065eb7a27d2a51f94e183ce2d2c30589
  Format e737a81ebc3b0489f039d7b0b1562e89
  Formatted 061d7cd86a7ff8e4466f65b090c37a42
  Fortran a5aa3a801fd3738b14349f5a78efceec
  Fraction f084003d1e65777f323835262cca41d2
  FractionConst 8cfd602428a08e37348f6f408ba934de
  Function f66108aa4159c47f6ab74e586ed1b515
  FunctionInterface f2386a5f1290c8571c58883f1cd7040a
  GAssg 9654b85528d0dfeea2ffe37e25eba833
  GName 17276d6181d64f719bcbe49ae4a7ae46
  GOper ab2b119b961d8e8c968fb4f1e6317492
  GSpec 6438d29fb27f02f07fd808f2bd754579
  Goto 403c6e149395bfaecc29272de89e805f
  IOLength f17ac7c1017f246f868cfff3061ae3c7
  IOStat 53fbe6bd886dc70c3619b44d8e66d991
  If d5d5bd51acf0b2ad56a436e5d866e935
  Implicit a927111d29d31bd6ec8d853bd75658ee
  ImplicitNone 5fb826e53654e09427db63465bf94d7d
  ImplicitNull b194a34840ae1f752d8ae638799e297d
  In bff11d47ac150b1b97b3434f22d9567f
  InOut 846ce8766cc631e30e410c4a44d854b7
  Include 235fd2d778120ef432d5db663388aa8e
  IncludeProg 31ae2b00538e489100103a8ddb2c6dd8
  Inquire 791fa25efc56a3ff6027b207e633eebf
  Integer b033a758db7537ee5221b77301f76fb9
  IntegerConst ff3af629910f99cd90e64a4956a6f981
  Intent 3188ccfad7679c831cfe7b4bed5aaa49
  Interface eed57b000cfdd0cdf50cb0fe91ee3188
  InterfaceSpec 7ece643e5a8b068c6e933cb3bafeb231
  Intrinsic a2bc386947e2c013d63d31b97e3efb29
  Label de9ba65d4c14006510badb7ae4454b50
  Logical 9f5b83b4df13ffb72ec2e99ac0d787cd
  Main 8ab61e4700828765b3ad0b2cbfc72154
  MeasureUnit 6e034fe4b28be193bccf5f57c31d2159
  MeasureUnit 5699565f5f448bb936900abdc739855a
  MeasureUnitDef 4876f06d57dbd2bdf6fb41c145ed0465
  MeasureUnitSpec 2acb0488b05249becf8cd484d5c16866
  Minus c3e7ef16bc5e2e58f399c1d985d9b64e
  Module 84ee8800c7df1901dfa6ad9341999c25
  ModuleProcedure a0009f39739cc71dabc6debda36d2d66
  Mul fcbb1070c5d0b9687bebf54413f29c21
  NML 1cedbc67f6b01e71006a99d4b82b88ba
  Name 1a89926f1251ed770cd066e0f607d4ac
  Named 22641de688a3dec42134741fdb889d8a
  Namelist 3c867a071bea9cb2277417cf863e9f1f
  NextRec 56af0cb5305a07141d1d5a43036084db
  NoSpec ae671ed80fe45fb5657e8a0386f1a8a2
  Not c84439884004373a05763f08873a969b
  Null d413296a6e54444cf50712f40467d8e1
  NullArg 4ab68a239c3c7c1321123267a63571a4
  NullDecl e688960ce8386cd0d9be1eac1fa84e0b
  NullExpr 0d8b53a34ea5432f73d17ada7cf30e0a
  NullFraction b52372824d4710162a61a14b48bfa09e
  NullProg ff9c28fc6587338b1cec8fdc2e2dd6ed
  NullStmt e61d0d6f11885a9f5bf01382860ef9ff
  NullSubName 5f2f2832c3cea998953c309fb59b5580
  Nullify 59cbdfc54899b2dc7c79a046867345fa
  Number b75ca0075aa9cd28997fe83375d21227
  Open 01b6ce71e3d07f1e25e986c3737acdc2
  Opened 90f77d7049da1c4d143599e5c1e18a65
  Optional fc750a39b6c497f3057868f805454203
  Or ca19ffdca1c26504725184139e7ea043
  Out 8f6e38d30ecbec6e8c476dc556a0f216
  PSeq eb142130fa633b7310c1cd290c2086d1
  Pad 60a28218144aa8250daf7ed0cab5a418
  Parameter 4544eb9eb4685a6f3f29999c9313b9a4
  Pause 8d3669f855331f9db1a077749965cf55
  Plus 7af649a2e8e8b8ed78bbe028a9c6ad25
  Pointer ee12f8f9718e7d1dd8449d3d32d06698
  PointerAssg e14204d71067dbd5d8b77396c6864e6f
  Position 4da43753c7f9a3cf92e6017240149f89
  Power 70582a0f187b87b149fdffc3afdb3dd7
  Print 5e02a9ca139805682f5be346ad48f7c6
  Private 96a804fe3b8cf3b883a1e68c5b66592c
  Prog 49423d5ba9af5a0cd19ea93b2d13a148
  ProgUnit 6bf32305ada4219a019f914e9849b46e
  Public f9678647fa44948a3c44074ddcc0c792
  Read 50a912689f2377218d49cd1f04a26548
  ReadS d173742862d1db7ca1dc7f7deea89614
  ReadWrite 3df17649de913511072f060eb473bcfe
  Real dd73ae931c151179b8a3badf933ffcc5
  Rec b22e247cbe57abef4ea7fe87e7073dad
  Recl 4ca78cb5958f395a15c872fdd8902d66
  RelEQ fd909d2d4ce0942906350ee34b478482
  RelGE 1fc2e2cb8305e9d93e40095cf7c4453c
  RelGT 87f8abc916274b4695f550038b38c960
  RelLE 7d339f692503941696979b6739c246f6
  RelLT 5968dae00f8c24813f7c3e32d8466256
  RelNE 93c4e43d2b9fb83259ca69f11ce71575
  Return ff34d58fe521bbca55d50ced19fc8fe3
  Rewind 3de296dbe07cfd164b5aa0baaba2ffa0
  Save 6262e414317e0b11d6f2ec29406ea181
  Sequence 790c69c612155ee0338abcc4086ab0e5
  Sequential 30241fc4d6c33ed34db2404ed1ccd575
  Size b8b986d509d222e4afecaaf800244534
  SomeType 7a675f79a1742b086c6e0a972f87f76e
  Spec 14704e7f898e4314ef50fdf7a23e80c5
  Sqrt 0ee9227df01a8033594d87beaaa88109
  Status 91e6724cb8828d404f872485ef2d0ac2
  Stop 9ef8a3d95c655e21ea25ee3448c105e0
  StringLit b0f676463ee4d3ad47ee9acf5723fafa
  Sub 67e71e1a3442b9c51385585399a1e5b5
  SubName e1d832eaabcd1142841a37a3530ef5cc
  SubName 668b1d2de935a872813ac07676ecfaa9
  SubroutineInterface 80f2ae374194efc9961b713ccd851678
  Target b8fcd8eebe27acbf689bd12abb63367b
  Type 8e2bc77e72555108394005f832b29083
  UMinus fefbad818f0570d69fcb7ca84ca7f9a6
  Unary bef8d0c0cde01a5ca9e0055ffffa89e7
  UnaryOp 5cacc35853b887bc4ab468086f78d0a7
  Unformatted 6d2daa5f0513bc188906f1f08cdce160
  Unit 3cbcce6c0a862eb97912c2b45701901e
  UnitNone 35a384218b72fd2fee03e97a69f84787
  UnitProduct 14a899c42e9a347d63bddec29ccb3347
  UnitQuotient 603e4bb3448cd4787805ee69395aaa49
  Use cc301b79d5736426c724a7ad0f0f59d2
  UseBlock 24fbfa89611c2a154239bbe61c862d05
  UseBlock 89978d2931d7aa8c804a665ce27a88a2
  UseNil 86f2c5e1aab4c00eb9b4b6312a7082a0
  Uses 269ca50531a76be4856d27dff05f3e7d
  Var 11f3119893937d559bc8c1a0fd9fc8e3
  VarName a42b84c67b8d2bdc1fba4a319c4053ef
  VarName fedb9c38b7fb4b440ed4cd946a951b02
  Volatile 9bdf230191e58685f2d91d2b4344f167
  Where 5b712618fe7a280a4af9d72cf4278ff4
  Write c8d1581d5c62cac8e1c00444dc782561
  WriteSp b66ef456a3760f5fb24626a2dd620477
1f5646f1c35c05dec7814a1764fe42b3
  $fAltsAlt1 ::
    Language.Fortran.Pretty.Alts Language.Fortran.Pretty.Alt1
  DFunId
  {- HasNoCafRefs, Inline: CONLIKE,
     Unfolding: DFun:. @ Language.Fortran.Pretty.Alt1 -}
1f5646f1c35c05dec7814a1764fe42b3
  $fAltsAlt2 ::
    Language.Fortran.Pretty.Alts Language.Fortran.Pretty.Alt2
  DFunId
  {- HasNoCafRefs, Inline: CONLIKE,
     Unfolding: DFun:. @ Language.Fortran.Pretty.Alt2 -}
1f5646f1c35c05dec7814a1764fe42b3
  $fAltsAlt3 ::
    Language.Fortran.Pretty.Alts Language.Fortran.Pretty.Alt3
  DFunId
  {- HasNoCafRefs, Inline: CONLIKE,
     Unfolding: DFun:. @ Language.Fortran.Pretty.Alt3 -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFArgListv ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.ArgList p) v
  DFunId
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><L,A><L,U><S,1*U(A,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Language.Fortran.Pretty.$fOutputFArgListv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.ArgList p>_N <v>_N)) -}
f7942b512dbb21b8f6f92f494a0030c1
  $fOutputFArgListv1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFArgListv2) -}
e8b59431e365fa7ae2e520327defb250
  $fOutputFArgListv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
b1b168d79aec889b071dfc9cb8979544
  $fOutputFArgListv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("("#) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFArgListv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.ArgList p -> GHC.Base.String
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><L,A><L,U><S,1*U(A,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w1 :: Language.Fortran.Pretty.Alts v)
                   (w2 :: ?variant::v)
                   (w3 :: Language.Fortran.ArgList p) ->
                 case w3 of ww { Language.Fortran.ArgList ww1 ww2 ->
                 Language.Fortran.Pretty.$w$coutputF @ p @ v w w2 ww2 }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFArgNamev ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.ArgName p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.ArgName p) v
  DFunId
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,C(C1(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (3, False, True)
                Language.Fortran.Pretty.$fOutputFArgNamev_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.ArgName p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.ArgName p>_N <v>_N)) -}
9644f573ef37688db2ed122637e1eb60
  $fOutputFArgNamev1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (","#) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFArgNamev_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.ArgName p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.ArgName p -> GHC.Base.String
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,C(C1(U))><L,A><L,U><S,1*U>, Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.VarName p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.ArgName p) v)
                   (w2 :: Language.Fortran.Pretty.Alts v)
                   (w3 :: ?variant::v)
                   (w4 :: Language.Fortran.ArgName p) ->
                 Language.Fortran.Pretty.$w$coutputF1 @ p @ v w1 w3 w4) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFArgv ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgName p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Arg p) v
  DFunId
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><L,A><L,U><S,1*U(A,U,A)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Language.Fortran.Pretty.$fOutputFArgv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.ArgName p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Arg p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFArgv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgName p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.Arg p -> GHC.Base.String
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><L,A><L,U><S,1*U(A,U,A)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.ArgName p) v)
                   (w1 :: Language.Fortran.Pretty.Alts v)
                   (w2 :: ?variant::v)
                   (w3 :: Language.Fortran.Arg p) ->
                 case w3 of ww { Language.Fortran.Arg ww1 ww2 ww3 ->
                 Language.Fortran.Pretty.$w$coutputF2 @ p @ v w w2 ww2 }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFAttrv ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.MeasureUnitSpec p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Attr p) v
  DFunId
  {- Arity: 9,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,1*C1(C1(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (7, False, True)
                Language.Fortran.Pretty.$fOutputFAttrv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.BinOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Expr p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.UnaryOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.VarName p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.MeasureUnitSpec p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Attr p>_N <v>_N)) -}
cd939c9f5f1604158dd3101893532853
  $fOutputFAttrv1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unit("#) -}
39bcda0a6737f667f72c2719c0a1638b
  $fOutputFAttrv10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("sequence "#) -}
e4383302d7a9df9e8f86fbd4783fb0ea
  $fOutputFAttrv11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv12) -}
7d07322a0c85aa12dae7bebd4d6879ca
  $fOutputFAttrv12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("private "#) -}
823f894ef458f4c7b08ef87e86933abd
  $fOutputFAttrv13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv14) -}
ddbec04f1b0486c76e9ab72ae0cf8352
  $fOutputFAttrv14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("public "#) -}
695128ef3aef7b1835dc850ae56ffca3
  $fOutputFAttrv15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv16) -}
40e96fae4d31ebb212ad253bfcf054e6
  $fOutputFAttrv16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("volatile "#) -}
86f8b10f619c23f071c2bfe00655edd6
  $fOutputFAttrv17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv18) -}
541000bbe6641586cbfeccb74aa64472
  $fOutputFAttrv18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("target "#) -}
e3dac034909e8b3d19e1ad974be26b3b
  $fOutputFAttrv19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv20) -}
e9b48d7c0c867255fc098f359e5af566
  $fOutputFAttrv2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv3) -}
a6d4b25e5e9d5d47264222fff57197eb
  $fOutputFAttrv20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("save "#) -}
362438660db8cb8fa99f231b9f7069b4
  $fOutputFAttrv21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv22) -}
933d9f847bdceb14e5f21619c2795ca2
  $fOutputFAttrv22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("pointer "#) -}
8efa3e757e1a63dfbdd1c5313bfe5604
  $fOutputFAttrv23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv24) -}
2dcb376f7defb81b190a418e1d8fbbb8
  $fOutputFAttrv24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("optional "#) -}
42e6411d065877441b46970aa8d363a5
  $fOutputFAttrv25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv26) -}
73d4b020c99654daa96f23ce62c64d48
  $fOutputFAttrv26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("intrinsic "#) -}
c62eb3dd83f271c5e296aa50ea021315
  $fOutputFAttrv27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv28) -}
f12a66062035c72b8edc001265a4aeb9
  $fOutputFAttrv28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("intent(inout) "#) -}
f2d2b11a246b66f260aa2f3ed3d22627
  $fOutputFAttrv29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv30) -}
96376671c9a4da63919c090ddc84dd19
  $fOutputFAttrv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (":"#) -}
ebaf260bcfddd7eeb2b152321f82e62e
  $fOutputFAttrv30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("intent(out) "#) -}
a43842a8c8f79528225ca6657c7c8b46
  $fOutputFAttrv31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv32) -}
8e93d8f0bae24798b0d2242d0582e4d7
  $fOutputFAttrv32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("intent(in) "#) -}
6307a81069014cc8eeb93a1957b7db75
  $fOutputFAttrv33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv34) -}
dad78de717a605737aa71b45735e8beb
  $fOutputFAttrv34 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("external "#) -}
5202106a617f4f85dc1b0f2a17d6d36e
  $fOutputFAttrv35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv36) -}
7d2d84da119dbfaca12b3126caa65572
  $fOutputFAttrv36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("allocatable "#) -}
c60495b38ec559335f64a41e3736797b
  $fOutputFAttrv37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv38) -}
23ad44adaa46941d4ff83b69112ac1a4
  $fOutputFAttrv38 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("parameter "#) -}
748db68140d395034d19f27bbd23a507
  $fOutputFAttrv4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   (GHC.Types.[] @ GHC.Types.Char)
                   Language.Fortran.Pretty.$fOutputFAttrv5) -}
b82199aa95098056f04619f507ada242
  $fOutputFAttrv5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFAttrv7
                   Language.Fortran.Pretty.$fOutputFAttrv6) -}
2f1c92c7ccfb08ecf3ccb8c9e274b67e
  $fOutputFAttrv6 :: [[GHC.Types.Char]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
f23e209d5fa11f2213635e5514ff4145
  $fOutputFAttrv7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFArgNamev1) -}
1621faf3a16781e6295b1823775f394a
  $fOutputFAttrv8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dimension ("#) -}
d3a254d0103af633df7f11d0b8a2de5d
  $fOutputFAttrv9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFAttrv10) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFAttrv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.MeasureUnitSpec p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.Attr p -> GHC.Base.String
  {- Arity: 9,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,1*C1(C1(U))><L,A><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (9, True, True)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.ArgList p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.BinOp p) v)
                   (w2 :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w3 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.UnaryOp p) v)
                   (w4 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.VarName p) v)
                   (w5 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.MeasureUnitSpec p) v)
                   (w6 :: Language.Fortran.Pretty.Alts v)
                   (w7 :: ?variant::v)
                   (w8 :: Language.Fortran.Attr p) ->
                 Language.Fortran.Pretty.$w$coutputF3
                   @ p
                   @ v
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w7
                   w8) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFBaseTypev ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.BaseType p) v
  DFunId
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Language.Fortran.Pretty.$fOutputFBaseTypev_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.BaseType p>_N <v>_N)) -}
e115e6f69826cba8636d7a8c251b4c96
  $fOutputFBaseTypev1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBaseTypev2) -}
cca34e617072f425e9337ebe37945a60
  $fOutputFBaseTypev10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("integer"#) -}
ba0de449d915e09daef8465cb2bc51c2
  $fOutputFBaseTypev11 :: GHC.Base.String
  {- Strictness: x -}
142983ee6f52c64c15da58cafa86b2f6
  $fOutputFBaseTypev2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("logical"#) -}
f31c8a5d69fc690afb080f8d161995ba
  $fOutputFBaseTypev3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("type ("#) -}
45a4cf372f5a4fd0d6060741135b5649
  $fOutputFBaseTypev4 :: GHC.Base.String
  {- Strictness: x -}
d0189a8f67ab7d72c50fc34a462b00b8
  $fOutputFBaseTypev5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBaseTypev6) -}
13709bf66875f543de56c84e51bed6a9
  $fOutputFBaseTypev6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("character"#) -}
c7d75e50c133663b3b8d1f7981fea3a0
  $fOutputFBaseTypev7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBaseTypev8) -}
58e0215142f2b1e7f8463b5f2edb7823
  $fOutputFBaseTypev8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("real"#) -}
654c118f3a396030e8efce68d9f52344
  $fOutputFBaseTypev9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBaseTypev10) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFBaseTypev_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.BaseType p -> GHC.Base.String
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><L,A><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.SubName p) v)
                   (w1 :: Language.Fortran.Pretty.Alts v)
                   (w2 :: ?variant::v)
                   (w3 :: Language.Fortran.BaseType p) ->
                 Language.Fortran.Pretty.$w$coutputF5 @ p @ v w w2 w3) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFBinOpv ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.BinOp p) v
  DFunId
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.Fortran.Pretty.$fOutputFBinOpv_$coutputF
                  `cast`
                (forall (v :: <*>_N) (p :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.BinOp p>_N <v>_N)) -}
41b9f99e2ec6e42304e3cc9f56aae00f
  $fOutputFBinOpv1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv2) -}
d2f1fd0c023305005ad9ec39cefc149e
  $fOutputFBinOpv10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/="#) -}
6201a167ce2a32ea43eab5b9d149648c
  $fOutputFBinOpv11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv12) -}
55dfbadd46aa3864e5309e0ef091bae5
  $fOutputFBinOpv12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=="#) -}
c33d02d280632eb992f2abe08689cd44
  $fOutputFBinOpv13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv14) -}
fe914591d7713abc4d0cad82c0ee7e80
  $fOutputFBinOpv14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("**"#) -}
b137d8dbb57f6a508cec971fd0e52ec6
  $fOutputFBinOpv15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv16) -}
539d1d682dd3fb74787f0e52e0dd468b
  $fOutputFBinOpv16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("//"#) -}
80142e1a7f7c5aebb2b516f9f2d69263
  $fOutputFBinOpv17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv18) -}
60300f29678351ed54203799d1cec9f9
  $fOutputFBinOpv18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (".and."#) -}
0690aa66ee4d84c8192a3261463c3ca1
  $fOutputFBinOpv19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv20) -}
d26647f590120b47e12dce804b67854a
  $fOutputFBinOpv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">="#) -}
264b9aeb350f99c08f8134b8ce508370
  $fOutputFBinOpv20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (".or."#) -}
309366294459512ee3d96967ceadaf80
  $fOutputFBinOpv21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv22) -}
bbce62417bb9184065b26040ec8650b2
  $fOutputFBinOpv22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
85299f1b158bb85da99d9f1869142ddd
  $fOutputFBinOpv23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv24) -}
11b68704f44f5dc107b5a4e90e4b243c
  $fOutputFBinOpv24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*"#) -}
25db6af4953f6af2d41b30518b5b992d
  $fOutputFBinOpv25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv26) -}
61020dd68d8d351de1d4e47d2efa629e
  $fOutputFBinOpv26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-"#) -}
3d6da9adc7d131c0c066f94f11e1bd1d
  $fOutputFBinOpv27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv28) -}
b9eb1cbb7db6898d37e30a607004d668
  $fOutputFBinOpv28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+"#) -}
51e2c2a78ca7a60d31ffa9005a9d96bb
  $fOutputFBinOpv3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv4) -}
0e8f2ec1d91b968ca659945722f19e41
  $fOutputFBinOpv4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">"#) -}
794948993b75beea0b233a9c4a073f21
  $fOutputFBinOpv5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv6) -}
f24fc2ec3d771a4d12e33473e87587ca
  $fOutputFBinOpv6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<="#) -}
0c2a97140b41b921f9900ba725f4f2c5
  $fOutputFBinOpv7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv8) -}
a0146f117469b12c1e2123bdf6bf7cd8
  $fOutputFBinOpv8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<"#) -}
6c2b1f2c49e0632444b827f5e3ebb944
  $fOutputFBinOpv9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv10) -}
f8f000fe65f0a99ceba9c7bb8f091524
  $fOutputFBinOpv_$coutputF ::
    (Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.BinOp p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ v
                   @ p
                   (w :: Language.Fortran.Pretty.Alts v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.BinOp p) ->
                 Language.Fortran.Pretty.$w$coutputF6 @ v @ p w2) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFBlockv ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Implicit p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Block p) v
  DFunId
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,A><L,U><S(LS(SL)LLLL),1*U(A,1*U(1*U,A),U,A,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (4, False, True)
                Language.Fortran.Pretty.$fOutputFBlockv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.Fortran p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Decl p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Implicit p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Block p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFBlockv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Implicit p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.Block p -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,A><L,U><S(LS(SL)LLLL),1*U(A,1*U(1*U,A),U,A,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.Fortran p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v)
                   (w2 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.Implicit p) v)
                   (w3 :: Language.Fortran.Pretty.Alts v)
                   (w4 :: ?variant::v)
                   (w5 :: Language.Fortran.Block p) ->
                 case w5 of ww { Language.Fortran.Block ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww2 of ww7 { Language.Fortran.UseBlock ww8 ww9 ->
                 Language.Fortran.Pretty.$w$coutputF7
                   @ p
                   @ v
                   w
                   w1
                   w2
                   w4
                   ww8
                   ww3
                   ww5
                   ww6 } }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFDataFormv ::
    Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.DataForm p) v
  DFunId
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U(A,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.Fortran.Pretty.$fOutputFDataFormv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.DataForm p>_N <v>_N)) -}
96328944ff0bac7b0ec7e9b73dbed39c
  $fOutputFDataFormv1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFDataFormv2) -}
f45e88876ec1097616d22356a3c45b4a
  $fOutputFDataFormv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
678977f1f838c4e4517695c8b26cc118
  $fOutputFDataFormv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("data "#) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFDataFormv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     ?variant::v) =>
    Language.Fortran.DataForm p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U(A,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.DataForm p) ->
                 case w2 of ww { Language.Fortran.Data ww1 ww2 ->
                 Language.Fortran.Pretty.$w$coutputF8 @ p @ v w w1 ww2 }) -}
2fe175720de4ab67e6069a21e387179e
  $fOutputFDataFormv_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFDeclv ::
    (Language.Fortran.Pretty.Indentor (Language.Fortran.Decl p),
     Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Attr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.DataForm p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.GSpec p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.InterfaceSpec p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.MeasureUnitSpec p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Type p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Decl p) v
  DFunId
  {- Arity: 17,
     Strictness: <L,1*C1(C1(U))><L,C(C1(U))><L,1*C1(C(U))><L,C(C1(U))><L,C(C(U))><L,1*C1(C1(U))><L,C(C(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,1*C1(C1(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (15, False, True)
                Language.Fortran.Pretty.$fOutputFDeclv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.Indentor (Language.Fortran.Decl p)>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.ArgList p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Attr p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.BinOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Decl p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.DataForm p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Expr p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.GSpec p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.InterfaceSpec p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.MeasureUnitSpec p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.SubName p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.UnaryOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.VarName p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Type p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Decl p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFDeclv_$coutputF ::
    (Language.Fortran.Pretty.Indentor (Language.Fortran.Decl p),
     Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Attr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.DataForm p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.GSpec p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.InterfaceSpec p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.MeasureUnitSpec p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Type p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.Decl p -> GHC.Base.String
  {- Arity: 17,
     Strictness: <L,1*C1(C1(U))><L,C(C1(U))><L,1*C1(C(U))><L,C(C1(U))><L,C(C(U))><L,1*C1(C1(U))><L,C(C(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,1*C1(C1(U))><L,A><L,U><S,1*U> -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFExprv ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v
  DFunId
  {- Arity: 8,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (6, False, True)
                Language.Fortran.Pretty.$fOutputFExprv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.BinOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Expr p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.UnaryOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.VarName p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Expr p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFExprv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.Expr p -> GHC.Base.String
  {- Arity: 8,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,A><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (8, True, True)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.ArgList p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.BinOp p) v)
                   (w2 :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w3 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.UnaryOp p) v)
                   (w4 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.VarName p) v)
                   (w5 :: Language.Fortran.Pretty.Alts v)
                   (w6 :: ?variant::v)
                   (w7 :: Language.Fortran.Expr p) ->
                 Language.Fortran.Pretty.$w$coutputF4
                   @ p
                   @ v
                   w
                   w1
                   w2
                   w3
                   w4
                   w6
                   w7) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFFortranv ::
    (Language.Fortran.Pretty.OutputIndF (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Fortran p) v
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,A><L,U>, Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ p
                   @ v
                   ($dOutputIndF :: Language.Fortran.Pretty.OutputIndF
                                      (Language.Fortran.Fortran p) v)
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dIP :: ?variant::v) ->
                 $dOutputIndF
                   `cast`
                 (Language.Fortran.Pretty.N:OutputIndF[0]
                      <Language.Fortran.Fortran p>_N <v>_N)
                   $dIP
                   (GHC.Types.I# 1#))
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputIndF
                    (Language.Fortran.Fortran p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Fortran p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFFractionv ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Fraction p) v
  DFunId
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.Fortran.Pretty.$fOutputFFractionv_$coutputF
                  `cast`
                (forall (v :: <*>_N) (p :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Fraction p>_N <v>_N)) -}
b463ac16382c2ff3c346327b17a0ac45
  $fOutputFFractionv1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("**("#) -}
9be9fe8ca9f37441c28d0a764953259c
  $fOutputFFractionv_$coutputF ::
    (Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.Fraction p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ v
                   @ p
                   (w :: Language.Fortran.Pretty.Alts v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.Fraction p) ->
                 Language.Fortran.Pretty.$w$coutputF9 @ v @ p w2) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFGSpecv ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.GSpec p) v
  DFunId
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(C1(U))><L,1*C1(C1(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (4, False, True)
                Language.Fortran.Pretty.$fOutputFGSpecv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.BinOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Expr p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.GSpec p>_N <v>_N)) -}
da2219368a5fa2c59f552154be9ff2e6
  $fOutputFGSpecv1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFGSpecv2) -}
b320996a4b855838bbf951ea828276a7
  $fOutputFGSpecv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("assignment(=)"#) -}
581fe04880265a5273f5eb10c6d6d511
  $fOutputFGSpecv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("operator("#) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFGSpecv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.GSpec p -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,A><L,1*C1(C1(U))><L,1*C1(C1(U))><L,A><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, True)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.BinOp p) v)
                   (w2 :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w3 :: Language.Fortran.Pretty.Alts v)
                   (w4 :: ?variant::v)
                   (w5 :: Language.Fortran.GSpec p) ->
                 Language.Fortran.Pretty.$w$coutputF10 @ p @ v w1 w2 w4 w5) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFImplicitv ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Implicit p) v
  DFunId
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.Fortran.Pretty.$fOutputFImplicitv_$coutputF
                  `cast`
                (forall (v :: <*>_N) (p :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Implicit p>_N <v>_N)) -}
abc27505762030cf9be7fd787b795630
  $fOutputFImplicitv1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFImplicitv2) -}
094f92bedc5580ed8a71b1a5b297d2eb
  $fOutputFImplicitv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("   implicit none\n"#) -}
97ee73d8f782bd93ec33ca1650d61adc
  $fOutputFImplicitv_$coutputF ::
    (Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.Implicit p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ v
                   @ p
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dIP :: ?variant::v)
                   (ds :: Language.Fortran.Implicit p) ->
                 case ds of wild {
                   Language.Fortran.ImplicitNone ds1
                   -> Language.Fortran.Pretty.$fOutputFImplicitv1
                   Language.Fortran.ImplicitNull ds1
                   -> GHC.Types.[] @ GHC.Types.Char }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFInterfaceSpecv ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Implicit p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF
      (Language.Fortran.InterfaceSpec p) v
  DFunId
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,C(C(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (5, False, True)
                Language.Fortran.Pretty.$fOutputFInterfaceSpecv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Decl p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Implicit p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.SubName p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.InterfaceSpec p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFInterfaceSpecv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Implicit p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.InterfaceSpec p -> GHC.Base.String
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,C(C(U))><L,A><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (7, True, True)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v)
                   (w2 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.Implicit p) v)
                   (w3 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.SubName p) v)
                   (w4 :: Language.Fortran.Pretty.Alts v)
                   (w5 :: ?variant::v)
                   (w6 :: Language.Fortran.InterfaceSpec p) ->
                 Language.Fortran.Pretty.$w$coutputF11 @ p @ v w w1 w2 w3 w5 w6) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFMeasureUnitSpecv ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputF
      (Language.Fortran.MeasureUnitSpec p) v
  DFunId
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv_$coutputF
                  `cast`
                (forall (v :: <*>_N) (p :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.MeasureUnitSpec p>_N <v>_N)) -}
55e251f247eb5a429dc280421e2fb895
  $fOutputFMeasureUnitSpecv1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" / "#) -}
15c5a4e170398600a83314f742631465
  $fOutputFMeasureUnitSpecv2 ::
    ([GHC.Types.Char], Language.Fortran.Fraction p) -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: (\ @ v
                   @ p
                   (ds :: ([GHC.Types.Char], Language.Fortran.Fraction p)) ->
                 case ds of wild { (,) unit f1 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   unit
                   (Language.Fortran.Pretty.$w$coutputF9 @ v @ p f1) }) -}
daa3478a75b192f4840bbb980206cf14
  $fOutputFMeasureUnitSpecv3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   (GHC.Types.[] @ GHC.Types.Char)
                   Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv4) -}
188d4b7f715a6cddc0aff7a80df96438
  $fOutputFMeasureUnitSpecv4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv5
                   Language.Fortran.Pretty.$fOutputFAttrv6) -}
8c8af5d9c3d078518587950f0cf1d9d5
  $fOutputFMeasureUnitSpecv5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv6) -}
3553d4f13b4a95d3be81c3ef333a3f84
  $fOutputFMeasureUnitSpecv6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" "#) -}
28c2f33c79f82cc094bed54b5b8f581f
  $fOutputFMeasureUnitSpecv7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv8) -}
1ea3c6eb4c55e657cc6aa3243ae0e698
  $fOutputFMeasureUnitSpecv8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1"#) -}
9d7fe27e3343378d1e421b81f3aac82c
  $fOutputFMeasureUnitSpecv_$coutputF ::
    (Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.MeasureUnitSpec p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ v
                   @ p
                   (w :: Language.Fortran.Pretty.Alts v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.MeasureUnitSpec p) ->
                 Language.Fortran.Pretty.$w$coutputF12 @ v @ p w2) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFProgUnitv ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BaseType p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Block p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Implicit p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.ProgUnit p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.ProgUnit p) v
  DFunId
  {- Arity: 12,
     Strictness: <L,C(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,C(C1(U))><L,1*C1(C1(U))><L,C(C(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (10, False, True)
                Language.Fortran.Pretty.$fOutputFProgUnitv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.BaseType p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Block p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Decl p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Fortran p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Implicit p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.SubName p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.VarName p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.ProgUnit p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.ProgUnit p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFProgUnitv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BaseType p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Block p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Implicit p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.ProgUnit p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.ProgUnit p -> GHC.Base.String
  {- Arity: 12,
     Strictness: <L,C(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,C(C1(U))><L,1*C1(C1(U))><L,C(C(U))><L,A><L,U><S,1*U> -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFSpecv ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Spec p) v
  DFunId
  {- Arity: 4, Strictness: <L,C(C1(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Language.Fortran.Pretty.$fOutputFSpecv_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Spec p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFSpecv_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.Spec p -> GHC.Base.String
  {- Arity: 4, Strictness: <L,C(C1(U))><L,A><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w1 :: Language.Fortran.Pretty.Alts v)
                   (w2 :: ?variant::v)
                   (w3 :: Language.Fortran.Spec p) ->
                 Language.Fortran.Pretty.$w$coutputF13 @ p @ v w w2 w3) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFSubNamev ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.SubName p) v
  DFunId
  {- Arity: 3, Strictness: <L,A><L,A>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.Fortran.Pretty.$fOutputFSubNamev_$coutputF
                  `cast`
                (forall (v :: <*>_N) (p :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.SubName p>_N <v>_N)) -}
a682259ecbd3f7ec2ae30e5adca31320
  $fOutputFSubNamev1 :: Language.Fortran.SubName p -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ p (ds :: Language.Fortran.SubName p) ->
                 case ds of wild {
                   Language.Fortran.SubName ds1 n1 -> n1
                   Language.Fortran.NullSubName ds1
                   -> Language.Fortran.Pretty.$fOutputFSubNamev2 }) -}
a833342207184bdc359e3e6c8c77e748
  $fOutputFSubNamev2 :: GHC.Base.String
  {- Strictness: x -}
1fc5d84a8a0fb93188d23e841e9a0328
  $fOutputFSubNamev_$coutputF ::
    (Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.SubName p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ v
                   @ p
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dIP :: ?variant::v) ->
                 Language.Fortran.Pretty.$fOutputFSubNamev1 @ p) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFTypev ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BaseType p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.MeasureUnitSpec p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Type p) v
  DFunId
  {- Arity: 10,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><C(C(S)),1*C1(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,A><L,U><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (8, False, True)
                Language.Fortran.Pretty.$fOutputFTypev_$coutputF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.BinOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.UnaryOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.BaseType p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Expr p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.MeasureUnitSpec p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.VarName p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Type p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFTypev_$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BaseType p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.MeasureUnitSpec p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.Type p -> GHC.Base.String
  {- Arity: 10,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><C(C(S)),1*C1(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,A><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (10, True, True)
                (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.ArgList p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.BinOp p) v)
                   (w2 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.UnaryOp p) v)
                   (w3 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.BaseType p) v)
                   (w4 :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w5 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.MeasureUnitSpec p) v)
                   (w6 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.VarName p) v)
                   (w7 :: Language.Fortran.Pretty.Alts v)
                   (w8 :: ?variant::v)
                   (w9 :: Language.Fortran.Type p) ->
                 Language.Fortran.Pretty.$w$coutputF14
                   @ p
                   @ v
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w8
                   w9) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFUnaryOpv ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.UnaryOp p) v
  DFunId
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.Fortran.Pretty.$fOutputFUnaryOpv_$coutputF
                  `cast`
                (forall (v :: <*>_N) (p :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.UnaryOp p>_N <v>_N)) -}
f167825025a392f7e6e1312deb51f07d
  $fOutputFUnaryOpv1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFUnaryOpv2) -}
c5dae66a0f81edc1693235651f73afad
  $fOutputFUnaryOpv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (".not."#) -}
21b5076b76f73bd1c9f4acd0c9e3495a
  $fOutputFUnaryOpv_$coutputF ::
    (Language.Fortran.Pretty.Alts v, ?variant::v) =>
    Language.Fortran.UnaryOp p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ v
                   @ p
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dIP :: ?variant::v)
                   (ds :: Language.Fortran.UnaryOp p) ->
                 case ds of wild {
                   Language.Fortran.UMinus ds1
                   -> Language.Fortran.Pretty.$fOutputFBinOpv25
                   Language.Fortran.Not ds1
                   -> Language.Fortran.Pretty.$fOutputFUnaryOpv1 }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFUseBlockv ::
    (Language.Fortran.Pretty.Alts v,
     Language.Fortran.Pretty.OutputF (Language.Fortran.Uses p) v) =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.UseBlock p) v
  DFunId
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><C(C(S)),1*C1(C1(U))><L,U><S,1*U(U,A)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ v
                   @ p
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dOutputF :: Language.Fortran.Pretty.OutputF
                                   (Language.Fortran.Uses p) v)
                   ($dIP :: ?variant::v)
                   (ds :: Language.Fortran.UseBlock p) ->
                 case ds of wild { Language.Fortran.UseBlock uses ds1 ->
                 $dOutputF
                   `cast`
                 (Language.Fortran.Pretty.N:OutputF[0]
                      <Language.Fortran.Uses p>_N <v>_N)
                   $dIP
                   uses })
                  `cast`
                (forall (v :: <*>_N) (p :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R <Language.Fortran.Pretty.OutputF
                         (Language.Fortran.Uses p) v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.UseBlock p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFUsesv ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.Uses p) v
  DFunId
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                (\ @ v
                   @ p
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dIP :: ?variant::v)
                   (u :: Language.Fortran.Uses p) ->
                 Language.Fortran.Pretty.showUse @ p u)
                  `cast`
                (forall (v :: <*>_N) (p :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.Uses p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputFVarNamev ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputF (Language.Fortran.VarName p) v
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,A><S(LS),1*U(A,1*U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ v
                   @ p
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dIP :: ?variant::v)
                   (ds :: Language.Fortran.VarName p) ->
                 case ds of wild { Language.Fortran.VarName ds1 v1 -> v1 })
                  `cast`
                (forall (v :: <*>_N) (p :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0]
                               <Language.Fortran.VarName p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputF[]v ::
    (Language.Fortran.Pretty.Alts v,
     Language.Fortran.Pretty.OutputG a v) =>
    Language.Fortran.Pretty.OutputF [a] v
  DFunId
  {- Arity: 4, Strictness: <L,A><L,C(C1(U))><L,U><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Language.Fortran.Pretty.$fOutputF[]v_$coutputG
                  `cast`
                (forall (v :: <*>_N) (a :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R <Language.Fortran.Pretty.OutputG a v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputF[0] <[a]>_N <v>_N)) -}
a6e1a9f79a8c8669745850e44d508000
  $fOutputF[]v1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputF[]v2) -}
b7e322dc02fc3f9eaa130736eeae35a9
  $fOutputF[]v2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("]"#) -}
90e7948f0e400689264376399892f950
  $fOutputF[]v3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", "#) -}
df174b445f70e5435d26044c93f5cba8
  $fOutputF[]v4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("["#) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputF[]v_$coutputG ::
    (Language.Fortran.Pretty.Alts v,
     Language.Fortran.Pretty.OutputG a v, ?variant::v) =>
    [a] -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><L,C(C1(U))><L,U><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ v
                   @ a
                   (w :: Language.Fortran.Pretty.Alts v)
                   (w1 :: Language.Fortran.Pretty.OutputG a v)
                   (w2 :: ?variant::v)
                   (w3 :: [a]) ->
                 Language.Fortran.Pretty.$w$coutputG @ v @ a w1 w2 w3) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputG(,)v ::
    (Language.Fortran.Pretty.Alts v,
     Language.Fortran.Pretty.OutputG a v,
     Language.Fortran.Pretty.OutputG b v) =>
    Language.Fortran.Pretty.OutputG (a, b) v
  DFunId
  {- Arity: 5,
     Strictness: <L,A><L,1*C1(C1(U))><L,1*C1(C1(U))><L,U><S,1*U(U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (3, False, True)
                Language.Fortran.Pretty.$fOutputG(,)v_$coutputG
                  `cast`
                (forall (v :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R <Language.Fortran.Pretty.OutputG a v>_R
                 ->_R <Language.Fortran.Pretty.OutputG b v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputG[0]
                               <(a, b)>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputG(,)v_$coutputG ::
    (Language.Fortran.Pretty.Alts v,
     Language.Fortran.Pretty.OutputG a v,
     Language.Fortran.Pretty.OutputG b v, ?variant::v) =>
    (a, b) -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,A><L,1*C1(C1(U))><L,1*C1(C1(U))><L,U><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ v
                   @ a
                   @ b
                   (w :: Language.Fortran.Pretty.Alts v)
                   (w1 :: Language.Fortran.Pretty.OutputG a v)
                   (w2 :: Language.Fortran.Pretty.OutputG b v)
                   (w3 :: ?variant::v)
                   (w4 :: (a, b)) ->
                 case w4 of ww { (,) ww1 ww2 ->
                 Language.Fortran.Pretty.$w$coutputG1
                   @ v
                   @ a
                   @ b
                   w1
                   w2
                   w3
                   ww1
                   ww2 }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputGCharv ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputG GHC.Types.Char v
  DFunId
  {- Arity: 3, Strictness: <L,A><L,A><S(S),1*U(1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                (\ @ v
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dIP :: ?variant::v) ->
                 GHC.Show.$fShowChar_$cshow)
                  `cast`
                (forall (v :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputG[0]
                               <GHC.Types.Char>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputG[]v ::
    (Language.Fortran.Pretty.Alts v,
     Language.Fortran.Pretty.OutputG a v) =>
    Language.Fortran.Pretty.OutputG [a] v
  DFunId
  {- Arity: 4, Strictness: <L,A><L,C(C1(U))><L,U><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Language.Fortran.Pretty.$fOutputF[]v_$coutputG
                  `cast`
                (forall (v :: <*>_N) (a :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R <Language.Fortran.Pretty.OutputG a v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputG[0] <[a]>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputG[]v0 ::
    Language.Fortran.Pretty.Alts v =>
    Language.Fortran.Pretty.OutputG GHC.Base.String v
  DFunId
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                (\ @ v
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dIP :: ?variant::v) ->
                 GHC.Base.id @ GHC.Base.String)
                  `cast`
                (forall (v :: <*>_N).
                 <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputG[0]
                               <GHC.Base.String>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputGtAlt1 ::
    Language.Fortran.Pretty.OutputF t Language.Fortran.Pretty.Alt1 =>
    Language.Fortran.Pretty.OutputG t Language.Fortran.Pretty.Alt1
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                (\ @ t
                   ($dOutputF :: Language.Fortran.Pretty.OutputF
                                   t Language.Fortran.Pretty.Alt1) ->
                 $dOutputF)
                  `cast`
                (forall (t :: <*>_N).
                 <Language.Fortran.Pretty.OutputF t Language.Fortran.Pretty.Alt1>_R
                 ->_R Language.Fortran.Pretty.N:OutputF[0]
                          <t>_N
                          <Language.Fortran.Pretty.Alt1>_N ; Sym (Language.Fortran.Pretty.N:OutputG[0]
                                                                      <t>_N
                                                                      <Language.Fortran.Pretty.Alt1>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputIndFFortranv ::
    (Language.Fortran.Pretty.Indentor (Language.Fortran.Fortran p),
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputIndG (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.DataForm p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Spec p) v,
     Language.Fortran.Pretty.Alts v) =>
    Language.Fortran.Pretty.OutputIndF (Language.Fortran.Fortran p) v
  DFunId
  {- Arity: 14,
     Strictness: <L,C(C1(U))><L,1*C1(C1(U))><L,C(C(U))><L,A><L,A><L,1*C1(C1(U))><L,C(C1(C1(U)))><L,1*C1(C1(U))><L,C(C1(U))><L,1*C1(C(U))><L,A><L,U><L,U(U)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (11, False, True)
                Language.Fortran.Pretty.$fOutputIndFFortranv_$coutputIndF
                  `cast`
                (forall (p :: <*>_N) (v :: <*>_N).
                 <Language.Fortran.Pretty.Indentor (Language.Fortran.Fortran p)>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.VarName p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Expr p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.UnaryOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.BinOp p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.ArgList p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputIndG
                         (Language.Fortran.Fortran p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.DataForm p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Fortran p) v>_R
                 ->_R <Language.Fortran.Pretty.OutputG
                         (Language.Fortran.Spec p) v>_R
                 ->_R <Language.Fortran.Pretty.Alts v>_R
                 ->_R Sym (Language.Fortran.Pretty.N:OutputIndF[0]
                               <Language.Fortran.Fortran p>_N <v>_N)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputIndFFortranv_$coutputIndF ::
    (Language.Fortran.Pretty.Indentor (Language.Fortran.Fortran p),
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputIndG (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.DataForm p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Spec p) v,
     Language.Fortran.Pretty.Alts v, ?variant::v) =>
    GHC.Types.Int -> Language.Fortran.Fortran p -> GHC.Base.String
  {- Arity: 14,
     Strictness: <L,C(C1(U))><L,1*C1(C1(U))><L,C(C(U))><L,A><L,A><L,1*C1(C1(U))><L,C(C1(C1(U)))><L,1*C1(C1(U))><L,C(C1(U))><L,1*C1(C(U))><L,A><L,U><L,U(U)><S,1*U> -}
9826a3080c69a32c48f8cfe8206ec9cb
  $fOutputIndGtAlt1 ::
    Language.Fortran.Pretty.OutputIndF
      t Language.Fortran.Pretty.Alt1 =>
    Language.Fortran.Pretty.OutputIndG t Language.Fortran.Pretty.Alt1
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                (\ @ t
                   ($dOutputIndF :: Language.Fortran.Pretty.OutputIndF
                                      t Language.Fortran.Pretty.Alt1) ->
                 $dOutputIndF)
                  `cast`
                (forall (t :: <*>_N).
                 <Language.Fortran.Pretty.OutputIndF
                    t Language.Fortran.Pretty.Alt1>_R
                 ->_R Language.Fortran.Pretty.N:OutputIndF[0]
                          <t>_N
                          <Language.Fortran.Pretty.Alt1>_N ; Sym (Language.Fortran.Pretty.N:OutputIndG[0]
                                                                      <t>_N
                                                                      <Language.Fortran.Pretty.Alt1>_N)) -}
a03106e515605470a106982e7bca23a7
  $tc'Alt1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18378677557007089157##
                   2950782287922056243##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tc'Alt5
                   0#
                   Language.Fortran.Pretty.$tc'Alt4) -}
71f031b1baa0d48d83ac4f2096bd5fbc
  $tc'Alt10 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
311c1126c9f5370ff95326539b9a5dd9
  $tc'Alt11 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Fortran.Pretty.$tc'Alt12) -}
b34a14e9445666383909876dc3093855
  $tc'Alt12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Alt3"#) -}
5132ef3e4aed3fd1f2600b606312c7d0
  $tc'Alt2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4684791017783166127##
                   6058333384913216799##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tc'Alt8
                   0#
                   Language.Fortran.Pretty.$tc'Alt7) -}
b9d49d01736b916765798b6b5c3d589a
  $tc'Alt3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8360234460938598665##
                   766652265366664711##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tc'Alt11
                   0#
                   Language.Fortran.Pretty.$tc'Alt10) -}
7e4dfa3cdd1e78bb399be6b121fc1403
  $tc'Alt4 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e0da2c21ef343e4582dd140f3510bc0f
  $tc'Alt5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Fortran.Pretty.$tc'Alt6) -}
23d575c71b41b9d91eca55bba5ee89a4
  $tc'Alt6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Alt1"#) -}
39a05349f0d297dd4390aba9ca8f8f90
  $tc'Alt7 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
41a465aaaac008e83af6112dec95f0fc
  $tc'Alt8 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Fortran.Pretty.$tc'Alt9) -}
80809717ba319311839fabfd4ce91156
  $tc'Alt9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Alt2"#) -}
1e76f8a3e9b26ff497db41087c5a1631
  $tc'C:Alts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16443071765017225254##
                   13202314901539879573##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tc'C:Alts2
                   1#
                   Language.Fortran.Pretty.$tc'C:Alts1) -}
64fd2a4f51d4707f5d58540e7e76681c
  $tc'C:Alts1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
f59b51fb76a0dff8df789cbb683f9a83
  $tc'C:Alts2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tc'C:Alts3) -}
d8c1d5c469eb078d429eef6e486afb9f
  $tc'C:Alts3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Alts"#) -}
0cd5163cdef7320626d412d6a5d1f33d
  $tc'C:Indentor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15725614577722775434##
                   15580460206215876982##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tc'C:Indentor2
                   1#
                   Language.Fortran.Pretty.$tc'C:Indentor1) -}
d6ee7687ffac0c0b4e8ab625efbbefb8
  $tc'C:Indentor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
696e4389063fae7d9adb2c024a0fa870
  $tc'C:Indentor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tc'C:Indentor3) -}
10327bda65dd00dc120873d373901489
  $tc'C:Indentor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Indentor"#) -}
bd2d71b16184682f4d754febc1cd0c63
  $tc'C:OutputF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12738321167833622541##
                   4822669216505176657##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tc'C:OutputF2
                   2#
                   Language.Fortran.Pretty.$tc'C:OutputF1) -}
c5227e5eb9c8c5cf1b05fd505647dcd8
  $tc'C:OutputF1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
63400c7c8535735a6da1f7b910cc456d
  $tc'C:OutputF2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tc'C:OutputF3) -}
8f7548f097e25d0df45f64a288df1492
  $tc'C:OutputF3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:OutputF"#) -}
1892a010ae890e493036b126ffa9d0e7
  $tc'C:OutputG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2346301906392942936##
                   3271216918247675379##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tc'C:OutputG2
                   2#
                   Language.Fortran.Pretty.$tc'C:OutputG1) -}
fd2a857e18fd3f34562997cf15f5fdc3
  $tc'C:OutputG1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7e2ddbc3dc0f7ae169187fe06f0dd6ad
  $tc'C:OutputG2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tc'C:OutputG3) -}
98a1c3c65804b6b05f029281bd85aa8c
  $tc'C:OutputG3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:OutputG"#) -}
787c1823ce4aa972eeacccac20c2d2a2
  $tc'C:OutputIndF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4029705592268619340##
                   5967357600085656851##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tc'C:OutputIndF2
                   2#
                   Language.Fortran.Pretty.$tc'C:OutputIndF1) -}
ecad658017dd0ad2cbaa059bc81f3feb
  $tc'C:OutputIndF1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
73084ba28b43913349c8cec171312236
  $tc'C:OutputIndF2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tc'C:OutputIndF3) -}
9104d20075705b3465f61f27f38fcd02
  $tc'C:OutputIndF3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:OutputIndF"#) -}
fecae254d35647226ceab14d1611fbb7
  $tc'C:OutputIndG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7544809145478852419##
                   6391258029308389919##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tc'C:OutputIndG2
                   2#
                   Language.Fortran.Pretty.$tc'C:OutputIndG1) -}
a8e27581494d0d3239939ebfb261a3be
  $tc'C:OutputIndG1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9e94c28435d926dcaa1a7fe69b77c2dd
  $tc'C:OutputIndG2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tc'C:OutputIndG3) -}
c84e8ba3d4d022fd418770d4a0790714
  $tc'C:OutputIndG3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:OutputIndG"#) -}
bf73089fc5badc9358041d0b2b4e6941
  $tcAlt1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3303605285160833031##
                   10831218976385682477##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tcAlt4
                   0#
                   GHC.Types.krep$*) -}
0a3c817a916252ed729ff83f154f1ed7
  $tcAlt2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1141830733708329796##
                   10045777965297904292##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tcAlt6
                   0#
                   GHC.Types.krep$*) -}
2a14a92468b5b68eaa2414e39f19d8f8
  $tcAlt3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4003452705276451544##
                   7614482271642920421##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tcAlt8
                   0#
                   GHC.Types.krep$*) -}
dff74193384ccd4e02593b173dfd952d
  $tcAlt4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Fortran.Pretty.$tcAlt5) -}
22d0086988d032bb5677870a9f6a85e7
  $tcAlt5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Alt1"#) -}
6dbb3d12350584e3efb5b072698d7f1c
  $tcAlt6 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Fortran.Pretty.$tcAlt7) -}
1edaf6dad5dc787d129d129a434cbb5a
  $tcAlt7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Alt2"#) -}
67ac77df47a50f0007b6ccaf254de6d8
  $tcAlt8 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Fortran.Pretty.$tcAlt9) -}
804cd100282c66b3102156e84df1ede2
  $tcAlt9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Alt3"#) -}
1c88b5ddc0ebd7ce36438747ce499e94
  $tcAlts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7095396513820925089##
                   10900106379497398469##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tcAlts2
                   0#
                   Language.Fortran.Pretty.$tcAlts1) -}
ccf7bbf2c18c6d67d48083127f886f45
  $tcAlts1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a863cd5a93ab0ef766dcbf442deca33f
  $tcAlts2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Language.Fortran.Pretty.$tcAlts3) -}
0461dc27e0a69fdfbc59ae27a380fbfa
  $tcAlts3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Alts"#) -}
9a8ccc46238a4b610e521fb30b51a6a5
  $tcIndentor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10033899787573393516##
                   11155256481341420388##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tcIndentor1
                   0#
                   Language.Fortran.Pretty.$tcAlts1) -}
13a8165c4808926cc42a053590c5ba80
  $tcIndentor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tcIndentor2) -}
67c5ae61f56e3cf29949ea71515f4c0c
  $tcIndentor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Indentor"#) -}
778af986ffa25d56c58306537a8d73f5
  $tcOutputF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3129111507661696682##
                   5616134253314166621##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tcOutputF2
                   0#
                   Language.Fortran.Pretty.$tcOutputF1) -}
56f32a22ec891da800520a0f177ba3ca
  $tcOutputF1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c36f9f9adcdba5afe6a4fa826bc4d66f
  $tcOutputF2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tcOutputF3) -}
7f102fc2ab38479423a5dcfd7338344a
  $tcOutputF3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OutputF"#) -}
80f04655ef3a2af06e28650d1d350c4e
  $tcOutputG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8246246761541277725##
                   2600572646769243638##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tcOutputG1
                   0#
                   Language.Fortran.Pretty.$tcOutputF1) -}
b64774557a2bdafd8e80cfaa7cefd359
  $tcOutputG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tcOutputG2) -}
85955900d88d98ed8d73c1cb32655c0b
  $tcOutputG2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OutputG"#) -}
48cfbb944c44d82faaf44811b95f0434
  $tcOutputIndF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4535750068269050832##
                   10560843528856801292##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tcOutputIndF1
                   0#
                   Language.Fortran.Pretty.$tcOutputF1) -}
aff17a316d3aabd1d36e8e63f3babfc7
  $tcOutputIndF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tcOutputIndF2) -}
31199212def88bca37f9cd36f065ed4e
  $tcOutputIndF2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OutputIndF"#) -}
3a7eec46e4e5cc6c006f82c648693da1
  $tcOutputIndG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12862562411312987335##
                   5063744602307285556##
                   Language.Fortran.Pretty.$trModule
                   Language.Fortran.Pretty.$tcOutputIndG1
                   0#
                   Language.Fortran.Pretty.$tcOutputF1) -}
6a9c48760c149084cecc48402185d24b
  $tcOutputIndG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$tcOutputIndG2) -}
225efdfe6f8a4b0c01ff541b0a34af2e
  $tcOutputIndG2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OutputIndG"#) -}
97c3faeba40f6677deb74a96ca789bd1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.Fortran.Pretty.$trModule3
                   Language.Fortran.Pretty.$trModule1) -}
ebabd4b6593e41bf6cf7ddb2ccb8041f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$trModule2) -}
91131e0e6cb26649b1b779e058963a92
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.Fortran.Pretty"#) -}
b5bd979f4ebea09669f8767446d8188c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.Fortran.Pretty.$trModule4) -}
7192264713b33269819030fb8b020eb6
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("language-fortran-0.3-DnTmLOXLSgMntUzwJ6Kf9"#) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     ?variant::v) =>
    Language.Fortran.Expr p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w1 :: ?variant::v)
                   (ww :: Language.Fortran.Expr p) ->
                 GHC.CString.unpackAppendCString#
                   Language.Fortran.Pretty.$fOutputFArgListv3
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (w `cast`
                       (Language.Fortran.Pretty.N:OutputG[0]
                            <Language.Fortran.Expr p>_N <v>_N)
                         w1
                         ww)
                      Language.Fortran.Pretty.$fOutputFArgListv1)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF1 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgName p) v,
     ?variant::v) =>
    Language.Fortran.ArgName p -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.ArgName p) v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.ArgName p) ->
                 case w2 of wild {
                   Language.Fortran.ArgName ds a -> a
                   Language.Fortran.ASeq ds ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case ds2 of wild2 {
                             DEFAULT
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (w `cast`
                                   (Language.Fortran.Pretty.N:OutputG[0]
                                        <Language.Fortran.ArgName p>_N <v>_N)
                                     w1
                                     wild1)
                                  (GHC.CString.unpackAppendCString#
                                     Language.Fortran.Pretty.$fOutputFArgNamev1
                                     (w `cast`
                                      (Language.Fortran.Pretty.N:OutputG[0]
                                           <Language.Fortran.ArgName p>_N <v>_N)
                                        w1
                                        wild2))
                             Language.Fortran.NullArg ds3
                             -> w `cast`
                                (Language.Fortran.Pretty.N:OutputG[0]
                                     <Language.Fortran.ArgName p>_N <v>_N)
                                  w1
                                  wild1 }
                        Language.Fortran.NullArg ds3
                        -> case ds2 of wild2 {
                             DEFAULT
                             -> w `cast`
                                (Language.Fortran.Pretty.N:OutputG[0]
                                     <Language.Fortran.ArgName p>_N <v>_N)
                                  w1
                                  wild2
                             Language.Fortran.NullArg ds4 -> GHC.Types.[] @ GHC.Types.Char } }
                   Language.Fortran.NullArg ds -> GHC.Types.[] @ GHC.Types.Char }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF10 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     ?variant::v) =>
    Language.Fortran.GSpec p -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w2 :: ?variant::v)
                   (w3 :: Language.Fortran.GSpec p) ->
                 case w3 of wild {
                   Language.Fortran.GName ds s
                   -> w1
                        `cast`
                      (Language.Fortran.Pretty.N:OutputG[0]
                           <Language.Fortran.Expr p>_N <v>_N)
                        w2
                        s
                   Language.Fortran.GOper ds op
                   -> GHC.CString.unpackAppendCString#
                        Language.Fortran.Pretty.$fOutputFGSpecv3
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (w `cast`
                            (Language.Fortran.Pretty.N:OutputG[0]
                                 <Language.Fortran.BinOp p>_N <v>_N)
                              w2
                              op)
                           Language.Fortran.Pretty.$fOutputFArgListv1)
                   Language.Fortran.GAssg ds
                   -> Language.Fortran.Pretty.$fOutputFGSpecv1 }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF11 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Arg p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Implicit p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     ?variant::v) =>
    Language.Fortran.InterfaceSpec p -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,C(C(U))><L,U><S,1*U>,
     Inline: [0] -}
3bfea971998ffd17411f33abf5e5587e
  $w$coutputF12 ::
    Language.Fortran.MeasureUnitSpec p -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ v @ p (w :: Language.Fortran.MeasureUnitSpec p) ->
                 case w of wild {
                   Language.Fortran.UnitProduct ds units
                   -> case units of wild1 {
                        [] -> Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv7
                        : ds1 ds2
                        -> Language.Fortran.Pretty.printList
                             @ GHC.Types.Char
                             @ ([GHC.Types.Char], Language.Fortran.Fraction p)
                             Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv3
                             (Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv2 @ v @ p)
                             wild1 }
                   Language.Fortran.UnitQuotient ds units1 units2
                   -> let {
                        n1 :: [GHC.Types.Char]
                        = GHC.CString.unpackAppendCString#
                            Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv1
                            (case units2 of wild1 {
                               [] -> Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv7
                               : ds1 ds2
                               -> Language.Fortran.Pretty.printList
                                    @ GHC.Types.Char
                                    @ ([GHC.Types.Char], Language.Fortran.Fraction p)
                                    Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv3
                                    (Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv2 @ v @ p)
                                    wild1 })
                      } in
                      case units1 of wild1 {
                        []
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv7
                             n1
                        : ds1 ds2
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (Language.Fortran.Pretty.printList
                                @ GHC.Types.Char
                                @ ([GHC.Types.Char], Language.Fortran.Fraction p)
                                Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv3
                                (Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv2 @ v @ p)
                                wild1)
                             n1 }
                   Language.Fortran.UnitNone ds -> GHC.Types.[] @ GHC.Types.Char }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF13 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     ?variant::v) =>
    Language.Fortran.Spec p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>, Inline: [0] -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF14 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BaseType p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.MeasureUnitSpec p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     ?variant::v) =>
    Language.Fortran.Type p -> GHC.Base.String
  {- Arity: 9,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><C(C(S)),1*C1(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,U><S,1*U>,
     Inline: [0] -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF2 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgName p) v,
     ?variant::v) =>
    Language.Fortran.ArgName p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.ArgName p) v)
                   (w1 :: ?variant::v)
                   (ww :: Language.Fortran.ArgName p) ->
                 GHC.CString.unpackAppendCString#
                   Language.Fortran.Pretty.$fOutputFArgListv3
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (w `cast`
                       (Language.Fortran.Pretty.N:OutputG[0]
                            <Language.Fortran.ArgName p>_N <v>_N)
                         w1
                         ww)
                      Language.Fortran.Pretty.$fOutputFArgListv1)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF3 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG
       (Language.Fortran.MeasureUnitSpec p) v,
     ?variant::v) =>
    Language.Fortran.Attr p -> GHC.Base.String
  {- Arity: 8,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,1*C1(C1(U))><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.ArgList p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.BinOp p) v)
                   (w2 :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w3 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.UnaryOp p) v)
                   (w4 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.VarName p) v)
                   (w5 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.MeasureUnitSpec p) v)
                   (w6 :: ?variant::v)
                   (w7 :: Language.Fortran.Attr p) ->
                 case w7 of wild {
                   Language.Fortran.Parameter ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv37
                   Language.Fortran.Allocatable ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv35
                   Language.Fortran.External ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv33
                   Language.Fortran.Intent ds ds1
                   -> case ds1 of wild1 {
                        Language.Fortran.In ds2 -> Language.Fortran.Pretty.$fOutputFAttrv31
                        Language.Fortran.Out ds2
                        -> Language.Fortran.Pretty.$fOutputFAttrv29
                        Language.Fortran.InOut ds2
                        -> Language.Fortran.Pretty.$fOutputFAttrv27 }
                   Language.Fortran.Intrinsic ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv25
                   Language.Fortran.Optional ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv23
                   Language.Fortran.Pointer ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv21
                   Language.Fortran.Save ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv19
                   Language.Fortran.Target ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv17
                   Language.Fortran.Volatile ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv15
                   Language.Fortran.Public ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv13
                   Language.Fortran.Private ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv11
                   Language.Fortran.Sequence ds
                   -> Language.Fortran.Pretty.$fOutputFAttrv9
                   Language.Fortran.Dimension ds r
                   -> GHC.CString.unpackAppendCString#
                        Language.Fortran.Pretty.$fOutputFAttrv8
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (Language.Fortran.Pretty.printList
                              @ GHC.Types.Char
                              @ (Language.Fortran.Expr p, Language.Fortran.Expr p)
                              Language.Fortran.Pretty.$fOutputFAttrv4
                              (\ (ds1 :: (Language.Fortran.Expr p, Language.Fortran.Expr p)) ->
                               case ds1 of wild1 { (,) ds2 ds3 ->
                               case ds2 of wild2 {
                                 DEFAULT
                                 -> GHC.Base.++
                                      @ GHC.Types.Char
                                      (Language.Fortran.Pretty.$w$coutputF4
                                         @ p
                                         @ v
                                         w
                                         w1
                                         w2
                                         w3
                                         w4
                                         w6
                                         wild2)
                                      (GHC.CString.unpackAppendCString#
                                         Language.Fortran.Pretty.$fOutputFAttrv3
                                         (Language.Fortran.Pretty.$w$coutputF4
                                            @ p
                                            @ v
                                            w
                                            w1
                                            w2
                                            w3
                                            w4
                                            w6
                                            ds3))
                                 Language.Fortran.NullExpr ds4 ds5
                                 -> case ds3 of wild3 {
                                      DEFAULT
                                      -> Language.Fortran.Pretty.$w$coutputF4
                                           @ p
                                           @ v
                                           w
                                           w1
                                           w2
                                           w3
                                           w4
                                           w6
                                           wild3
                                      Language.Fortran.NullExpr ds6 ds7
                                      -> Language.Fortran.Pretty.$fOutputFAttrv2 } } })
                              r)
                           Language.Fortran.Pretty.$fOutputFArgListv1)
                   Language.Fortran.MeasureUnit ds u
                   -> GHC.CString.unpackAppendCString#
                        Language.Fortran.Pretty.$fOutputFAttrv1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (w5
                              `cast`
                            (Language.Fortran.Pretty.N:OutputG[0]
                                 <Language.Fortran.MeasureUnitSpec p>_N <v>_N)
                              w6
                              u)
                           Language.Fortran.Pretty.$fOutputFArgListv1) }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF4 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     ?variant::v) =>
    Language.Fortran.Expr p -> GHC.Base.String
  {- Arity: 7,
     Strictness: <L,C(C1(U))><L,C(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,U><S,1*U>,
     Inline: [0] -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF5 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.SubName p) v,
     ?variant::v) =>
    Language.Fortran.BaseType p -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.SubName p) v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.BaseType p) ->
                 case w2 of wild {
                   DEFAULT -> Language.Fortran.Pretty.$fOutputFBaseTypev11
                   Language.Fortran.Integer ds
                   -> Language.Fortran.Pretty.$fOutputFBaseTypev9
                   Language.Fortran.Real ds
                   -> Language.Fortran.Pretty.$fOutputFBaseTypev7
                   Language.Fortran.Character ds
                   -> Language.Fortran.Pretty.$fOutputFBaseTypev5
                   Language.Fortran.SomeType ds
                   -> Language.Fortran.Pretty.$fOutputFBaseTypev4
                   Language.Fortran.DerivedType ds s
                   -> GHC.CString.unpackAppendCString#
                        Language.Fortran.Pretty.$fOutputFBaseTypev3
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (w `cast`
                            (Language.Fortran.Pretty.N:OutputG[0]
                                 <Language.Fortran.SubName p>_N <v>_N)
                              w1
                              s)
                           Language.Fortran.Pretty.$fOutputFArgListv1)
                   Language.Fortran.Logical ds
                   -> Language.Fortran.Pretty.$fOutputFBaseTypev1 }) -}
559cffa21fcd40866f4395c895ba220b
  $w$coutputF6 :: Language.Fortran.BinOp p -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ v @ p (w :: Language.Fortran.BinOp p) ->
                 case w of wild {
                   Language.Fortran.Plus ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv27
                   Language.Fortran.Minus ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv25
                   Language.Fortran.Mul ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv23
                   Language.Fortran.Div ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv21
                   Language.Fortran.Or ds -> Language.Fortran.Pretty.$fOutputFBinOpv19
                   Language.Fortran.And ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv17
                   Language.Fortran.Concat ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv15
                   Language.Fortran.Power ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv13
                   Language.Fortran.RelEQ ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv11
                   Language.Fortran.RelNE ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv9
                   Language.Fortran.RelLT ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv7
                   Language.Fortran.RelLE ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv5
                   Language.Fortran.RelGT ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv3
                   Language.Fortran.RelGE ds
                   -> Language.Fortran.Pretty.$fOutputFBinOpv1 }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF7 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Fortran p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Implicit p) v,
     ?variant::v) =>
    Language.Fortran.Uses p
    -> Language.Fortran.Implicit p
    -> Language.Fortran.Decl p
    -> Language.Fortran.Fortran p
    -> GHC.Base.String
  {- Arity: 8,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,1*C1(C1(U))><L,U><S,1*U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG
                           (Language.Fortran.Fortran p) v)
                   (w1 :: Language.Fortran.Pretty.OutputG (Language.Fortran.Decl p) v)
                   (w2 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.Implicit p) v)
                   (w3 :: ?variant::v)
                   (ww :: Language.Fortran.Uses p)
                   (ww1 :: Language.Fortran.Implicit p)
                   (ww2 :: Language.Fortran.Decl p)
                   (ww3 :: Language.Fortran.Fortran p) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Language.Fortran.Pretty.showUse @ p ww)
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (w2
                         `cast`
                       (Language.Fortran.Pretty.N:OutputG[0]
                            <Language.Fortran.Implicit p>_N <v>_N)
                         w3
                         ww1)
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (w1
                            `cast`
                          (Language.Fortran.Pretty.N:OutputG[0]
                               <Language.Fortran.Decl p>_N <v>_N)
                            w3
                            ww2)
                         (w `cast`
                          (Language.Fortran.Pretty.N:OutputG[0]
                               <Language.Fortran.Fortran p>_N <v>_N)
                            w3
                            ww3)))) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputF8 ::
    (Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     ?variant::v) =>
    [(Language.Fortran.Expr p, Language.Fortran.Expr p)]
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ p
                   @ v
                   (w :: Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v)
                   (w1 :: ?variant::v)
                   (ww :: [(Language.Fortran.Expr p, Language.Fortran.Expr p)]) ->
                 GHC.CString.unpackAppendCString#
                   Language.Fortran.Pretty.$fOutputFDataFormv3
                   (case GHC.Base.map
                           @ (Language.Fortran.Expr p, Language.Fortran.Expr p)
                           @ [GHC.Types.Char]
                           (Language.Fortran.Pretty.show_data
                              @ v
                              @ (Language.Fortran.Expr p)
                              @ (Language.Fortran.Expr p)
                              w1
                              w
                              w)
                           ww of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs
                      -> Language.Fortran.Pretty.$fOutputFDataFormv_go
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Language.Fortran.Pretty.$fOutputFDataFormv1
                                 xs)) })) -}
389404afd6de2bc1467eb702a03a5819
  $w$coutputF9 :: Language.Fortran.Fraction p -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ v @ p (w :: Language.Fortran.Fraction p) ->
                 case w of wild {
                   Language.Fortran.IntegerConst ds s
                   -> GHC.CString.unpackAppendCString#
                        Language.Fortran.Pretty.$fOutputFBinOpv14
                        s
                   Language.Fortran.FractionConst ds p1 q
                   -> GHC.CString.unpackAppendCString#
                        Language.Fortran.Pretty.$fOutputFFractionv1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           p1
                           (GHC.CString.unpackAppendCString#
                              Language.Fortran.Pretty.$fOutputFBinOpv22
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 q
                                 Language.Fortran.Pretty.$fOutputFArgListv1)))
                   Language.Fortran.NullFraction ds
                   -> GHC.Types.[] @ GHC.Types.Char }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputG ::
    (Language.Fortran.Pretty.OutputG a v, ?variant::v) =>
    [a] -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   @ a
                   (w :: Language.Fortran.Pretty.OutputG a v)
                   (w1 :: ?variant::v)
                   (w2 :: [a]) ->
                 GHC.CString.unpackAppendCString#
                   Language.Fortran.Pretty.$fOutputF[]v4
                   (letrec {
                      go4 :: [a] -> [GHC.Types.Char] {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [a]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ GHC.Types.Char
                          : x ds1
                          -> case ds1 of wild1 {
                               []
                               -> w `cast` (Language.Fortran.Pretty.N:OutputG[0] <a>_N <v>_N) w1 x
                               : ipv ipv1
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    (w `cast` (Language.Fortran.Pretty.N:OutputG[0] <a>_N <v>_N)
                                       w1
                                       x)
                                    (GHC.CString.unpackAppendCString#
                                       Language.Fortran.Pretty.$fOutputF[]v3
                                       (go4 wild1)) } }
                    } in
                    GHC.Base.++
                      @ GHC.Types.Char
                      (go4 w2)
                      Language.Fortran.Pretty.$fOutputF[]v1)) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $w$coutputG1 ::
    (Language.Fortran.Pretty.OutputG a v,
     Language.Fortran.Pretty.OutputG b v, ?variant::v) =>
    a -> b -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,1*C1(C1(U))><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   @ a
                   @ b
                   (w :: Language.Fortran.Pretty.OutputG a v)
                   (w1 :: Language.Fortran.Pretty.OutputG b v)
                   (w2 :: ?variant::v)
                   (ww :: a)
                   (ww1 :: b) ->
                 GHC.CString.unpackAppendCString#
                   Language.Fortran.Pretty.$fOutputFArgListv3
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (w `cast` (Language.Fortran.Pretty.N:OutputG[0] <a>_N <v>_N) w2 ww)
                      (GHC.CString.unpackAppendCString#
                         Language.Fortran.Pretty.$fOutputF[]v3
                         (GHC.Base.++
                            @ GHC.Types.Char
                            (w1 `cast` (Language.Fortran.Pretty.N:OutputG[0] <b>_N <v>_N)
                               w2
                               ww1)
                            Language.Fortran.Pretty.$fOutputFArgListv1)))) -}
f0a6c89a5c92014016525df89bf608ca
  $wind :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.*# 3# ww
                 } in
                 case GHC.Prim.<# 0# y of lwild {
                   DEFAULT -> GHC.Types.[] @ GHC.Types.Char
                   1# -> Language.Fortran.Pretty.$wxs1 y }) -}
90a19d57f8240c84bc023684e9754de4
  $windent :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.*# ww ww1
                 } in
                 case GHC.Prim.<# 0# y of lwild {
                   DEFAULT -> GHC.Types.[] @ GHC.Types.Char
                   1# -> Language.Fortran.Pretty.$wxs2 y }) -}
1500aa3e113cffcba070621f67e14f76
  $wopPrec :: Language.Fortran.BinOp p -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ p (w :: Language.Fortran.BinOp p) ->
                 case w of wild {
                   DEFAULT -> 4#
                   Language.Fortran.Mul ds -> 5#
                   Language.Fortran.Div ds -> 5#
                   Language.Fortran.Or ds -> 0#
                   Language.Fortran.And ds -> 1#
                   Language.Fortran.Concat ds -> 3#
                   Language.Fortran.Power ds -> 6#
                   Language.Fortran.RelEQ ds -> 2#
                   Language.Fortran.RelNE ds -> 2#
                   Language.Fortran.RelLT ds -> 2#
                   Language.Fortran.RelLE ds -> 2#
                   Language.Fortran.RelGT ds -> 2#
                   Language.Fortran.RelGE ds -> 2# }) -}
30aece66b5911fa1822f1b623ee60f3e
  $woutputFList ::
    (?variant::v, Language.Fortran.Pretty.OutputF a v) =>
    [a] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*C1(C(U))>,
     Inline: [0],
     Unfolding: (\ @ v
                   @ a
                   (w :: ?variant::v)
                   (w1 :: Language.Fortran.Pretty.OutputF a v) ->
                 let {
                   g :: a -> GHC.Base.String
                   = w1 `cast` (Language.Fortran.Pretty.N:OutputF[0] <a>_N <v>_N) w
                 } in
                 letrec {
                   go4 :: [a] -> [GHC.Types.Char] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Char
                       : y ys
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.CString.unpackAppendCString#
                               Language.Fortran.Pretty.$fOutputF[]v3
                               (g y))
                            (go4 ys) }
                 } in
                 \ (x :: [a]) -> go4 x) -}
6e2696c36a54754dcadd57c6b8c48eeb
  $wshowBounds ::
    (?variant::v,
     Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v) =>
    Language.Fortran.Expr p
    -> Language.Fortran.Expr p -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,C(C1(U))><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   @ p
                   (w :: ?variant::v)
                   (w1 :: Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v)
                   (ww :: Language.Fortran.Expr p)
                   (ww1 :: Language.Fortran.Expr p) ->
                 case ww of wild {
                   DEFAULT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (w1
                           `cast`
                         (Language.Fortran.Pretty.N:OutputF[0]
                              <Language.Fortran.Expr p>_N <v>_N)
                           w
                           wild)
                        (GHC.CString.unpackAppendCString#
                           Language.Fortran.Pretty.$fOutputFAttrv3
                           (w1
                              `cast`
                            (Language.Fortran.Pretty.N:OutputF[0]
                                 <Language.Fortran.Expr p>_N <v>_N)
                              w
                              ww1))
                   Language.Fortran.NullExpr ds ds1
                   -> case ww1 of wild1 {
                        DEFAULT
                        -> w1
                             `cast`
                           (Language.Fortran.Pretty.N:OutputF[0]
                                <Language.Fortran.Expr p>_N <v>_N)
                             w
                             wild1
                        Language.Fortran.NullExpr ds2 ds3
                        -> Language.Fortran.Pretty.$fOutputFAttrv2 } }) -}
99877e4d442ac0f4f6901eefce192cf5
  $wshowDU ::
    (?variant::v, Language.Fortran.Pretty.OutputF t1 v,
     Language.Fortran.Pretty.OutputF t2 v) =>
    t2 -> t1 -> [GHC.Types.Char]
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,1*C1(C1(U))><C(C(S)),1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   @ t
                   @ t1
                   (w :: ?variant::v)
                   (w1 :: Language.Fortran.Pretty.OutputF t v)
                   (w2 :: Language.Fortran.Pretty.OutputF t1 v)
                   (ww :: t1)
                   (ww1 :: t) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (w2 `cast` (Language.Fortran.Pretty.N:OutputF[0] <t1>_N <v>_N)
                      w
                      ww)
                   (GHC.CString.unpackAppendCString#
                      Language.Fortran.Pretty.showDU1
                      (w1 `cast` (Language.Fortran.Pretty.N:OutputF[0] <t>_N <v>_N)
                         w
                         ww1))) -}
8ed3662b2bbf03ecd0835e088f888d39
  $wshowElseIf ::
    (?variant::v, Language.Fortran.Pretty.OutputG t1 v,
     Language.Fortran.Pretty.OutputG t2 v) =>
    GHC.Prim.Int# -> t2 -> t1 -> [GHC.Types.Char]
  {- Arity: 6,
     Strictness: <L,U><L,1*C1(C1(U))><L,1*C1(C1(U))><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   @ t
                   @ t1
                   (w :: ?variant::v)
                   (w1 :: Language.Fortran.Pretty.OutputG t v)
                   (w2 :: Language.Fortran.Pretty.OutputG t1 v)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: t1)
                   (ww2 :: t) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.*# 3# ww
                 } in
                 let {
                   karg :: [GHC.Types.Char]
                   = GHC.CString.unpackAppendCString#
                       Language.Fortran.Pretty.showElseIf3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          (w2 `cast` (Language.Fortran.Pretty.N:OutputG[0] <t1>_N <v>_N)
                             w
                             ww1)
                          (GHC.CString.unpackAppendCString#
                             Language.Fortran.Pretty.showElseIf2
                             (let {
                                y1 :: GHC.Prim.Int# = GHC.Prim.*# 3# (GHC.Prim.+# ww 1#)
                              } in
                              let {
                                nil :: [GHC.Types.Char]
                                = GHC.Base.++
                                    @ GHC.Types.Char
                                    (w1 `cast` (Language.Fortran.Pretty.N:OutputG[0] <t>_N <v>_N)
                                       w
                                       ww2)
                                    Language.Fortran.Pretty.$fOutputFDataFormv1
                              } in
                              case GHC.Prim.<# 0# y1 of lwild {
                                DEFAULT -> nil
                                1#
                                -> let {
                                     lvl159 :: [GHC.Types.Char]
                                     = GHC.Types.:
                                         @ GHC.Types.Char
                                         Language.Fortran.Pretty.showElseIf1
                                         nil
                                   } in
                                   letrec {
                                     $wxs6 :: GHC.Prim.Int# -> [GHC.Types.Char]
                                       {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                                     = \ (ww3 :: GHC.Prim.Int#) ->
                                       case ww3 of ds1 {
                                         DEFAULT
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              Language.Fortran.Pretty.showElseIf1
                                              ($wxs6 (GHC.Prim.-# ds1 1#))
                                         1# -> lvl159 }
                                   } in
                                   $wxs6 y1 })))
                 } in
                 case GHC.Prim.<# 0# y of lwild {
                   DEFAULT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.[] @ GHC.Types.Char)
                        karg
                   1#
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (Language.Fortran.Pretty.$wxs3 y)
                        karg }) -}
5307d39da478a11c60b7fbb1ad9f4859
  $wshowPartRefList ::
    (?variant::v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v) =>
    [(Language.Fortran.VarName p, [Language.Fortran.Expr p])]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,C(C1(U))><L,C(C(U))><S,1*U>,
     Inline: [0] -}
29bb606c58116ed1dd281c55325574fe
  $wshowUnits ::
    (?variant::v,
     Language.Fortran.Pretty.OutputF (Language.Fortran.Fraction p) v) =>
    [(Language.Fortran.MeasureUnit, Language.Fortran.Fraction p)]
    -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <L,U><L,C(C1(U))><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   @ p
                   (w :: ?variant::v)
                   (w1 :: Language.Fortran.Pretty.OutputF
                            (Language.Fortran.Fraction p) v)
                   (w2 :: [(Language.Fortran.MeasureUnit,
                            Language.Fortran.Fraction p)]) ->
                 case w2 of wild {
                   [] -> Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv7
                   : ds1 ds2
                   -> Language.Fortran.Pretty.printList
                        @ GHC.Types.Char
                        @ ([GHC.Types.Char], Language.Fortran.Fraction p)
                        Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv3
                        (\ (ds :: ([GHC.Types.Char], Language.Fortran.Fraction p)) ->
                         case ds of wild1 { (,) unit f1 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           unit
                           (w1
                              `cast`
                            (Language.Fortran.Pretty.N:OutputF[0]
                                 <Language.Fortran.Fraction p>_N <v>_N)
                              w
                              f1) })
                        wild }) -}
9826a3080c69a32c48f8cfe8206ec9cb
  $wshow_data ::
    (?variant::v, Language.Fortran.Pretty.OutputG t1 v,
     Language.Fortran.Pretty.OutputG t2 v) =>
    t2 -> t1 -> [GHC.Types.Char]
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><L,1*C1(C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   @ t
                   @ t1
                   (w :: ?variant::v)
                   (w1 :: Language.Fortran.Pretty.OutputG t v)
                   (w2 :: Language.Fortran.Pretty.OutputG t1 v)
                   (ww :: t1)
                   (ww1 :: t) ->
                 GHC.CString.unpackAppendCString#
                   Language.Fortran.Pretty.$fOutputFBinOpv22
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (w2 `cast` (Language.Fortran.Pretty.N:OutputG[0] <t1>_N <v>_N)
                         w
                         ww)
                      (GHC.CString.unpackAppendCString#
                         Language.Fortran.Pretty.$fOutputFBinOpv22
                         (w1 `cast` (Language.Fortran.Pretty.N:OutputG[0] <t>_N <v>_N)
                            w
                            ww1)))) -}
c978b612d881138e8fa5cfa89e4e946c
  $wxs :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [0] -}
1981ff07fc00c910bf3a7d959572d79d
  $wxs1 :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [0] -}
5f1620fbab7eb28898936151cd52ce75
  $wxs2 :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [0] -}
4ded7bfb4036eda01a91169eaaba7231
  $wxs3 :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [0] -}
6cacfb21263348a9c1c0c31f3d39841f
  data Alt1 = Alt1
16473f5237bdcc178ad152d9adea6f3a
  data Alt2 = Alt2
db61ccebaf0effe0ff56e35c14290405
  data Alt3 = Alt3
1f5646f1c35c05dec7814a1764fe42b3
  class Alts a
1990e4559df67b2c10c9ae012420016c
  class Indentor t where
    indR :: t -> GHC.Types.Int -> GHC.Base.String
    {-# MINIMAL indR #-}
9826a3080c69a32c48f8cfe8206ec9cb
  class OutputF t v where
    outputF :: (?variant::v) => t -> GHC.Base.String
    {-# MINIMAL outputF #-}
9826a3080c69a32c48f8cfe8206ec9cb
  class OutputG t v where
    outputG :: (?variant::v) => t -> GHC.Base.String
    {-# MINIMAL outputG #-}
9826a3080c69a32c48f8cfe8206ec9cb
  class OutputIndF t v where
    outputIndF :: (?variant::v) =>
                  GHC.Types.Int -> t -> GHC.Base.String
    {-# MINIMAL outputIndF #-}
9826a3080c69a32c48f8cfe8206ec9cb
  class OutputIndG t v where
    outputIndG :: (?variant::v) =>
                  GHC.Types.Int -> t -> GHC.Base.String
    {-# MINIMAL outputIndG #-}
07eb32ad8110abfd55ad895730a5c3c1
  asCases ::
    GHC.Types.Int -> (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ @ a (l :: GHC.Types.Int) ->
                 let {
                   ind1 :: [GHC.Types.Char]
                   = case l of wild1 { GHC.Types.I# y ->
                     let {
                       y1 :: GHC.Prim.Int# = GHC.Prim.*# 4# y
                     } in
                     case GHC.Prim.<# 0# y1 of lwild {
                       DEFAULT -> GHC.Types.[] @ GHC.Types.Char
                       1# -> Language.Fortran.Pretty.$wxs y1 } }
                 } in
                 Language.Fortran.Pretty.printList
                   @ GHC.Types.Char
                   @ a
                   (GHC.Types.:
                      @ [GHC.Types.Char]
                      (GHC.CString.unpackAppendCString#
                         Language.Fortran.Pretty.$fOutputFDataFormv2
                         (GHC.Base.++
                            @ GHC.Types.Char
                            ind1
                            Language.Fortran.Pretty.asCases3))
                      (GHC.Types.:
                         @ [GHC.Types.Char]
                         (GHC.CString.unpackAppendCString#
                            Language.Fortran.Pretty.$fOutputFDataFormv2
                            (GHC.Base.++
                               @ GHC.Types.Char
                               ind1
                               Language.Fortran.Pretty.asCases1))
                         Language.Fortran.Pretty.$fOutputFAttrv6))) -}
f96e44953a9dd362e9ae2dd9b70720a2
  asCases1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.asCases2) -}
36dcd194c259390f5470c101b29ec965
  asCases2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" | "#) -}
0e206b63b67d7dd3d94fe5bd0d5465f0
  asCases3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.asCases4) -}
4c0c7ef05e832f7c4878f327db5bffe6
  asCases4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("   "#) -}
bf37a58daad57022760ec3301234149f
  asDefs ::
    [GHC.Types.Char]
    -> (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ @ a (n1 :: [GHC.Types.Char]) ->
                 Language.Fortran.Pretty.printList
                   @ GHC.Types.Char
                   @ a
                   (GHC.Types.:
                      @ [GHC.Types.Char]
                      (GHC.CString.unpackAppendCString#
                         Language.Fortran.Pretty.$fOutputFDataFormv2
                         n1)
                      (GHC.Types.:
                         @ [GHC.Types.Char]
                         (GHC.CString.unpackAppendCString#
                            Language.Fortran.Pretty.$fOutputFDataFormv2
                            n1)
                         Language.Fortran.Pretty.asDefs1))) -}
3d2916c24f98e33a401bee347912e1fc
  asDefs1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFDataFormv1
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
db0d22d2d657079d25896a75d5541784
  asLisp :: (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ @ a ->
                 Language.Fortran.Pretty.printList
                   @ GHC.Types.Char
                   @ a
                   Language.Fortran.Pretty.asLisp1) -}
af34ce7c9e9212810f1b5f8a2d38d609
  asLisp1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.asLisp4
                   Language.Fortran.Pretty.asLisp2) -}
bf9e686a82a598cda9b4d197db1fb7a7
  asLisp2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv5
                   Language.Fortran.Pretty.asLisp3) -}
4c053c93500e68ff2e55cc38a91e6d94
  asLisp3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFArgListv1
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
a27e5af624160eee069565ee5b9a8682
  asLisp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputFArgListv3) -}
29d5ba191a1cd5684de48892f87c86f4
  asList :: (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ @ a ->
                 Language.Fortran.Pretty.printList
                   @ GHC.Types.Char
                   @ a
                   Language.Fortran.Pretty.asList1) -}
ad4295ef6daf09a0c27f5a3d349b5634
  asList1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.asList4
                   Language.Fortran.Pretty.asList2) -}
438abfc9129474525b008c150bb1b6c8
  asList2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFAttrv7
                   Language.Fortran.Pretty.asList3) -}
1bbaf306fc3a6afb76821273037d2c60
  asList3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputF[]v1
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
a9bf5bfd62edeccea67c298014cebc9f
  asList4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputF[]v4) -}
0e7f4e264e534f4e3bb9f27a2c7ef15b
  asParagraphs :: (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ @ a ->
                 Language.Fortran.Pretty.printList
                   @ GHC.Types.Char
                   @ a
                   Language.Fortran.Pretty.asParagraphs1) -}
02424106a0a1354a00c27d6c71a34076
  asParagraphs1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFDataFormv1
                   Language.Fortran.Pretty.asParagraphs2) -}
9ddbe5bef9d9b9f6fabb0677ffe9b518
  asParagraphs2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.asParagraphs3
                   Language.Fortran.Pretty.asDefs1) -}
53f279d8c849c3754c0c95a543e2e9b1
  asParagraphs3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.asParagraphs4) -}
66f87abe522953e1b59e287f89922652
  asParagraphs4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\n"#) -}
a5ed83fdde389273fd4816dd7e825778
  asPlain :: (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (f1 :: a -> [GHC.Types.Char]) (xs :: [a]) ->
                 case xs of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ds1 ds2
                   -> Language.Fortran.Pretty.printList
                        @ GHC.Types.Char
                        @ a
                        Language.Fortran.Pretty.asPlain1
                        f1
                        wild }) -}
1bf8e48d25fac28fe52f49e6e2e46a38
  asPlain' :: (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (f1 :: a -> [GHC.Types.Char]) (xs :: [a]) ->
                 case xs of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ds1 ds2
                   -> Language.Fortran.Pretty.printList
                        @ GHC.Types.Char
                        @ a
                        Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv3
                        f1
                        wild }) -}
8f45abcd63cbf6c2fca11a0b4f201fcd
  asPlain1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv5
                   Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv4) -}
7caade4b37335d59aea3265d7234854c
  asSeq :: (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ @ a ->
                 Language.Fortran.Pretty.printList
                   @ GHC.Types.Char
                   @ a
                   Language.Fortran.Pretty.$fOutputFAttrv4) -}
58cb3745aa794850136f823ddf6564b2
  asSet :: (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ @ a ->
                 Language.Fortran.Pretty.printList
                   @ GHC.Types.Char
                   @ a
                   Language.Fortran.Pretty.asSet1) -}
264c9980cb99eaf1fdfe8f9f7ea8feb3
  asSet1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.asSet6
                   Language.Fortran.Pretty.asSet2) -}
c989256f9dfdc6286aae56593ad1d462
  asSet2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFAttrv7
                   Language.Fortran.Pretty.asSet3) -}
58128a990d04764566b66ddcf6eac9d8
  asSet3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.asSet4
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
add804db8f338bada7ba732dc4143ece
  asSet4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.asSet5) -}
7e461b925c98b94b82d5d75a72d6b7bd
  asSet5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
4f39c8b4c198865709e3fdce0c3dde65
  asSet6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.asSet7) -}
46bf709b334231ee84f6bc47c03db3df
  asSet7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("{"#) -}
0608d103c9b2b6ed29f9c5c95ad84782
  asTuple :: (a -> [GHC.Types.Char]) -> [a] -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ @ a ->
                 Language.Fortran.Pretty.printList
                   @ GHC.Types.Char
                   @ a
                   Language.Fortran.Pretty.asTuple1) -}
edb3df5081627c4dec6db8faf78c16b3
  asTuple1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.asLisp4
                   Language.Fortran.Pretty.asTuple2) -}
bc29ad1482c082a8e3990aaaf0d10a5c
  asTuple2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.Fortran.Pretty.$fOutputFAttrv7
                   Language.Fortran.Pretty.asLisp3) -}
735e5b18ea86505289953195f0684122
  checkPrec ::
    Language.Fortran.BinOp p
    -> Language.Fortran.BinOp p -> (a -> a) -> a -> a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ p
                   @ a
                   (pop :: Language.Fortran.BinOp p)
                   (cop :: Language.Fortran.BinOp p)
                   (f1 :: a -> a)
                   (s :: a) ->
                 case Language.Fortran.Pretty.opPrec
                        @ p
                        pop of wild { GHC.Types.I# x ->
                 case Language.Fortran.Pretty.opPrec
                        @ p
                        cop of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# x y of lwild { DEFAULT -> s 1# -> f1 s } } }) -}
ec12106257e1d22d095a75631ecfe0b6
  ind :: GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.Fortran.Pretty.$wind ww1 }) -}
451b3426e40eef9df941f274bee858c7
  indent :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Language.Fortran.Pretty.$windent ww1 ww3 } }) -}
8610c45d923132e9485e38023c41ec0e
  isEmptyArg :: Language.Fortran.Arg p -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ p (ds :: Language.Fortran.Arg p) ->
                 case ds of wild { Language.Fortran.Arg ds1 as ds2 ->
                 letrec {
                   go4 :: [GHC.Types.Bool] -> GHC.Types.Bool <join 1> {- Arity: 1 -}
                   = \ (ds3 :: [GHC.Types.Bool]) ->
                     case ds3 of wild1 {
                       [] -> GHC.Types.True
                       : y ys
                       -> case y of wild2 {
                            GHC.Types.False -> GHC.Types.False GHC.Types.True -> go4 ys } }
                 } in
                 go4 (Language.Fortran.Pretty.isEmptyArgName @ p as) }) -}
8d88525ead8f9b250bf5cb9b5c0ffdc0
  isEmptyArgName :: Language.Fortran.ArgName p -> [GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ae7514539e4c96a52e6451ce77608377
  opPrec :: Language.Fortran.BinOp p -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ p (w :: Language.Fortran.BinOp p) ->
                 case Language.Fortran.Pretty.$wopPrec @ p w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
d73b297ef74a1f5dff9bf4ad0e030187
  optTuple ::
    (?variant::v, Language.Fortran.Pretty.Alts v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v) =>
    [Language.Fortran.Expr p] -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,A><L,A><L,1*C1(C(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ v
                   @ p
                   ($dIP :: ?variant::v)
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dOutputG :: Language.Fortran.Pretty.OutputG
                                   (Language.Fortran.UnaryOp p) v)
                   ($dOutputF :: Language.Fortran.Pretty.OutputF
                                   (Language.Fortran.Expr p) v)
                   (ds :: [Language.Fortran.Expr p]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ipv ipv1
                   -> Language.Fortran.Pretty.printList
                        @ GHC.Types.Char
                        @ (Language.Fortran.Expr p)
                        Language.Fortran.Pretty.asTuple1
                        ($dOutputF
                           `cast`
                         (Language.Fortran.Pretty.N:OutputF[0]
                              <Language.Fortran.Expr p>_N <v>_N)
                           $dIP)
                        wild }) -}
81ca94a9a0e859b8df73becd60eb04c9
  outputFList ::
    (Language.Fortran.Pretty.Alts v, ?variant::v,
     Language.Fortran.Pretty.OutputF a v) =>
    [a] -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><L,1*C1(C(U))>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ v
                   @ a
                   (w :: Language.Fortran.Pretty.Alts v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.Pretty.OutputF a v) ->
                 Language.Fortran.Pretty.$woutputFList @ v @ a w1 w2) -}
855b4c7516642dd6d907fc584847f1df
  paren :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Language.Fortran.Pretty.$fOutputFArgListv3
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n1 :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         (GHC.CString.unpackFoldrCString#
                            @ b
                            Language.Fortran.Pretty.$fOutputFArgListv2
                            c
                            n1)
                         s))) -}
016f3728a362a4895890a12fef2fc63f
  printList :: [[a1]] -> (a2 -> [a1]) -> [a2] -> [a1]
  {- Arity: 3, Strictness: <S,U><L,C(U)><L,1*U>,
     Unfolding: (\ @ a
                   @ a1
                   (sep :: [[a]])
                   (f1 :: a1 -> [a])
                   (xs :: [a1]) ->
                 GHC.Base.++
                   @ a
                   (GHC.List.$w!! @ [a] sep 0#)
                   (case GHC.Base.map @ a1 @ [a] f1 xs of wild {
                      [] -> GHC.List.$w!! @ [a] sep 2#
                      : x xs1
                      -> let {
                           z :: [a] = GHC.List.$w!! @ [a] sep 2#
                         } in
                         letrec {
                           go4 :: [[a]] -> [a] {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [[a]]) ->
                             case ds of wild1 { [] -> z : y ys -> GHC.Base.++ @ a y (go4 ys) }
                         } in
                         go4
                           (GHC.Types.:
                              @ [a]
                              x
                              (Data.OldList.prependToAll
                                 @ [a]
                                 (GHC.List.$w!! @ [a] sep 1#)
                                 xs1)) })) -}
af3a40fe3ce1f50cd26320ef12b2d98c
  showBounds ::
    (Language.Fortran.Pretty.Alts v, ?variant::v,
     Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v) =>
    (Language.Fortran.Expr p, Language.Fortran.Expr p)
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><L,U><L,C(C1(U))><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ v
                   @ p
                   (w :: Language.Fortran.Pretty.Alts v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v)
                   (w3 :: (Language.Fortran.Expr p, Language.Fortran.Expr p)) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 Language.Fortran.Pretty.$wshowBounds @ v @ p w1 w2 ww1 ww2 }) -}
f73f32c754bc268cf5ad3b7d190e34d8
  showDU ::
    (?variant::v, Language.Fortran.Pretty.OutputF t1 v,
     Language.Fortran.Pretty.OutputF t2 v) =>
    (t2, t1) -> [GHC.Types.Char]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,1*C1(C1(U))><C(C(S)),1*C1(C1(U))><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ v
                   @ t
                   @ t1
                   (w :: ?variant::v)
                   (w1 :: Language.Fortran.Pretty.OutputF t v)
                   (w2 :: Language.Fortran.Pretty.OutputF t1 v)
                   (w3 :: (t1, t)) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 Language.Fortran.Pretty.$wshowDU @ v @ t @ t1 w w1 w2 ww1 ww2 }) -}
4cdeb67d7a1771ddd20a3f5354b5b2fe
  showDU1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" = "#) -}
76d52806612e9f018d07ae857a70e457
  showDV ::
    (?variant::v, Language.Fortran.Pretty.Alts v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.BinOp p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.ArgList p) v,
     GHC.Show.Show a, Language.Fortran.Pretty.OutputF t v) =>
    (t, Language.Fortran.Expr p, GHC.Base.Maybe a) -> [GHC.Types.Char]
  {- Arity: 10,
     Strictness: <L,U><L,A><L,C(C1(U))><L,C(C1(U))><L,C(C(U))><L,C(C1(U))><L,C(C1(U))><L,1*U(A,1*C1(U),A)><C(C(S)),1*C1(C1(U))><S(LSS),1*U(U,1*U,1*U)>,
     Unfolding: (\ @ v
                   @ p
                   @ a
                   @ t
                   ($dIP :: ?variant::v)
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dOutputG :: Language.Fortran.Pretty.OutputG
                                   (Language.Fortran.VarName p) v)
                   ($dOutputG1 :: Language.Fortran.Pretty.OutputG
                                    (Language.Fortran.UnaryOp p) v)
                   ($dOutputG2 :: Language.Fortran.Pretty.OutputG
                                    (Language.Fortran.Expr p) v)
                   ($dOutputG3 :: Language.Fortran.Pretty.OutputG
                                    (Language.Fortran.BinOp p) v)
                   ($dOutputG4 :: Language.Fortran.Pretty.OutputG
                                    (Language.Fortran.ArgList p) v)
                   ($dShow :: GHC.Show.Show a)
                   ($dOutputF :: Language.Fortran.Pretty.OutputF t v)
                   (eta :: (t, Language.Fortran.Expr p, GHC.Base.Maybe a)) ->
                 case eta of wild { (,,) v1 ds ds1 ->
                 case ds of wild1 {
                   DEFAULT
                   -> case ds1 of wild2 {
                        GHC.Base.Nothing
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             ($dOutputF
                                `cast`
                              (Language.Fortran.Pretty.N:OutputF[0] <t>_N <v>_N)
                                $dIP
                                v1)
                             (GHC.CString.unpackAppendCString#
                                Language.Fortran.Pretty.showDU1
                                (Language.Fortran.Pretty.$w$coutputF4
                                   @ p
                                   @ v
                                   $dOutputG4
                                   $dOutputG3
                                   $dOutputG2
                                   $dOutputG1
                                   $dOutputG
                                   $dIP
                                   wild1))
                        GHC.Base.Just n1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             ($dOutputF
                                `cast`
                              (Language.Fortran.Pretty.N:OutputF[0] <t>_N <v>_N)
                                $dIP
                                v1)
                             (GHC.CString.unpackAppendCString#
                                Language.Fortran.Pretty.$fOutputFBinOpv24
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   (GHC.Show.show @ a $dShow n1)
                                   (GHC.CString.unpackAppendCString#
                                      Language.Fortran.Pretty.showDU1
                                      (Language.Fortran.Pretty.$w$coutputF4
                                         @ p
                                         @ v
                                         $dOutputG4
                                         $dOutputG3
                                         $dOutputG2
                                         $dOutputG1
                                         $dOutputG
                                         $dIP
                                         wild1)))) }
                   Language.Fortran.NullExpr ds2 ds3
                   -> case ds1 of wild2 {
                        GHC.Base.Nothing
                        -> $dOutputF
                             `cast`
                           (Language.Fortran.Pretty.N:OutputF[0] <t>_N <v>_N)
                             $dIP
                             v1
                        GHC.Base.Just n1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             ($dOutputF
                                `cast`
                              (Language.Fortran.Pretty.N:OutputF[0] <t>_N <v>_N)
                                $dIP
                                v1)
                             (GHC.CString.unpackAppendCString#
                                Language.Fortran.Pretty.$fOutputFBinOpv24
                                (GHC.Show.show @ a $dShow n1)) } } }) -}
9d2939b213a61e8312ec6afb7643a6e3
  showElseIf ::
    (?variant::v, Language.Fortran.Pretty.OutputG t1 v,
     Language.Fortran.Pretty.OutputG t2 v) =>
    GHC.Types.Int -> (t2, t1) -> [GHC.Types.Char]
  {- Arity: 5,
     Strictness: <L,U><L,1*C1(C1(U))><L,1*C1(C1(U))><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ v
                   @ t
                   @ t1
                   (w :: ?variant::v)
                   (w1 :: Language.Fortran.Pretty.OutputG t v)
                   (w2 :: Language.Fortran.Pretty.OutputG t1 v)
                   (w3 :: GHC.Types.Int)
                   (w4 :: (t1, t)) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 case w4 of ww2 { (,) ww3 ww4 ->
                 Language.Fortran.Pretty.$wshowElseIf
                   @ v
                   @ t
                   @ t1
                   w
                   w1
                   w2
                   ww1
                   ww3
                   ww4 } }) -}
95e13510c5026b82de2e219e9b25cd59
  showElseIf1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
072cb26d1ae4de14aced23eef7f3b8f2
  showElseIf2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (") then\n"#) -}
950bd945b235f6db6281bc3ea31709a5
  showElseIf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("else if ("#) -}
9ed768c1974286d3138c3147b26453ef
  showForall ::
    (?variant::v, Language.Fortran.Pretty.OutputG t1 v,
     Language.Fortran.Pretty.OutputG t2 v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.Expr p) v) =>
    [([GHC.Types.Char], t2, t1, Language.Fortran.Expr p)]
    -> [GHC.Types.Char]
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><S,1*U> -}
8e9a8e07348be8fa80e274a03e4a1144
  showNQ :: GHC.Show.Show a => a -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(S)L),1*U(A,1*C1(U),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (eta :: a) ->
                 GHC.Base.build
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n1 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      (GHC.List.filterFB
                         @ GHC.Types.Char
                         @ b
                         c
                         Language.Fortran.Pretty.showNQ1)
                      n1
                      (GHC.Show.show @ a $dShow eta))) -}
994f2e0d03fed973f72228b73b3f4c0e
  showNQ1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Classes.neChar Language.Fortran.Pretty.showNQ2) -}
eabb95cb8241880a575e49842c3f35f5
  showNQ2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '"'#) -}
877713106c1cd4389773c9015e9e392d
  showPartRefList ::
    (Language.Fortran.Pretty.Alts v, ?variant::v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.VarName p) v,
     Language.Fortran.Pretty.OutputG (Language.Fortran.UnaryOp p) v,
     Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v) =>
    [(Language.Fortran.VarName p, [Language.Fortran.Expr p])]
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,A><L,U><L,C(C1(U))><L,A><L,C(C(U))><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, True)
                (\ @ v
                   @ p
                   (w :: Language.Fortran.Pretty.Alts v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.VarName p) v)
                   (w3 :: Language.Fortran.Pretty.OutputG
                            (Language.Fortran.UnaryOp p) v)
                   (w4 :: Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v)
                   (w5 :: [(Language.Fortran.VarName p,
                            [Language.Fortran.Expr p])]) ->
                 Language.Fortran.Pretty.$wshowPartRefList @ v @ p w1 w2 w4 w5) -}
f8d744cd7f06e8cb2d4466b35e1aabed
  showRanges ::
    (Language.Fortran.Pretty.Alts v, ?variant::v,
     Language.Fortran.Pretty.OutputF (Language.Fortran.Expr p) v) =>
    [(Language.Fortran.Expr p, Language.Fortran.Expr p)]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><L,U><L,C(C1(U))><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ v
                   @ p
                   ($dAlts :: Language.Fortran.Pretty.Alts v)
                   ($dIP :: ?variant::v)
                   ($dOutputF :: Language.Fortran.Pretty.OutputF
                                   (Language.Fortran.Expr p) v)
                   (eta :: [(Language.Fortran.Expr p, Language.Fortran.Expr p)]) ->
                 Language.Fortran.Pretty.printList
                   @ GHC.Types.Char
                   @ (Language.Fortran.Expr p, Language.Fortran.Expr p)
                   Language.Fortran.Pretty.$fOutputFAttrv4
                   (Language.Fortran.Pretty.showBounds @ v @ p $dAlts $dIP $dOutputF)
                   eta) -}
084fe67e2e337e09125c004e16771998
  showUnits ::
    (Language.Fortran.Pretty.Alts v, ?variant::v,
     Language.Fortran.Pretty.OutputF (Language.Fortran.Fraction p) v) =>
    [(Language.Fortran.MeasureUnit, Language.Fortran.Fraction p)]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,A><L,U><L,C(C1(U))><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ v
                   @ p
                   (w :: Language.Fortran.Pretty.Alts v)
                   (w1 :: ?variant::v)
                   (w2 :: Language.Fortran.Pretty.OutputF
                            (Language.Fortran.Fraction p) v)
                   (w3 :: [(Language.Fortran.MeasureUnit,
                            Language.Fortran.Fraction p)]) ->
                 Language.Fortran.Pretty.$wshowUnits @ v @ p w1 w2 w3) -}
10e29bb13248935dfdc0991cb8ec193d
  showUse :: Language.Fortran.Uses p -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
9826a3080c69a32c48f8cfe8206ec9cb
  show_data ::
    (?variant::v, Language.Fortran.Pretty.OutputG t1 v,
     Language.Fortran.Pretty.OutputG t2 v) =>
    (t2, t1) -> [GHC.Types.Char]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,1*C1(C1(U))><L,1*C1(C1(U))><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ v
                   @ t
                   @ t1
                   (w :: ?variant::v)
                   (w1 :: Language.Fortran.Pretty.OutputG t v)
                   (w2 :: Language.Fortran.Pretty.OutputG t1 v)
                   (w3 :: (t1, t)) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 Language.Fortran.Pretty.$wshow_data
                   @ v
                   @ t
                   @ t1
                   w
                   w1
                   w2
                   ww1
                   ww2 }) -}
387a19b3ed28d28223cc31c1bcd8c8c9
  show_namelist ::
    (?variant::v, Language.Fortran.Pretty.OutputG t1 v,
     Language.Fortran.Pretty.OutputG t2 v) =>
    [(t2, [t1])] -> [GHC.Types.Char]
  {- Arity: 4, Strictness: <L,U><L,1*C1(C(U))><L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ v
                   @ t
                   @ t1
                   ($dIP :: ?variant::v)
                   ($dOutputG :: Language.Fortran.Pretty.OutputG t v)
                   ($dOutputG1 :: Language.Fortran.Pretty.OutputG t1 v)
                   (eta :: [(t1, [t])]) ->
                 let {
                   lvl159 :: t -> GHC.Base.String
                   = $dOutputG
                       `cast`
                     (Language.Fortran.Pretty.N:OutputG[0] <t>_N <v>_N)
                       $dIP
                 } in
                 letrec {
                   show_namelist3 :: [(t1, [t])] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(t1, [t])]) ->
                     case ds of wild {
                       [] -> Language.Fortran.Pretty.show_namelist2
                       : ds1 ds2
                       -> case ds1 of wild1 { (,) x xs ->
                          case ds2 of wild2 {
                            []
                            -> GHC.CString.unpackAppendCString#
                                 Language.Fortran.Pretty.$fOutputFBinOpv22
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    ($dOutputG1
                                       `cast`
                                     (Language.Fortran.Pretty.N:OutputG[0] <t1>_N <v>_N)
                                       $dIP
                                       x)
                                    (GHC.CString.unpackAppendCString#
                                       Language.Fortran.Pretty.$fOutputFBinOpv22
                                       (case GHC.Base.map
                                               @ t
                                               @ [GHC.Types.Char]
                                               lvl159
                                               xs of wild3 {
                                          [] -> GHC.Types.[] @ GHC.Types.Char
                                          : x1 xs1
                                          -> Language.Fortran.Pretty.$fOutputFDataFormv_go
                                               (GHC.Types.:
                                                  @ [GHC.Types.Char]
                                                  x1
                                                  (Data.OldList.prependToAll
                                                     @ [GHC.Types.Char]
                                                     Language.Fortran.Pretty.show_namelist1
                                                     xs1)) })))
                            : ipv ipv1
                            -> GHC.CString.unpackAppendCString#
                                 Language.Fortran.Pretty.$fOutputFBinOpv22
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    ($dOutputG1
                                       `cast`
                                     (Language.Fortran.Pretty.N:OutputG[0] <t1>_N <v>_N)
                                       $dIP
                                       x)
                                    (GHC.CString.unpackAppendCString#
                                       Language.Fortran.Pretty.$fOutputFBinOpv22
                                       (let {
                                          n1 :: [GHC.Types.Char]
                                          = GHC.CString.unpackAppendCString#
                                              Language.Fortran.Pretty.$fOutputFArgNamev1
                                              (show_namelist3 wild2)
                                        } in
                                        case GHC.Base.map
                                               @ t
                                               @ [GHC.Types.Char]
                                               lvl159
                                               xs of wild3 {
                                          [] -> n1
                                          : x1 xs1
                                          -> letrec {
                                               go4 :: [[GHC.Types.Char]] -> [GHC.Types.Char]
                                                 {- Arity: 1, Strictness: <S,1*U> -}
                                               = \ (ds3 :: [[GHC.Types.Char]]) ->
                                                 case ds3 of wild4 {
                                                   [] -> n1
                                                   : y ys
                                                   -> GHC.Base.++ @ GHC.Types.Char y (go4 ys) }
                                             } in
                                             go4
                                               (GHC.Types.:
                                                  @ [GHC.Types.Char]
                                                  x1
                                                  (Data.OldList.prependToAll
                                                     @ [GHC.Types.Char]
                                                     Language.Fortran.Pretty.show_namelist1
                                                     xs1)) }))) } } }
                 } in
                 show_namelist3 eta) -}
0098e83557c75715ee1af1ad99aa51da
  show_namelist1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.Fortran.Pretty.$fOutputF[]v3) -}
5f252f7058462be99234d47284cada66
  show_namelist2 :: [GHC.Types.Char]
  {- Strictness: x -}
instance [overlap ok] Language.Fortran.Pretty.Alts [Language.Fortran.Pretty.Alt1]
  = Language.Fortran.Pretty.$fAltsAlt1
instance [overlap ok] Language.Fortran.Pretty.Alts [Language.Fortran.Pretty.Alt2]
  = Language.Fortran.Pretty.$fAltsAlt2
instance [overlap ok] Language.Fortran.Pretty.Alts [Language.Fortran.Pretty.Alt3]
  = Language.Fortran.Pretty.$fAltsAlt3
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.ArgList,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFArgListv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.ArgName,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFArgNamev
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Arg,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFArgv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Attr,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFAttrv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.BaseType,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFBaseTypev
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.BinOp,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFBinOpv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Block,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFBlockv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.DataForm,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFDataFormv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Decl,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFDeclv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Expr,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFExprv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Fortran,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFFortranv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Fraction,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFFractionv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.GSpec,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFGSpecv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Implicit,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFImplicitv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.InterfaceSpec,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFInterfaceSpecv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.MeasureUnitSpec,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFMeasureUnitSpecv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.ProgUnit,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFProgUnitv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Spec,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFSpecv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.SubName,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFSubNamev
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Type,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFTypev
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.UnaryOp,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFUnaryOpv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.UseBlock,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFUseBlockv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.Uses,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFUsesv
instance [overlap ok] Language.Fortran.Pretty.OutputF [Language.Fortran.VarName,
                                                       .]
  = Language.Fortran.Pretty.$fOutputFVarNamev
instance [overlap ok] Language.Fortran.Pretty.OutputF [[], .]
  = Language.Fortran.Pretty.$fOutputF[]v
instance [overlap ok] Language.Fortran.Pretty.OutputG [(,), .]
  = Language.Fortran.Pretty.$fOutputG(,)v
instance [overlap ok] Language.Fortran.Pretty.OutputG [GHC.Types.Char,
                                                       .]
  = Language.Fortran.Pretty.$fOutputGCharv
instance [overlap ok] Language.Fortran.Pretty.OutputG [[], .]
  = Language.Fortran.Pretty.$fOutputG[]v
instance [overlap ok] Language.Fortran.Pretty.OutputG [[], .]
  = Language.Fortran.Pretty.$fOutputG[]v0
instance [overlap ok] Language.Fortran.Pretty.OutputG [.,
                                                       Language.Fortran.Pretty.Alt1]
  = Language.Fortran.Pretty.$fOutputGtAlt1
instance [overlap ok] Language.Fortran.Pretty.OutputIndF [Language.Fortran.Fortran,
                                                          .]
  = Language.Fortran.Pretty.$fOutputIndFFortranv
instance [overlap ok] Language.Fortran.Pretty.OutputIndG [.,
                                                          Language.Fortran.Pretty.Alt1]
  = Language.Fortran.Pretty.$fOutputIndGtAlt1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

