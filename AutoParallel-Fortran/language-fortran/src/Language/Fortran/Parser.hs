{-# OPTIONS_GHC -w #-}
{-# OPTIONS -cpp #-}
module Language.Fortran.Parser (
    parser
  , parse 				-- GAV ADDED
  , statement_parse		-- GAV ADDED
  , context_parse		-- GAV ADDED
  , include_parser
    -- * Helpers
  , fst3
  , snd3
  , trd3
  , fst4
  , snd4
  , trd4
  , frh4
  )
  where

import Language.Fortran
import Language.Fortran.PreProcess

import qualified Language.Haskell.Syntax as LH (SrcLoc(..))
import Language.Haskell.ParseMonad 
import Language.Fortran.Lexer
import Data.Char (toLower)
import Debug.Trace

import qualified Data.Map as DMap
import qualified Data.Array as Happy_Data_Array
import qualified Data.Bits as Bits
import qualified System.IO as Happy_System_IO
import qualified System.IO.Unsafe as Happy_System_IO_Unsafe
import qualified Debug.Trace as Happy_Debug_Trace
import Control.Applicative(Applicative(..))
import Control.Monad (ap)

-- parser produced by Happy Version 1.19.8

data HappyAbsSyn 
	= HappyTerminal (Token)
	| HappyErrorToken Int
	| HappyAbsSyn7 (Program A0)
	| HappyAbsSyn10 (ProgUnit A0)
	| HappyAbsSyn11 ([String])
	| HappyAbsSyn12 ([Expr A0])
	| HappyAbsSyn13 ()
	| HappyAbsSyn16 ((SubName A0, Arg A0))
	| HappyAbsSyn17 (String)
	| HappyAbsSyn18 (Implicit A0)
	| HappyAbsSyn25 (SubName A0)
	| HappyAbsSyn33 (Uses A0)
	| HappyAbsSyn34 ((String, Renames))
	| HappyAbsSyn35 ([(Variable, Variable)])
	| HappyAbsSyn36 (Decl A0)
	| HappyAbsSyn41 (([(Expr A0, Expr A0)],[Attr A0]))
	| HappyAbsSyn42 ([(Expr A0, Expr A0, Maybe Int)])
	| HappyAbsSyn43 ((Expr A0, Expr A0, Maybe Int))
	| HappyAbsSyn45 ((BaseType A0, Expr A0, Expr A0))
	| HappyAbsSyn47 (Expr A0)
	| HappyAbsSyn48 ((Expr A0, Expr A0))
	| HappyAbsSyn52 ([(Expr A0, Expr A0)])
	| HappyAbsSyn56 (Attr A0)
	| HappyAbsSyn58 ([(MeasureUnit, MeasureUnitSpec A0)])
	| HappyAbsSyn59 ((MeasureUnit, MeasureUnitSpec A0))
	| HappyAbsSyn60 (MeasureUnitSpec A0)
	| HappyAbsSyn61 ([(MeasureUnit, Fraction A0)])
	| HappyAbsSyn63 (Fraction A0)
	| HappyAbsSyn70 (IntentAttr A0)
	| HappyAbsSyn75 (Maybe (GSpec A0))
	| HappyAbsSyn76 ([InterfaceSpec A0])
	| HappyAbsSyn77 (InterfaceSpec A0)
	| HappyAbsSyn81 ([SubName A0 ])
	| HappyAbsSyn83 ((SubName A0, [Attr A0]))
	| HappyAbsSyn86 ([Attr A0])
	| HappyAbsSyn87 ([Decl A0 ])
	| HappyAbsSyn93 ([GSpec A0])
	| HappyAbsSyn94 (GSpec A0)
	| HappyAbsSyn96 (DataForm A0)
	| HappyAbsSyn108 (BinOp A0)
	| HappyAbsSyn111 ([(Expr A0, [Expr A0])])
	| HappyAbsSyn113 ((SubName A0, Arg A0, Maybe (BaseType A0)))
	| HappyAbsSyn114 ((SubName A0, Arg A0, Maybe (BaseType A0), Maybe (VarName A0)))
	| HappyAbsSyn117 (Arg A0)
	| HappyAbsSyn118 (SrcSpan -> Arg A0)
	| HappyAbsSyn119 (ArgName A0)
	| HappyAbsSyn121 (Fortran A0)
	| HappyAbsSyn123 ([(VarName A0, [Expr A0])])
	| HappyAbsSyn124 ((VarName A0, [Expr A0]))
	| HappyAbsSyn153 (VarName A0)
	| HappyAbsSyn156 ((VarName A0, Expr A0, Expr A0, Expr A0))
	| HappyAbsSyn160 ((Fortran A0, String))
	| HappyAbsSyn172 ([(Expr A0, Fortran A0)])
	| HappyAbsSyn174 (Maybe(Fortran A0))
	| HappyAbsSyn199 ([(VarName A0,[Expr A0])])
	| HappyAbsSyn202 ([Spec A0])
	| HappyAbsSyn203 (Spec A0)
	| HappyAbsSyn214 (([(String,Expr A0,Expr A0,Expr A0)],Expr A0))
	| HappyAbsSyn215 ([(String,Expr A0,Expr A0,Expr A0)])
	| HappyAbsSyn216 ((String,Expr A0,Expr A0,Expr A0))
	| HappyAbsSyn262 (SrcLoc)

happyExpList :: Happy_Data_Array.Array Int Int
happyExpList = Happy_Data_Array.listArray (0,5672) ([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16896,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,544,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4608,0,2048,4,16416,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41472,5060,21840,16512,16545,534,1056,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12288,8192,0,512,0,0,0,516,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16896,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,32800,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,128,0,8208,128,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2050,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,2,8192,0,0,0,8256,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8448,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,528,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,513,32896,192,2688,2308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,32777,29184,21520,2065,2336,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,8200,16647,33045,37376,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,16,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6656,8192,2048,4,16416,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,32800,0,4096,32800,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8704,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,8210,2048,3080,43008,36928,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52728,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12800,32808,8192,0,36864,32864,512,8392,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,768,0,0,0,0,0,0,524,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,32,0,2,0,0,1024,258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,64,16640,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12288,12288,0,512,0,0,0,516,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32800,0,4096,32800,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2050,0,256,2050,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2560,0,0,0,16896,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8208,128,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4672,32,2056,12,16556,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32800,0,4096,32800,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2050,0,256,2050,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,768,512,0,32,0,0,16384,4128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40960,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,322,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,322,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1728,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,643,8,2,0,1545,8200,3200,387,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1280,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20480,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,32800,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20480,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,48,0,2,0,0,1024,258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20480,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20480,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33568,2114,512,0,2304,2054,32800,33292,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,32768,2048,1280,5440,129,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,659,8,2,0,1545,8200,3200,386,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2050,0,256,2050,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,128,0,8208,128,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33280,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1280,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32800,0,4096,32800,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10290,132,32,0,24720,128,51202,6176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12288,2,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,8192,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,128,0,8208,128,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,2304,128,4210,4436,8200,1033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,32777,29184,21520,2065,2336,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12288,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8240,128,32,0,24720,128,51202,6176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16640,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,322,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,8192,0,0,0,8256,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12288,32808,8192,0,36864,32864,512,8392,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20480,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33568,2050,512,0,2304,2054,32800,33292,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1280,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16896,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2560,0,0,0,16896,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,8208,128,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,32777,29184,21520,2065,2336,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,36864,2048,1824,5441,129,16530,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,15434,21760,2053,2580,8292,16896,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20480,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20480,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2050,0,256,2050,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2050,0,256,2050,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,8192,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2080,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,288,0,16512,0,1026,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2080,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,8192,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1280,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,32768,2048,1824,5441,129,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,2048,128,4210,4436,8200,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,8200,16647,33045,37376,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,128,0,8208,128,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32800,0,4096,32800,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2050,0,256,2050,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2050,0,256,2050,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,4128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16896,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,322,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,128,0,8208,128,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,8,0,513,8,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,288,32770,16512,32768,1034,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2050,0,256,2050,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	])

{-# NOINLINE happyExpListPerState #-}
happyExpListPerState st =
    token_strs_expected
  where token_strs = ["error","%dummy","%start_parser","%start_include_parser","%start_statement_parser","%start_context_parser","include_program","executable_program","program_unit_list","program_unit","plist","vlist","newline","newline0","main_program","program_stmt","end_program_stmt","implicit_part","external_subprogram","subroutine_subprogram","end_subroutine_stmt","end_function_stmt","function_subprogram","block_data","block_data_stmt","end_block_data_stmt","module","module_stmt","end_module_stmt","module_subprogram_part","internal_subprogram_list","internal_subprogram","use_stmt_list","use_stmt","renames","specification_part_top","specification_part","declaration_construct_l","declaration_construct_p","declaration_construct","attr_spec_list","entity_decl_list","entity_decl","object_name","type_spec_p","type_spec","kind_selector","char_selector","length_selector","char_len_param_value","length_value","dim_spec","dim_spec_p","attr_spec_p","attr_spec","access_spec","unit_stmt","unit_decl_list","unit_decl","unit_spec","mult_unit_spec","power_unit_spec","power_spec","signed_num","array_spec","explicit_shape_spec_list","explicit_shape_spec","include_stmt","specification_expr","intent_spec","specification_stmt","save_stmt","common_stmt","interface_block","interface_stmt","interface_spec_list","interface_spec","end_interface_stmt","interface_body","module_procedure_stmt","sub_name_list","derived_type_def","derived_type_stmt","end_type_stmt","type_name","private_sequence_stmt","component_def_stmt_list","component_def_stmt","component_attr_spec_list","component_attr_spec","attr_stmt","access_stmt","access_id_list","access_id","generic_spec","data_stmt","data_stmt_set_list","data_stmt_set","data_stmt_object_list","data_stmt_object","data_stmt_value_list","data_stmt_value","external_stmt","name_list","id2","id_keywords","id_keywords_2","defined_operator","intrinsic_operator","namelist_stmt","namelist_list","namelist_group_object_list","subroutine_stmt","function_stmt","subname","prefix","args_p","dummy_arg_list","dummy_arg_list2","dummy_arg","assignment_stmt","variable","scalar_variable_name_list","scalar_variable_name","subscript","bound","section_subscript_list","section_subscript","expr","level_5_expr","equiv_operand","or_operand","and_operand","level_4_expr","level_3_expr","level_2_expr","add_operand","mult_operand","level_1_expr","primaryP","primary","type_cast","fields","array_constructor","expr_list","constant_p","constant_p2","constant","literal_constant","logical_literal_constant","rel_op","int_expr","do_variable","do_construct","block_do_construct","nonlabel_do_stmt","loop_control","loop_control2","do_block","do_block_num","do_block_cont","line","end_do","block","execution_part","executable_construct_list","executable_construct","executable_constructP","select_construct","select_stmt","end_select_stmt","case_list","case_stmt","default_case_stmt","equivalence_stmt","action_stmt","pause_stmt","format_stmt","call_stmt","call_name","actual_arg_spec_list","actual_arg_spec","actual_arg","else_if_list","else_if_stmt","if_then_stmt","else_if_then_stmt","if_construct","end_if_stmt","logical_expr","allocate_stmt","allocation_list","allocate_object_list","allocate_object","allocate_shape_spec_list","allocate_shape_spec","allocation","allocation_var_list2","allocation_var_list","allocation_var","backspace_stmt","position_spec_list","position_spec","close_stmt","close_spec_list","close_spec","continue_stmt","cycle_stmt","deallocate_stmt","endfile_stmt","exit_stmt","forall_stmt","forall_stmt_end","forall_header","forall_triplet_spec_list","forall_triplet_spec","forall_assignment_stmt","forall_assignment_stmt_list","goto_stmt","if_stmt","inquire_stmt","inquire_spec_list","inquire_spec","nullify_stmt","pointer_object_list","pointer_object","structure_component","open_stmt","connect_spec_list","connect_spec","file_name_expr","scalar_char_expr","scalar_int_expr","pointer_assignment_stmt","target","print_stmt","format","output_item_list","output_item","read_stmt","io_control_spec_list_d","io_control_spec_list_d2","io_control_spec_list","io_control_spec","floating_spec","io_control_spec_id","input_item_list","input_item","label","num","namelist_group_name","return_stmt","scalar_default_int_variable","scalar_default_char_expr","rewind_stmt","stop_stmt","stop_code","where_stmt","where_assignment_stmt","mask_expr","write_stmt","srcloc","'=>'","'**'","'//'","'=='","'/='","'<='","'>='","'.NOT.'","'.AND.'","'.OR.'","'.TRUE.'","'.FALSE.'","'<'","'>'","'*'","'/'","'+'","'-'","','","'('","')'","'='","'.'","'::'","':'","';'","'#'","'{'","'}'","'(/'","'/)'","DATA_DESC","'%'","'$'","'\\n'","ALLOCATE","ALLOCATABLE","ASSIGN","ASSIGNMENT","BACKSPACE","BLOCK","CALL","CASE","CHARACTER","CLOSE","COMMON","COMPLEX","CONTAINS","CONTINUE","CYCLE","DATA","DEALLOCATE","DEFAULT","DIMENSION","DO","ELEMENTAL","ELSE","ELSEIF","ELSEWHERE","END","ENDIF","ENDDO","ENDFILE","EQUIVALENCE","EXIT","EXTERNAL","FORALL","FOREACH","FORMAT","FUNCTION","GOTO","IOLENGTH","IF","IMPLICIT","IN","INCLUDE","INOUT","INTEGER","INTENT","INTERFACE","INTRINSIC","INQUIRE","KIND","LEN","LOGICAL","MODULE","NAMELIST","NONE","NULLIFY","NULL","OPEN","OPERATOR","OPTIONAL","OUT","PARAMETER","PAUSE","POINTER","PRINT","PRIVATE","PROCEDURE","PROGRAM","PURE","PUBLIC","REAL","READ","RECURSIVE","RESULT","RETURN","REWIND","SAVE","SELECT","SEQUENCE","SOMETYPE","SQRT","STAT","STOP","STR","ZLIT","SUBROUTINE","TARGET","THEN","TYPE","UNIT","'1'","USE","VOLATILE","WHILE","WHERE","WRITE","ID","NUM","LABEL","TEXT","%eof"]
        bit_start = st * 396
        bit_end = (st + 1) * 396
        read_bit = readArrayBit happyExpList
        bits = map read_bit [bit_start..bit_end - 1]
        bits_indexed = zip bits [0..395]
        token_strs_expected = concatMap f bits_indexed
        f (False, _) = []
        f (True, nr) = [token_strs !! nr]

happyActOffsets :: Happy_Data_Array.Array Int Int
happyActOffsets = Happy_Data_Array.listArray (0,1034) ([0,0,474,471,0,36,91,0,0,67,1916,0,464,0,90,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,0,5049,0,220,0,198,198,89,0,0,419,1723,0,0,0,487,0,518,0,474,564,0,738,641,661,0,704,0,1116,0,729,525,815,1116,850,344,303,874,0,910,0,938,944,0,795,719,1513,4728,950,901,428,956,1023,0,0,0,0,878,1044,1049,967,0,0,542,577,587,671,769,0,1068,5403,4946,0,0,5155,1063,0,0,1093,519,0,0,0,0,0,0,0,0,0,0,0,1811,0,1078,560,1096,0,1106,0,0,0,0,0,1094,0,623,0,0,0,4518,0,0,0,16,159,252,0,1175,1037,0,0,1175,1010,0,0,1077,0,0,0,0,0,0,0,0,0,263,787,0,2048,1142,0,0,0,0,1135,1167,0,1414,1187,467,810,0,1178,0,0,0,0,0,4799,674,0,0,0,681,0,1173,0,0,0,0,0,1180,0,0,1186,0,0,1723,0,1190,1211,0,1215,0,0,372,0,888,0,0,0,1619,1226,1222,1376,0,0,0,0,0,0,0,0,1253,0,0,0,1262,0,890,0,0,0,637,1274,1376,0,0,1169,1298,0,820,0,73,0,1202,1292,521,738,1318,1327,0,0,0,0,0,0,0,0,5352,0,1231,1231,0,0,1323,1408,1408,1723,4843,0,0,1344,0,665,1345,0,474,1330,77,0,1272,1759,1290,0,1314,0,0,0,674,766,0,0,1283,0,830,0,4534,0,1420,0,1014,0,1431,1465,0,0,0,1036,0,738,0,1062,1469,1076,0,0,0,0,0,937,1619,0,666,0,0,1435,0,1104,0,1473,1479,1486,1504,1544,1209,0,0,1232,0,1546,1574,1451,0,0,1461,0,0,1246,0,0,0,0,0,0,0,1521,0,0,1304,0,1551,0,4569,0,0,1580,0,0,0,0,0,0,0,0,1589,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1607,1622,0,0,0,0,0,0,0,0,0,1629,748,5326,0,1351,0,0,4659,1616,1632,0,664,0,0,0,1645,1651,0,1656,0,0,1667,0,1408,1667,1408,1408,0,1609,1566,1627,1481,0,1625,1583,1668,0,319,0,1686,0,557,1714,0,1503,0,1715,0,0,1702,4684,287,1721,1720,596,1716,0,0,48,0,0,0,1724,1727,48,0,886,1612,0,0,1729,1503,0,1637,1652,0,693,1728,1733,1503,1735,0,0,0,1742,0,1636,1743,0,1748,1638,1749,245,0,0,1767,0,1691,1503,5280,1687,82,1757,1503,0,5280,1758,1758,50,79,1763,0,1750,1750,0,0,0,0,0,0,0,1701,0,0,0,0,0,0,1766,0,1768,0,0,0,0,0,0,1771,0,664,0,0,0,0,1781,0,1789,1153,1193,1193,0,0,0,0,0,492,1773,0,4979,0,0,1271,1772,1774,1760,1777,0,0,0,1780,0,988,0,1669,0,1785,0,0,0,0,700,0,0,0,0,0,0,0,0,936,0,1017,1619,0,0,0,1765,1746,1503,0,0,0,1791,1788,1703,0,0,0,913,0,0,0,4920,0,0,773,0,0,1378,0,0,4858,0,1800,1441,0,1795,0,1809,1718,0,1456,0,474,0,212,1810,0,0,1796,0,1730,0,0,0,521,1813,0,1818,1804,1548,1725,1725,1769,1769,1726,1778,5248,5216,1778,1778,0,0,1807,1807,1824,0,0,474,0,474,1825,0,0,0,1826,1828,1731,0,0,1496,0,0,0,0,0,1841,0,0,0,0,1838,0,1839,1842,0,0,1805,988,0,0,1852,5099,1845,0,1853,0,0,0,0,0,0,0,0,1511,0,1854,0,0,1846,0,0,0,1042,0,0,0,1855,0,0,0,1866,0,0,0,319,557,1015,1870,1871,1527,1553,1874,0,0,1548,0,1878,0,0,0,0,1879,57,1865,1843,0,1617,0,1617,1867,1844,0,464,628,0,319,0,1883,0,0,0,0,0,0,0,0,0,0,0,1847,0,1916,1885,0,1888,0,1882,0,0,1782,0,0,0,0,0,0,1799,1892,0,1906,0,319,319,0,0,0,889,628,0,0,0,230,1922,230,0,0,0,1907,1617,79,1905,0,0,1851,0,1859,0,0,0,1914,0,1915,1917,0,0,0,0,0,1893,0,0,0,1924,0,1925,889,0,0,0,0,1918,0,0,0,0,0,0,0,0,0,0,1921,1591,0,0,0,1243,1926,0,0,0,0,0,0,1900,1889,0,5155,0,1909,1897,1927,5155,5155,1831,0,1932,1940,1941,0,0,0,1944,0,0,1942,1950,0,1957,1919,0,0,0,1956,1958,1959,0,0,1964,1617,0,1617,1617,0,1965,1963,0,0,0,0,1617,942,0,0,26,0,0,0,1969,395,0,0,1977,1979,1967,0,0,0,1967,1983,889,0,0,0,0,0,1877,1970,474,474,0,1970,1920,1960,474,1961,0,1617,1617,0,1947,1948,1952,0,1975,0,0,1887,0,1993,1996,0,1991,2006,0,0,0,0,0,0,0,0,1995,0,1995,1995,0,0,1995,5413,0,0,1968,1997,1930,0,0,0,1973,1911,1617,0,0,0,0
	])

happyGotoOffsets :: Happy_Data_Array.Array Int Int
happyGotoOffsets = Happy_Data_Array.listArray (0,1034) ([1306,1,1980,-29,1786,2034,0,0,0,2036,1275,1793,-74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2180,0,0,0,0,0,658,0,0,0,0,0,1554,0,-1,1579,113,0,0,0,0,0,2037,1884,714,0,0,399,0,3791,-128,0,0,1103,14,0,925,3814,1325,1857,1832,1817,0,0,0,0,0,0,0,0,3095,650,3189,3838,1901,516,0,0,0,0,3863,0,0,0,0,0,2039,0,1550,2028,2030,2031,2041,0,0,1886,-3,0,0,357,2068,0,0,0,-9,0,0,0,0,0,0,0,0,0,0,0,71,0,541,1089,0,0,1978,0,0,0,0,0,0,0,0,0,0,0,827,0,0,0,865,491,0,0,802,0,0,0,924,2005,0,-39,3887,0,-26,0,-24,0,-13,0,0,-11,407,-12,0,411,0,0,0,0,0,0,0,0,1946,0,0,0,0,0,0,0,0,0,0,177,2573,2765,0,0,1848,0,0,0,2789,0,0,0,0,0,0,0,0,0,581,0,0,0,0,0,0,0,2812,123,2835,3239,0,0,480,0,7,381,0,0,0,0,0,0,0,2873,0,0,0,127,0,0,0,0,0,0,2950,0,1332,0,2973,612,0,3262,797,0,2078,0,2275,1474,825,211,0,0,0,0,0,0,0,0,0,0,1434,1830,1595,1635,1850,1856,0,986,1069,712,3009,0,0,2080,0,2085,0,0,930,1929,0,0,1770,1875,1449,0,0,0,0,0,2602,0,0,0,1472,0,0,0,177,0,2655,0,0,0,0,0,667,-20,23,0,0,807,3304,0,0,0,0,40,0,0,0,285,617,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3048,0,-144,0,0,41,0,3910,0,0,0,0,0,0,0,0,0,0,0,0,0,177,0,0,0,69,476,3933,3328,0,0,0,0,0,1129,1185,1234,649,1083,1024,919,0,0,0,0,0,0,978,873,0,0,0,0,0,0,0,0,0,0,0,0,0,897,13,0,0,0,177,0,0,0,1858,0,0,0,0,0,0,0,0,0,-73,0,309,1987,1123,1174,0,2087,1644,0,1335,0,2088,0,2029,0,1188,-16,0,181,2040,0,0,1311,0,0,0,0,0,177,2027,-2,0,2032,0,0,0,2,21,0,0,0,0,-33,0,2058,2035,3,0,0,1338,-28,0,0,3957,3980,614,0,1369,0,0,0,0,0,0,0,0,0,0,0,0,2054,0,0,0,0,0,1381,398,0,2106,0,1386,0,425,2004,2007,2109,1392,0,0,2110,2113,0,4004,0,0,445,4029,0,4052,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1890,4076,24,0,0,0,0,0,0,0,0,0,0,0,4099,0,0,0,0,177,0,4123,0,2631,0,11,0,3373,0,0,0,0,126,0,0,0,0,0,2678,4146,4171,3396,0,-75,0,4195,-19,35,74,100,3419,0,2343,1143,0,0,0,2115,1928,716,0,3448,0,0,0,161,0,0,0,0,0,0,0,335,4218,4242,3472,0,0,0,0,0,361,0,0,0,0,0,0,0,498,0,0,0,1035,0,2116,0,0,0,2119,0,0,0,0,0,1140,0,0,-35,2125,1177,1654,1659,2121,2126,1663,2127,102,129,2128,2129,0,0,2130,2137,3515,0,0,1245,3538,1350,0,0,0,0,0,2736,1951,4265,4288,0,3072,0,0,0,0,0,841,0,635,0,0,3563,0,0,0,0,0,353,0,0,0,85,2139,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,2140,-31,0,0,821,4312,0,4337,0,0,4361,0,0,0,0,0,1460,2084,579,0,0,0,0,0,0,0,1198,1898,0,0,0,0,0,0,2142,2148,2141,0,765,0,854,2149,2143,0,-67,-6,0,1639,0,0,-10,253,0,32,0,0,0,0,0,0,0,-7,0,1657,0,4,0,0,0,0,0,2081,0,0,5,2076,0,0,0,0,0,0,0,1470,2105,0,0,0,1923,12,0,0,0,2156,0,2157,0,0,0,0,1437,2052,0,0,0,0,0,0,0,4384,0,0,0,0,0,0,0,0,0,0,2161,0,0,0,3128,0,0,1933,0,0,0,3607,2017,115,0,0,1221,0,3631,0,0,0,0,0,0,0,118,3654,1988,0,0,0,0,0,1931,1934,2146,2152,1935,242,0,0,2150,2167,269,330,0,0,0,0,3159,0,0,0,0,0,3697,0,0,3729,0,0,0,0,0,0,0,0,0,0,0,1459,0,892,1482,0,0,0,0,0,68,272,1490,0,0,0,393,31,0,0,0,-51,0,0,0,0,2169,4407,499,0,2172,0,1936,3753,0,0,0,0,0,2181,1455,1560,2164,1706,0,0,1665,2168,0,1508,1520,0,9,2182,2183,0,2189,0,0,2435,28,0,0,0,2196,0,0,0,0,0,0,0,0,0,2197,0,1708,1710,0,0,1717,570,0,0,2194,1719,0,0,0,0,0,0,1547,0,0,0,0
	])

happyAdjustOffset :: Int -> Int
happyAdjustOffset = id

happyDefActions :: Happy_Data_Array.Array Int Int
happyDefActions = Happy_Data_Array.listArray (0,1034) ([-8,-586,-586,-586,0,0,0,-74,-73,0,0,-586,-185,-401,0,-389,-361,0,-376,-388,-387,-422,-411,-403,-390,-400,-402,-404,-405,-406,-408,-409,-410,-412,-413,-414,-415,-416,-417,-418,-419,-420,-586,-421,-423,-424,-425,-426,0,-568,0,-567,0,0,-19,-18,-586,-19,-586,-407,-293,-521,-287,-289,0,-395,-586,0,-520,0,0,-586,-586,0,-483,-485,-586,0,-364,-586,-491,0,0,0,0,-249,0,-251,0,0,-250,0,-586,-586,-570,-586,0,-577,0,-292,-427,-375,-586,-184,0,0,0,0,-76,-83,-96,-93,-86,-99,-89,-90,0,0,-586,-5,-62,-65,0,-67,-220,-219,-118,-173,-68,-179,-174,-69,-172,-171,-175,-177,-178,-176,0,-119,-586,-120,0,-122,0,-123,-117,-124,-143,-142,-125,-126,0,-128,-70,-274,0,-187,-188,-189,-56,-56,0,-277,0,0,-276,-275,0,0,-87,-586,-586,-97,-586,-84,-586,-91,-586,-94,-103,-586,-586,-586,-166,0,0,-227,-330,-285,-304,-305,-307,-309,-310,-312,-314,-317,-320,-322,-325,-332,-329,-346,-350,0,-586,-586,-578,-576,0,-392,0,-574,-586,-359,-571,-562,0,-559,-557,-558,-553,-552,-586,-560,0,-554,-535,-534,-536,-428,-586,-586,-586,-586,-506,-429,-586,0,-586,0,-490,-245,-248,-247,-246,-244,-488,-586,0,-363,-360,-586,-230,-232,0,-235,-236,-484,-586,-432,0,-470,-586,-456,-292,-586,-440,-379,0,-386,-586,-398,-586,0,0,-551,-17,-7,-9,-10,-29,-28,-12,-11,0,-586,-56,-56,-586,-586,0,0,0,-586,-585,-288,-362,0,-369,-586,0,-378,-586,0,0,-385,-586,-586,0,-446,0,-450,-532,-531,-586,0,-455,-464,0,-474,0,-473,0,-433,-586,-480,0,-479,0,0,-586,-586,-586,0,-458,0,-586,0,0,0,-499,-586,-502,-492,-503,0,-586,-545,0,-547,-451,0,-512,0,-511,0,0,0,0,0,0,-519,-525,0,-524,0,0,-586,-555,-586,0,-561,-586,0,-586,-347,-351,-352,-349,-348,-583,0,-302,-295,0,-301,-359,-294,0,-291,-297,0,-586,-586,-586,-586,-338,-336,-337,-335,0,-586,-586,-586,-586,-586,-586,-586,-353,-354,-356,-358,-355,-357,-586,-586,0,0,-252,-257,-253,-256,-258,-259,-254,-255,-72,-78,-80,0,-586,0,-111,-167,0,0,0,-95,0,-92,-85,-98,0,0,-88,0,-205,-273,-586,-272,0,0,0,0,-193,-27,-56,-36,0,-195,-27,-33,0,-186,-150,-586,-260,-586,0,-241,-243,0,-116,-161,-163,-165,-164,0,-210,-586,0,0,-222,-225,-226,-586,-586,-66,-64,0,-221,-586,-202,0,0,-586,-182,-16,0,-586,-208,-209,-586,-586,-586,-240,0,0,-168,-170,-169,0,-344,0,0,-144,-146,0,0,-149,-152,-155,-154,-183,0,-32,-586,0,0,-246,-35,-55,-586,0,0,0,-280,-196,-198,0,0,-100,-586,-102,-113,-586,-586,-112,-586,-110,-71,-129,-75,-131,-132,0,-133,0,-135,-136,-130,-137,-138,-139,0,-141,0,-586,-586,-228,-229,-306,-308,-311,-313,-316,-315,-319,-318,-321,-586,-343,0,0,-323,0,-324,-586,-292,-586,-290,-586,0,-586,-575,-565,-542,-564,-543,-556,0,-539,-533,-538,-586,-586,-586,-586,-522,-586,-517,-586,-586,-586,-586,-586,-586,-508,-586,-586,-548,-549,-544,0,-495,-586,-497,-586,-489,0,-459,-586,-487,-231,-234,0,-238,-239,-328,0,-586,-586,-586,-477,-438,0,-435,-437,0,-431,0,-292,-471,-465,-467,-469,-586,-453,0,-449,-586,-447,0,0,-382,-381,0,-391,0,-394,-377,-368,-586,-584,-550,-586,0,-40,-56,-56,-27,-27,-56,-27,-586,-586,-27,-27,-39,-45,0,0,-586,-370,-393,-586,-586,-586,0,-439,-290,-454,0,-586,0,-586,-586,-292,-586,-430,-478,-481,-482,-347,-586,-233,-586,-457,0,-586,0,0,-498,-493,0,-505,-546,-507,0,0,0,-510,0,-514,-513,-515,-516,-518,-523,-526,-527,0,-566,-541,-586,-472,0,-586,-582,-579,0,-586,-300,-586,0,-333,-586,-341,0,-77,-79,-81,-150,0,-586,0,0,0,0,0,-266,-265,0,-586,-279,-282,-284,-283,-271,0,0,0,0,-34,0,-57,0,0,0,-31,-191,0,-151,0,-127,0,-586,-586,-345,-586,-121,-242,-162,-296,-299,-207,-206,-586,-212,0,0,-586,0,-201,0,-224,-218,0,-399,-15,-586,-215,-199,-211,0,-262,-264,0,-145,-150,-148,-153,-157,-160,0,0,-190,-194,-26,0,0,0,-192,-267,-269,0,0,0,0,-197,-101,0,-109,0,-108,-586,-106,0,-115,0,0,-334,-342,-331,-303,-286,-580,-396,-563,-540,-586,-442,0,0,-504,-494,-496,-586,-367,-586,-237,-327,-586,-434,-586,-475,-476,-466,-463,-462,0,-461,-586,-586,0,0,-397,-537,-22,-21,-586,-586,-50,0,-586,-63,-38,-43,0,0,-63,-63,0,-448,0,0,-586,-468,-436,-326,0,-365,-586,-501,0,-586,-509,0,-140,-134,-114,0,0,0,-278,-281,0,0,-58,0,0,-59,0,-157,-159,-147,-586,-586,-203,0,-181,-200,0,-586,-204,-263,-261,0,-158,-60,-61,0,0,-586,-586,-105,0,0,0,-586,-366,-486,-460,-452,0,0,-586,-586,-52,-19,-48,0,-586,-50,-380,-42,-47,-44,-586,0,0,-443,0,-500,-445,-586,-586,0,0,-270,0,0,-213,-217,-214,-216,-156,-268,-104,-107,0,-444,-19,-19,-53,-54,-19,0,-46,-41,0,-19,-25,-51,-30,-37,0,0,-24,-20,-23,-581
	])

happyCheck :: Happy_Data_Array.Array Int Int
happyCheck = Happy_Data_Array.listArray (0,5672) ([-1,0,3,5,33,44,57,8,5,5,5,12,13,6,88,16,17,6,44,20,44,88,13,35,36,16,29,30,31,32,33,44,61,44,25,51,52,110,67,68,115,51,52,46,47,173,49,50,35,36,56,57,80,81,87,88,35,36,61,35,36,64,65,66,67,68,35,36,56,57,77,35,75,93,81,110,60,86,87,88,54,84,85,114,115,35,89,39,86,87,88,0,35,96,15,115,115,20,242,26,103,19,35,115,90,91,92,93,35,38,39,255,22,115,91,92,93,35,115,115,115,114,115,97,35,114,115,255,115,115,53,29,30,31,32,33,115,105,115,115,92,125,114,115,219,220,115,76,46,47,115,49,50,0,114,115,115,107,29,30,31,32,33,61,107,168,64,65,66,67,68,139,140,105,89,46,47,75,49,50,255,255,255,129,115,100,84,85,255,115,61,89,243,64,65,66,67,68,96,115,115,116,117,134,75,103,137,139,140,130,141,142,143,84,85,115,255,210,89,60,255,252,255,134,255,96,255,255,115,255,115,255,103,115,227,255,255,243,115,255,20,115,255,255,255,255,255,35,255,19,210,211,255,255,255,243,255,255,255,255,255,16,255,252,255,35,255,227,255,255,168,29,30,31,32,33,255,100,255,255,252,240,241,255,125,73,255,255,46,47,255,49,50,116,117,255,255,168,29,30,31,32,33,61,219,220,64,65,66,67,68,100,135,186,187,46,47,75,49,50,139,140,70,255,255,241,84,85,117,255,61,89,134,64,65,66,67,68,96,255,255,218,219,220,75,103,83,84,187,236,237,238,239,84,85,255,243,255,89,29,30,31,32,33,20,96,240,241,255,124,255,119,103,255,30,130,46,47,255,49,50,255,255,74,255,100,99,30,31,32,33,61,139,140,64,65,66,67,68,112,115,116,117,46,47,75,49,50,99,100,168,139,140,18,84,85,255,108,61,89,243,64,65,66,67,68,96,124,30,31,32,33,75,103,131,100,255,168,45,11,12,84,85,124,46,47,89,49,50,130,43,116,117,96,35,30,31,32,33,61,103,100,64,65,66,67,68,114,115,62,135,46,47,75,49,50,83,116,117,98,99,100,84,85,17,18,61,89,43,64,65,66,67,68,96,123,135,255,168,100,75,103,130,39,219,220,15,62,255,84,85,19,101,102,89,116,117,26,27,124,33,96,115,31,255,168,131,255,103,122,123,124,125,126,127,128,129,130,131,132,255,134,43,24,137,117,118,76,141,142,143,80,124,35,35,144,92,15,39,131,115,62,20,210,211,1,168,122,123,124,125,126,127,128,129,130,131,132,243,134,227,60,137,62,24,255,141,142,143,208,209,115,15,168,130,115,36,20,124,58,59,60,15,129,243,131,46,20,255,39,134,92,255,137,115,19,20,141,142,143,24,122,123,124,125,126,127,128,129,130,131,132,75,134,77,75,137,58,59,60,141,142,143,20,84,124,18,24,20,130,129,94,131,255,94,130,115,141,142,143,119,20,255,122,123,124,125,126,127,128,129,130,131,132,60,134,106,107,137,109,255,20,141,142,143,19,15,21,190,191,130,20,11,12,115,21,115,31,119,25,255,122,123,124,125,126,127,128,129,130,131,132,19,134,21,235,137,237,238,239,141,142,143,243,20,60,130,62,35,115,95,255,115,119,15,255,122,123,124,125,126,127,128,129,130,131,132,89,134,20,115,137,124,255,255,141,142,143,100,131,123,94,95,15,115,115,250,130,133,134,22,255,137,115,116,117,141,142,143,130,131,132,115,134,15,19,137,21,124,20,141,142,143,28,129,131,255,185,117,118,133,134,190,191,137,124,19,149,141,142,143,24,131,75,98,99,100,236,237,238,239,163,84,123,243,15,16,115,114,115,130,115,94,6,255,20,255,179,122,123,124,125,126,127,128,129,130,131,132,19,134,21,235,137,237,238,239,141,142,143,243,147,148,98,99,100,39,255,130,255,20,157,255,159,160,161,162,219,220,14,60,61,28,169,170,171,172,237,238,239,255,26,27,243,20,181,123,70,184,72,73,99,100,130,255,255,16,100,194,19,108,197,117,255,200,201,202,203,204,205,28,100,255,116,117,209,212,213,214,16,20,217,19,106,107,221,109,116,117,114,115,227,45,229,43,48,49,233,236,237,238,239,98,99,100,243,115,243,20,245,72,19,248,249,20,251,24,255,254,255,20,255,147,148,177,134,20,152,137,182,155,156,141,142,143,99,161,162,115,103,98,99,100,105,169,170,171,172,125,126,127,128,129,130,131,132,181,134,130,184,137,123,75,124,141,142,143,129,130,194,131,84,197,99,100,200,201,202,203,204,205,94,108,19,115,21,21,212,213,214,25,105,217,20,114,115,221,128,129,130,131,132,227,134,229,19,137,21,233,123,141,142,143,75,20,129,130,130,243,20,245,146,84,248,249,150,251,147,148,254,255,19,94,21,117,99,100,157,20,159,160,161,162,115,108,19,255,21,35,169,170,171,172,25,126,127,128,129,130,131,132,181,134,20,184,137,20,75,130,141,142,143,16,19,194,21,84,197,255,35,200,201,202,203,204,205,94,100,121,115,130,124,212,213,214,10,129,217,131,114,115,221,36,129,130,131,132,227,134,229,83,137,46,233,22,141,142,143,99,100,17,18,130,243,255,245,9,108,248,249,2,251,147,148,254,255,97,98,99,100,3,75,157,20,159,160,161,162,115,19,84,98,99,100,169,170,171,172,15,16,94,36,22,130,131,132,181,134,32,184,137,46,99,100,141,142,143,16,19,194,21,108,197,255,19,200,201,202,203,204,205,53,54,55,115,19,130,212,213,214,75,19,217,21,114,115,221,35,115,84,131,132,227,134,229,19,137,21,233,94,141,142,143,99,100,22,99,100,243,255,245,19,108,248,249,108,251,147,148,254,255,20,152,22,20,155,156,99,100,130,115,161,162,60,61,130,108,1,2,169,170,171,172,38,39,43,131,132,20,134,48,181,137,19,184,21,141,142,143,57,58,129,60,61,194,43,115,197,255,21,200,201,202,203,204,205,19,57,58,115,60,61,212,213,214,134,125,217,137,114,115,221,141,142,143,131,132,227,134,229,19,137,21,233,51,141,142,143,235,35,237,238,239,243,255,245,243,73,248,249,60,251,147,148,254,255,124,19,255,21,55,129,157,131,159,160,161,162,97,98,99,100,36,130,169,170,171,172,4,5,6,7,46,98,99,100,181,13,14,184,98,99,100,98,99,100,98,99,100,194,255,21,197,9,36,200,201,202,203,204,205,75,18,22,46,21,21,212,213,214,84,20,217,22,114,115,221,98,99,100,94,20,227,39,229,19,255,21,233,98,99,100,21,75,98,99,100,22,243,255,245,22,84,248,249,22,251,147,148,254,255,22,94,111,112,113,130,157,22,159,160,161,162,53,54,55,20,36,22,169,170,171,172,53,54,55,22,46,15,16,19,181,21,20,184,98,99,100,130,36,106,107,21,109,194,32,19,197,21,46,200,201,202,203,204,205,75,98,99,100,6,7,212,213,214,84,22,217,22,114,115,221,19,60,21,94,25,227,75,229,98,99,100,233,36,6,7,84,98,99,100,41,42,243,46,245,22,94,248,249,20,251,147,148,254,255,98,99,100,20,19,130,21,158,159,160,161,162,98,99,100,26,27,75,169,170,171,172,21,180,117,182,84,130,15,16,181,124,22,184,166,167,94,21,131,98,99,100,19,194,31,32,197,36,22,200,201,202,203,204,205,26,27,46,192,193,21,212,213,214,26,27,217,22,114,115,221,21,130,60,26,27,227,74,229,26,27,20,233,26,27,125,75,54,55,38,39,70,243,74,245,84,119,248,249,19,251,147,148,254,255,94,6,7,6,7,6,7,158,159,160,161,162,6,7,6,7,25,60,169,170,171,172,19,19,19,117,16,15,16,20,181,130,124,184,21,19,130,19,112,131,99,19,25,194,32,21,197,16,16,200,201,202,203,204,205,130,19,130,2,21,80,212,213,214,88,19,217,20,114,115,221,19,60,83,35,20,227,20,229,9,20,3,233,21,35,22,25,21,19,35,132,43,243,19,245,60,48,248,249,19,251,147,148,254,255,57,58,115,60,61,33,22,158,159,160,161,162,33,20,20,35,19,115,169,170,171,172,20,35,117,111,35,74,20,20,181,124,22,184,125,125,74,25,131,44,15,46,47,194,22,130,197,21,25,200,201,202,203,204,205,19,67,19,21,64,21,212,213,214,35,35,217,124,114,115,221,21,129,78,131,21,227,22,229,21,85,19,233,20,35,16,35,60,60,22,24,60,243,21,245,19,130,248,249,104,251,147,148,254,255,122,16,1,113,39,21,20,35,159,160,161,162,122,83,21,21,19,21,169,170,171,172,84,20,20,25,21,48,60,41,181,121,21,184,69,70,60,72,73,44,21,35,47,194,21,25,197,26,19,200,201,202,203,204,205,19,21,59,16,22,22,212,213,214,21,21,217,19,114,115,221,106,107,78,109,19,227,121,229,21,85,35,233,21,35,86,60,60,48,35,51,60,243,21,245,129,21,248,249,104,251,147,148,254,255,35,21,60,113,35,101,35,60,159,160,161,162,122,128,6,255,6,6,169,170,171,172,255,165,2,3,4,5,6,7,181,9,10,184,243,13,14,15,207,17,234,166,40,194,40,40,197,34,6,200,201,202,203,204,205,40,104,78,6,255,6,212,213,214,144,243,217,164,114,115,221,110,11,11,71,243,227,63,229,255,79,49,233,55,78,255,6,78,110,6,6,110,243,6,245,6,6,248,249,6,251,147,148,254,255,6,11,243,206,155,6,11,11,11,11,161,162,6,193,6,6,63,6,169,170,171,172,255,6,6,15,14,82,78,55,181,6,6,184,113,243,6,151,23,182,19,22,6,194,6,243,197,6,243,200,201,202,203,204,205,255,6,24,255,255,23,212,213,214,6,14,217,15,114,115,221,6,6,10,-1,-1,227,-1,229,-1,-1,-1,233,-1,-1,-1,-1,-1,-1,-1,-1,-1,243,-1,245,-1,-1,248,249,-1,251,147,148,254,255,-1,-1,-1,-1,-1,156,-1,-1,-1,-1,161,162,-1,-1,-1,-1,-1,-1,169,170,171,172,-1,-1,-1,-1,-1,-1,-1,-1,181,-1,-1,184,-1,-1,-1,-1,-1,-1,-1,-1,-1,194,-1,-1,197,-1,-1,200,201,202,203,204,205,-1,-1,-1,114,115,-1,212,213,214,-1,-1,217,-1,-1,-1,221,-1,-1,-1,-1,-1,227,-1,229,-1,-1,-1,233,-1,-1,-1,-1,-1,-1,-1,-1,147,148,-1,245,-1,-1,248,249,-1,251,-1,-1,254,255,161,162,-1,-1,-1,-1,-1,-1,169,170,171,172,-1,-1,-1,-1,-1,-1,-1,-1,181,-1,-1,184,-1,-1,-1,-1,-1,-1,-1,-1,-1,194,-1,-1,197,-1,-1,200,201,202,203,204,205,-1,-1,-1,114,115,-1,212,213,214,-1,-1,217,-1,-1,-1,221,-1,-1,-1,-1,-1,227,-1,229,-1,-1,-1,233,-1,-1,-1,-1,-1,-1,-1,-1,147,148,-1,245,-1,-1,248,249,-1,251,-1,-1,254,255,161,162,-1,-1,-1,-1,-1,-1,169,170,171,172,-1,-1,-1,-1,-1,-1,-1,-1,181,114,115,184,-1,-1,-1,-1,-1,-1,-1,-1,-1,194,-1,-1,197,-1,-1,200,201,202,203,204,205,-1,-1,-1,-1,-1,-1,212,213,214,-1,-1,217,-1,-1,-1,221,-1,-1,-1,-1,-1,227,-1,229,-1,-1,-1,233,-1,-1,-1,169,170,171,172,-1,-1,-1,-1,245,-1,-1,248,249,-1,251,184,-1,254,255,-1,-1,-1,-1,-1,-1,194,-1,-1,197,-1,-1,200,201,202,203,204,205,114,115,-1,-1,-1,-1,212,213,214,-1,-1,217,-1,-1,-1,221,-1,-1,-1,-1,-1,227,-1,229,-1,-1,-1,233,-1,-1,-1,-1,-1,-1,-1,-1,-1,243,-1,245,-1,-1,248,249,-1,251,-1,-1,254,255,-1,-1,-1,-1,-1,169,170,171,172,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,184,-1,-1,-1,-1,-1,-1,-1,-1,-1,194,-1,-1,197,-1,-1,200,201,202,203,204,205,-1,-1,-1,-1,-1,-1,212,213,214,-1,-1,217,-1,-1,-1,221,-1,-1,-1,-1,-1,227,-1,229,-1,-1,-1,233,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,245,-1,-1,248,249,-1,251,-1,115,254,255,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,115,145,-1,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,115,145,-1,118,119,-1,121,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,115,-1,141,142,143,-1,145,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,-1,-1,-1,-1,-1,-1,255,174,175,176,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,115,174,175,176,119,-1,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,115,-1,-1,-1,-1,-1,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,115,-1,141,142,143,-1,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,188,189,137,115,-1,-1,141,142,143,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,183,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,-1,-1,-1,-1,-1,195,196,-1,-1,115,-1,-1,255,-1,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,-1,253,-1,255,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,222,223,-1,-1,-1,-1,-1,-1,-1,-1,255,-1,-1,-1,-1,-1,215,216,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,115,-1,255,195,196,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,115,-1,255,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,-1,-1,-1,-1,-1,-1,-1,115,-1,-1,-1,255,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,198,199,141,142,143,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,115,-1,-1,-1,-1,195,196,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,255,134,-1,-1,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,255,134,-1,-1,137,-1,-1,-1,141,142,143,-1,231,232,-1,115,-1,-1,-1,175,176,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,-1,-1,-1,141,142,143,-1,-1,115,-1,-1,-1,119,231,232,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,255,115,-1,-1,-1,-1,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,230,137,255,-1,-1,141,142,143,-1,145,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,189,-1,255,-1,-1,-1,115,-1,-1,-1,-1,231,232,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,115,-1,-1,141,142,143,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,-1,-1,-1,-1,-1,-1,-1,-1,255,-1,-1,-1,-1,115,-1,-1,183,-1,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,115,255,141,142,143,-1,145,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,138,-1,-1,141,142,143,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,115,-1,228,-1,-1,-1,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,115,-1,-1,141,142,143,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,255,141,142,143,115,-1,-1,-1,-1,-1,196,122,123,124,125,126,127,128,129,130,131,132,-1,134,255,-1,137,-1,115,-1,141,142,143,-1,145,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,-1,141,142,143,-1,-1,-1,223,-1,-1,-1,-1,-1,-1,-1,-1,255,-1,115,-1,-1,-1,-1,216,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,199,134,-1,255,137,-1,-1,115,141,142,143,-1,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,255,141,142,143,-1,145,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,183,115,-1,-1,-1,-1,255,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,115,232,141,142,143,-1,145,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,115,255,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,255,-1,141,142,143,-1,-1,-1,-1,-1,-1,-1,-1,-1,176,-1,-1,-1,-1,115,-1,-1,-1,-1,-1,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,183,141,142,143,-1,145,-1,115,-1,-1,-1,-1,-1,-1,122,123,124,125,126,127,128,129,130,131,132,255,134,-1,-1,137,-1,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,255,134,-1,-1,137,-1,-1,-1,141,142,143,-1,145,-1,-1,-1,-1,-1,-1,-1,115,-1,-1,255,-1,-1,183,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,255,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,-1,115,141,142,143,-1,-1,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,-1,115,-1,141,142,143,-1,255,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,-1,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,255,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,255,-1,115,141,142,143,-1,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,-1,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,-1,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,255,-1,115,141,142,143,-1,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,-1,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,-1,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,255,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,-1,137,255,-1,115,141,142,143,-1,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,-1,115,-1,141,142,143,-1,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,-1,255,137,115,-1,-1,141,142,143,-1,122,123,124,125,126,127,128,129,130,131,132,-1,134,8,255,137,11,12,-1,141,142,143,-1,18,35,20,-1,-1,-1,-1,-1,-1,-1,44,-1,30,47,-1,255,-1,-1,-1,-1,-1,-1,56,-1,-1,8,44,-1,11,12,-1,-1,-1,-1,-1,18,70,20,-1,-1,255,-1,25,-1,78,-1,-1,30,-1,-1,-1,85,86,-1,-1,-1,-1,75,-1,-1,78,44,-1,-1,255,-1,84,85,102,-1,104,-1,106,-1,-1,-1,94,-1,-1,113,-1,-1,-1,-1,-1,119,104,255,122,-1,-1,-1,75,-1,-1,78,114,-1,-1,117,118,84,85,-1,-1,123,124,-1,-1,-1,255,94,130,131,-1,8,-1,-1,11,12,-1,104,15,-1,-1,18,-1,20,-1,-1,-1,114,-1,-1,117,118,-1,30,-1,-1,8,124,-1,11,12,-1,-1,130,131,-1,18,44,20,-1,-1,-1,-1,25,-1,-1,-1,-1,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,44,-1,-1,-1,-1,-1,75,-1,8,78,-1,11,12,-1,-1,84,85,-1,18,-1,20,-1,-1,-1,-1,94,-1,-1,-1,-1,30,75,-1,-1,78,104,-1,-1,-1,-1,84,85,-1,-1,44,114,-1,-1,117,118,94,-1,-1,-1,-1,124,-1,-1,-1,-1,104,130,131,-1,-1,-1,-1,-1,-1,-1,114,-1,-1,117,118,75,-1,-1,78,8,124,-1,11,12,84,85,130,131,-1,18,-1,20,-1,-1,94,-1,-1,-1,-1,-1,-1,30,-1,-1,104,-1,-1,-1,-1,-1,-1,-1,-1,-1,114,44,-1,117,118,-1,-1,-1,-1,8,124,-1,11,12,-1,-1,130,131,-1,18,-1,20,-1,-1,8,-1,-1,11,12,-1,-1,30,75,-1,18,78,20,-1,-1,-1,-1,84,85,-1,-1,44,30,-1,-1,-1,-1,94,-1,-1,-1,-1,-1,-1,-1,-1,44,104,-1,-1,-1,-1,-1,-1,-1,-1,-1,114,-1,-1,117,118,75,-1,-1,78,-1,124,-1,-1,-1,84,85,130,131,11,12,75,-1,-1,78,94,18,-1,20,-1,84,85,-1,-1,-1,104,-1,-1,30,-1,94,-1,-1,-1,-1,114,-1,-1,117,118,104,-1,44,-1,-1,124,-1,-1,-1,-1,114,130,131,117,118,-1,-1,-1,-1,-1,124,37,-1,-1,-1,-1,130,131,11,12,-1,-1,-1,75,-1,51,78,20,54,-1,-1,-1,84,85,-1,-1,-1,30,-1,-1,66,-1,94,-1,-1,-1,-1,-1,-1,-1,76,44,104,79,80,81,-1,-1,-1,-1,-1,87,114,-1,-1,117,118,93,-1,95,-1,97,124,99,-1,-1,-1,103,130,131,-1,-1,75,-1,110,78,-1,-1,-1,-1,-1,84,85,-1,120,-1,-1,123,-1,-1,126,94,-1,-1,-1,-1,-1,133,134,-1,-1,104,-1,36,-1,-1,-1,40,-1,42,-1,114,45,-1,117,118,49,50,51,52,-1,124,55,-1,-1,-1,-1,130,131,-1,63,-1,65,-1,67,-1,69,-1,71,-1,73,-1,75,-1,-1,-1,-1,-1,-1,82,-1,84,-1,36,-1,-1,89,40,91,42,-1,94,45,96,-1,98,49,50,51,52,-1,-1,105,-1,-1,108,109,-1,111,-1,63,-1,65,116,67,-1,69,-1,71,-1,73,-1,75,-1,-1,128,-1,130,-1,82,133,84,-1,-1,-1,-1,89,-1,91,-1,37,94,-1,96,-1,98,-1,44,-1,46,47,-1,105,-1,51,108,109,54,-1,-1,-1,-1,-1,116,-1,-1,-1,64,-1,66,-1,-1,-1,-1,-1,128,-1,130,-1,76,133,78,79,80,81,-1,-1,-1,85,-1,87,-1,-1,-1,-1,-1,93,-1,95,-1,97,37,99,-1,-1,-1,103,104,-1,-1,-1,-1,48,110,-1,51,113,-1,54,-1,-1,-1,-1,120,60,122,123,-1,-1,126,66,-1,-1,37,-1,-1,133,-1,-1,-1,76,-1,-1,79,80,81,-1,51,-1,-1,54,87,-1,-1,-1,-1,60,93,-1,95,-1,97,66,99,-1,37,-1,103,-1,-1,-1,-1,76,-1,110,79,80,81,-1,51,-1,-1,54,87,120,-1,-1,123,-1,93,126,95,-1,97,66,99,-1,133,-1,103,-1,-1,-1,-1,76,-1,110,79,80,81,-1,37,-1,-1,-1,87,120,-1,-1,123,-1,93,126,95,-1,97,-1,99,54,133,-1,103,-1,-1,-1,-1,-1,-1,110,-1,66,41,-1,-1,44,-1,-1,47,120,-1,-1,123,-1,79,126,81,56,-1,-1,-1,-1,133,-1,-1,-1,-1,-1,93,-1,95,70,97,-1,99,-1,-1,-1,103,78,-1,-1,-1,-1,-1,110,85,86,-1,-1,-1,-1,-1,-1,-1,120,44,-1,123,47,-1,126,101,102,-1,104,44,106,56,47,-1,-1,-1,-1,113,-1,-1,-1,56,-1,119,-1,70,122,-1,-1,-1,-1,-1,-1,78,-1,70,-1,-1,-1,-1,85,86,-1,78,-1,-1,-1,-1,-1,-1,85,-1,-1,-1,-1,-1,-1,102,-1,104,-1,106,-1,-1,-1,-1,-1,102,113,104,-1,106,-1,-1,119,-1,-1,122,113,-1,-1,-1,-1,-1,119,-1,-1,122,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
	])

happyTable :: Happy_Data_Array.Array Int Int
happyTable = Happy_Data_Array.listArray (0,5672) ([0,52,279,498,6,446,1003,280,814,821,952,281,282,343,103,283,284,749,443,285,442,838,1016,428,429,1017,119,120,121,122,123,441,7,439,1018,517,518,541,8,9,61,830,518,124,125,261,126,127,552,429,833,834,809,810,817,486,491,429,7,761,429,128,129,130,8,9,1004,429,944,945,824,58,131,636,825,692,464,484,485,486,558,132,133,750,14,58,134,106,492,485,486,-1,58,135,779,258,737,377,601,310,136,789,58,430,254,255,256,257,58,108,109,602,103,499,635,256,257,58,499,499,499,344,14,1008,58,750,14,262,430,258,669,905,120,121,122,123,430,827,258,430,107,461,750,14,739,68,430,480,124,125,736,126,127,-1,344,14,597,782,904,120,121,122,123,7,848,137,128,129,130,8,9,828,514,958,59,124,125,131,126,127,69,104,542,51,188,60,132,133,104,735,7,134,835,128,129,130,8,9,135,597,61,62,63,588,131,136,201,828,514,780,202,203,204,132,133,734,440,345,134,460,693,868,104,-6,752,135,10,811,217,440,922,440,136,917,346,69,69,835,61,519,59,597,440,69,440,519,104,58,811,942,625,626,138,69,286,835,5,104,69,69,69,796,347,751,1019,58,752,346,69,69,137,984,120,121,122,123,69,60,69,69,1012,598,599,752,461,701,69,515,124,125,69,126,127,62,63,347,69,137,979,120,121,122,123,7,67,68,128,129,130,8,9,60,393,335,336,124,125,131,126,127,513,514,455,515,587,870,132,133,297,69,7,134,-1,128,129,130,8,9,135,69,69,362,363,68,131,136,438,439,719,276,277,219,220,132,133,69,221,138,134,978,120,121,122,123,239,135,745,599,69,524,69,456,136,69,240,525,124,125,69,126,127,69,337,539,138,60,503,490,121,122,123,7,829,514,128,129,130,8,9,504,61,62,63,124,125,131,126,127,449,244,137,957,514,837,132,133,337,540,7,134,377,128,129,130,8,9,135,50,790,121,122,123,131,136,52,60,515,137,1005,-586,-586,132,133,524,124,125,134,126,127,525,433,62,63,135,58,784,121,122,123,7,136,60,128,129,130,8,9,344,14,434,393,124,125,131,126,127,1006,62,63,340,243,244,132,133,407,408,7,134,770,128,129,130,8,9,135,368,393,138,137,60,131,136,369,106,67,68,456,434,515,132,133,759,419,420,134,62,63,457,458,50,276,135,188,760,138,137,52,515,136,435,190,191,192,193,194,195,196,197,198,199,69,200,999,488,201,-586,-586,12,202,203,204,13,-586,58,-223,421,107,182,106,-586,188,434,183,625,876,268,137,435,190,191,192,193,194,195,196,197,198,199,715,200,346,303,201,304,474,138,202,203,204,341,342,188,179,137,-586,217,246,173,50,474,475,476,177,51,377,52,247,173,347,155,586,107,138,201,188,496,170,202,203,204,497,435,190,191,192,193,194,195,196,197,198,199,511,200,512,86,201,859,475,476,202,203,204,467,88,50,837,468,838,-586,51,513,52,138,91,253,188,208,203,204,477,266,436,478,190,191,192,193,194,195,196,197,198,199,804,200,290,291,201,162,138,265,202,203,204,622,175,623,703,319,248,173,379,380,188,392,217,624,477,393,436,478,190,191,192,193,194,195,196,197,198,199,-298,200,-298,349,201,350,219,220,202,203,204,221,261,303,449,304,-298,188,882,587,217,477,231,69,478,190,191,192,193,194,195,196,197,198,199,59,200,254,188,201,50,320,436,202,203,204,60,52,331,637,638,569,188,217,209,332,639,640,570,210,201,61,62,63,202,203,204,578,198,199,188,200,172,659,201,660,50,173,202,203,204,843,51,52,479,317,381,382,639,640,318,319,201,50,432,64,202,203,204,433,52,86,340,243,244,372,277,219,220,65,88,368,221,405,406,217,13,14,369,188,91,464,479,250,69,66,723,190,191,192,193,194,195,196,197,198,199,596,200,655,624,201,350,219,220,202,203,204,221,15,16,842,243,244,155,320,267,479,242,268,69,269,270,271,19,67,68,461,313,314,841,20,21,22,23,218,219,220,641,462,458,221,236,24,331,465,25,158,159,449,244,332,205,69,333,60,26,334,453,27,232,69,28,29,30,31,32,33,962,60,641,632,63,724,34,35,36,718,235,37,719,160,161,38,162,62,63,13,14,39,553,40,213,554,555,41,676,277,219,220,842,243,244,221,188,272,234,43,358,955,44,45,233,46,956,69,47,48,215,205,15,16,310,883,208,298,201,311,299,300,202,203,204,149,18,19,188,150,842,243,244,359,20,21,22,23,573,193,194,195,196,197,198,199,24,200,188,25,201,360,86,50,202,203,204,361,362,26,52,88,27,449,244,28,29,30,31,32,33,91,450,645,188,646,861,34,35,36,393,359,37,207,13,14,38,575,196,197,198,199,39,200,40,634,201,635,41,360,202,203,204,-586,187,361,362,100,301,186,43,250,-586,44,45,251,46,15,16,47,48,596,-586,631,185,449,244,671,170,269,270,271,19,188,678,628,587,629,58,20,21,22,23,393,574,194,195,196,197,198,199,24,200,489,25,201,471,86,-586,202,203,204,470,619,26,620,88,27,205,-180,28,29,30,31,32,33,91,453,733,188,449,50,34,35,36,418,51,37,52,13,14,38,246,576,197,198,199,39,200,40,446,201,247,41,419,202,203,204,449,244,407,408,100,272,205,43,417,677,44,45,404,46,15,16,47,48,471,472,243,244,409,86,701,377,269,270,271,19,188,375,88,259,243,244,20,21,22,23,405,406,91,246,372,577,198,199,24,200,374,25,201,247,449,244,202,203,204,371,612,26,613,536,27,205,370,28,29,30,31,32,33,520,521,522,188,349,248,34,35,36,86,610,37,611,13,14,38,58,217,88,581,199,39,200,40,596,201,597,41,91,202,203,204,449,244,339,449,244,272,205,43,335,535,44,45,690,46,15,16,47,48,317,695,756,327,299,300,449,244,-586,188,18,19,313,314,452,851,53,54,20,21,22,23,108,109,-383,580,199,317,200,-383,24,201,592,25,593,202,203,204,-383,-383,51,-383,-383,26,307,188,27,205,297,28,29,30,31,32,33,296,665,666,188,313,314,34,35,36,921,461,37,201,13,14,38,202,203,204,579,199,39,200,40,551,201,552,41,680,202,203,204,728,58,350,219,220,301,205,43,221,662,44,45,671,46,15,16,47,48,50,711,69,712,673,51,898,52,269,270,271,19,507,472,243,244,246,658,20,21,22,23,411,412,413,414,247,242,243,244,24,415,416,25,325,243,244,530,243,244,812,243,244,26,205,652,27,287,246,28,29,30,31,32,33,86,288,644,247,289,621,34,35,36,88,317,37,708,13,14,38,803,243,244,91,607,39,155,40,592,587,703,41,791,243,244,601,86,785,243,244,643,272,205,43,630,88,44,45,618,46,15,16,47,48,617,91,775,776,777,248,896,616,269,270,271,19,862,521,522,317,246,887,20,21,22,23,947,521,522,615,532,223,224,711,24,872,225,25,938,243,244,452,246,290,291,594,162,26,226,856,27,857,247,28,29,30,31,32,33,86,963,243,244,55,56,34,35,36,88,614,37,609,13,14,38,854,227,855,91,506,39,86,40,961,243,244,41,246,55,278,88,956,243,244,179,180,272,247,43,608,91,44,45,590,46,15,16,47,48,1021,243,244,583,919,248,920,992,986,270,271,19,1020,243,244,683,458,86,20,21,22,23,573,662,228,663,88,248,223,224,24,50,549,25,304,305,91,572,52,1032,243,244,571,26,352,226,27,246,548,28,29,30,31,32,33,682,458,247,655,656,546,34,35,36,533,458,37,545,13,14,38,544,452,227,689,458,39,530,40,688,458,539,41,685,458,461,86,832,522,823,109,533,272,530,43,88,528,44,45,517,46,15,16,47,48,91,55,989,55,1027,55,1026,991,986,270,271,19,55,1025,55,1031,506,527,20,21,22,23,509,507,494,228,501,223,224,498,24,449,50,25,819,494,248,814,809,52,808,509,393,26,226,803,27,802,800,28,29,30,31,32,33,801,799,798,794,797,793,34,35,36,790,787,37,539,13,14,38,775,227,769,58,767,39,766,40,417,765,409,41,758,58,754,393,749,747,58,745,-384,272,695,43,727,-384,44,45,722,46,15,16,47,48,-384,-384,721,-384,-384,276,709,985,986,270,271,19,707,706,699,58,695,705,20,21,22,23,539,58,228,697,58,530,607,896,24,50,895,25,461,461,530,393,52,111,885,482,112,26,882,658,27,879,880,28,29,30,31,32,33,876,878,747,873,483,866,34,35,36,58,58,37,50,13,14,38,864,51,113,52,859,39,858,40,853,114,850,41,849,58,823,58,460,464,832,820,827,272,821,43,950,449,44,45,115,46,15,16,47,48,951,949,943,116,155,937,940,58,667,270,271,19,484,936,933,932,925,931,20,21,22,23,935,607,928,506,915,912,910,984,24,978,977,25,156,157,983,158,159,111,976,58,112,26,974,393,27,972,971,28,29,30,31,32,33,695,968,969,960,967,966,34,35,36,965,961,37,950,13,14,38,160,161,113,162,942,39,995,40,1003,114,58,41,998,58,989,-49,464,912,58,988,460,272,1012,43,51,1011,44,45,115,46,15,16,47,48,58,1009,1025,116,58,1031,58,1030,666,270,271,19,117,1034,118,5,117,274,20,21,22,23,107,273,423,424,411,412,413,414,24,425,426,25,236,415,416,427,240,428,237,211,177,26,175,173,27,183,489,28,29,30,31,32,33,170,468,447,308,684,674,34,35,36,409,377,37,669,13,14,38,537,534,528,525,546,39,509,40,681,501,816,41,794,494,680,787,815,783,780,773,782,272,772,43,727,699,44,45,697,46,15,16,47,48,691,687,763,725,17,901,686,906,903,902,18,19,900,889,873,869,861,846,20,21,22,23,850,845,840,844,839,951,953,794,24,943,940,25,937,946,929,923,910,915,908,981,980,26,1001,926,27,998,996,28,29,30,31,32,33,913,993,990,912,907,1022,34,35,36,1013,1015,37,1014,13,14,38,1009,1028,1023,0,0,39,0,40,0,0,0,41,0,0,0,0,0,0,0,0,0,42,0,43,0,0,44,45,0,46,15,16,47,48,0,0,0,0,0,673,0,0,0,0,101,19,0,0,0,0,0,0,20,21,22,23,0,0,0,0,0,0,0,0,24,0,0,25,0,0,0,0,0,0,0,0,0,26,0,0,27,0,0,28,29,30,31,32,33,0,0,0,13,14,0,34,35,36,0,0,37,0,0,0,38,0,0,0,0,0,39,0,40,0,0,0,41,0,0,0,0,0,0,0,0,15,16,0,43,0,0,44,45,0,46,0,0,47,48,101,19,0,0,0,0,0,0,20,21,22,23,0,0,0,0,0,0,0,0,24,0,0,25,0,0,0,0,0,0,0,0,0,26,0,0,27,0,0,28,29,30,31,32,33,0,0,0,13,14,0,34,35,36,0,0,37,0,0,0,38,0,0,0,0,0,39,0,40,0,0,0,41,0,0,0,0,0,0,0,0,15,16,0,43,0,0,44,45,0,46,0,0,47,48,307,19,0,0,0,0,0,0,20,21,22,23,0,0,0,0,0,0,0,0,24,13,14,25,0,0,0,0,0,0,0,0,0,26,0,0,27,0,0,28,29,30,31,32,33,0,0,0,0,0,0,34,35,36,0,0,37,0,0,0,38,0,0,0,0,0,39,0,40,0,0,0,41,0,0,0,729,21,22,23,0,0,0,0,43,0,0,44,45,0,46,25,0,47,48,0,0,0,0,0,0,26,0,0,27,0,0,28,29,30,31,32,33,13,14,0,0,0,0,34,35,36,0,0,37,0,0,0,38,0,0,0,0,0,39,0,40,0,0,0,41,0,0,0,0,0,0,0,0,0,730,0,43,0,0,44,45,0,46,0,0,47,731,0,0,0,0,0,729,21,22,23,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,26,0,0,27,0,0,28,29,30,31,32,33,0,0,0,0,0,0,34,35,36,0,0,37,0,0,0,38,0,0,0,0,0,39,0,40,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,43,0,0,44,45,0,46,0,188,47,731,384,385,386,387,388,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,188,389,0,384,385,660,387,388,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,188,389,0,384,385,0,754,388,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,188,0,202,203,204,0,389,646,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,188,0,0,202,203,204,0,646,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,0,0,0,0,0,0,390,647,648,649,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,743,648,649,890,0,390,891,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,188,0,0,0,0,0,390,352,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,188,0,202,203,204,0,650,321,190,191,192,193,194,195,196,197,198,199,0,200,892,893,201,188,0,0,202,203,204,650,364,190,191,192,193,194,195,196,197,198,199,0,200,0,382,201,188,0,0,202,203,204,0,354,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,0,0,0,0,0,375,323,0,0,188,0,0,479,0,0,0,321,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,0,383,0,205,0,0,0,0,0,0,0,0,0,0,0,0,0,365,366,0,0,0,0,0,0,0,0,324,0,0,0,0,0,355,356,0,0,0,0,0,0,0,0,0,0,0,0,0,188,0,205,339,323,0,0,327,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,188,0,205,202,203,204,0,321,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,0,0,0,0,0,0,0,188,0,0,0,324,0,0,603,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,328,329,202,203,204,0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,322,323,603,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,188,0,202,203,204,0,0,646,190,191,192,193,194,195,196,197,198,199,205,200,0,0,201,188,0,0,202,203,204,0,228,190,191,192,193,194,195,196,197,198,199,324,200,0,0,201,0,0,0,202,203,204,0,675,605,0,188,0,0,0,885,649,0,603,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,0,0,0,202,203,204,0,0,188,0,0,0,890,604,605,891,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,205,188,0,0,0,0,0,0,215,190,191,192,193,194,195,196,197,198,199,0,200,0,229,201,650,0,0,202,203,204,0,216,0,0,0,0,0,0,0,0,0,0,0,0,0,974,0,205,0,0,0,188,0,0,0,0,928,605,352,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,188,0,0,202,203,204,205,314,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,0,0,0,0,0,0,0,0,479,0,0,0,0,188,0,0,353,0,0,0,215,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,188,205,202,203,204,0,631,583,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,584,0,0,202,203,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,0,315,0,0,0,205,321,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,188,0,0,202,203,204,205,364,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,188,0,0,202,203,204,0,354,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,205,202,203,204,188,0,0,0,0,0,747,215,190,191,192,193,194,195,196,197,198,199,0,200,205,0,201,0,188,0,202,203,204,0,722,327,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,0,202,203,204,0,0,0,740,0,0,0,0,0,0,0,0,324,0,188,0,0,0,0,733,0,603,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,352,190,191,192,193,194,195,196,197,198,199,712,200,0,205,201,0,0,188,202,203,204,0,0,0,215,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,205,202,203,204,0,880,0,0,0,0,0,0,0,0,0,0,0,0,897,188,0,0,0,0,205,0,215,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,188,899,202,203,204,0,925,646,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,188,205,0,202,203,204,0,352,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,205,0,202,203,204,0,0,0,0,0,0,0,0,0,920,0,0,0,0,188,0,0,0,0,0,205,215,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,916,202,203,204,0,972,0,188,0,0,0,0,0,0,352,190,191,192,193,194,195,196,197,198,199,205,200,0,0,201,0,188,0,202,203,204,0,0,215,190,191,192,193,194,195,196,197,198,199,205,200,0,0,201,0,0,0,202,203,204,0,995,0,0,0,0,0,0,0,188,0,0,205,0,0,969,263,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,188,0,0,202,203,204,0,248,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,205,188,0,202,203,204,0,0,213,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,0,188,202,203,204,0,0,205,189,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,0,188,0,202,203,204,0,205,444,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,188,0,0,202,203,204,0,594,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,585,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,0,188,0,202,203,204,0,0,806,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,805,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,205,188,0,202,203,204,0,0,771,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,205,0,188,202,203,204,0,0,0,769,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,767,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,0,188,0,202,203,204,0,0,762,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,760,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,0,188,0,202,203,204,0,0,756,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,742,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,205,0,188,202,203,204,0,0,0,741,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,0,188,0,202,203,204,0,0,738,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,714,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,0,188,0,202,203,204,0,0,713,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,888,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,887,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,205,188,0,202,203,204,0,0,867,190,191,192,193,194,195,196,197,198,199,0,200,0,0,201,205,0,188,202,203,204,0,0,0,866,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,0,188,0,202,203,204,0,0,864,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,933,190,191,192,193,194,195,196,197,198,199,0,200,0,205,201,188,0,0,202,203,204,0,1000,190,191,192,193,194,195,196,197,198,199,0,200,395,205,201,379,380,0,202,203,204,0,396,58,397,0,0,0,0,0,0,0,111,0,398,112,0,205,0,0,0,0,0,0,164,0,0,395,399,0,379,380,0,0,0,0,0,396,165,397,0,0,205,0,505,0,113,0,0,398,0,0,0,114,166,0,0,0,0,86,0,0,400,399,0,0,205,0,88,401,167,0,115,0,168,0,0,0,91,0,0,116,0,0,0,0,0,169,402,205,117,0,0,0,86,0,0,400,403,0,0,381,382,88,401,0,0,653,50,0,0,0,205,91,654,52,0,395,0,0,379,380,0,402,550,0,0,396,0,397,0,0,0,403,0,0,381,382,0,398,0,0,395,50,0,379,380,0,0,591,52,0,396,399,397,0,0,0,0,505,0,0,0,0,398,0,0,0,0,0,0,0,0,0,0,0,0,0,399,0,0,0,0,0,86,0,-586,400,0,-586,-586,0,0,88,401,0,-586,0,-586,0,0,0,0,91,0,0,0,0,-586,86,0,0,400,402,0,0,0,0,88,401,0,0,-586,403,0,0,381,382,91,0,0,0,0,50,0,0,0,0,402,267,52,0,0,0,0,0,0,0,403,0,0,381,382,-586,0,0,-586,395,50,0,379,380,-586,-586,267,52,0,396,0,397,0,0,-586,0,0,0,0,0,0,398,0,0,-586,0,0,0,0,0,0,0,0,0,-586,399,0,-586,-586,0,0,0,0,-586,-586,0,-586,-586,0,0,-586,-586,0,-586,0,607,0,0,395,0,0,379,380,0,0,-586,86,0,396,400,397,0,0,0,0,88,401,0,0,-586,398,0,0,0,0,91,0,0,0,0,0,0,0,0,399,402,0,0,0,0,0,0,0,0,0,403,0,0,381,382,-586,0,0,-586,0,50,0,0,0,-586,-586,267,52,379,380,86,0,0,400,-586,717,0,397,0,88,401,0,0,0,-586,0,0,398,0,91,0,0,0,0,-586,0,0,-586,-586,402,0,399,0,0,-586,0,0,0,0,403,-586,-586,381,382,0,0,0,0,0,50,140,0,0,0,0,710,52,379,380,0,0,0,86,0,77,400,397,141,0,0,0,88,401,0,0,0,398,0,0,142,0,91,0,0,0,0,0,0,0,12,399,402,143,13,144,0,0,0,0,0,145,403,0,0,381,382,146,0,147,0,148,50,149,0,0,0,150,267,52,0,0,86,0,151,400,0,0,0,0,0,88,401,0,152,0,0,153,0,0,154,91,0,0,0,0,0,155,-63,0,0,402,0,71,0,0,0,72,0,73,0,403,74,0,381,382,75,76,77,78,0,50,79,0,0,0,0,267,52,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,0,0,0,0,0,87,0,88,0,71,0,0,89,72,90,73,0,91,74,92,0,93,75,76,77,78,0,0,94,0,0,95,96,0,97,0,80,0,81,98,82,0,83,0,84,0,875,0,86,0,0,99,0,100,0,87,101,88,0,0,0,0,89,0,90,0,140,91,0,92,0,93,0,-586,0,-586,-586,0,94,0,77,95,96,141,0,0,0,0,0,98,0,0,0,-586,0,142,0,0,0,0,0,99,0,100,0,12,101,-586,143,13,144,0,0,0,-586,0,145,0,0,0,0,0,146,0,147,0,148,140,149,0,0,0,150,-586,0,0,0,0,-63,151,0,77,-586,0,141,0,0,0,0,152,-63,-586,153,0,0,154,142,0,0,140,0,0,155,0,0,0,12,0,0,143,13,144,0,77,0,0,141,145,0,0,0,0,-63,146,0,147,0,148,142,149,0,140,0,150,0,0,0,0,12,0,151,143,13,144,0,77,0,0,141,145,152,0,0,153,0,146,154,147,0,148,142,149,0,155,0,150,0,0,0,0,12,0,151,143,13,144,0,557,0,0,0,145,152,0,0,153,0,146,154,147,0,148,0,149,558,155,0,150,0,0,0,0,0,0,151,0,559,293,0,0,111,0,0,112,152,0,0,153,0,560,154,561,164,0,0,0,0,155,0,0,0,0,0,562,0,563,165,564,0,149,0,0,0,150,113,0,0,0,0,0,565,114,294,0,0,0,0,0,0,0,566,111,0,567,112,0,568,295,167,0,115,111,168,164,112,0,0,0,0,116,0,0,0,164,0,169,0,165,117,0,0,0,0,0,0,113,0,165,0,0,0,0,114,166,0,113,0,0,0,0,0,0,114,0,0,0,0,0,0,167,0,115,0,168,0,0,0,0,0,167,116,115,0,168,0,0,169,0,0,117,116,0,0,0,0,0,169,0,0,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	])

happyReduceArr = Happy_Data_Array.array (4, 585) [
	(4 , happyReduce_4),
	(5 , happyReduce_5),
	(6 , happyReduce_6),
	(7 , happyReduce_7),
	(8 , happyReduce_8),
	(9 , happyReduce_9),
	(10 , happyReduce_10),
	(11 , happyReduce_11),
	(12 , happyReduce_12),
	(13 , happyReduce_13),
	(14 , happyReduce_14),
	(15 , happyReduce_15),
	(16 , happyReduce_16),
	(17 , happyReduce_17),
	(18 , happyReduce_18),
	(19 , happyReduce_19),
	(20 , happyReduce_20),
	(21 , happyReduce_21),
	(22 , happyReduce_22),
	(23 , happyReduce_23),
	(24 , happyReduce_24),
	(25 , happyReduce_25),
	(26 , happyReduce_26),
	(27 , happyReduce_27),
	(28 , happyReduce_28),
	(29 , happyReduce_29),
	(30 , happyReduce_30),
	(31 , happyReduce_31),
	(32 , happyReduce_32),
	(33 , happyReduce_33),
	(34 , happyReduce_34),
	(35 , happyReduce_35),
	(36 , happyReduce_36),
	(37 , happyReduce_37),
	(38 , happyReduce_38),
	(39 , happyReduce_39),
	(40 , happyReduce_40),
	(41 , happyReduce_41),
	(42 , happyReduce_42),
	(43 , happyReduce_43),
	(44 , happyReduce_44),
	(45 , happyReduce_45),
	(46 , happyReduce_46),
	(47 , happyReduce_47),
	(48 , happyReduce_48),
	(49 , happyReduce_49),
	(50 , happyReduce_50),
	(51 , happyReduce_51),
	(52 , happyReduce_52),
	(53 , happyReduce_53),
	(54 , happyReduce_54),
	(55 , happyReduce_55),
	(56 , happyReduce_56),
	(57 , happyReduce_57),
	(58 , happyReduce_58),
	(59 , happyReduce_59),
	(60 , happyReduce_60),
	(61 , happyReduce_61),
	(62 , happyReduce_62),
	(63 , happyReduce_63),
	(64 , happyReduce_64),
	(65 , happyReduce_65),
	(66 , happyReduce_66),
	(67 , happyReduce_67),
	(68 , happyReduce_68),
	(69 , happyReduce_69),
	(70 , happyReduce_70),
	(71 , happyReduce_71),
	(72 , happyReduce_72),
	(73 , happyReduce_73),
	(74 , happyReduce_74),
	(75 , happyReduce_75),
	(76 , happyReduce_76),
	(77 , happyReduce_77),
	(78 , happyReduce_78),
	(79 , happyReduce_79),
	(80 , happyReduce_80),
	(81 , happyReduce_81),
	(82 , happyReduce_82),
	(83 , happyReduce_83),
	(84 , happyReduce_84),
	(85 , happyReduce_85),
	(86 , happyReduce_86),
	(87 , happyReduce_87),
	(88 , happyReduce_88),
	(89 , happyReduce_89),
	(90 , happyReduce_90),
	(91 , happyReduce_91),
	(92 , happyReduce_92),
	(93 , happyReduce_93),
	(94 , happyReduce_94),
	(95 , happyReduce_95),
	(96 , happyReduce_96),
	(97 , happyReduce_97),
	(98 , happyReduce_98),
	(99 , happyReduce_99),
	(100 , happyReduce_100),
	(101 , happyReduce_101),
	(102 , happyReduce_102),
	(103 , happyReduce_103),
	(104 , happyReduce_104),
	(105 , happyReduce_105),
	(106 , happyReduce_106),
	(107 , happyReduce_107),
	(108 , happyReduce_108),
	(109 , happyReduce_109),
	(110 , happyReduce_110),
	(111 , happyReduce_111),
	(112 , happyReduce_112),
	(113 , happyReduce_113),
	(114 , happyReduce_114),
	(115 , happyReduce_115),
	(116 , happyReduce_116),
	(117 , happyReduce_117),
	(118 , happyReduce_118),
	(119 , happyReduce_119),
	(120 , happyReduce_120),
	(121 , happyReduce_121),
	(122 , happyReduce_122),
	(123 , happyReduce_123),
	(124 , happyReduce_124),
	(125 , happyReduce_125),
	(126 , happyReduce_126),
	(127 , happyReduce_127),
	(128 , happyReduce_128),
	(129 , happyReduce_129),
	(130 , happyReduce_130),
	(131 , happyReduce_131),
	(132 , happyReduce_132),
	(133 , happyReduce_133),
	(134 , happyReduce_134),
	(135 , happyReduce_135),
	(136 , happyReduce_136),
	(137 , happyReduce_137),
	(138 , happyReduce_138),
	(139 , happyReduce_139),
	(140 , happyReduce_140),
	(141 , happyReduce_141),
	(142 , happyReduce_142),
	(143 , happyReduce_143),
	(144 , happyReduce_144),
	(145 , happyReduce_145),
	(146 , happyReduce_146),
	(147 , happyReduce_147),
	(148 , happyReduce_148),
	(149 , happyReduce_149),
	(150 , happyReduce_150),
	(151 , happyReduce_151),
	(152 , happyReduce_152),
	(153 , happyReduce_153),
	(154 , happyReduce_154),
	(155 , happyReduce_155),
	(156 , happyReduce_156),
	(157 , happyReduce_157),
	(158 , happyReduce_158),
	(159 , happyReduce_159),
	(160 , happyReduce_160),
	(161 , happyReduce_161),
	(162 , happyReduce_162),
	(163 , happyReduce_163),
	(164 , happyReduce_164),
	(165 , happyReduce_165),
	(166 , happyReduce_166),
	(167 , happyReduce_167),
	(168 , happyReduce_168),
	(169 , happyReduce_169),
	(170 , happyReduce_170),
	(171 , happyReduce_171),
	(172 , happyReduce_172),
	(173 , happyReduce_173),
	(174 , happyReduce_174),
	(175 , happyReduce_175),
	(176 , happyReduce_176),
	(177 , happyReduce_177),
	(178 , happyReduce_178),
	(179 , happyReduce_179),
	(180 , happyReduce_180),
	(181 , happyReduce_181),
	(182 , happyReduce_182),
	(183 , happyReduce_183),
	(184 , happyReduce_184),
	(185 , happyReduce_185),
	(186 , happyReduce_186),
	(187 , happyReduce_187),
	(188 , happyReduce_188),
	(189 , happyReduce_189),
	(190 , happyReduce_190),
	(191 , happyReduce_191),
	(192 , happyReduce_192),
	(193 , happyReduce_193),
	(194 , happyReduce_194),
	(195 , happyReduce_195),
	(196 , happyReduce_196),
	(197 , happyReduce_197),
	(198 , happyReduce_198),
	(199 , happyReduce_199),
	(200 , happyReduce_200),
	(201 , happyReduce_201),
	(202 , happyReduce_202),
	(203 , happyReduce_203),
	(204 , happyReduce_204),
	(205 , happyReduce_205),
	(206 , happyReduce_206),
	(207 , happyReduce_207),
	(208 , happyReduce_208),
	(209 , happyReduce_209),
	(210 , happyReduce_210),
	(211 , happyReduce_211),
	(212 , happyReduce_212),
	(213 , happyReduce_213),
	(214 , happyReduce_214),
	(215 , happyReduce_215),
	(216 , happyReduce_216),
	(217 , happyReduce_217),
	(218 , happyReduce_218),
	(219 , happyReduce_219),
	(220 , happyReduce_220),
	(221 , happyReduce_221),
	(222 , happyReduce_222),
	(223 , happyReduce_223),
	(224 , happyReduce_224),
	(225 , happyReduce_225),
	(226 , happyReduce_226),
	(227 , happyReduce_227),
	(228 , happyReduce_228),
	(229 , happyReduce_229),
	(230 , happyReduce_230),
	(231 , happyReduce_231),
	(232 , happyReduce_232),
	(233 , happyReduce_233),
	(234 , happyReduce_234),
	(235 , happyReduce_235),
	(236 , happyReduce_236),
	(237 , happyReduce_237),
	(238 , happyReduce_238),
	(239 , happyReduce_239),
	(240 , happyReduce_240),
	(241 , happyReduce_241),
	(242 , happyReduce_242),
	(243 , happyReduce_243),
	(244 , happyReduce_244),
	(245 , happyReduce_245),
	(246 , happyReduce_246),
	(247 , happyReduce_247),
	(248 , happyReduce_248),
	(249 , happyReduce_249),
	(250 , happyReduce_250),
	(251 , happyReduce_251),
	(252 , happyReduce_252),
	(253 , happyReduce_253),
	(254 , happyReduce_254),
	(255 , happyReduce_255),
	(256 , happyReduce_256),
	(257 , happyReduce_257),
	(258 , happyReduce_258),
	(259 , happyReduce_259),
	(260 , happyReduce_260),
	(261 , happyReduce_261),
	(262 , happyReduce_262),
	(263 , happyReduce_263),
	(264 , happyReduce_264),
	(265 , happyReduce_265),
	(266 , happyReduce_266),
	(267 , happyReduce_267),
	(268 , happyReduce_268),
	(269 , happyReduce_269),
	(270 , happyReduce_270),
	(271 , happyReduce_271),
	(272 , happyReduce_272),
	(273 , happyReduce_273),
	(274 , happyReduce_274),
	(275 , happyReduce_275),
	(276 , happyReduce_276),
	(277 , happyReduce_277),
	(278 , happyReduce_278),
	(279 , happyReduce_279),
	(280 , happyReduce_280),
	(281 , happyReduce_281),
	(282 , happyReduce_282),
	(283 , happyReduce_283),
	(284 , happyReduce_284),
	(285 , happyReduce_285),
	(286 , happyReduce_286),
	(287 , happyReduce_287),
	(288 , happyReduce_288),
	(289 , happyReduce_289),
	(290 , happyReduce_290),
	(291 , happyReduce_291),
	(292 , happyReduce_292),
	(293 , happyReduce_293),
	(294 , happyReduce_294),
	(295 , happyReduce_295),
	(296 , happyReduce_296),
	(297 , happyReduce_297),
	(298 , happyReduce_298),
	(299 , happyReduce_299),
	(300 , happyReduce_300),
	(301 , happyReduce_301),
	(302 , happyReduce_302),
	(303 , happyReduce_303),
	(304 , happyReduce_304),
	(305 , happyReduce_305),
	(306 , happyReduce_306),
	(307 , happyReduce_307),
	(308 , happyReduce_308),
	(309 , happyReduce_309),
	(310 , happyReduce_310),
	(311 , happyReduce_311),
	(312 , happyReduce_312),
	(313 , happyReduce_313),
	(314 , happyReduce_314),
	(315 , happyReduce_315),
	(316 , happyReduce_316),
	(317 , happyReduce_317),
	(318 , happyReduce_318),
	(319 , happyReduce_319),
	(320 , happyReduce_320),
	(321 , happyReduce_321),
	(322 , happyReduce_322),
	(323 , happyReduce_323),
	(324 , happyReduce_324),
	(325 , happyReduce_325),
	(326 , happyReduce_326),
	(327 , happyReduce_327),
	(328 , happyReduce_328),
	(329 , happyReduce_329),
	(330 , happyReduce_330),
	(331 , happyReduce_331),
	(332 , happyReduce_332),
	(333 , happyReduce_333),
	(334 , happyReduce_334),
	(335 , happyReduce_335),
	(336 , happyReduce_336),
	(337 , happyReduce_337),
	(338 , happyReduce_338),
	(339 , happyReduce_339),
	(340 , happyReduce_340),
	(341 , happyReduce_341),
	(342 , happyReduce_342),
	(343 , happyReduce_343),
	(344 , happyReduce_344),
	(345 , happyReduce_345),
	(346 , happyReduce_346),
	(347 , happyReduce_347),
	(348 , happyReduce_348),
	(349 , happyReduce_349),
	(350 , happyReduce_350),
	(351 , happyReduce_351),
	(352 , happyReduce_352),
	(353 , happyReduce_353),
	(354 , happyReduce_354),
	(355 , happyReduce_355),
	(356 , happyReduce_356),
	(357 , happyReduce_357),
	(358 , happyReduce_358),
	(359 , happyReduce_359),
	(360 , happyReduce_360),
	(361 , happyReduce_361),
	(362 , happyReduce_362),
	(363 , happyReduce_363),
	(364 , happyReduce_364),
	(365 , happyReduce_365),
	(366 , happyReduce_366),
	(367 , happyReduce_367),
	(368 , happyReduce_368),
	(369 , happyReduce_369),
	(370 , happyReduce_370),
	(371 , happyReduce_371),
	(372 , happyReduce_372),
	(373 , happyReduce_373),
	(374 , happyReduce_374),
	(375 , happyReduce_375),
	(376 , happyReduce_376),
	(377 , happyReduce_377),
	(378 , happyReduce_378),
	(379 , happyReduce_379),
	(380 , happyReduce_380),
	(381 , happyReduce_381),
	(382 , happyReduce_382),
	(383 , happyReduce_383),
	(384 , happyReduce_384),
	(385 , happyReduce_385),
	(386 , happyReduce_386),
	(387 , happyReduce_387),
	(388 , happyReduce_388),
	(389 , happyReduce_389),
	(390 , happyReduce_390),
	(391 , happyReduce_391),
	(392 , happyReduce_392),
	(393 , happyReduce_393),
	(394 , happyReduce_394),
	(395 , happyReduce_395),
	(396 , happyReduce_396),
	(397 , happyReduce_397),
	(398 , happyReduce_398),
	(399 , happyReduce_399),
	(400 , happyReduce_400),
	(401 , happyReduce_401),
	(402 , happyReduce_402),
	(403 , happyReduce_403),
	(404 , happyReduce_404),
	(405 , happyReduce_405),
	(406 , happyReduce_406),
	(407 , happyReduce_407),
	(408 , happyReduce_408),
	(409 , happyReduce_409),
	(410 , happyReduce_410),
	(411 , happyReduce_411),
	(412 , happyReduce_412),
	(413 , happyReduce_413),
	(414 , happyReduce_414),
	(415 , happyReduce_415),
	(416 , happyReduce_416),
	(417 , happyReduce_417),
	(418 , happyReduce_418),
	(419 , happyReduce_419),
	(420 , happyReduce_420),
	(421 , happyReduce_421),
	(422 , happyReduce_422),
	(423 , happyReduce_423),
	(424 , happyReduce_424),
	(425 , happyReduce_425),
	(426 , happyReduce_426),
	(427 , happyReduce_427),
	(428 , happyReduce_428),
	(429 , happyReduce_429),
	(430 , happyReduce_430),
	(431 , happyReduce_431),
	(432 , happyReduce_432),
	(433 , happyReduce_433),
	(434 , happyReduce_434),
	(435 , happyReduce_435),
	(436 , happyReduce_436),
	(437 , happyReduce_437),
	(438 , happyReduce_438),
	(439 , happyReduce_439),
	(440 , happyReduce_440),
	(441 , happyReduce_441),
	(442 , happyReduce_442),
	(443 , happyReduce_443),
	(444 , happyReduce_444),
	(445 , happyReduce_445),
	(446 , happyReduce_446),
	(447 , happyReduce_447),
	(448 , happyReduce_448),
	(449 , happyReduce_449),
	(450 , happyReduce_450),
	(451 , happyReduce_451),
	(452 , happyReduce_452),
	(453 , happyReduce_453),
	(454 , happyReduce_454),
	(455 , happyReduce_455),
	(456 , happyReduce_456),
	(457 , happyReduce_457),
	(458 , happyReduce_458),
	(459 , happyReduce_459),
	(460 , happyReduce_460),
	(461 , happyReduce_461),
	(462 , happyReduce_462),
	(463 , happyReduce_463),
	(464 , happyReduce_464),
	(465 , happyReduce_465),
	(466 , happyReduce_466),
	(467 , happyReduce_467),
	(468 , happyReduce_468),
	(469 , happyReduce_469),
	(470 , happyReduce_470),
	(471 , happyReduce_471),
	(472 , happyReduce_472),
	(473 , happyReduce_473),
	(474 , happyReduce_474),
	(475 , happyReduce_475),
	(476 , happyReduce_476),
	(477 , happyReduce_477),
	(478 , happyReduce_478),
	(479 , happyReduce_479),
	(480 , happyReduce_480),
	(481 , happyReduce_481),
	(482 , happyReduce_482),
	(483 , happyReduce_483),
	(484 , happyReduce_484),
	(485 , happyReduce_485),
	(486 , happyReduce_486),
	(487 , happyReduce_487),
	(488 , happyReduce_488),
	(489 , happyReduce_489),
	(490 , happyReduce_490),
	(491 , happyReduce_491),
	(492 , happyReduce_492),
	(493 , happyReduce_493),
	(494 , happyReduce_494),
	(495 , happyReduce_495),
	(496 , happyReduce_496),
	(497 , happyReduce_497),
	(498 , happyReduce_498),
	(499 , happyReduce_499),
	(500 , happyReduce_500),
	(501 , happyReduce_501),
	(502 , happyReduce_502),
	(503 , happyReduce_503),
	(504 , happyReduce_504),
	(505 , happyReduce_505),
	(506 , happyReduce_506),
	(507 , happyReduce_507),
	(508 , happyReduce_508),
	(509 , happyReduce_509),
	(510 , happyReduce_510),
	(511 , happyReduce_511),
	(512 , happyReduce_512),
	(513 , happyReduce_513),
	(514 , happyReduce_514),
	(515 , happyReduce_515),
	(516 , happyReduce_516),
	(517 , happyReduce_517),
	(518 , happyReduce_518),
	(519 , happyReduce_519),
	(520 , happyReduce_520),
	(521 , happyReduce_521),
	(522 , happyReduce_522),
	(523 , happyReduce_523),
	(524 , happyReduce_524),
	(525 , happyReduce_525),
	(526 , happyReduce_526),
	(527 , happyReduce_527),
	(528 , happyReduce_528),
	(529 , happyReduce_529),
	(530 , happyReduce_530),
	(531 , happyReduce_531),
	(532 , happyReduce_532),
	(533 , happyReduce_533),
	(534 , happyReduce_534),
	(535 , happyReduce_535),
	(536 , happyReduce_536),
	(537 , happyReduce_537),
	(538 , happyReduce_538),
	(539 , happyReduce_539),
	(540 , happyReduce_540),
	(541 , happyReduce_541),
	(542 , happyReduce_542),
	(543 , happyReduce_543),
	(544 , happyReduce_544),
	(545 , happyReduce_545),
	(546 , happyReduce_546),
	(547 , happyReduce_547),
	(548 , happyReduce_548),
	(549 , happyReduce_549),
	(550 , happyReduce_550),
	(551 , happyReduce_551),
	(552 , happyReduce_552),
	(553 , happyReduce_553),
	(554 , happyReduce_554),
	(555 , happyReduce_555),
	(556 , happyReduce_556),
	(557 , happyReduce_557),
	(558 , happyReduce_558),
	(559 , happyReduce_559),
	(560 , happyReduce_560),
	(561 , happyReduce_561),
	(562 , happyReduce_562),
	(563 , happyReduce_563),
	(564 , happyReduce_564),
	(565 , happyReduce_565),
	(566 , happyReduce_566),
	(567 , happyReduce_567),
	(568 , happyReduce_568),
	(569 , happyReduce_569),
	(570 , happyReduce_570),
	(571 , happyReduce_571),
	(572 , happyReduce_572),
	(573 , happyReduce_573),
	(574 , happyReduce_574),
	(575 , happyReduce_575),
	(576 , happyReduce_576),
	(577 , happyReduce_577),
	(578 , happyReduce_578),
	(579 , happyReduce_579),
	(580 , happyReduce_580),
	(581 , happyReduce_581),
	(582 , happyReduce_582),
	(583 , happyReduce_583),
	(584 , happyReduce_584),
	(585 , happyReduce_585)
	]

happy_n_terms = 135 :: Int
happy_n_nonterms = 256 :: Int

happyReduce_4 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_4 = happyMonadReduce 3 0 happyReduction_4
happyReduction_4 ((HappyAbsSyn36  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { s <- getSrcSpan happy_var_1; 
                                                return [IncludeProg DMap.empty s happy_var_3 Nothing] }))
	) (\r -> happyReturn (HappyAbsSyn7 r))

happyReduce_5 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_5 = happySpecReduce_1  1 happyReduction_5
happyReduction_5 (HappyAbsSyn7  happy_var_1)
	 =  HappyAbsSyn7
		 (happy_var_1
	)
happyReduction_5 _  = notHappyAtAll 

happyReduce_6 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_6 = happySpecReduce_3  2 happyReduction_6
happyReduction_6 (HappyAbsSyn10  happy_var_3)
	_
	(HappyAbsSyn7  happy_var_1)
	 =  HappyAbsSyn7
		 (happy_var_1++[happy_var_3]
	)
happyReduction_6 _ _ _  = notHappyAtAll 

happyReduce_7 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_7 = happySpecReduce_0  2 happyReduction_7
happyReduction_7  =  HappyAbsSyn7
		 ([]
	)

happyReduce_8 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_8 = happySpecReduce_1  3 happyReduction_8
happyReduction_8 (HappyAbsSyn10  happy_var_1)
	 =  HappyAbsSyn10
		 (happy_var_1
	)
happyReduction_8 _  = notHappyAtAll 

happyReduce_9 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_9 = happySpecReduce_1  3 happyReduction_9
happyReduction_9 (HappyAbsSyn10  happy_var_1)
	 =  HappyAbsSyn10
		 (happy_var_1
	)
happyReduction_9 _  = notHappyAtAll 

happyReduce_10 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_10 = happySpecReduce_1  3 happyReduction_10
happyReduction_10 (HappyAbsSyn10  happy_var_1)
	 =  HappyAbsSyn10
		 (happy_var_1
	)
happyReduction_10 _  = notHappyAtAll 

happyReduce_11 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_11 = happySpecReduce_1  3 happyReduction_11
happyReduction_11 (HappyAbsSyn10  happy_var_1)
	 =  HappyAbsSyn10
		 (happy_var_1
	)
happyReduction_11 _  = notHappyAtAll 

happyReduce_12 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_12 = happySpecReduce_3  4 happyReduction_12
happyReduction_12 (HappyAbsSyn17  happy_var_3)
	_
	(HappyAbsSyn11  happy_var_1)
	 =  HappyAbsSyn11
		 (happy_var_1++[happy_var_3]
	)
happyReduction_12 _ _ _  = notHappyAtAll 

happyReduce_13 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_13 = happySpecReduce_1  4 happyReduction_13
happyReduction_13 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn11
		 ([happy_var_1]
	)
happyReduction_13 _  = notHappyAtAll 

happyReduce_14 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_14 = happySpecReduce_3  5 happyReduction_14
happyReduction_14 (HappyAbsSyn12  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1:happy_var_3
	)
happyReduction_14 _ _ _  = notHappyAtAll 

happyReduce_15 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_15 = happySpecReduce_1  5 happyReduction_15
happyReduction_15 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_15 _  = notHappyAtAll 

happyReduce_16 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_16 = happySpecReduce_2  6 happyReduction_16
happyReduction_16 _
	_
	 =  HappyAbsSyn13
		 (
	)

happyReduce_17 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_17 = happySpecReduce_1  7 happyReduction_17
happyReduction_17 _
	 =  HappyAbsSyn13
		 (
	)

happyReduce_18 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_18 = happySpecReduce_0  7 happyReduction_18
happyReduction_18  =  HappyAbsSyn13
		 (
	)

happyReduce_19 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_19 = happyMonadReduce 11 8 happyReduction_19
happyReduction_19 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_10) `HappyStk`
	(HappyAbsSyn7  happy_var_9) `HappyStk`
	(HappyAbsSyn121  happy_var_8) `HappyStk`
	(HappyAbsSyn36  happy_var_7) `HappyStk`
	(HappyAbsSyn262  happy_var_6) `HappyStk`
	(HappyAbsSyn18  happy_var_5) `HappyStk`
	(HappyAbsSyn33  happy_var_4) `HappyStk`
	(HappyAbsSyn262  happy_var_3) `HappyStk`
	(HappyAbsSyn16  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { s <- getSrcSpan happy_var_1;
            s' <- getSrcSpan happy_var_6;
            name <- cmpNames (fst happy_var_2) happy_var_10 "program";
            return (Main DMap.empty s name (snd happy_var_2) (Block DMap.empty (UseBlock happy_var_4 happy_var_3) happy_var_5 s' happy_var_7 happy_var_8) happy_var_9); }))
	) (\r -> happyReturn (HappyAbsSyn10 r))

happyReduce_20 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_20 = happyReduce 4 9 happyReduction_20
happyReduction_20 (_ `HappyStk`
	(HappyAbsSyn117  happy_var_3) `HappyStk`
	(HappyAbsSyn25  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn16
		 ((happy_var_2, happy_var_3)
	) `HappyStk` happyRest

happyReduce_21 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_21 = happyReduce 4 9 happyReduction_21
happyReduction_21 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_3) `HappyStk`
	(HappyAbsSyn25  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn16
		 ((happy_var_2, (Arg DMap.empty (NullArg DMap.empty)) (happy_var_3, happy_var_3))
	) `HappyStk` happyRest

happyReduce_22 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_22 = happySpecReduce_3  10 happyReduction_22
happyReduction_22 (HappyAbsSyn17  happy_var_3)
	_
	_
	 =  HappyAbsSyn17
		 (happy_var_3
	)
happyReduction_22 _ _ _  = notHappyAtAll 

happyReduce_23 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_23 = happySpecReduce_2  10 happyReduction_23
happyReduction_23 _
	_
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_24 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_24 = happySpecReduce_1  10 happyReduction_24
happyReduction_24 _
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_25 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_25 = happySpecReduce_3  11 happyReduction_25
happyReduction_25 _
	_
	_
	 =  HappyAbsSyn18
		 (ImplicitNone DMap.empty
	)

happyReduce_26 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_26 = happySpecReduce_0  11 happyReduction_26
happyReduction_26  =  HappyAbsSyn18
		 (ImplicitNull DMap.empty
	)

happyReduce_27 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_27 = happySpecReduce_1  12 happyReduction_27
happyReduction_27 (HappyAbsSyn10  happy_var_1)
	 =  HappyAbsSyn10
		 (happy_var_1
	)
happyReduction_27 _  = notHappyAtAll 

happyReduce_28 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_28 = happySpecReduce_1  12 happyReduction_28
happyReduction_28 (HappyAbsSyn10  happy_var_1)
	 =  HappyAbsSyn10
		 (happy_var_1
	)
happyReduction_28 _  = notHappyAtAll 

happyReduce_29 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_29 = happyMonadReduce 10 13 happyReduction_29
happyReduction_29 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_9) `HappyStk`
	(HappyAbsSyn121  happy_var_8) `HappyStk`
	(HappyAbsSyn36  happy_var_7) `HappyStk`
	(HappyAbsSyn262  happy_var_6) `HappyStk`
	(HappyAbsSyn18  happy_var_5) `HappyStk`
	(HappyAbsSyn33  happy_var_4) `HappyStk`
	(HappyAbsSyn262  happy_var_3) `HappyStk`
	(HappyAbsSyn113  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { s <- getSrcSpan happy_var_1;
          s' <- getSrcSpan happy_var_6;
          name <- cmpNames (fst3 happy_var_2) happy_var_9 "subroutine";
          return (Sub DMap.empty s (trd3 happy_var_2) name (snd3 happy_var_2) (Block DMap.empty (UseBlock happy_var_4 happy_var_3) happy_var_5 s' happy_var_7 happy_var_8)); }))
	) (\r -> happyReturn (HappyAbsSyn10 r))

happyReduce_30 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_30 = happySpecReduce_3  14 happyReduction_30
happyReduction_30 (HappyAbsSyn17  happy_var_3)
	_
	_
	 =  HappyAbsSyn17
		 (happy_var_3
	)
happyReduction_30 _ _ _  = notHappyAtAll 

happyReduce_31 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_31 = happySpecReduce_2  14 happyReduction_31
happyReduction_31 _
	_
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_32 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_32 = happySpecReduce_1  14 happyReduction_32
happyReduction_32 _
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_33 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_33 = happySpecReduce_3  15 happyReduction_33
happyReduction_33 (HappyAbsSyn17  happy_var_3)
	_
	_
	 =  HappyAbsSyn17
		 (happy_var_3
	)
happyReduction_33 _ _ _  = notHappyAtAll 

happyReduce_34 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_34 = happySpecReduce_2  15 happyReduction_34
happyReduction_34 _
	_
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_35 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_35 = happySpecReduce_1  15 happyReduction_35
happyReduction_35 _
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_36 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_36 = happyMonadReduce 10 16 happyReduction_36
happyReduction_36 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_9) `HappyStk`
	(HappyAbsSyn121  happy_var_8) `HappyStk`
	(HappyAbsSyn36  happy_var_7) `HappyStk`
	(HappyAbsSyn262  happy_var_6) `HappyStk`
	(HappyAbsSyn18  happy_var_5) `HappyStk`
	(HappyAbsSyn33  happy_var_4) `HappyStk`
	(HappyAbsSyn262  happy_var_3) `HappyStk`
	(HappyAbsSyn114  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { s <- getSrcSpan happy_var_1;
                       s' <- getSrcSpan happy_var_6;
                       name <- cmpNames (fst4 happy_var_2) happy_var_9 "function";
           return (Function DMap.empty s (trd4 happy_var_2) name (snd4 happy_var_2) (frh4 happy_var_2) (Block DMap.empty (UseBlock happy_var_4 happy_var_3) happy_var_5 s' happy_var_7 happy_var_8)); }))
	) (\r -> happyReturn (HappyAbsSyn10 r))

happyReduce_37 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_37 = happyMonadReduce 6 17 happyReduction_37
happyReduction_37 ((HappyAbsSyn17  happy_var_6) `HappyStk`
	(HappyAbsSyn36  happy_var_5) `HappyStk`
	(HappyAbsSyn18  happy_var_4) `HappyStk`
	(HappyAbsSyn33  happy_var_3) `HappyStk`
	(HappyAbsSyn25  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { s <- getSrcSpan happy_var_1;
                          name <- cmpNames happy_var_2 happy_var_6 "block data";
                          return (BlockData DMap.empty s name happy_var_3 happy_var_4 happy_var_5); }))
	) (\r -> happyReturn (HappyAbsSyn10 r))

happyReduce_38 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_38 = happySpecReduce_3  18 happyReduction_38
happyReduction_38 (HappyAbsSyn25  happy_var_3)
	_
	_
	 =  HappyAbsSyn25
		 (happy_var_3
	)
happyReduction_38 _ _ _  = notHappyAtAll 

happyReduce_39 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_39 = happySpecReduce_2  18 happyReduction_39
happyReduction_39 _
	_
	 =  HappyAbsSyn25
		 ("foobar" `trace` NullSubName DMap.empty
	)

happyReduce_40 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_40 = happyReduce 4 19 happyReduction_40
happyReduction_40 ((HappyAbsSyn17  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn17
		 (happy_var_4
	) `HappyStk` happyRest

happyReduce_41 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_41 = happySpecReduce_3  19 happyReduction_41
happyReduction_41 _
	_
	_
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_42 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_42 = happySpecReduce_1  19 happyReduction_42
happyReduction_42 _
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_43 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_43 = happyMonadReduce 8 20 happyReduction_43
happyReduction_43 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_7) `HappyStk`
	(HappyAbsSyn7  happy_var_6) `HappyStk`
	(HappyAbsSyn36  happy_var_5) `HappyStk`
	(HappyAbsSyn18  happy_var_4) `HappyStk`
	(HappyAbsSyn33  happy_var_3) `HappyStk`
	(HappyAbsSyn25  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen (((  do { s <- getSrcSpan happy_var_1;
                  name <- cmpNames happy_var_2 happy_var_7  "module";
      return (Module DMap.empty s name happy_var_3 happy_var_4 happy_var_5 happy_var_6); }))
	) (\r -> happyReturn (HappyAbsSyn10 r))

happyReduce_44 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_44 = happySpecReduce_3  21 happyReduction_44
happyReduction_44 _
	(HappyAbsSyn25  happy_var_2)
	_
	 =  HappyAbsSyn25
		 (happy_var_2
	)
happyReduction_44 _ _ _  = notHappyAtAll 

happyReduce_45 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_45 = happySpecReduce_3  22 happyReduction_45
happyReduction_45 (HappyAbsSyn17  happy_var_3)
	_
	_
	 =  HappyAbsSyn17
		 (happy_var_3
	)
happyReduction_45 _ _ _  = notHappyAtAll 

happyReduce_46 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_46 = happySpecReduce_2  22 happyReduction_46
happyReduction_46 _
	_
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_47 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_47 = happySpecReduce_1  22 happyReduction_47
happyReduction_47 _
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_48 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_48 = happySpecReduce_3  23 happyReduction_48
happyReduction_48 (HappyAbsSyn7  happy_var_3)
	_
	_
	 =  HappyAbsSyn7
		 (happy_var_3
	)
happyReduction_48 _ _ _  = notHappyAtAll 

happyReduce_49 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_49 = happySpecReduce_0  23 happyReduction_49
happyReduction_49  =  HappyAbsSyn7
		 ([]
	)

happyReduce_50 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_50 = happySpecReduce_3  24 happyReduction_50
happyReduction_50 _
	(HappyAbsSyn10  happy_var_2)
	(HappyAbsSyn7  happy_var_1)
	 =  HappyAbsSyn7
		 (happy_var_1++[happy_var_2]
	)
happyReduction_50 _ _ _  = notHappyAtAll 

happyReduce_51 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_51 = happySpecReduce_0  24 happyReduction_51
happyReduction_51  =  HappyAbsSyn7
		 ([]
	)

happyReduce_52 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_52 = happySpecReduce_1  25 happyReduction_52
happyReduction_52 (HappyAbsSyn10  happy_var_1)
	 =  HappyAbsSyn10
		 (happy_var_1
	)
happyReduction_52 _  = notHappyAtAll 

happyReduce_53 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_53 = happySpecReduce_1  25 happyReduction_53
happyReduction_53 (HappyAbsSyn10  happy_var_1)
	 =  HappyAbsSyn10
		 (happy_var_1
	)
happyReduction_53 _  = notHappyAtAll 

happyReduce_54 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_54 = happySpecReduce_2  26 happyReduction_54
happyReduction_54 (HappyAbsSyn33  happy_var_2)
	(HappyAbsSyn34  happy_var_1)
	 =  HappyAbsSyn33
		 (Use DMap.empty happy_var_1 happy_var_2 DMap.empty
	)
happyReduction_54 _ _  = notHappyAtAll 

happyReduce_55 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_55 = happySpecReduce_0  26 happyReduction_55
happyReduction_55  =  HappyAbsSyn33
		 (UseNil DMap.empty
	)

happyReduce_56 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_56 = happySpecReduce_3  27 happyReduction_56
happyReduction_56 _
	(HappyAbsSyn17  happy_var_2)
	_
	 =  HappyAbsSyn34
		 ((happy_var_2, [])
	)
happyReduction_56 _ _ _  = notHappyAtAll 

happyReduce_57 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_57 = happyReduce 5 27 happyReduction_57
happyReduction_57 (_ `HappyStk`
	(HappyAbsSyn35  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn34
		 (("common", happy_var_4)
	) `HappyStk` happyRest

happyReduce_58 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_58 = happyReduce 5 27 happyReduction_58
happyReduction_58 (_ `HappyStk`
	(HappyAbsSyn35  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn34
		 ((happy_var_2, happy_var_4)
	) `HappyStk` happyRest

happyReduce_59 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_59 = happySpecReduce_3  28 happyReduction_59
happyReduction_59 (HappyAbsSyn17  happy_var_3)
	_
	(HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn35
		 ([(happy_var_1, happy_var_3)]
	)
happyReduction_59 _ _ _  = notHappyAtAll 

happyReduce_60 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_60 = happySpecReduce_3  28 happyReduction_60
happyReduction_60 (HappyAbsSyn35  happy_var_3)
	_
	(HappyAbsSyn35  happy_var_1)
	 =  HappyAbsSyn35
		 (happy_var_1 ++ happy_var_3
	)
happyReduction_60 _ _ _  = notHappyAtAll 

happyReduce_61 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_61 = happySpecReduce_1  29 happyReduction_61
happyReduction_61 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_61 _  = notHappyAtAll 

happyReduce_62 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_62 = happyMonadReduce 0 29 happyReduction_62
happyReduction_62 (happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ NullDecl DMap.empty s)))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_63 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_63 = happySpecReduce_2  30 happyReduction_63
happyReduction_63 (HappyAbsSyn36  happy_var_2)
	(HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (DSeq DMap.empty happy_var_1 happy_var_2
	)
happyReduction_63 _ _  = notHappyAtAll 

happyReduce_64 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_64 = happySpecReduce_1  30 happyReduction_64
happyReduction_64 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_64 _  = notHappyAtAll 

happyReduce_65 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_65 = happySpecReduce_2  31 happyReduction_65
happyReduction_65 _
	(HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_65 _ _  = notHappyAtAll 

happyReduce_66 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_66 = happySpecReduce_1  32 happyReduction_66
happyReduction_66 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_66 _  = notHappyAtAll 

happyReduce_67 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_67 = happySpecReduce_1  32 happyReduction_67
happyReduction_67 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_67 _  = notHappyAtAll 

happyReduce_68 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_68 = happySpecReduce_1  32 happyReduction_68
happyReduction_68 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_68 _  = notHappyAtAll 

happyReduce_69 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_69 = happySpecReduce_1  32 happyReduction_69
happyReduction_69 (HappyTerminal (Text happy_var_1))
	 =  HappyAbsSyn36
		 (TextDecl DMap.empty happy_var_1
	)
happyReduction_69 _  = notHappyAtAll 

happyReduce_70 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_70 = happyMonadReduce 5 33 happyReduction_70
happyReduction_70 ((HappyAbsSyn42  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn41  happy_var_3) `HappyStk`
	(HappyAbsSyn45  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ if null (fst happy_var_3) 
           then Decl DMap.empty s happy_var_5 ((BaseType DMap.empty (fst3 happy_var_2) (snd happy_var_3) (snd3 happy_var_2) (trd3 happy_var_2)))
                       else Decl DMap.empty s happy_var_5 ((ArrayT DMap.empty  (fst happy_var_3) (fst3 happy_var_2) (snd happy_var_3) (snd3 happy_var_2) (trd3 happy_var_2))))))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_71 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_71 = happyMonadReduce 4 33 happyReduction_71
happyReduction_71 ((HappyAbsSyn42  happy_var_4) `HappyStk`
	(HappyAbsSyn41  happy_var_3) `HappyStk`
	(HappyAbsSyn45  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ if null (fst happy_var_3) 
               then Decl DMap.empty s happy_var_4 ((BaseType DMap.empty (fst3 happy_var_2) (snd happy_var_3) (snd3 happy_var_2) (trd3 happy_var_2)))
                         else Decl DMap.empty s happy_var_4 ((ArrayT DMap.empty (fst happy_var_3) (fst3 happy_var_2) (snd happy_var_3) (snd3 happy_var_2) (trd3 happy_var_2))))))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_72 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_72 = happySpecReduce_1  33 happyReduction_72
happyReduction_72 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_72 _  = notHappyAtAll 

happyReduce_73 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_73 = happySpecReduce_1  33 happyReduction_73
happyReduction_73 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_73 _  = notHappyAtAll 

happyReduce_74 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_74 = happySpecReduce_3  34 happyReduction_74
happyReduction_74 (HappyAbsSyn41  happy_var_3)
	_
	(HappyAbsSyn41  happy_var_1)
	 =  HappyAbsSyn41
		 ((fst happy_var_1++fst happy_var_3,snd happy_var_1++snd happy_var_3)
	)
happyReduction_74 _ _ _  = notHappyAtAll 

happyReduce_75 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_75 = happySpecReduce_0  34 happyReduction_75
happyReduction_75  =  HappyAbsSyn41
		 (([],[])
	)

happyReduce_76 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_76 = happySpecReduce_3  35 happyReduction_76
happyReduction_76 (HappyAbsSyn42  happy_var_3)
	_
	(HappyAbsSyn43  happy_var_1)
	 =  HappyAbsSyn42
		 (happy_var_1:happy_var_3
	)
happyReduction_76 _ _ _  = notHappyAtAll 

happyReduce_77 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_77 = happySpecReduce_1  35 happyReduction_77
happyReduction_77 (HappyAbsSyn43  happy_var_1)
	 =  HappyAbsSyn42
		 ([happy_var_1]
	)
happyReduction_77 _  = notHappyAtAll 

happyReduce_78 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_78 = happySpecReduce_3  36 happyReduction_78
happyReduction_78 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn43
		 ((happy_var_1, happy_var_3, Nothing)
	)
happyReduction_78 _ _ _  = notHappyAtAll 

happyReduce_79 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_79 = happyMonadReduce 1 36 happyReduction_79
happyReduction_79 ((HappyAbsSyn47  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (happy_var_1, NullExpr DMap.empty s, Nothing))))
	) (\r -> happyReturn (HappyAbsSyn43 r))

happyReduce_80 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_80 = happyMonadReduce 3 36 happyReduction_80
happyReduction_80 ((HappyAbsSyn17  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (happy_var_1, NullExpr DMap.empty s, Just $ read happy_var_3))))
	) (\r -> happyReturn (HappyAbsSyn43 r))

happyReduce_81 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_81 = happySpecReduce_1  37 happyReduction_81
happyReduction_81 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_81 _  = notHappyAtAll 

happyReduce_82 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_82 = happySpecReduce_1  38 happyReduction_82
happyReduction_82 (HappyAbsSyn45  happy_var_1)
	 =  HappyAbsSyn45
		 ((fst3 happy_var_1, snd3 happy_var_1, trd3 happy_var_1)
	)
happyReduction_82 _  = notHappyAtAll 

happyReduce_83 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_83 = happyMonadReduce 2 39 happyReduction_83
happyReduction_83 ((HappyAbsSyn47  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (Integer DMap.empty, happy_var_2, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_84 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_84 = happyMonadReduce 3 39 happyReduction_84
happyReduction_84 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Integer DMap.empty, happy_var_3, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_85 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_85 = happyMonadReduce 1 39 happyReduction_85
happyReduction_85 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Integer DMap.empty, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_86 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_86 = happyMonadReduce 2 39 happyReduction_86
happyReduction_86 ((HappyAbsSyn47  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Real DMap.empty, happy_var_2, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_87 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_87 = happyMonadReduce 3 39 happyReduction_87
happyReduction_87 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Real DMap.empty, happy_var_3, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_88 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_88 = happyMonadReduce 1 39 happyReduction_88
happyReduction_88 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Real DMap.empty, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_89 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_89 = happyMonadReduce 1 39 happyReduction_89
happyReduction_89 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (SomeType DMap.empty, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_90 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_90 = happyMonadReduce 2 39 happyReduction_90
happyReduction_90 ((HappyAbsSyn47  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Complex DMap.empty, happy_var_2, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_91 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_91 = happyMonadReduce 3 39 happyReduction_91
happyReduction_91 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Complex DMap.empty, happy_var_3, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_92 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_92 = happyMonadReduce 1 39 happyReduction_92
happyReduction_92 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Complex DMap.empty,NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_93 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_93 = happySpecReduce_2  39 happyReduction_93
happyReduction_93 (HappyAbsSyn48  happy_var_2)
	_
	 =  HappyAbsSyn45
		 ((Character DMap.empty, snd happy_var_2, fst happy_var_2)
	)
happyReduction_93 _ _  = notHappyAtAll 

happyReduce_94 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_94 = happyMonadReduce 3 39 happyReduction_94
happyReduction_94 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Character DMap.empty, happy_var_3, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_95 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_95 = happyMonadReduce 1 39 happyReduction_95
happyReduction_95 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Character DMap.empty, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_96 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_96 = happyMonadReduce 2 39 happyReduction_96
happyReduction_96 ((HappyAbsSyn47  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Logical DMap.empty, happy_var_2, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_97 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_97 = happyMonadReduce 3 39 happyReduction_97
happyReduction_97 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Logical DMap.empty, happy_var_3, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_98 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_98 = happyMonadReduce 1 39 happyReduction_98
happyReduction_98 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $  (Logical DMap.empty, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_99 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_99 = happyMonadReduce 4 39 happyReduction_99
happyReduction_99 (_ `HappyStk`
	(HappyAbsSyn25  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (DerivedType DMap.empty happy_var_3, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_100 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_100 = happyReduce 5 40 happyReduction_100
happyReduction_100 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn47
		 (happy_var_4
	) `HappyStk` happyRest

happyReduce_101 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_101 = happySpecReduce_3  40 happyReduction_101
happyReduction_101 _
	(HappyAbsSyn47  happy_var_2)
	_
	 =  HappyAbsSyn47
		 (happy_var_2
	)
happyReduction_101 _ _ _  = notHappyAtAll 

happyReduce_102 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_102 = happyMonadReduce 1 41 happyReduction_102
happyReduction_102 ((HappyAbsSyn47  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (happy_var_1,NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn48 r))

happyReduce_103 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_103 = happyReduce 9 41 happyReduction_103
happyReduction_103 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_8) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn48
		 ((happy_var_4,happy_var_8)
	) `HappyStk` happyRest

happyReduce_104 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_104 = happyReduce 7 41 happyReduction_104
happyReduction_104 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_6) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn48
		 ((happy_var_2,happy_var_6)
	) `HappyStk` happyRest

happyReduce_105 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_105 = happyMonadReduce 5 41 happyReduction_105
happyReduction_105 (_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $   (happy_var_2,NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn48 r))

happyReduce_106 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_106 = happyReduce 9 41 happyReduction_106
happyReduction_106 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_8) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn48
		 ((happy_var_8,happy_var_4)
	) `HappyStk` happyRest

happyReduce_107 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_107 = happyMonadReduce 5 41 happyReduction_107
happyReduction_107 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $   (NullExpr DMap.empty s,happy_var_4))))
	) (\r -> happyReturn (HappyAbsSyn48 r))

happyReduce_108 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_108 = happyReduce 5 42 happyReduction_108
happyReduction_108 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn47
		 (happy_var_4
	) `HappyStk` happyRest

happyReduce_109 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_109 = happySpecReduce_3  42 happyReduction_109
happyReduction_109 _
	(HappyAbsSyn47  happy_var_2)
	_
	 =  HappyAbsSyn47
		 (happy_var_2
	)
happyReduction_109 _ _ _  = notHappyAtAll 

happyReduce_110 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_110 = happySpecReduce_1  43 happyReduction_110
happyReduction_110 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_110 _  = notHappyAtAll 

happyReduce_111 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_111 = happyMonadReduce 2 43 happyReduction_111
happyReduction_111 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Con DMap.empty s "*")))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_112 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_112 = happyMonadReduce 2 44 happyReduction_112
happyReduction_112 ((HappyAbsSyn17  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Con DMap.empty s happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_113 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_113 = happyReduce 4 45 happyReduction_113
happyReduction_113 (_ `HappyStk`
	(HappyAbsSyn52  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn52
		 (happy_var_3
	) `HappyStk` happyRest

happyReduce_114 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_114 = happySpecReduce_3  45 happyReduction_114
happyReduction_114 _
	_
	_
	 =  HappyAbsSyn52
		 ([]
	)

happyReduce_115 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_115 = happySpecReduce_2  46 happyReduction_115
happyReduction_115 (HappyAbsSyn52  happy_var_2)
	_
	 =  HappyAbsSyn52
		 (happy_var_2
	)
happyReduction_115 _ _  = notHappyAtAll 

happyReduce_116 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_116 = happySpecReduce_1  47 happyReduction_116
happyReduction_116 _
	 =  HappyAbsSyn41
		 (([],[Parameter DMap.empty])
	)

happyReduce_117 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_117 = happySpecReduce_1  47 happyReduction_117
happyReduction_117 (HappyAbsSyn56  happy_var_1)
	 =  HappyAbsSyn41
		 (([],[happy_var_1])
	)
happyReduction_117 _  = notHappyAtAll 

happyReduce_118 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_118 = happySpecReduce_1  47 happyReduction_118
happyReduction_118 _
	 =  HappyAbsSyn41
		 (([],[Allocatable DMap.empty])
	)

happyReduce_119 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_119 = happySpecReduce_1  47 happyReduction_119
happyReduction_119 _
	 =  HappyAbsSyn41
		 (([],[External DMap.empty])
	)

happyReduce_120 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_120 = happyReduce 4 47 happyReduction_120
happyReduction_120 (_ `HappyStk`
	(HappyAbsSyn70  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn41
		 (([],[Intent DMap.empty happy_var_3])
	) `HappyStk` happyRest

happyReduce_121 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_121 = happySpecReduce_1  47 happyReduction_121
happyReduction_121 _
	 =  HappyAbsSyn41
		 (([],[Intrinsic DMap.empty])
	)

happyReduce_122 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_122 = happySpecReduce_1  47 happyReduction_122
happyReduction_122 _
	 =  HappyAbsSyn41
		 (([],[Optional DMap.empty])
	)

happyReduce_123 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_123 = happySpecReduce_1  47 happyReduction_123
happyReduction_123 _
	 =  HappyAbsSyn41
		 (([],[Pointer DMap.empty])
	)

happyReduce_124 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_124 = happySpecReduce_1  47 happyReduction_124
happyReduction_124 _
	 =  HappyAbsSyn41
		 (([],[Save DMap.empty])
	)

happyReduce_125 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_125 = happySpecReduce_1  47 happyReduction_125
happyReduction_125 _
	 =  HappyAbsSyn41
		 (([],[Target DMap.empty])
	)

happyReduce_126 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_126 = happyReduce 4 47 happyReduction_126
happyReduction_126 (_ `HappyStk`
	(HappyAbsSyn60  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn41
		 (([],[MeasureUnit DMap.empty happy_var_3])
	) `HappyStk` happyRest

happyReduce_127 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_127 = happySpecReduce_1  47 happyReduction_127
happyReduction_127 _
	 =  HappyAbsSyn41
		 (([],[Volatile DMap.empty])
	)

happyReduce_128 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_128 = happySpecReduce_1  48 happyReduction_128
happyReduction_128 (HappyAbsSyn52  happy_var_1)
	 =  HappyAbsSyn41
		 (([],[Dimension DMap.empty happy_var_1])
	)
happyReduction_128 _  = notHappyAtAll 

happyReduce_129 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_129 = happySpecReduce_1  48 happyReduction_129
happyReduction_129 _
	 =  HappyAbsSyn41
		 (([],[Parameter DMap.empty])
	)

happyReduce_130 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_130 = happySpecReduce_1  48 happyReduction_130
happyReduction_130 (HappyAbsSyn56  happy_var_1)
	 =  HappyAbsSyn41
		 (([],[happy_var_1])
	)
happyReduction_130 _  = notHappyAtAll 

happyReduce_131 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_131 = happySpecReduce_1  48 happyReduction_131
happyReduction_131 _
	 =  HappyAbsSyn41
		 (([],[Allocatable DMap.empty])
	)

happyReduce_132 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_132 = happySpecReduce_1  48 happyReduction_132
happyReduction_132 _
	 =  HappyAbsSyn41
		 (([],[External DMap.empty])
	)

happyReduce_133 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_133 = happyReduce 4 48 happyReduction_133
happyReduction_133 (_ `HappyStk`
	(HappyAbsSyn70  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn41
		 (([],[Intent DMap.empty happy_var_3])
	) `HappyStk` happyRest

happyReduce_134 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_134 = happySpecReduce_1  48 happyReduction_134
happyReduction_134 _
	 =  HappyAbsSyn41
		 (([],[Intrinsic DMap.empty])
	)

happyReduce_135 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_135 = happySpecReduce_1  48 happyReduction_135
happyReduction_135 _
	 =  HappyAbsSyn41
		 (([],[Optional DMap.empty])
	)

happyReduce_136 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_136 = happySpecReduce_1  48 happyReduction_136
happyReduction_136 _
	 =  HappyAbsSyn41
		 (([],[Pointer DMap.empty])
	)

happyReduce_137 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_137 = happySpecReduce_1  48 happyReduction_137
happyReduction_137 _
	 =  HappyAbsSyn41
		 (([],[Save DMap.empty])
	)

happyReduce_138 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_138 = happySpecReduce_1  48 happyReduction_138
happyReduction_138 _
	 =  HappyAbsSyn41
		 (([],[Target DMap.empty])
	)

happyReduce_139 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_139 = happyReduce 4 48 happyReduction_139
happyReduction_139 (_ `HappyStk`
	(HappyAbsSyn60  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn41
		 (([],[MeasureUnit DMap.empty happy_var_3])
	) `HappyStk` happyRest

happyReduce_140 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_140 = happySpecReduce_1  48 happyReduction_140
happyReduction_140 _
	 =  HappyAbsSyn41
		 (([],[Volatile DMap.empty])
	)

happyReduce_141 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_141 = happySpecReduce_1  49 happyReduction_141
happyReduction_141 _
	 =  HappyAbsSyn56
		 (Public DMap.empty
	)

happyReduce_142 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_142 = happySpecReduce_1  49 happyReduction_142
happyReduction_142 _
	 =  HappyAbsSyn56
		 (Private DMap.empty
	)

happyReduce_143 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_143 = happyMonadReduce 3 50 happyReduction_143
happyReduction_143 ((HappyAbsSyn58  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ MeasureUnitDef DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_144 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_144 = happySpecReduce_3  51 happyReduction_144
happyReduction_144 (HappyAbsSyn58  happy_var_3)
	_
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn58
		 (happy_var_1:happy_var_3
	)
happyReduction_144 _ _ _  = notHappyAtAll 

happyReduce_145 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_145 = happySpecReduce_1  51 happyReduction_145
happyReduction_145 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn58
		 ([happy_var_1]
	)
happyReduction_145 _  = notHappyAtAll 

happyReduce_146 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_146 = happyMonadReduce 4 52 happyReduction_146
happyReduction_146 ((HappyAbsSyn60  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return (happy_var_2, happy_var_4))))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_147 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_147 = happySpecReduce_3  53 happyReduction_147
happyReduction_147 (HappyAbsSyn61  happy_var_3)
	_
	(HappyAbsSyn61  happy_var_1)
	 =  HappyAbsSyn60
		 (UnitQuotient DMap.empty happy_var_1 happy_var_3
	)
happyReduction_147 _ _ _  = notHappyAtAll 

happyReduce_148 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_148 = happySpecReduce_1  53 happyReduction_148
happyReduction_148 (HappyAbsSyn61  happy_var_1)
	 =  HappyAbsSyn60
		 (UnitProduct DMap.empty happy_var_1
	)
happyReduction_148 _  = notHappyAtAll 

happyReduce_149 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_149 = happySpecReduce_0  53 happyReduction_149
happyReduction_149  =  HappyAbsSyn60
		 (UnitNone DMap.empty
	)

happyReduce_150 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_150 = happySpecReduce_2  54 happyReduction_150
happyReduction_150 (HappyAbsSyn61  happy_var_2)
	(HappyAbsSyn61  happy_var_1)
	 =  HappyAbsSyn61
		 (happy_var_1++happy_var_2
	)
happyReduction_150 _ _  = notHappyAtAll 

happyReduce_151 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_151 = happySpecReduce_1  54 happyReduction_151
happyReduction_151 (HappyAbsSyn61  happy_var_1)
	 =  HappyAbsSyn61
		 (happy_var_1
	)
happyReduction_151 _  = notHappyAtAll 

happyReduce_152 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_152 = happySpecReduce_3  55 happyReduction_152
happyReduction_152 (HappyAbsSyn63  happy_var_3)
	_
	(HappyTerminal (ID happy_var_1))
	 =  HappyAbsSyn61
		 ([(happy_var_1, happy_var_3)]
	)
happyReduction_152 _ _ _  = notHappyAtAll 

happyReduce_153 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_153 = happySpecReduce_1  55 happyReduction_153
happyReduction_153 (HappyTerminal (ID happy_var_1))
	 =  HappyAbsSyn61
		 ([(happy_var_1, NullFraction DMap.empty)]
	)
happyReduction_153 _  = notHappyAtAll 

happyReduce_154 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_154 = happySpecReduce_1  55 happyReduction_154
happyReduction_154 _
	 =  HappyAbsSyn61
		 ([]
	)

happyReduce_155 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_155 = happyReduce 5 56 happyReduction_155
happyReduction_155 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn63
		 (FractionConst DMap.empty happy_var_2 happy_var_4
	) `HappyStk` happyRest

happyReduce_156 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_156 = happySpecReduce_1  56 happyReduction_156
happyReduction_156 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn63
		 (IntegerConst DMap.empty happy_var_1
	)
happyReduction_156 _  = notHappyAtAll 

happyReduce_157 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_157 = happySpecReduce_3  56 happyReduction_157
happyReduction_157 _
	(HappyAbsSyn63  happy_var_2)
	_
	 =  HappyAbsSyn63
		 (happy_var_2
	)
happyReduction_157 _ _ _  = notHappyAtAll 

happyReduce_158 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_158 = happySpecReduce_2  57 happyReduction_158
happyReduction_158 (HappyAbsSyn17  happy_var_2)
	_
	 =  HappyAbsSyn17
		 ("-" ++ happy_var_2
	)
happyReduction_158 _ _  = notHappyAtAll 

happyReduce_159 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_159 = happySpecReduce_1  57 happyReduction_159
happyReduction_159 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_159 _  = notHappyAtAll 

happyReduce_160 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_160 = happySpecReduce_1  58 happyReduction_160
happyReduction_160 (HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn52
		 (map expr2array_spec happy_var_1
	)
happyReduction_160 _  = notHappyAtAll 

happyReduce_161 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_161 = happySpecReduce_3  59 happyReduction_161
happyReduction_161 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1++[happy_var_3]
	)
happyReduction_161 _ _ _  = notHappyAtAll 

happyReduce_162 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_162 = happySpecReduce_1  59 happyReduction_162
happyReduction_162 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_162 _  = notHappyAtAll 

happyReduce_163 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_163 = happySpecReduce_1  60 happyReduction_163
happyReduction_163 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_163 _  = notHappyAtAll 

happyReduce_164 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_164 = happySpecReduce_1  60 happyReduction_164
happyReduction_164 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_164 _  = notHappyAtAll 

happyReduce_165 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_165 = happyMonadReduce 3 61 happyReduction_165
happyReduction_165 ((HappyTerminal (StrConst happy_var_3)) `HappyStk`
	(HappyAbsSyn262  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_2 >>= (\s -> return $ Include DMap.empty (Con DMap.empty s happy_var_3))))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_166 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_166 = happySpecReduce_1  62 happyReduction_166
happyReduction_166 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_166 _  = notHappyAtAll 

happyReduce_167 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_167 = happySpecReduce_1  63 happyReduction_167
happyReduction_167 _
	 =  HappyAbsSyn70
		 (In DMap.empty
	)

happyReduce_168 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_168 = happySpecReduce_1  63 happyReduction_168
happyReduction_168 _
	 =  HappyAbsSyn70
		 (Out DMap.empty
	)

happyReduce_169 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_169 = happySpecReduce_1  63 happyReduction_169
happyReduction_169 _
	 =  HappyAbsSyn70
		 (InOut DMap.empty
	)

happyReduce_170 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_170 = happySpecReduce_1  64 happyReduction_170
happyReduction_170 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_170 _  = notHappyAtAll 

happyReduce_171 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_171 = happySpecReduce_1  64 happyReduction_171
happyReduction_171 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_171 _  = notHappyAtAll 

happyReduce_172 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_172 = happySpecReduce_1  64 happyReduction_172
happyReduction_172 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_172 _  = notHappyAtAll 

happyReduce_173 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_173 = happySpecReduce_1  64 happyReduction_173
happyReduction_173 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_173 _  = notHappyAtAll 

happyReduce_174 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_174 = happySpecReduce_1  64 happyReduction_174
happyReduction_174 (HappyAbsSyn96  happy_var_1)
	 =  HappyAbsSyn36
		 (DataDecl DMap.empty happy_var_1
	)
happyReduction_174 _  = notHappyAtAll 

happyReduce_175 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_175 = happySpecReduce_1  64 happyReduction_175
happyReduction_175 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_175 _  = notHappyAtAll 

happyReduce_176 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_176 = happySpecReduce_1  64 happyReduction_176
happyReduction_176 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_176 _  = notHappyAtAll 

happyReduce_177 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_177 = happySpecReduce_1  64 happyReduction_177
happyReduction_177 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_177 _  = notHappyAtAll 

happyReduce_178 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_178 = happySpecReduce_1  64 happyReduction_178
happyReduction_178 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn36
		 (happy_var_1
	)
happyReduction_178 _  = notHappyAtAll 

happyReduce_179 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_179 = happySpecReduce_1  65 happyReduction_179
happyReduction_179 _
	 =  HappyAbsSyn36
		 (AccessStmt DMap.empty (Save DMap.empty) []
	)

happyReduce_180 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_180 = happyMonadReduce 6 66 happyReduction_180
happyReduction_180 ((HappyAbsSyn12  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Common DMap.empty s (Just happy_var_4) happy_var_6)))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_181 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_181 = happyMonadReduce 3 66 happyReduction_181
happyReduction_181 ((HappyAbsSyn12  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Common DMap.empty s Nothing happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_182 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_182 = happyReduce 5 67 happyReduction_182
happyReduction_182 (_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn76  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn75  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn36
		 (Interface DMap.empty happy_var_1 happy_var_3
	) `HappyStk` happyRest

happyReduce_183 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_183 = happySpecReduce_2  68 happyReduction_183
happyReduction_183 (HappyAbsSyn94  happy_var_2)
	_
	 =  HappyAbsSyn75
		 (Just happy_var_2
	)
happyReduction_183 _ _  = notHappyAtAll 

happyReduce_184 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_184 = happySpecReduce_1  68 happyReduction_184
happyReduction_184 _
	 =  HappyAbsSyn75
		 (Nothing
	)

happyReduce_185 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_185 = happySpecReduce_2  69 happyReduction_185
happyReduction_185 (HappyAbsSyn77  happy_var_2)
	(HappyAbsSyn76  happy_var_1)
	 =  HappyAbsSyn76
		 (happy_var_1++[happy_var_2]
	)
happyReduction_185 _ _  = notHappyAtAll 

happyReduce_186 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_186 = happySpecReduce_1  69 happyReduction_186
happyReduction_186 (HappyAbsSyn77  happy_var_1)
	 =  HappyAbsSyn76
		 ([happy_var_1]
	)
happyReduction_186 _  = notHappyAtAll 

happyReduce_187 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_187 = happySpecReduce_1  70 happyReduction_187
happyReduction_187 (HappyAbsSyn77  happy_var_1)
	 =  HappyAbsSyn77
		 (happy_var_1
	)
happyReduction_187 _  = notHappyAtAll 

happyReduce_188 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_188 = happySpecReduce_1  70 happyReduction_188
happyReduction_188 (HappyAbsSyn77  happy_var_1)
	 =  HappyAbsSyn77
		 (happy_var_1
	)
happyReduction_188 _  = notHappyAtAll 

happyReduce_189 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_189 = happySpecReduce_3  71 happyReduction_189
happyReduction_189 (HappyAbsSyn94  happy_var_3)
	_
	_
	 =  HappyAbsSyn75
		 (Just happy_var_3
	)
happyReduction_189 _ _ _  = notHappyAtAll 

happyReduce_190 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_190 = happySpecReduce_2  71 happyReduction_190
happyReduction_190 _
	_
	 =  HappyAbsSyn75
		 (Nothing
	)

happyReduce_191 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_191 = happyMonadReduce 5 72 happyReduction_191
happyReduction_191 ((HappyAbsSyn17  happy_var_5) `HappyStk`
	(HappyAbsSyn36  happy_var_4) `HappyStk`
	(HappyAbsSyn18  happy_var_3) `HappyStk`
	(HappyAbsSyn33  happy_var_2) `HappyStk`
	(HappyAbsSyn114  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { name <- cmpNames (fst4 happy_var_1) happy_var_5 "interface declaration";
          return (FunctionInterface DMap.empty  name (snd4 happy_var_1) happy_var_2 happy_var_3 happy_var_4); }))
	) (\r -> happyReturn (HappyAbsSyn77 r))

happyReduce_192 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_192 = happyMonadReduce 2 72 happyReduction_192
happyReduction_192 ((HappyAbsSyn17  happy_var_2) `HappyStk`
	(HappyAbsSyn114  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { name <- cmpNames (fst4 happy_var_1) happy_var_2 "interface declaration";
          s <- getSrcSpanNull;
          return (FunctionInterface DMap.empty name (snd4 happy_var_1) (UseNil DMap.empty) (ImplicitNull DMap.empty) (NullDecl DMap.empty s)); }))
	) (\r -> happyReturn (HappyAbsSyn77 r))

happyReduce_193 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_193 = happyMonadReduce 5 72 happyReduction_193
happyReduction_193 ((HappyAbsSyn17  happy_var_5) `HappyStk`
	(HappyAbsSyn36  happy_var_4) `HappyStk`
	(HappyAbsSyn18  happy_var_3) `HappyStk`
	(HappyAbsSyn33  happy_var_2) `HappyStk`
	(HappyAbsSyn113  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { name <- cmpNames (fst3 happy_var_1) happy_var_5 "interface declaration";
                return (SubroutineInterface DMap.empty name (snd3 happy_var_1) happy_var_2 happy_var_3 happy_var_4); }))
	) (\r -> happyReturn (HappyAbsSyn77 r))

happyReduce_194 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_194 = happyMonadReduce 2 72 happyReduction_194
happyReduction_194 ((HappyAbsSyn17  happy_var_2) `HappyStk`
	(HappyAbsSyn113  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { name <- cmpNames (fst3 happy_var_1) happy_var_2 "interface declaration";
          s <- getSrcSpanNull;
          return (SubroutineInterface DMap.empty name (snd3 happy_var_1) (UseNil DMap.empty) (ImplicitNull DMap.empty) (NullDecl DMap.empty s)); }))
	) (\r -> happyReturn (HappyAbsSyn77 r))

happyReduce_195 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_195 = happySpecReduce_3  73 happyReduction_195
happyReduction_195 (HappyAbsSyn81  happy_var_3)
	_
	_
	 =  HappyAbsSyn77
		 (ModuleProcedure DMap.empty happy_var_3
	)
happyReduction_195 _ _ _  = notHappyAtAll 

happyReduce_196 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_196 = happySpecReduce_3  74 happyReduction_196
happyReduction_196 (HappyAbsSyn25  happy_var_3)
	_
	(HappyAbsSyn81  happy_var_1)
	 =  HappyAbsSyn81
		 (happy_var_1++[happy_var_3]
	)
happyReduction_196 _ _ _  = notHappyAtAll 

happyReduce_197 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_197 = happySpecReduce_1  74 happyReduction_197
happyReduction_197 (HappyAbsSyn25  happy_var_1)
	 =  HappyAbsSyn81
		 ([happy_var_1]
	)
happyReduction_197 _  = notHappyAtAll 

happyReduce_198 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_198 = happyMonadReduce 5 75 happyReduction_198
happyReduction_198 ((HappyAbsSyn17  happy_var_5) `HappyStk`
	(HappyAbsSyn87  happy_var_4) `HappyStk`
	(HappyAbsSyn86  happy_var_3) `HappyStk`
	(HappyAbsSyn83  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( do { sp <- getSrcSpan happy_var_1;
    name <- cmpNames (fst happy_var_2) happy_var_5 "derived type name";
          return (DerivedTypeDef DMap.empty sp name (snd happy_var_2) happy_var_3 happy_var_4);  }))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_199 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_199 = happyReduce 5 76 happyReduction_199
happyReduction_199 ((HappyAbsSyn25  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn56  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn83
		 ((happy_var_5,[happy_var_3])
	) `HappyStk` happyRest

happyReduce_200 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_200 = happySpecReduce_3  76 happyReduction_200
happyReduction_200 (HappyAbsSyn25  happy_var_3)
	_
	_
	 =  HappyAbsSyn83
		 ((happy_var_3,[])
	)
happyReduction_200 _ _ _  = notHappyAtAll 

happyReduce_201 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_201 = happySpecReduce_2  76 happyReduction_201
happyReduction_201 (HappyAbsSyn25  happy_var_2)
	_
	 =  HappyAbsSyn83
		 ((happy_var_2,[])
	)
happyReduction_201 _ _  = notHappyAtAll 

happyReduce_202 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_202 = happySpecReduce_2  77 happyReduction_202
happyReduction_202 _
	_
	 =  HappyAbsSyn17
		 (""
	)

happyReduce_203 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_203 = happySpecReduce_3  77 happyReduction_203
happyReduction_203 (HappyAbsSyn17  happy_var_3)
	_
	_
	 =  HappyAbsSyn17
		 (happy_var_3
	)
happyReduction_203 _ _ _  = notHappyAtAll 

happyReduce_204 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_204 = happySpecReduce_1  78 happyReduction_204
happyReduction_204 (HappyTerminal (ID happy_var_1))
	 =  HappyAbsSyn25
		 (SubName DMap.empty happy_var_1
	)
happyReduction_204 _  = notHappyAtAll 

happyReduce_205 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_205 = happySpecReduce_2  79 happyReduction_205
happyReduction_205 _
	_
	 =  HappyAbsSyn86
		 ([Private DMap.empty, Sequence DMap.empty]
	)

happyReduce_206 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_206 = happySpecReduce_2  79 happyReduction_206
happyReduction_206 _
	_
	 =  HappyAbsSyn86
		 ([Sequence DMap.empty, Private DMap.empty]
	)

happyReduce_207 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_207 = happySpecReduce_1  79 happyReduction_207
happyReduction_207 _
	 =  HappyAbsSyn86
		 ([Private DMap.empty]
	)

happyReduce_208 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_208 = happySpecReduce_1  79 happyReduction_208
happyReduction_208 _
	 =  HappyAbsSyn86
		 ([Sequence DMap.empty]
	)

happyReduce_209 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_209 = happySpecReduce_0  79 happyReduction_209
happyReduction_209  =  HappyAbsSyn86
		 ([]
	)

happyReduce_210 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_210 = happySpecReduce_2  80 happyReduction_210
happyReduction_210 (HappyAbsSyn36  happy_var_2)
	(HappyAbsSyn87  happy_var_1)
	 =  HappyAbsSyn87
		 (happy_var_1++[happy_var_2]
	)
happyReduction_210 _ _  = notHappyAtAll 

happyReduce_211 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_211 = happySpecReduce_1  80 happyReduction_211
happyReduction_211 (HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn87
		 ([happy_var_1]
	)
happyReduction_211 _  = notHappyAtAll 

happyReduce_212 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_212 = happyMonadReduce 5 81 happyReduction_212
happyReduction_212 ((HappyAbsSyn42  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn41  happy_var_3) `HappyStk`
	(HappyAbsSyn45  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ 
         if null (fst happy_var_3) 
         then Decl DMap.empty s happy_var_5 ((BaseType DMap.empty (fst3 happy_var_2) (snd happy_var_3) (snd3 happy_var_2) (trd3 happy_var_2)))
         else Decl DMap.empty s happy_var_5 ((ArrayT DMap.empty (fst happy_var_3) (fst3 happy_var_2) (snd happy_var_3) (snd3 happy_var_2) (trd3 happy_var_2))))))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_213 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_213 = happySpecReduce_3  82 happyReduction_213
happyReduction_213 (HappyAbsSyn41  happy_var_3)
	_
	(HappyAbsSyn41  happy_var_1)
	 =  HappyAbsSyn41
		 ((fst happy_var_1++fst happy_var_3,snd happy_var_1++snd happy_var_3)
	)
happyReduction_213 _ _ _  = notHappyAtAll 

happyReduce_214 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_214 = happySpecReduce_0  82 happyReduction_214
happyReduction_214  =  HappyAbsSyn41
		 (([],[])
	)

happyReduce_215 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_215 = happySpecReduce_1  83 happyReduction_215
happyReduction_215 _
	 =  HappyAbsSyn41
		 (([],[Pointer DMap.empty])
	)

happyReduce_216 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_216 = happySpecReduce_1  83 happyReduction_216
happyReduction_216 (HappyAbsSyn52  happy_var_1)
	 =  HappyAbsSyn41
		 ((happy_var_1,[])
	)
happyReduction_216 _  = notHappyAtAll 

happyReduce_217 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_217 = happyReduce 4 84 happyReduction_217
happyReduction_217 (_ `HappyStk`
	(HappyAbsSyn42  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn41  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn36
		 (AttrStmt DMap.empty (head $ snd happy_var_1) (happy_var_3 ++ (map (\(x, y) -> (x, y, Nothing)) (fst happy_var_1)))
	) `HappyStk` happyRest

happyReduce_218 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_218 = happySpecReduce_1  84 happyReduction_218
happyReduction_218 (HappyAbsSyn41  happy_var_1)
	 =  HappyAbsSyn36
		 (AttrStmt DMap.empty (head $ snd happy_var_1) ((map (\(x, y) -> (x, y, Nothing)) (fst happy_var_1)))
	)
happyReduction_218 _  = notHappyAtAll 

happyReduce_219 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_219 = happySpecReduce_1  84 happyReduction_219
happyReduction_219 (HappyAbsSyn52  happy_var_1)
	 =  HappyAbsSyn36
		 (AttrStmt DMap.empty (Dimension DMap.empty happy_var_1) []
	)
happyReduction_219 _  = notHappyAtAll 

happyReduce_220 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_220 = happySpecReduce_3  85 happyReduction_220
happyReduction_220 (HappyAbsSyn93  happy_var_3)
	_
	(HappyAbsSyn56  happy_var_1)
	 =  HappyAbsSyn36
		 (AccessStmt DMap.empty happy_var_1 happy_var_3
	)
happyReduction_220 _ _ _  = notHappyAtAll 

happyReduce_221 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_221 = happySpecReduce_2  85 happyReduction_221
happyReduction_221 (HappyAbsSyn93  happy_var_2)
	(HappyAbsSyn56  happy_var_1)
	 =  HappyAbsSyn36
		 (AccessStmt DMap.empty happy_var_1 happy_var_2
	)
happyReduction_221 _ _  = notHappyAtAll 

happyReduce_222 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_222 = happySpecReduce_1  85 happyReduction_222
happyReduction_222 (HappyAbsSyn56  happy_var_1)
	 =  HappyAbsSyn36
		 (AccessStmt DMap.empty happy_var_1 []
	)
happyReduction_222 _  = notHappyAtAll 

happyReduce_223 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_223 = happySpecReduce_3  86 happyReduction_223
happyReduction_223 (HappyAbsSyn94  happy_var_3)
	_
	(HappyAbsSyn93  happy_var_1)
	 =  HappyAbsSyn93
		 (happy_var_1++[happy_var_3]
	)
happyReduction_223 _ _ _  = notHappyAtAll 

happyReduce_224 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_224 = happySpecReduce_1  86 happyReduction_224
happyReduction_224 (HappyAbsSyn94  happy_var_1)
	 =  HappyAbsSyn93
		 ([happy_var_1]
	)
happyReduction_224 _  = notHappyAtAll 

happyReduce_225 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_225 = happySpecReduce_1  87 happyReduction_225
happyReduction_225 (HappyAbsSyn94  happy_var_1)
	 =  HappyAbsSyn94
		 (happy_var_1
	)
happyReduction_225 _  = notHappyAtAll 

happyReduce_226 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_226 = happyMonadReduce 2 88 happyReduction_226
happyReduction_226 ((HappyTerminal (ID happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ GName DMap.empty (Var DMap.empty s [(VarName DMap.empty happy_var_2,[])]))))
	) (\r -> happyReturn (HappyAbsSyn94 r))

happyReduce_227 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_227 = happyReduce 4 88 happyReduction_227
happyReduction_227 (_ `HappyStk`
	(HappyAbsSyn108  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn94
		 (GOper DMap.empty happy_var_3
	) `HappyStk` happyRest

happyReduce_228 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_228 = happyReduce 4 88 happyReduction_228
happyReduction_228 (_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn94
		 (GAssg DMap.empty
	) `HappyStk` happyRest

happyReduce_229 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_229 = happySpecReduce_2  89 happyReduction_229
happyReduction_229 (HappyAbsSyn52  happy_var_2)
	_
	 =  HappyAbsSyn96
		 (Data DMap.empty happy_var_2
	)
happyReduction_229 _ _  = notHappyAtAll 

happyReduce_230 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_230 = happySpecReduce_3  90 happyReduction_230
happyReduction_230 (HappyAbsSyn48  happy_var_3)
	_
	(HappyAbsSyn52  happy_var_1)
	 =  HappyAbsSyn52
		 (happy_var_1++[happy_var_3]
	)
happyReduction_230 _ _ _  = notHappyAtAll 

happyReduce_231 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_231 = happySpecReduce_1  90 happyReduction_231
happyReduction_231 (HappyAbsSyn48  happy_var_1)
	 =  HappyAbsSyn52
		 ([happy_var_1]
	)
happyReduction_231 _  = notHappyAtAll 

happyReduce_232 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_232 = happyReduce 4 91 happyReduction_232
happyReduction_232 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn48
		 ((happy_var_1,happy_var_3)
	) `HappyStk` happyRest

happyReduce_233 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_233 = happySpecReduce_3  92 happyReduction_233
happyReduction_233 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (ESeq DMap.empty  (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_233 _ _ _  = notHappyAtAll 

happyReduce_234 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_234 = happySpecReduce_1  92 happyReduction_234
happyReduction_234 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_234 _  = notHappyAtAll 

happyReduce_235 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_235 = happySpecReduce_1  93 happyReduction_235
happyReduction_235 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_235 _  = notHappyAtAll 

happyReduce_236 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_236 = happySpecReduce_3  94 happyReduction_236
happyReduction_236 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (ESeq DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_236 _ _ _  = notHappyAtAll 

happyReduce_237 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_237 = happySpecReduce_1  94 happyReduction_237
happyReduction_237 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_237 _  = notHappyAtAll 

happyReduce_238 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_238 = happySpecReduce_1  95 happyReduction_238
happyReduction_238 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_238 _  = notHappyAtAll 

happyReduce_239 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_239 = happySpecReduce_3  96 happyReduction_239
happyReduction_239 (HappyAbsSyn11  happy_var_3)
	_
	_
	 =  HappyAbsSyn36
		 (ExternalStmt DMap.empty happy_var_3
	)
happyReduction_239 _ _ _  = notHappyAtAll 

happyReduce_240 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_240 = happySpecReduce_2  96 happyReduction_240
happyReduction_240 (HappyAbsSyn11  happy_var_2)
	_
	 =  HappyAbsSyn36
		 (ExternalStmt DMap.empty happy_var_2
	)
happyReduction_240 _ _  = notHappyAtAll 

happyReduce_241 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_241 = happySpecReduce_3  97 happyReduction_241
happyReduction_241 (HappyAbsSyn17  happy_var_3)
	_
	(HappyAbsSyn11  happy_var_1)
	 =  HappyAbsSyn11
		 (happy_var_1++[happy_var_3]
	)
happyReduction_241 _ _ _  = notHappyAtAll 

happyReduce_242 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_242 = happySpecReduce_1  97 happyReduction_242
happyReduction_242 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn11
		 ([happy_var_1]
	)
happyReduction_242 _  = notHappyAtAll 

happyReduce_243 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_243 = happySpecReduce_1  98 happyReduction_243
happyReduction_243 (HappyTerminal (ID happy_var_1))
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_243 _  = notHappyAtAll 

happyReduce_244 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_244 = happySpecReduce_1  98 happyReduction_244
happyReduction_244 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_244 _  = notHappyAtAll 

happyReduce_245 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_245 = happySpecReduce_1  99 happyReduction_245
happyReduction_245 _
	 =  HappyAbsSyn17
		 ("common"
	)

happyReduce_246 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_246 = happySpecReduce_1  99 happyReduction_246
happyReduction_246 _
	 =  HappyAbsSyn17
		 ("allocate "
	)

happyReduce_247 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_247 = happySpecReduce_1  99 happyReduction_247
happyReduction_247 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_247 _  = notHappyAtAll 

happyReduce_248 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_248 = happySpecReduce_1  100 happyReduction_248
happyReduction_248 _
	 =  HappyAbsSyn17
		 ("in"
	)

happyReduce_249 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_249 = happySpecReduce_1  100 happyReduction_249
happyReduction_249 _
	 =  HappyAbsSyn17
		 ("out"
	)

happyReduce_250 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_250 = happySpecReduce_1  100 happyReduction_250
happyReduction_250 _
	 =  HappyAbsSyn17
		 ("len"
	)

happyReduce_251 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_251 = happySpecReduce_1  101 happyReduction_251
happyReduction_251 (HappyAbsSyn108  happy_var_1)
	 =  HappyAbsSyn108
		 (happy_var_1
	)
happyReduction_251 _  = notHappyAtAll 

happyReduce_252 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_252 = happySpecReduce_1  102 happyReduction_252
happyReduction_252 _
	 =  HappyAbsSyn108
		 (Power DMap.empty
	)

happyReduce_253 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_253 = happySpecReduce_1  102 happyReduction_253
happyReduction_253 _
	 =  HappyAbsSyn108
		 (Mul DMap.empty
	)

happyReduce_254 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_254 = happySpecReduce_1  102 happyReduction_254
happyReduction_254 _
	 =  HappyAbsSyn108
		 (Plus DMap.empty
	)

happyReduce_255 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_255 = happySpecReduce_1  102 happyReduction_255
happyReduction_255 _
	 =  HappyAbsSyn108
		 (Concat DMap.empty
	)

happyReduce_256 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_256 = happySpecReduce_1  102 happyReduction_256
happyReduction_256 (HappyAbsSyn108  happy_var_1)
	 =  HappyAbsSyn108
		 (happy_var_1
	)
happyReduction_256 _  = notHappyAtAll 

happyReduce_257 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_257 = happySpecReduce_1  102 happyReduction_257
happyReduction_257 _
	 =  HappyAbsSyn108
		 (And DMap.empty
	)

happyReduce_258 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_258 = happySpecReduce_1  102 happyReduction_258
happyReduction_258 _
	 =  HappyAbsSyn108
		 (Or DMap.empty
	)

happyReduce_259 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_259 = happySpecReduce_2  103 happyReduction_259
happyReduction_259 (HappyAbsSyn111  happy_var_2)
	_
	 =  HappyAbsSyn36
		 (Namelist DMap.empty happy_var_2
	)
happyReduction_259 _ _  = notHappyAtAll 

happyReduce_260 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_260 = happyReduce 6 104 happyReduction_260
happyReduction_260 ((HappyAbsSyn12  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn111  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn111
		 (happy_var_1++[(happy_var_4,happy_var_6)]
	) `HappyStk` happyRest

happyReduce_261 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_261 = happyReduce 4 104 happyReduction_261
happyReduction_261 ((HappyAbsSyn12  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn111
		 ([(happy_var_2,happy_var_4)]
	) `HappyStk` happyRest

happyReduce_262 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_262 = happySpecReduce_3  105 happyReduction_262
happyReduction_262 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1++[happy_var_3]
	)
happyReduction_262 _ _ _  = notHappyAtAll 

happyReduce_263 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_263 = happySpecReduce_1  105 happyReduction_263
happyReduction_263 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_263 _  = notHappyAtAll 

happyReduce_264 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_264 = happyReduce 4 106 happyReduction_264
happyReduction_264 (_ `HappyStk`
	(HappyAbsSyn117  happy_var_3) `HappyStk`
	(HappyAbsSyn25  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn113
		 ((happy_var_2,happy_var_3,Nothing)
	) `HappyStk` happyRest

happyReduce_265 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_265 = happyMonadReduce 4 106 happyReduction_265
happyReduction_265 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_3) `HappyStk`
	(HappyAbsSyn25  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_3) >>= (\s -> return $ (happy_var_2,Arg DMap.empty (NullArg DMap.empty) s,Nothing))))
	) (\r -> happyReturn (HappyAbsSyn113 r))

happyReduce_266 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_266 = happyReduce 5 106 happyReduction_266
happyReduction_266 (_ `HappyStk`
	(HappyAbsSyn117  happy_var_4) `HappyStk`
	(HappyAbsSyn25  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn45  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn113
		 ((happy_var_3,happy_var_4,Just (fst3 happy_var_1))
	) `HappyStk` happyRest

happyReduce_267 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_267 = happyReduce 9 107 happyReduction_267
happyReduction_267 (_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_7) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn117  happy_var_4) `HappyStk`
	(HappyAbsSyn25  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn45  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn114
		 ((happy_var_3,happy_var_4,Just (fst3 happy_var_1),Just (VarName DMap.empty happy_var_7))
	) `HappyStk` happyRest

happyReduce_268 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_268 = happyReduce 5 107 happyReduction_268
happyReduction_268 (_ `HappyStk`
	(HappyAbsSyn117  happy_var_4) `HappyStk`
	(HappyAbsSyn25  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn45  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn114
		 ((happy_var_3,happy_var_4,Just (fst3 happy_var_1),Nothing)
	) `HappyStk` happyRest

happyReduce_269 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_269 = happyReduce 8 107 happyReduction_269
happyReduction_269 (_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_6) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn117  happy_var_3) `HappyStk`
	(HappyAbsSyn25  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn114
		 ((happy_var_2,happy_var_3,Nothing,Just (VarName DMap.empty happy_var_6))
	) `HappyStk` happyRest

happyReduce_270 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_270 = happyReduce 4 107 happyReduction_270
happyReduction_270 (_ `HappyStk`
	(HappyAbsSyn117  happy_var_3) `HappyStk`
	(HappyAbsSyn25  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn114
		 ((happy_var_2,happy_var_3,Nothing,Nothing)
	) `HappyStk` happyRest

happyReduce_271 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_271 = happySpecReduce_1  108 happyReduction_271
happyReduction_271 (HappyTerminal (ID happy_var_1))
	 =  HappyAbsSyn25
		 (SubName DMap.empty happy_var_1
	)
happyReduction_271 _  = notHappyAtAll 

happyReduce_272 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_272 = happySpecReduce_1  108 happyReduction_272
happyReduction_272 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn25
		 (SubName DMap.empty happy_var_1
	)
happyReduction_272 _  = notHappyAtAll 

happyReduce_273 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_273 = happySpecReduce_1  109 happyReduction_273
happyReduction_273 (HappyAbsSyn45  happy_var_1)
	 =  HappyAbsSyn45
		 (happy_var_1
	)
happyReduction_273 _  = notHappyAtAll 

happyReduce_274 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_274 = happyMonadReduce 1 109 happyReduction_274
happyReduction_274 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (Recursive DMap.empty, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_275 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_275 = happyMonadReduce 1 109 happyReduction_275
happyReduction_275 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (Pure DMap.empty, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_276 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_276 = happyMonadReduce 1 109 happyReduction_276
happyReduction_276 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (Elemental DMap.empty, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn45 r))

happyReduce_277 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_277 = happyReduce 4 110 happyReduction_277
happyReduction_277 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_3) `HappyStk`
	(HappyAbsSyn118  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn117
		 ((happy_var_2 (spanExtR (happy_var_3, happy_var_3) 1))
	) `HappyStk` happyRest

happyReduce_278 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_278 = happySpecReduce_1  111 happyReduction_278
happyReduction_278 (HappyAbsSyn119  happy_var_1)
	 =  HappyAbsSyn118
		 (Arg DMap.empty happy_var_1
	)
happyReduction_278 _  = notHappyAtAll 

happyReduce_279 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_279 = happySpecReduce_0  111 happyReduction_279
happyReduction_279  =  HappyAbsSyn118
		 (Arg DMap.empty (NullArg DMap.empty)
	)

happyReduce_280 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_280 = happySpecReduce_3  112 happyReduction_280
happyReduction_280 (HappyAbsSyn119  happy_var_3)
	_
	(HappyAbsSyn119  happy_var_1)
	 =  HappyAbsSyn119
		 (ASeq DMap.empty happy_var_1 happy_var_3
	)
happyReduction_280 _ _ _  = notHappyAtAll 

happyReduce_281 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_281 = happySpecReduce_1  112 happyReduction_281
happyReduction_281 (HappyAbsSyn119  happy_var_1)
	 =  HappyAbsSyn119
		 (happy_var_1
	)
happyReduction_281 _  = notHappyAtAll 

happyReduce_282 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_282 = happySpecReduce_1  113 happyReduction_282
happyReduction_282 (HappyTerminal (ID happy_var_1))
	 =  HappyAbsSyn119
		 (ArgName DMap.empty happy_var_1
	)
happyReduction_282 _  = notHappyAtAll 

happyReduce_283 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_283 = happySpecReduce_1  113 happyReduction_283
happyReduction_283 _
	 =  HappyAbsSyn119
		 (ArgName DMap.empty "*"
	)

happyReduce_284 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_284 = happySpecReduce_3  114 happyReduction_284
happyReduction_284 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn121
		 (Assg DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_284 _ _ _  = notHappyAtAll 

happyReduce_285 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_285 = happyMonadReduce 7 114 happyReduction_285
happyReduction_285 ((HappyAbsSyn47  happy_var_7) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn12  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Assg DMap.empty s (Var DMap.empty s [(VarName DMap.empty happy_var_2, happy_var_4)]) happy_var_7)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_286 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_286 = happyMonadReduce 2 115 happyReduction_286
happyReduction_286 ((HappyAbsSyn123  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ Var DMap.empty s happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_287 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_287 = happySpecReduce_3  116 happyReduction_287
happyReduction_287 (HappyAbsSyn124  happy_var_3)
	_
	(HappyAbsSyn123  happy_var_1)
	 =  HappyAbsSyn123
		 (happy_var_1++[happy_var_3]
	)
happyReduction_287 _ _ _  = notHappyAtAll 

happyReduce_288 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_288 = happySpecReduce_1  116 happyReduction_288
happyReduction_288 (HappyAbsSyn124  happy_var_1)
	 =  HappyAbsSyn123
		 ([happy_var_1]
	)
happyReduction_288 _  = notHappyAtAll 

happyReduce_289 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_289 = happyReduce 4 117 happyReduction_289
happyReduction_289 (_ `HappyStk`
	(HappyAbsSyn12  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_1)) `HappyStk`
	happyRest)
	 = HappyAbsSyn124
		 ((VarName DMap.empty happy_var_1, happy_var_3)
	) `HappyStk` happyRest

happyReduce_290 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_290 = happyMonadReduce 3 117 happyReduction_290
happyReduction_290 (_ `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_1)) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (VarName DMap.empty happy_var_1, [NullExpr DMap.empty s]))))
	) (\r -> happyReturn (HappyAbsSyn124 r))

happyReduce_291 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_291 = happySpecReduce_1  117 happyReduction_291
happyReduction_291 (HappyTerminal (ID happy_var_1))
	 =  HappyAbsSyn124
		 ((VarName DMap.empty happy_var_1, [])
	)
happyReduction_291 _  = notHappyAtAll 

happyReduce_292 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_292 = happyMonadReduce 1 117 happyReduction_292
happyReduction_292 ((HappyAbsSyn17  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (VarName DMap.empty happy_var_1, [NullExpr DMap.empty s]))))
	) (\r -> happyReturn (HappyAbsSyn124 r))

happyReduce_293 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_293 = happySpecReduce_1  118 happyReduction_293
happyReduction_293 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_293 _  = notHappyAtAll 

happyReduce_294 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_294 = happySpecReduce_1  118 happyReduction_294
happyReduction_294 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_294 _  = notHappyAtAll 

happyReduce_295 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_295 = happySpecReduce_3  119 happyReduction_295
happyReduction_295 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bound DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_295 _ _ _  = notHappyAtAll 

happyReduce_296 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_296 = happyMonadReduce 1 119 happyReduction_296
happyReduction_296 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ Bound DMap.empty s (NullExpr DMap.empty s) (NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_297 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_297 = happyMonadReduce 2 119 happyReduction_297
happyReduction_297 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s' -> return $ Bound DMap.empty (spanTrans' happy_var_1 s') happy_var_1 (NullExpr DMap.empty s'))))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_298 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_298 = happyMonadReduce 3 119 happyReduction_298
happyReduction_298 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s@(_, l) -> return $ Bound DMap.empty s (NullExpr DMap.empty (l, l)) happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_299 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_299 = happySpecReduce_3  120 happyReduction_299
happyReduction_299 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1++[happy_var_3]
	)
happyReduction_299 _ _ _  = notHappyAtAll 

happyReduce_300 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_300 = happySpecReduce_1  120 happyReduction_300
happyReduction_300 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_300 _  = notHappyAtAll 

happyReduce_301 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_301 = happySpecReduce_1  121 happyReduction_301
happyReduction_301 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_301 _  = notHappyAtAll 

happyReduce_302 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_302 = happyMonadReduce 4 121 happyReduction_302
happyReduction_302 ((HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ AssgExpr DMap.empty s happy_var_2 happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_303 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_303 = happySpecReduce_1  122 happyReduction_303
happyReduction_303 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_303 _  = notHappyAtAll 

happyReduce_304 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_304 = happySpecReduce_1  123 happyReduction_304
happyReduction_304 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_304 _  = notHappyAtAll 

happyReduce_305 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_305 = happySpecReduce_3  124 happyReduction_305
happyReduction_305 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bin DMap.empty (spanTrans happy_var_1 happy_var_3) (Or DMap.empty) happy_var_1 happy_var_3
	)
happyReduction_305 _ _ _  = notHappyAtAll 

happyReduce_306 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_306 = happySpecReduce_1  124 happyReduction_306
happyReduction_306 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_306 _  = notHappyAtAll 

happyReduce_307 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_307 = happySpecReduce_3  125 happyReduction_307
happyReduction_307 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bin DMap.empty (spanTrans happy_var_1 happy_var_3) (And DMap.empty) happy_var_1 happy_var_3
	)
happyReduction_307 _ _ _  = notHappyAtAll 

happyReduce_308 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_308 = happySpecReduce_1  125 happyReduction_308
happyReduction_308 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_308 _  = notHappyAtAll 

happyReduce_309 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_309 = happySpecReduce_1  126 happyReduction_309
happyReduction_309 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_309 _  = notHappyAtAll 

happyReduce_310 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_310 = happySpecReduce_3  127 happyReduction_310
happyReduction_310 (HappyAbsSyn47  happy_var_3)
	(HappyAbsSyn108  happy_var_2)
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bin DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_2 happy_var_1 happy_var_3
	)
happyReduction_310 _ _ _  = notHappyAtAll 

happyReduce_311 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_311 = happySpecReduce_1  127 happyReduction_311
happyReduction_311 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_311 _  = notHappyAtAll 

happyReduce_312 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_312 = happySpecReduce_3  128 happyReduction_312
happyReduction_312 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bin DMap.empty (spanTrans happy_var_1 happy_var_3) (Concat DMap.empty) happy_var_1 happy_var_3
	)
happyReduction_312 _ _ _  = notHappyAtAll 

happyReduce_313 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_313 = happySpecReduce_1  128 happyReduction_313
happyReduction_313 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_313 _  = notHappyAtAll 

happyReduce_314 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_314 = happySpecReduce_3  129 happyReduction_314
happyReduction_314 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bin DMap.empty (spanTrans happy_var_1 happy_var_3) (Plus DMap.empty) happy_var_1 happy_var_3
	)
happyReduction_314 _ _ _  = notHappyAtAll 

happyReduce_315 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_315 = happySpecReduce_3  129 happyReduction_315
happyReduction_315 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bin DMap.empty (spanTrans happy_var_1 happy_var_3) (Minus DMap.empty) happy_var_1 happy_var_3
	)
happyReduction_315 _ _ _  = notHappyAtAll 

happyReduce_316 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_316 = happySpecReduce_1  129 happyReduction_316
happyReduction_316 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_316 _  = notHappyAtAll 

happyReduce_317 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_317 = happySpecReduce_3  130 happyReduction_317
happyReduction_317 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bin DMap.empty (spanTrans happy_var_1 happy_var_3) (Mul DMap.empty) happy_var_1 happy_var_3
	)
happyReduction_317 _ _ _  = notHappyAtAll 

happyReduce_318 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_318 = happySpecReduce_3  130 happyReduction_318
happyReduction_318 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bin DMap.empty (spanTrans happy_var_1 happy_var_3) (Div DMap.empty) happy_var_1 happy_var_3
	)
happyReduction_318 _ _ _  = notHappyAtAll 

happyReduce_319 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_319 = happySpecReduce_1  130 happyReduction_319
happyReduction_319 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_319 _  = notHappyAtAll 

happyReduce_320 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_320 = happySpecReduce_3  131 happyReduction_320
happyReduction_320 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (Bin DMap.empty (spanTrans happy_var_1 happy_var_3) (Power DMap.empty) happy_var_1 happy_var_3
	)
happyReduction_320 _ _ _  = notHappyAtAll 

happyReduce_321 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_321 = happySpecReduce_1  131 happyReduction_321
happyReduction_321 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_321 _  = notHappyAtAll 

happyReduce_322 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_322 = happyMonadReduce 3 132 happyReduction_322
happyReduction_322 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Unary DMap.empty s (UMinus DMap.empty) happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_323 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_323 = happyMonadReduce 3 132 happyReduction_323
happyReduction_323 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Unary DMap.empty s (Not DMap.empty) happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_324 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_324 = happySpecReduce_1  132 happyReduction_324
happyReduction_324 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_324 _  = notHappyAtAll 

happyReduce_325 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_325 = happyMonadReduce 4 133 happyReduction_325
happyReduction_325 ((HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Bin DMap.empty s (Mul DMap.empty) (Con DMap.empty s happy_var_2) happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_326 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_326 = happyMonadReduce 3 133 happyReduction_326
happyReduction_326 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Unary DMap.empty s (UMinus DMap.empty) happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_327 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_327 = happySpecReduce_1  133 happyReduction_327
happyReduction_327 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_327 _  = notHappyAtAll 

happyReduce_328 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_328 = happySpecReduce_1  134 happyReduction_328
happyReduction_328 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_328 _  = notHappyAtAll 

happyReduce_329 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_329 = happySpecReduce_1  134 happyReduction_329
happyReduction_329 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_329 _  = notHappyAtAll 

happyReduce_330 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_330 = happyMonadReduce 5 134 happyReduction_330
happyReduction_330 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Var DMap.empty s [(VarName DMap.empty happy_var_2, [happy_var_4])])))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_331 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_331 = happySpecReduce_1  134 happyReduction_331
happyReduction_331 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_331 _  = notHappyAtAll 

happyReduce_332 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_332 = happyMonadReduce 4 134 happyReduction_332
happyReduction_332 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen (((getSrcSpan happy_var_1 >>= (\s -> return $ ParenthesizedExpr DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_333 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_333 = happyMonadReduce 5 134 happyReduction_333
happyReduction_333 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Sqrt DMap.empty s happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_334 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_334 = happySpecReduce_1  135 happyReduction_334
happyReduction_334 _
	 =  HappyAbsSyn17
		 ("REAL"
	)

happyReduce_335 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_335 = happySpecReduce_1  135 happyReduction_335
happyReduction_335 _
	 =  HappyAbsSyn17
		 ("INTEGER"
	)

happyReduce_336 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_336 = happySpecReduce_1  135 happyReduction_336
happyReduction_336 _
	 =  HappyAbsSyn17
		 ("LOGICAL"
	)

happyReduce_337 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_337 = happySpecReduce_1  135 happyReduction_337
happyReduction_337 _
	 =  HappyAbsSyn17
		 ("CHARACTER"
	)

happyReduce_338 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_338 = happySpecReduce_3  136 happyReduction_338
happyReduction_338 (HappyAbsSyn17  happy_var_3)
	_
	(HappyAbsSyn11  happy_var_1)
	 =  HappyAbsSyn11
		 (happy_var_1++[happy_var_3]
	)
happyReduction_338 _ _ _  = notHappyAtAll 

happyReduce_339 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_339 = happySpecReduce_1  136 happyReduction_339
happyReduction_339 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn11
		 ([happy_var_1]
	)
happyReduction_339 _  = notHappyAtAll 

happyReduce_340 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_340 = happyMonadReduce 4 137 happyReduction_340
happyReduction_340 (_ `HappyStk`
	(HappyAbsSyn12  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ ArrayCon DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_341 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_341 = happySpecReduce_3  138 happyReduction_341
happyReduction_341 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1++[happy_var_3]
	)
happyReduction_341 _ _ _  = notHappyAtAll 

happyReduce_342 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_342 = happySpecReduce_1  138 happyReduction_342
happyReduction_342 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_342 _  = notHappyAtAll 

happyReduce_343 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_343 = happySpecReduce_1  139 happyReduction_343
happyReduction_343 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_343 _  = notHappyAtAll 

happyReduce_344 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_344 = happyMonadReduce 2 140 happyReduction_344
happyReduction_344 ((HappyTerminal (ID happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Var DMap.empty s [(VarName DMap.empty happy_var_2,[])])))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_345 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_345 = happySpecReduce_1  141 happyReduction_345
happyReduction_345 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_345 _  = notHappyAtAll 

happyReduce_346 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_346 = happyMonadReduce 2 142 happyReduction_346
happyReduction_346 ((HappyAbsSyn17  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ Con DMap.empty s happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_347 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_347 = happyMonadReduce 2 142 happyReduction_347
happyReduction_347 ((HappyTerminal (LitConst 'z' happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ ConL DMap.empty s 'z' happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_348 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_348 = happyMonadReduce 2 142 happyReduction_348
happyReduction_348 ((HappyTerminal (StrConst happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ ConS DMap.empty s happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_349 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_349 = happySpecReduce_1  142 happyReduction_349
happyReduction_349 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_349 _  = notHappyAtAll 

happyReduce_350 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_350 = happyMonadReduce 2 143 happyReduction_350
happyReduction_350 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ Con DMap.empty s  ".TRUE.")))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_351 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_351 = happyMonadReduce 2 143 happyReduction_351
happyReduction_351 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ Con DMap.empty s ".FALSE.")))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_352 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_352 = happySpecReduce_1  144 happyReduction_352
happyReduction_352 _
	 =  HappyAbsSyn108
		 (RelEQ DMap.empty
	)

happyReduce_353 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_353 = happySpecReduce_1  144 happyReduction_353
happyReduction_353 _
	 =  HappyAbsSyn108
		 (RelNE DMap.empty
	)

happyReduce_354 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_354 = happySpecReduce_1  144 happyReduction_354
happyReduction_354 _
	 =  HappyAbsSyn108
		 (RelLT DMap.empty
	)

happyReduce_355 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_355 = happySpecReduce_1  144 happyReduction_355
happyReduction_355 _
	 =  HappyAbsSyn108
		 (RelLE DMap.empty
	)

happyReduce_356 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_356 = happySpecReduce_1  144 happyReduction_356
happyReduction_356 _
	 =  HappyAbsSyn108
		 (RelGT DMap.empty
	)

happyReduce_357 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_357 = happySpecReduce_1  144 happyReduction_357
happyReduction_357 _
	 =  HappyAbsSyn108
		 (RelGE DMap.empty
	)

happyReduce_358 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_358 = happySpecReduce_1  145 happyReduction_358
happyReduction_358 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_358 _  = notHappyAtAll 

happyReduce_359 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_359 = happySpecReduce_1  146 happyReduction_359
happyReduction_359 (HappyTerminal (ID happy_var_1))
	 =  HappyAbsSyn153
		 (VarName DMap.empty happy_var_1
	)
happyReduction_359 _  = notHappyAtAll 

happyReduce_360 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_360 = happySpecReduce_1  147 happyReduction_360
happyReduction_360 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_360 _  = notHappyAtAll 

happyReduce_361 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_361 = happyMonadReduce 4 148 happyReduction_361
happyReduction_361 ((HappyAbsSyn121  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn156  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ For DMap.empty s (fst4 happy_var_2) (snd4 happy_var_2) (trd4 happy_var_2) (frh4 happy_var_2) happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_362 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_362 = happySpecReduce_2  149 happyReduction_362
happyReduction_362 (HappyAbsSyn156  happy_var_2)
	_
	 =  HappyAbsSyn156
		 (happy_var_2
	)
happyReduction_362 _ _  = notHappyAtAll 

happyReduce_363 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_363 = happyMonadReduce 1 149 happyReduction_363
happyReduction_363 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (VarName DMap.empty "", NullExpr DMap.empty s, NullExpr DMap.empty s, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn156 r))

happyReduce_364 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_364 = happyReduce 6 150 happyReduction_364
happyReduction_364 ((HappyAbsSyn47  happy_var_6) `HappyStk`
	(HappyAbsSyn47  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn153  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn156
		 ((happy_var_1,happy_var_3,happy_var_5,happy_var_6)
	) `HappyStk` happyRest

happyReduce_365 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_365 = happySpecReduce_2  151 happyReduction_365
happyReduction_365 (HappyAbsSyn47  happy_var_2)
	_
	 =  HappyAbsSyn47
		 (happy_var_2
	)
happyReduction_365 _ _  = notHappyAtAll 

happyReduce_366 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_366 = happyMonadReduce 0 151 happyReduction_366
happyReduction_366 (happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ Con DMap.empty s "1")))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_367 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_367 = happyMonadReduce 2 152 happyReduction_367
happyReduction_367 (_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ NullStmt DMap.empty s)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_368 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_368 = happyMonadReduce 1 152 happyReduction_368
happyReduction_368 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ NullStmt DMap.empty s)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_369 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_369 = happySpecReduce_3  152 happyReduction_369
happyReduction_369 (HappyAbsSyn121  happy_var_3)
	_
	(HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (FSeq DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_369 _ _ _  = notHappyAtAll 

happyReduce_370 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_370 = happyMonadReduce 2 153 happyReduction_370
happyReduction_370 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (NullStmt DMap.empty s, happy_var_1))))
	) (\r -> happyReturn (HappyAbsSyn160 r))

happyReduce_371 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_371 = happySpecReduce_3  153 happyReduction_371
happyReduction_371 (HappyAbsSyn160  happy_var_3)
	_
	(HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn160
		 (let (fs, n) = happy_var_3 in (FSeq DMap.empty (spanTrans happy_var_1 fs) happy_var_1 fs, n)
	)
happyReduction_371 _ _ _  = notHappyAtAll 

happyReduce_372 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_372 = happyMonadReduce 2 154 happyReduction_372
happyReduction_372 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ (NullStmt DMap.empty s, happy_var_1))))
	) (\r -> happyReturn (HappyAbsSyn160 r))

happyReduce_373 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_373 = happySpecReduce_3  154 happyReduction_373
happyReduction_373 (HappyAbsSyn160  happy_var_3)
	_
	(HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn160
		 (let (fs, n) = happy_var_3 in (FSeq DMap.empty (spanTrans happy_var_1 fs) happy_var_1 fs, n)
	)
happyReduction_373 _ _ _  = notHappyAtAll 

happyReduce_374 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_374 = happyMonadReduce 2 155 happyReduction_374
happyReduction_374 ((HappyAbsSyn121  happy_var_2) `HappyStk`
	(HappyAbsSyn17  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ Label DMap.empty s happy_var_1 happy_var_2  )))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_375 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_375 = happySpecReduce_1  155 happyReduction_375
happyReduction_375 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_375 _  = notHappyAtAll 

happyReduce_376 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_376 = happySpecReduce_2  156 happyReduction_376
happyReduction_376 _
	_
	 =  HappyAbsSyn13
		 (
	)

happyReduce_377 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_377 = happySpecReduce_1  156 happyReduction_377
happyReduction_377 _
	 =  HappyAbsSyn13
		 (
	)

happyReduce_378 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_378 = happySpecReduce_1  157 happyReduction_378
happyReduction_378 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_378 _  = notHappyAtAll 

happyReduce_379 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_379 = happySpecReduce_1  158 happyReduction_379
happyReduction_379 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_379 _  = notHappyAtAll 

happyReduce_380 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_380 = happySpecReduce_3  159 happyReduction_380
happyReduction_380 (HappyAbsSyn121  happy_var_3)
	_
	(HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (FSeq DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_380 _ _ _  = notHappyAtAll 

happyReduce_381 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_381 = happySpecReduce_3  159 happyReduction_381
happyReduction_381 (HappyAbsSyn121  happy_var_3)
	_
	(HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (FSeq DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_381 _ _ _  = notHappyAtAll 

happyReduce_382 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_382 = happySpecReduce_2  159 happyReduction_382
happyReduction_382 _
	(HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_382 _ _  = notHappyAtAll 

happyReduce_383 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_383 = happySpecReduce_2  159 happyReduction_383
happyReduction_383 _
	(HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_383 _ _  = notHappyAtAll 

happyReduce_384 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_384 = happyMonadReduce 2 160 happyReduction_384
happyReduction_384 ((HappyAbsSyn121  happy_var_2) `HappyStk`
	(HappyAbsSyn17  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpanNull) >>= (\s -> return $ Label DMap.empty s happy_var_1 happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_385 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_385 = happySpecReduce_1  160 happyReduction_385
happyReduction_385 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_385 _  = notHappyAtAll 

happyReduce_386 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_386 = happySpecReduce_1  161 happyReduction_386
happyReduction_386 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_386 _  = notHappyAtAll 

happyReduce_387 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_387 = happySpecReduce_1  161 happyReduction_387
happyReduction_387 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_387 _  = notHappyAtAll 

happyReduce_388 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_388 = happySpecReduce_1  161 happyReduction_388
happyReduction_388 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_388 _  = notHappyAtAll 

happyReduce_389 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_389 = happySpecReduce_1  161 happyReduction_389
happyReduction_389 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_389 _  = notHappyAtAll 

happyReduce_390 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_390 = happyMonadReduce 5 162 happyReduction_390
happyReduction_390 (_ `HappyStk`
	(HappyAbsSyn174  happy_var_4) `HappyStk`
	(HappyAbsSyn172  happy_var_3) `HappyStk`
	(HappyAbsSyn47  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ SelectStmt (DMap.empty) s happy_var_2 happy_var_3 happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_391 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_391 = happySpecReduce_2  163 happyReduction_391
happyReduction_391 (HappyAbsSyn47  happy_var_2)
	_
	 =  HappyAbsSyn47
		 (happy_var_2
	)
happyReduction_391 _ _  = notHappyAtAll 

happyReduce_392 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_392 = happySpecReduce_2  164 happyReduction_392
happyReduction_392 _
	_
	 =  HappyAbsSyn13
		 (
	)

happyReduce_393 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_393 = happySpecReduce_3  165 happyReduction_393
happyReduction_393 (HappyAbsSyn121  happy_var_3)
	(HappyAbsSyn47  happy_var_2)
	(HappyAbsSyn172  happy_var_1)
	 =  HappyAbsSyn172
		 (happy_var_1++[(happy_var_2,happy_var_3)]
	)
happyReduction_393 _ _ _  = notHappyAtAll 

happyReduce_394 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_394 = happySpecReduce_0  165 happyReduction_394
happyReduction_394  =  HappyAbsSyn172
		 ([]
	)

happyReduce_395 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_395 = happyReduce 5 166 happyReduction_395
happyReduction_395 (_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn47
		 (happy_var_3
	) `HappyStk` happyRest

happyReduce_396 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_396 = happyReduce 4 167 happyReduction_396
happyReduction_396 ((HappyAbsSyn121  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn174
		 (Just(happy_var_4)
	) `HappyStk` happyRest

happyReduce_397 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_397 = happySpecReduce_0  167 happyReduction_397
happyReduction_397  =  HappyAbsSyn174
		 (Nothing
	)

happyReduce_398 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_398 = happyMonadReduce 5 168 happyReduction_398
happyReduction_398 (_ `HappyStk`
	(HappyAbsSyn12  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Equivalence DMap.empty s happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn36 r))

happyReduce_399 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_399 = happySpecReduce_1  169 happyReduction_399
happyReduction_399 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_399 _  = notHappyAtAll 

happyReduce_400 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_400 = happySpecReduce_1  169 happyReduction_400
happyReduction_400 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_400 _  = notHappyAtAll 

happyReduce_401 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_401 = happySpecReduce_1  169 happyReduction_401
happyReduction_401 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_401 _  = notHappyAtAll 

happyReduce_402 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_402 = happySpecReduce_1  169 happyReduction_402
happyReduction_402 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_402 _  = notHappyAtAll 

happyReduce_403 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_403 = happySpecReduce_1  169 happyReduction_403
happyReduction_403 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_403 _  = notHappyAtAll 

happyReduce_404 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_404 = happySpecReduce_1  169 happyReduction_404
happyReduction_404 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_404 _  = notHappyAtAll 

happyReduce_405 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_405 = happySpecReduce_1  169 happyReduction_405
happyReduction_405 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_405 _  = notHappyAtAll 

happyReduce_406 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_406 = happyMonadReduce 2 169 happyReduction_406
happyReduction_406 ((HappyAbsSyn96  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ DataStmt DMap.empty s happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_407 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_407 = happySpecReduce_1  169 happyReduction_407
happyReduction_407 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_407 _  = notHappyAtAll 

happyReduce_408 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_408 = happySpecReduce_1  169 happyReduction_408
happyReduction_408 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_408 _  = notHappyAtAll 

happyReduce_409 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_409 = happySpecReduce_1  169 happyReduction_409
happyReduction_409 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_409 _  = notHappyAtAll 

happyReduce_410 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_410 = happySpecReduce_1  169 happyReduction_410
happyReduction_410 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_410 _  = notHappyAtAll 

happyReduce_411 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_411 = happySpecReduce_1  169 happyReduction_411
happyReduction_411 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_411 _  = notHappyAtAll 

happyReduce_412 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_412 = happySpecReduce_1  169 happyReduction_412
happyReduction_412 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_412 _  = notHappyAtAll 

happyReduce_413 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_413 = happySpecReduce_1  169 happyReduction_413
happyReduction_413 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_413 _  = notHappyAtAll 

happyReduce_414 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_414 = happySpecReduce_1  169 happyReduction_414
happyReduction_414 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_414 _  = notHappyAtAll 

happyReduce_415 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_415 = happySpecReduce_1  169 happyReduction_415
happyReduction_415 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_415 _  = notHappyAtAll 

happyReduce_416 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_416 = happySpecReduce_1  169 happyReduction_416
happyReduction_416 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_416 _  = notHappyAtAll 

happyReduce_417 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_417 = happySpecReduce_1  169 happyReduction_417
happyReduction_417 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_417 _  = notHappyAtAll 

happyReduce_418 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_418 = happySpecReduce_1  169 happyReduction_418
happyReduction_418 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_418 _  = notHappyAtAll 

happyReduce_419 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_419 = happySpecReduce_1  169 happyReduction_419
happyReduction_419 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_419 _  = notHappyAtAll 

happyReduce_420 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_420 = happySpecReduce_1  169 happyReduction_420
happyReduction_420 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_420 _  = notHappyAtAll 

happyReduce_421 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_421 = happySpecReduce_1  169 happyReduction_421
happyReduction_421 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_421 _  = notHappyAtAll 

happyReduce_422 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_422 = happySpecReduce_1  169 happyReduction_422
happyReduction_422 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_422 _  = notHappyAtAll 

happyReduce_423 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_423 = happySpecReduce_1  169 happyReduction_423
happyReduction_423 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_423 _  = notHappyAtAll 

happyReduce_424 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_424 = happySpecReduce_1  169 happyReduction_424
happyReduction_424 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_424 _  = notHappyAtAll 

happyReduce_425 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_425 = happySpecReduce_1  169 happyReduction_425
happyReduction_425 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_425 _  = notHappyAtAll 

happyReduce_426 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_426 = happyMonadReduce 2 169 happyReduction_426
happyReduction_426 ((HappyTerminal (Text happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ TextStmt DMap.empty s happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_427 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_427 = happyMonadReduce 3 170 happyReduction_427
happyReduction_427 ((HappyTerminal (StrConst happy_var_3)) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Pause DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_428 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_428 = happyMonadReduce 3 171 happyReduction_428
happyReduction_428 ((HappyAbsSyn202  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Format DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_429 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_429 = happyMonadReduce 6 172 happyReduction_429
happyReduction_429 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Call DMap.empty s happy_var_3 (ArgList DMap.empty happy_var_5))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_430 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_430 = happyMonadReduce 5 172 happyReduction_430
happyReduction_430 (_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Call DMap.empty s happy_var_3 (ArgList DMap.empty (NullExpr DMap.empty (happy_var_1, happy_var_1))))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_431 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_431 = happyMonadReduce 3 172 happyReduction_431
happyReduction_431 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Call DMap.empty s happy_var_3 (ArgList DMap.empty (NullExpr DMap.empty (happy_var_1, happy_var_1))))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_432 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_432 = happyMonadReduce 2 173 happyReduction_432
happyReduction_432 ((HappyAbsSyn17  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ Var DMap.empty s [(VarName DMap.empty happy_var_2,[])])))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_433 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_433 = happySpecReduce_3  174 happyReduction_433
happyReduction_433 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (ESeq DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_433 _ _ _  = notHappyAtAll 

happyReduce_434 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_434 = happySpecReduce_1  174 happyReduction_434
happyReduction_434 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_434 _  = notHappyAtAll 

happyReduce_435 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_435 = happyMonadReduce 4 175 happyReduction_435
happyReduction_435 ((HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ AssgExpr DMap.empty s happy_var_2 happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_436 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_436 = happySpecReduce_1  175 happyReduction_436
happyReduction_436 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_436 _  = notHappyAtAll 

happyReduce_437 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_437 = happySpecReduce_1  176 happyReduction_437
happyReduction_437 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_437 _  = notHappyAtAll 

happyReduce_438 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_438 = happySpecReduce_3  177 happyReduction_438
happyReduction_438 (HappyAbsSyn121  happy_var_3)
	(HappyAbsSyn47  happy_var_2)
	(HappyAbsSyn172  happy_var_1)
	 =  HappyAbsSyn172
		 (happy_var_1++[(happy_var_2,happy_var_3)]
	)
happyReduction_438 _ _ _  = notHappyAtAll 

happyReduce_439 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_439 = happySpecReduce_0  177 happyReduction_439
happyReduction_439  =  HappyAbsSyn172
		 ([]
	)

happyReduce_440 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_440 = happySpecReduce_2  178 happyReduction_440
happyReduction_440 (HappyAbsSyn47  happy_var_2)
	_
	 =  HappyAbsSyn47
		 (happy_var_2
	)
happyReduction_440 _ _  = notHappyAtAll 

happyReduce_441 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_441 = happyReduce 6 179 happyReduction_441
happyReduction_441 (_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn47
		 (happy_var_3
	) `HappyStk` happyRest

happyReduce_442 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_442 = happyReduce 6 180 happyReduction_442
happyReduction_442 (_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn47
		 (happy_var_3
	) `HappyStk` happyRest

happyReduce_443 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_443 = happyReduce 7 180 happyReduction_443
happyReduction_443 (_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn47
		 (happy_var_4
	) `HappyStk` happyRest

happyReduce_444 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_444 = happyMonadReduce 10 181 happyReduction_444
happyReduction_444 ((HappyAbsSyn17  happy_var_10) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_8) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ If DMap.empty s (Bin DMap.empty s (RelLT DMap.empty) happy_var_4 (Con DMap.empty s "0")) (Goto DMap.empty s happy_var_6)
      [(Bin DMap.empty s (RelEQ DMap.empty) happy_var_4 (Con DMap.empty s "0"), (Goto DMap.empty s happy_var_8)),
                         (Bin DMap.empty s (RelGT DMap.empty) happy_var_4 (Con DMap.empty s "0"), (Goto DMap.empty s happy_var_10))] Nothing)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_445 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_445 = happyMonadReduce 4 181 happyReduction_445
happyReduction_445 (_ `HappyStk`
	(HappyAbsSyn121  happy_var_3) `HappyStk`
	(HappyAbsSyn47  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ If DMap.empty s happy_var_2 happy_var_3 [] Nothing)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_446 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_446 = happyMonadReduce 5 181 happyReduction_446
happyReduction_446 (_ `HappyStk`
	(HappyAbsSyn172  happy_var_4) `HappyStk`
	(HappyAbsSyn121  happy_var_3) `HappyStk`
	(HappyAbsSyn47  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ If DMap.empty s happy_var_2 happy_var_3 happy_var_4 Nothing)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_447 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_447 = happyMonadReduce 8 181 happyReduction_447
happyReduction_447 (_ `HappyStk`
	(HappyAbsSyn121  happy_var_7) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn172  happy_var_4) `HappyStk`
	(HappyAbsSyn121  happy_var_3) `HappyStk`
	(HappyAbsSyn47  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ If DMap.empty s happy_var_2 happy_var_3 happy_var_4 (Just happy_var_7))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_448 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_448 = happySpecReduce_2  182 happyReduction_448
happyReduction_448 _
	_
	 =  HappyAbsSyn13
		 (
	)

happyReduce_449 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_449 = happySpecReduce_1  182 happyReduction_449
happyReduction_449 _
	 =  HappyAbsSyn13
		 (
	)

happyReduce_450 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_450 = happySpecReduce_1  183 happyReduction_450
happyReduction_450 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_450 _  = notHappyAtAll 

happyReduce_451 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_451 = happyMonadReduce 9 184 happyReduction_451
happyReduction_451 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_8) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Allocate DMap.empty s happy_var_4 happy_var_8)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_452 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_452 = happyMonadReduce 5 184 happyReduction_452
happyReduction_452 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\e -> getSrcSpan happy_var_1 >>= (\s -> return $ Allocate DMap.empty s happy_var_4 (NullExpr DMap.empty e)))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_453 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_453 = happySpecReduce_3  185 happyReduction_453
happyReduction_453 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (ESeq DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_453 _ _ _  = notHappyAtAll 

happyReduce_454 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_454 = happySpecReduce_1  185 happyReduction_454
happyReduction_454 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_454 _  = notHappyAtAll 

happyReduce_455 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_455 = happyMonadReduce 0 185 happyReduction_455
happyReduction_455 (happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (return . (NullExpr DMap.empty))))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_456 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_456 = happySpecReduce_3  186 happyReduction_456
happyReduction_456 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1++[happy_var_3]
	)
happyReduction_456 _ _ _  = notHappyAtAll 

happyReduce_457 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_457 = happySpecReduce_1  186 happyReduction_457
happyReduction_457 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_457 _  = notHappyAtAll 

happyReduce_458 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_458 = happyMonadReduce 2 187 happyReduction_458
happyReduction_458 ((HappyAbsSyn123  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Var DMap.empty s happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_459 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_459 = happySpecReduce_3  188 happyReduction_459
happyReduction_459 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1++[happy_var_3]
	)
happyReduction_459 _ _ _  = notHappyAtAll 

happyReduce_460 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_460 = happySpecReduce_1  188 happyReduction_460
happyReduction_460 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_460 _  = notHappyAtAll 

happyReduce_461 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_461 = happySpecReduce_1  189 happyReduction_461
happyReduction_461 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_461 _  = notHappyAtAll 

happyReduce_462 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_462 = happySpecReduce_1  189 happyReduction_462
happyReduction_462 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_462 _  = notHappyAtAll 

happyReduce_463 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_463 = happySpecReduce_1  190 happyReduction_463
happyReduction_463 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_463 _  = notHappyAtAll 

happyReduce_464 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_464 = happyMonadReduce 2 191 happyReduction_464
happyReduction_464 ((HappyAbsSyn199  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Var DMap.empty s happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_465 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_465 = happySpecReduce_3  192 happyReduction_465
happyReduction_465 (HappyAbsSyn124  happy_var_3)
	_
	(HappyAbsSyn199  happy_var_1)
	 =  HappyAbsSyn199
		 (happy_var_1++[happy_var_3]
	)
happyReduction_465 _ _ _  = notHappyAtAll 

happyReduce_466 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_466 = happySpecReduce_1  192 happyReduction_466
happyReduction_466 (HappyAbsSyn124  happy_var_1)
	 =  HappyAbsSyn199
		 ([happy_var_1]
	)
happyReduction_466 _  = notHappyAtAll 

happyReduce_467 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_467 = happyReduce 4 193 happyReduction_467
happyReduction_467 (_ `HappyStk`
	(HappyAbsSyn12  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_1)) `HappyStk`
	happyRest)
	 = HappyAbsSyn124
		 ((VarName DMap.empty happy_var_1, happy_var_3)
	) `HappyStk` happyRest

happyReduce_468 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_468 = happySpecReduce_1  193 happyReduction_468
happyReduction_468 (HappyTerminal (ID happy_var_1))
	 =  HappyAbsSyn124
		 ((VarName DMap.empty happy_var_1, [])
	)
happyReduction_468 _  = notHappyAtAll 

happyReduce_469 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_469 = happyMonadReduce 3 194 happyReduction_469
happyReduction_469 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Backspace DMap.empty s [NoSpec DMap.empty happy_var_3])))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_470 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_470 = happyMonadReduce 5 194 happyReduction_470
happyReduction_470 (_ `HappyStk`
	(HappyAbsSyn202  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Backspace DMap.empty s happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_471 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_471 = happySpecReduce_3  195 happyReduction_471
happyReduction_471 (HappyAbsSyn203  happy_var_3)
	_
	(HappyAbsSyn202  happy_var_1)
	 =  HappyAbsSyn202
		 (happy_var_1++[happy_var_3]
	)
happyReduction_471 _ _ _  = notHappyAtAll 

happyReduce_472 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_472 = happySpecReduce_1  195 happyReduction_472
happyReduction_472 (HappyAbsSyn203  happy_var_1)
	 =  HappyAbsSyn202
		 ([happy_var_1]
	)
happyReduction_472 _  = notHappyAtAll 

happyReduce_473 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_473 = happySpecReduce_1  196 happyReduction_473
happyReduction_473 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn203
		 (NoSpec DMap.empty happy_var_1
	)
happyReduction_473 _  = notHappyAtAll 

happyReduce_474 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_474 = happyReduce 4 196 happyReduction_474
happyReduction_474 ((HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn203
		 (Unit DMap.empty happy_var_4
	) `HappyStk` happyRest

happyReduce_475 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_475 = happyMonadReduce 4 196 happyReduction_475
happyReduction_475 ((HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_2)) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( case (map (toLower) happy_var_2) of
 --                                                    "unit"   -> return (Unit   DMap.empty happy_var_4)
                                                       "iostat" -> return (IOStat DMap.empty happy_var_4)
                                                       s        ->  parseError ("incorrect name in spec list: " ++ s)))
	) (\r -> happyReturn (HappyAbsSyn203 r))

happyReduce_476 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_476 = happyMonadReduce 5 197 happyReduction_476
happyReduction_476 (_ `HappyStk`
	(HappyAbsSyn202  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Close DMap.empty s happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_477 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_477 = happySpecReduce_3  198 happyReduction_477
happyReduction_477 (HappyAbsSyn203  happy_var_3)
	_
	(HappyAbsSyn202  happy_var_1)
	 =  HappyAbsSyn202
		 (happy_var_1++[happy_var_3]
	)
happyReduction_477 _ _ _  = notHappyAtAll 

happyReduce_478 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_478 = happySpecReduce_1  198 happyReduction_478
happyReduction_478 (HappyAbsSyn203  happy_var_1)
	 =  HappyAbsSyn202
		 ([happy_var_1]
	)
happyReduction_478 _  = notHappyAtAll 

happyReduce_479 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_479 = happySpecReduce_1  199 happyReduction_479
happyReduction_479 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn203
		 (NoSpec DMap.empty happy_var_1
	)
happyReduction_479 _  = notHappyAtAll 

happyReduce_480 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_480 = happySpecReduce_3  199 happyReduction_480
happyReduction_480 (HappyAbsSyn47  happy_var_3)
	_
	_
	 =  HappyAbsSyn203
		 (Unit DMap.empty happy_var_3
	)
happyReduction_480 _ _ _  = notHappyAtAll 

happyReduce_481 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_481 = happyMonadReduce 3 199 happyReduction_481
happyReduction_481 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_1)) `HappyStk`
	happyRest) tk
	 = happyThen ((( case (map (toLower) happy_var_1) of
      "iostat" -> return (IOStat DMap.empty happy_var_3)
      "status" -> return (Status DMap.empty happy_var_3)
      s        -> parseError ("incorrect name in spec list: " ++ s)))
	) (\r -> happyReturn (HappyAbsSyn203 r))

happyReduce_482 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_482 = happyMonadReduce 2 200 happyReduction_482
happyReduction_482 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (return . (Continue DMap.empty))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_483 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_483 = happyMonadReduce 3 201 happyReduction_483
happyReduction_483 ((HappyAbsSyn17  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Cycle DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_484 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_484 = happyMonadReduce 2 201 happyReduction_484
happyReduction_484 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Cycle DMap.empty s "")))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_485 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_485 = happyMonadReduce 9 202 happyReduction_485
happyReduction_485 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_8) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn12  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Deallocate DMap.empty s happy_var_4 happy_var_8)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_486 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_486 = happyMonadReduce 5 202 happyReduction_486
happyReduction_486 (_ `HappyStk`
	(HappyAbsSyn12  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Deallocate DMap.empty s happy_var_4 (NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_487 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_487 = happyMonadReduce 3 203 happyReduction_487
happyReduction_487 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Endfile DMap.empty s [NoSpec DMap.empty happy_var_3])))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_488 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_488 = happyMonadReduce 5 203 happyReduction_488
happyReduction_488 (_ `HappyStk`
	(HappyAbsSyn202  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Endfile DMap.empty s happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_489 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_489 = happyMonadReduce 3 204 happyReduction_489
happyReduction_489 ((HappyAbsSyn17  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Exit DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_490 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_490 = happyMonadReduce 2 204 happyReduction_490
happyReduction_490 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Exit DMap.empty s "")))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_491 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_491 = happyMonadReduce 4 205 happyReduction_491
happyReduction_491 ((HappyAbsSyn121  happy_var_4) `HappyStk`
	(HappyAbsSyn214  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Forall DMap.empty s happy_var_3 happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_492 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_492 = happyMonadReduce 6 205 happyReduction_492
happyReduction_492 (_ `HappyStk`
	(HappyAbsSyn121  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn214  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Forall DMap.empty s happy_var_3 happy_var_5)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_493 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_493 = happySpecReduce_2  206 happyReduction_493
happyReduction_493 _
	_
	 =  HappyAbsSyn13
		 (
	)

happyReduce_494 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_494 = happySpecReduce_0  206 happyReduction_494
happyReduction_494  =  HappyAbsSyn13
		 (
	)

happyReduce_495 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_495 = happyReduce 5 207 happyReduction_495
happyReduction_495 (_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn215  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn214
		 ((happy_var_2,happy_var_4)
	) `HappyStk` happyRest

happyReduce_496 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_496 = happyMonadReduce 3 207 happyReduction_496
happyReduction_496 (_ `HappyStk`
	(HappyAbsSyn215  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return (happy_var_2, NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn214 r))

happyReduce_497 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_497 = happySpecReduce_3  208 happyReduction_497
happyReduction_497 (HappyAbsSyn216  happy_var_3)
	_
	(HappyAbsSyn215  happy_var_1)
	 =  HappyAbsSyn215
		 (happy_var_1++[happy_var_3]
	)
happyReduction_497 _ _ _  = notHappyAtAll 

happyReduce_498 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_498 = happySpecReduce_1  208 happyReduction_498
happyReduction_498 (HappyAbsSyn216  happy_var_1)
	 =  HappyAbsSyn215
		 ([happy_var_1]
	)
happyReduction_498 _  = notHappyAtAll 

happyReduce_499 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_499 = happyReduce 7 209 happyReduction_499
happyReduction_499 ((HappyAbsSyn47  happy_var_7) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn216
		 ((happy_var_1,happy_var_3,happy_var_5,happy_var_7)
	) `HappyStk` happyRest

happyReduce_500 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_500 = happyMonadReduce 5 209 happyReduction_500
happyReduction_500 ((HappyAbsSyn47  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn17  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return (happy_var_1,happy_var_3,happy_var_5,NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn216 r))

happyReduce_501 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_501 = happySpecReduce_1  210 happyReduction_501
happyReduction_501 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_501 _  = notHappyAtAll 

happyReduce_502 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_502 = happySpecReduce_1  210 happyReduction_502
happyReduction_502 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_502 _  = notHappyAtAll 

happyReduce_503 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_503 = happySpecReduce_3  211 happyReduction_503
happyReduction_503 (HappyAbsSyn121  happy_var_3)
	_
	(HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (FSeq DMap.empty (spanTrans happy_var_1 happy_var_3) happy_var_1 happy_var_3
	)
happyReduction_503 _ _ _  = notHappyAtAll 

happyReduce_504 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_504 = happySpecReduce_2  211 happyReduction_504
happyReduction_504 _
	(HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_504 _ _  = notHappyAtAll 

happyReduce_505 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_505 = happyMonadReduce 3 212 happyReduction_505
happyReduction_505 ((HappyAbsSyn17  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Goto DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_506 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_506 = happyMonadReduce 6 213 happyReduction_506
happyReduction_506 ((HappyAbsSyn121  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ If DMap.empty s happy_var_4 happy_var_6 [] Nothing)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_507 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_507 = happyMonadReduce 5 214 happyReduction_507
happyReduction_507 (_ `HappyStk`
	(HappyAbsSyn202  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Inquire DMap.empty s happy_var_4 [])))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_508 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_508 = happyMonadReduce 8 214 happyReduction_508
happyReduction_508 ((HappyAbsSyn12  happy_var_8) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_6) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Inquire DMap.empty s [IOLength DMap.empty happy_var_6] happy_var_8)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_509 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_509 = happySpecReduce_3  215 happyReduction_509
happyReduction_509 (HappyAbsSyn203  happy_var_3)
	_
	(HappyAbsSyn202  happy_var_1)
	 =  HappyAbsSyn202
		 (happy_var_1++[happy_var_3]
	)
happyReduction_509 _ _ _  = notHappyAtAll 

happyReduce_510 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_510 = happySpecReduce_1  215 happyReduction_510
happyReduction_510 (HappyAbsSyn203  happy_var_1)
	 =  HappyAbsSyn202
		 ([happy_var_1]
	)
happyReduction_510 _  = notHappyAtAll 

happyReduce_511 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_511 = happySpecReduce_1  216 happyReduction_511
happyReduction_511 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn203
		 (NoSpec DMap.empty happy_var_1
	)
happyReduction_511 _  = notHappyAtAll 

happyReduce_512 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_512 = happySpecReduce_3  216 happyReduction_512
happyReduction_512 (HappyAbsSyn47  happy_var_3)
	_
	_
	 =  HappyAbsSyn203
		 (Unit DMap.empty happy_var_3
	)
happyReduction_512 _ _ _  = notHappyAtAll 

happyReduce_513 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_513 = happySpecReduce_3  216 happyReduction_513
happyReduction_513 (HappyAbsSyn47  happy_var_3)
	_
	_
	 =  HappyAbsSyn203
		 (Read DMap.empty happy_var_3
	)
happyReduction_513 _ _ _  = notHappyAtAll 

happyReduce_514 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_514 = happySpecReduce_3  216 happyReduction_514
happyReduction_514 (HappyAbsSyn47  happy_var_3)
	_
	_
	 =  HappyAbsSyn203
		 (WriteSp DMap.empty happy_var_3
	)
happyReduction_514 _ _ _  = notHappyAtAll 

happyReduce_515 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_515 = happyMonadReduce 3 216 happyReduction_515
happyReduction_515 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_1)) `HappyStk`
	happyRest) tk
	 = happyThen ((( case (map (toLower) happy_var_1) of
                                            "file"        -> return (File DMap.empty    happy_var_3)
                                            "iostat"      -> return (IOStat DMap.empty     happy_var_3)
                                            "exist"       -> return (Exist DMap.empty      happy_var_3)
                                            "opened"      -> return (Opened DMap.empty     happy_var_3)
                                            "number"      -> return (Number DMap.empty     happy_var_3)
                                            "named"       -> return (Named DMap.empty      happy_var_3)
                                            "name"        -> return (Name DMap.empty       happy_var_3)
                                            "access"      -> return (Access DMap.empty     happy_var_3)
                                            "sequential"  -> return (Sequential DMap.empty happy_var_3)
                                            "direct"      -> return (Direct DMap.empty     happy_var_3)
                                            "form"        -> return (Form DMap.empty       happy_var_3)
                                            "formatted"   -> return (Formatted DMap.empty  happy_var_3)
                                            "unformatted" -> return (Unformatted DMap.empty happy_var_3)
                                            "recl"        -> return (Recl    DMap.empty   happy_var_3)
                                            "nextrec"     -> return (NextRec DMap.empty   happy_var_3)
                                            "blank"       -> return (Blank   DMap.empty   happy_var_3)
                                            "position"    -> return (Position DMap.empty  happy_var_3)
                                            "action"      -> return (Action   DMap.empty  happy_var_3)
                                            "readwrite"   -> return (ReadWrite DMap.empty happy_var_3)
                                            "delim"       -> return (Delim    DMap.empty  happy_var_3)
                                            "pad"         -> return (Pad     DMap.empty   happy_var_3)
                                            s             -> parseError ("incorrect name in spec list: " ++ s)))
	) (\r -> happyReturn (HappyAbsSyn203 r))

happyReduce_516 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_516 = happyMonadReduce 5 217 happyReduction_516
happyReduction_516 (_ `HappyStk`
	(HappyAbsSyn12  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Nullify DMap.empty s happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_517 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_517 = happySpecReduce_3  218 happyReduction_517
happyReduction_517 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1++[happy_var_3]
	)
happyReduction_517 _ _ _  = notHappyAtAll 

happyReduce_518 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_518 = happySpecReduce_1  218 happyReduction_518
happyReduction_518 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_518 _  = notHappyAtAll 

happyReduce_519 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_519 = happySpecReduce_1  219 happyReduction_519
happyReduction_519 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_519 _  = notHappyAtAll 

happyReduce_520 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_520 = happySpecReduce_1  220 happyReduction_520
happyReduction_520 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_520 _  = notHappyAtAll 

happyReduce_521 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_521 = happyMonadReduce 5 221 happyReduction_521
happyReduction_521 (_ `HappyStk`
	(HappyAbsSyn202  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Open DMap.empty s happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_522 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_522 = happySpecReduce_3  222 happyReduction_522
happyReduction_522 (HappyAbsSyn203  happy_var_3)
	_
	(HappyAbsSyn202  happy_var_1)
	 =  HappyAbsSyn202
		 (happy_var_1++[happy_var_3]
	)
happyReduction_522 _ _ _  = notHappyAtAll 

happyReduce_523 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_523 = happySpecReduce_1  222 happyReduction_523
happyReduction_523 (HappyAbsSyn203  happy_var_1)
	 =  HappyAbsSyn202
		 ([happy_var_1]
	)
happyReduction_523 _  = notHappyAtAll 

happyReduce_524 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_524 = happySpecReduce_1  223 happyReduction_524
happyReduction_524 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn203
		 (NoSpec DMap.empty happy_var_1
	)
happyReduction_524 _  = notHappyAtAll 

happyReduce_525 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_525 = happySpecReduce_3  223 happyReduction_525
happyReduction_525 (HappyAbsSyn47  happy_var_3)
	_
	_
	 =  HappyAbsSyn203
		 (Unit DMap.empty happy_var_3
	)
happyReduction_525 _ _ _  = notHappyAtAll 

happyReduce_526 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_526 = happyMonadReduce 3 223 happyReduction_526
happyReduction_526 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (ID happy_var_1)) `HappyStk`
	happyRest) tk
	 = happyThen ((( case (map (toLower) happy_var_1) of
                                          "iostat"   -> return (IOStat DMap.empty happy_var_3)
                                          "file"     -> return (File DMap.empty happy_var_3)
                                          "status"   -> return (Status DMap.empty happy_var_3)
                                          "access"   -> return (Access DMap.empty happy_var_3)
                                          "form"     -> return (Form DMap.empty happy_var_3)
                                          "recl"     -> return (Recl DMap.empty happy_var_3)
                                          "blank"    -> return (Blank DMap.empty happy_var_3)
                                          "position" -> return (Position DMap.empty happy_var_3)
                                          "action"   -> return (Action DMap.empty happy_var_3)
                                          "delim"    -> return (Delim DMap.empty happy_var_3)
                                          "pad"      -> return (Pad DMap.empty happy_var_3)
                                          s          -> parseError ("incorrect name in spec list: " ++ s)))
	) (\r -> happyReturn (HappyAbsSyn203 r))

happyReduce_527 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_527 = happySpecReduce_1  224 happyReduction_527
happyReduction_527 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_527 _  = notHappyAtAll 

happyReduce_528 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_528 = happySpecReduce_1  225 happyReduction_528
happyReduction_528 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_528 _  = notHappyAtAll 

happyReduce_529 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_529 = happySpecReduce_1  226 happyReduction_529
happyReduction_529 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_529 _  = notHappyAtAll 

happyReduce_530 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_530 = happyMonadReduce 4 227 happyReduction_530
happyReduction_530 ((HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_2) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ PointerAssg DMap.empty s happy_var_2 happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_531 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_531 = happySpecReduce_1  228 happyReduction_531
happyReduction_531 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_531 _  = notHappyAtAll 

happyReduce_532 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_532 = happyMonadReduce 5 229 happyReduction_532
happyReduction_532 ((HappyAbsSyn12  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $  Print DMap.empty s happy_var_3 happy_var_5)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_533 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_533 = happyMonadReduce 3 229 happyReduction_533
happyReduction_533 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Print DMap.empty s happy_var_3 [])))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_534 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_534 = happySpecReduce_1  230 happyReduction_534
happyReduction_534 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_534 _  = notHappyAtAll 

happyReduce_535 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_535 = happyMonadReduce 1 230 happyReduction_535
happyReduction_535 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ Var DMap.empty s [(VarName DMap.empty "*",[])])))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_536 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_536 = happySpecReduce_3  231 happyReduction_536
happyReduction_536 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1++[happy_var_3]
	)
happyReduction_536 _ _ _  = notHappyAtAll 

happyReduce_537 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_537 = happySpecReduce_1  231 happyReduction_537
happyReduction_537 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_537 _  = notHappyAtAll 

happyReduce_538 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_538 = happySpecReduce_1  232 happyReduction_538
happyReduction_538 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_538 _  = notHappyAtAll 

happyReduce_539 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_539 = happySpecReduce_3  232 happyReduction_539
happyReduction_539 _
	(HappyAbsSyn47  happy_var_2)
	_
	 =  HappyAbsSyn47
		 (happy_var_2
	)
happyReduction_539 _ _ _  = notHappyAtAll 

happyReduce_540 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_540 = happyMonadReduce 6 233 happyReduction_540
happyReduction_540 ((HappyAbsSyn12  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn202  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ ReadS DMap.empty s happy_var_4 happy_var_6)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_541 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_541 = happyMonadReduce 5 233 happyReduction_541
happyReduction_541 ((HappyAbsSyn12  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn202  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ ReadS DMap.empty s happy_var_3 happy_var_5)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_542 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_542 = happyMonadReduce 5 233 happyReduction_542
happyReduction_542 (_ `HappyStk`
	(HappyAbsSyn202  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ ReadS DMap.empty s happy_var_4 [])))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_543 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_543 = happySpecReduce_3  234 happyReduction_543
happyReduction_543 (HappyAbsSyn202  happy_var_3)
	_
	_
	 =  HappyAbsSyn202
		 ((Delimiter DMap.empty):happy_var_3
	)
happyReduction_543 _ _ _  = notHappyAtAll 

happyReduce_544 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_544 = happySpecReduce_2  234 happyReduction_544
happyReduction_544 (HappyAbsSyn202  happy_var_2)
	_
	 =  HappyAbsSyn202
		 (happy_var_2
	)
happyReduction_544 _ _  = notHappyAtAll 

happyReduce_545 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_545 = happySpecReduce_3  235 happyReduction_545
happyReduction_545 (HappyAbsSyn202  happy_var_3)
	_
	(HappyAbsSyn202  happy_var_1)
	 =  HappyAbsSyn202
		 (happy_var_1 ++ happy_var_3
	)
happyReduction_545 _ _ _  = notHappyAtAll 

happyReduce_546 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_546 = happySpecReduce_1  235 happyReduction_546
happyReduction_546 _
	 =  HappyAbsSyn202
		 ([Delimiter DMap.empty]
	)

happyReduce_547 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_547 = happySpecReduce_2  235 happyReduction_547
happyReduction_547 _
	(HappyAbsSyn202  happy_var_1)
	 =  HappyAbsSyn202
		 (happy_var_1
	)
happyReduction_547 _ _  = notHappyAtAll 

happyReduce_548 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_548 = happySpecReduce_2  235 happyReduction_548
happyReduction_548 _
	(HappyAbsSyn202  happy_var_1)
	 =  HappyAbsSyn202
		 (happy_var_1 ++ [Delimiter DMap.empty]
	)
happyReduction_548 _ _  = notHappyAtAll 

happyReduce_549 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_549 = happySpecReduce_3  236 happyReduction_549
happyReduction_549 (HappyAbsSyn202  happy_var_3)
	_
	(HappyAbsSyn202  happy_var_1)
	 =  HappyAbsSyn202
		 (happy_var_1 ++ happy_var_3
	)
happyReduction_549 _ _ _  = notHappyAtAll 

happyReduce_550 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_550 = happySpecReduce_1  236 happyReduction_550
happyReduction_550 (HappyAbsSyn202  happy_var_1)
	 =  HappyAbsSyn202
		 (happy_var_1
	)
happyReduction_550 _  = notHappyAtAll 

happyReduce_551 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_551 = happySpecReduce_1  237 happyReduction_551
happyReduction_551 _
	 =  HappyAbsSyn202
		 ([Delimiter DMap.empty]
	)

happyReduce_552 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_552 = happyMonadReduce 1 237 happyReduction_552
happyReduction_552 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ [NoSpec DMap.empty (Var DMap.empty s [(VarName DMap.empty "*", [])])])))
	) (\r -> happyReturn (HappyAbsSyn202 r))

happyReduce_553 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_553 = happySpecReduce_1  237 happyReduction_553
happyReduction_553 (HappyTerminal (StrConst happy_var_1))
	 =  HappyAbsSyn202
		 ([StringLit DMap.empty happy_var_1]
	)
happyReduction_553 _  = notHappyAtAll 

happyReduce_554 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_554 = happySpecReduce_2  237 happyReduction_554
happyReduction_554 _
	(HappyTerminal (StrConst happy_var_1))
	 =  HappyAbsSyn202
		 ([StringLit DMap.empty happy_var_1, Delimiter DMap.empty]
	)
happyReduction_554 _ _  = notHappyAtAll 

happyReduce_555 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_555 = happySpecReduce_3  237 happyReduction_555
happyReduction_555 (HappyAbsSyn47  happy_var_3)
	_
	_
	 =  HappyAbsSyn202
		 ([End DMap.empty happy_var_3]
	)
happyReduction_555 _ _ _  = notHappyAtAll 

happyReduce_556 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_556 = happySpecReduce_1  237 happyReduction_556
happyReduction_556 (HappyAbsSyn203  happy_var_1)
	 =  HappyAbsSyn202
		 ([happy_var_1]
	)
happyReduction_556 _  = notHappyAtAll 

happyReduce_557 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_557 = happyMonadReduce 1 237 happyReduction_557
happyReduction_557 ((HappyAbsSyn17  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ [Number DMap.empty (Con DMap.empty s happy_var_1)])))
	) (\r -> happyReturn (HappyAbsSyn202 r))

happyReduce_558 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_558 = happySpecReduce_1  237 happyReduction_558
happyReduction_558 (HappyAbsSyn203  happy_var_1)
	 =  HappyAbsSyn202
		 ([happy_var_1]
	)
happyReduction_558 _  = notHappyAtAll 

happyReduce_559 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_559 = happyMonadReduce 1 238 happyReduction_559
happyReduction_559 ((HappyTerminal (DataEditDest happy_var_1)) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ Floating DMap.empty (NullExpr DMap.empty s) (Con DMap.empty s happy_var_1) )))
	) (\r -> happyReturn (HappyAbsSyn203 r))

happyReduce_560 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_560 = happyMonadReduce 2 238 happyReduction_560
happyReduction_560 ((HappyTerminal (DataEditDest happy_var_2)) `HappyStk`
	(HappyAbsSyn17  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ Floating DMap.empty (Con DMap.empty s happy_var_1) (Con DMap.empty s happy_var_2))))
	) (\r -> happyReturn (HappyAbsSyn203 r))

happyReduce_561 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_561 = happySpecReduce_1  239 happyReduction_561
happyReduction_561 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn203
		 (NoSpec DMap.empty happy_var_1
	)
happyReduction_561 _  = notHappyAtAll 

happyReduce_562 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_562 = happySpecReduce_3  240 happyReduction_562
happyReduction_562 (HappyAbsSyn47  happy_var_3)
	_
	(HappyAbsSyn12  happy_var_1)
	 =  HappyAbsSyn12
		 (happy_var_1++[happy_var_3]
	)
happyReduction_562 _ _ _  = notHappyAtAll 

happyReduce_563 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_563 = happySpecReduce_1  240 happyReduction_563
happyReduction_563 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn12
		 ([happy_var_1]
	)
happyReduction_563 _  = notHappyAtAll 

happyReduce_564 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_564 = happySpecReduce_1  241 happyReduction_564
happyReduction_564 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_564 _  = notHappyAtAll 

happyReduce_565 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_565 = happyMonadReduce 2 242 happyReduction_565
happyReduction_565 ((HappyTerminal (Num happy_var_2)) `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( (getSrcSpan happy_var_1) >>= (\s -> return $ Con DMap.empty s happy_var_2)))
	) (\r -> happyReturn (HappyAbsSyn47 r))

happyReduce_566 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_566 = happySpecReduce_1  243 happyReduction_566
happyReduction_566 (HappyTerminal (Num happy_var_1))
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_566 _  = notHappyAtAll 

happyReduce_567 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_567 = happySpecReduce_1  243 happyReduction_567
happyReduction_567 _
	 =  HappyAbsSyn17
		 ("1"
	)

happyReduce_568 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_568 = happySpecReduce_1  244 happyReduction_568
happyReduction_568 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_568 _  = notHappyAtAll 

happyReduce_569 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_569 = happyMonadReduce 2 245 happyReduction_569
happyReduction_569 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Return DMap.empty s (NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_570 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_570 = happyMonadReduce 3 245 happyReduction_570
happyReduction_570 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Return DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_571 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_571 = happySpecReduce_1  246 happyReduction_571
happyReduction_571 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_571 _  = notHappyAtAll 

happyReduce_572 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_572 = happySpecReduce_1  247 happyReduction_572
happyReduction_572 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_572 _  = notHappyAtAll 

happyReduce_573 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_573 = happyMonadReduce 3 248 happyReduction_573
happyReduction_573 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Rewind DMap.empty s [NoSpec DMap.empty happy_var_3])))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_574 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_574 = happyMonadReduce 5 248 happyReduction_574
happyReduction_574 (_ `HappyStk`
	(HappyAbsSyn202  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Rewind DMap.empty s happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_575 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_575 = happyMonadReduce 3 249 happyReduction_575
happyReduction_575 ((HappyAbsSyn47  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Stop DMap.empty s happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_576 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_576 = happyMonadReduce 2 249 happyReduction_576
happyReduction_576 (_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Stop DMap.empty s (NullExpr DMap.empty s))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_577 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_577 = happySpecReduce_1  250 happyReduction_577
happyReduction_577 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_577 _  = notHappyAtAll 

happyReduce_578 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_578 = happyMonadReduce 6 251 happyReduction_578
happyReduction_578 ((HappyAbsSyn121  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Where DMap.empty s happy_var_4 happy_var_6 Nothing)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_579 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_579 = happyMonadReduce 7 251 happyReduction_579
happyReduction_579 ((HappyAbsSyn121  happy_var_7) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Where DMap.empty s happy_var_4 happy_var_7 Nothing)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_580 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_580 = happyMonadReduce 14 251 happyReduction_580
happyReduction_580 (_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn121  happy_var_11) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn121  happy_var_7) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn47  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn262  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpan happy_var_1 >>= (\s -> return $ Where DMap.empty s happy_var_4 happy_var_7 (Just happy_var_11))))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_581 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_581 = happySpecReduce_1  252 happyReduction_581
happyReduction_581 (HappyAbsSyn121  happy_var_1)
	 =  HappyAbsSyn121
		 (happy_var_1
	)
happyReduction_581 _  = notHappyAtAll 

happyReduce_582 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_582 = happySpecReduce_1  253 happyReduction_582
happyReduction_582 (HappyAbsSyn47  happy_var_1)
	 =  HappyAbsSyn47
		 (happy_var_1
	)
happyReduction_582 _  = notHappyAtAll 

happyReduce_583 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_583 = happyMonadReduce 5 254 happyReduction_583
happyReduction_583 ((HappyAbsSyn12  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn202  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ Write DMap.empty s happy_var_3 happy_var_5)))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_584 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_584 = happyMonadReduce 4 254 happyReduction_584
happyReduction_584 (_ `HappyStk`
	(HappyAbsSyn202  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( getSrcSpanNull >>= (\s -> return $ Write DMap.empty s happy_var_3 [])))
	) (\r -> happyReturn (HappyAbsSyn121 r))

happyReduce_585 :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )
happyReduce_585 = happyMonadReduce 0 255 happyReduction_585
happyReduction_585 (happyRest) tk
	 = happyThen ((( getSrcLoc'))
	) (\r -> happyReturn (HappyAbsSyn262 r))

happyNewToken action sts stk
	= lexer(\tk -> 
	let cont i = happyDoAction i tk action sts stk in
	case tk of {
	TokEOF -> happyDoAction 134 tk action sts stk;
	Arrow -> cont 1;
	OpPower -> cont 2;
	OpConcat -> cont 3;
	OpEQ -> cont 4;
	OpNE -> cont 5;
	OpLE -> cont 6;
	OpGE -> cont 7;
	OpNOT -> cont 8;
	OpAND -> cont 9;
	OpOR -> cont 10;
	TrueConst -> cont 11;
	FalseConst -> cont 12;
	OpLT -> cont 13;
	OpGT -> cont 14;
	OpMul -> cont 15;
	OpDiv -> cont 16;
	OpAdd -> cont 17;
	OpSub -> cont 18;
	Comma -> cont 19;
	LParen -> cont 20;
	RParen -> cont 21;
	OpEquals -> cont 22;
	Period -> cont 23;
	ColonColon -> cont 24;
	Colon -> cont 25;
	SemiColon -> cont 26;
	Hash -> cont 27;
	LBrace -> cont 28;
	RBrace -> cont 29;
	LArrCon -> cont 30;
	RArrCon -> cont 31;
	DataEditDest happy_dollar_dollar -> cont 32;
	Percent -> cont 33;
	Dollar -> cont 34;
	NewLine -> cont 35;
	Key "allocate" -> cont 36;
	Key "allocatable" -> cont 37;
	Key "Assign" -> cont 38;
	Key "assignment" -> cont 39;
	Key "backspace" -> cont 40;
	Key "block" -> cont 41;
	Key "call" -> cont 42;
	Key "case" -> cont 43;
	Key "character" -> cont 44;
	Key "close" -> cont 45;
	Key "common" -> cont 46;
	Key "complex" -> cont 47;
	Key "contains" -> cont 48;
	Key "continue" -> cont 49;
	Key "cycle" -> cont 50;
	Key "data" -> cont 51;
	Key "deallocate" -> cont 52;
	Key "default" -> cont 53;
	Key "dimension" -> cont 54;
	Key "do" -> cont 55;
	Key "elemental" -> cont 56;
	Key "else" -> cont 57;
	Key "elseif" -> cont 58;
	Key "elsewhere" -> cont 59;
	Key "end" -> cont 60;
	Key "endif" -> cont 61;
	Key "enddo" -> cont 62;
	Key "endfile" -> cont 63;
	Key "equivalence" -> cont 64;
	Key "exit" -> cont 65;
	Key "external" -> cont 66;
	Key "forall" -> cont 67;
	Key "foreach" -> cont 68;
	Key "format" -> cont 69;
	Key "function" -> cont 70;
	Key "goto" -> cont 71;
	Key "iolength" -> cont 72;
	Key "if" -> cont 73;
	Key "implicit" -> cont 74;
	Key "in" -> cont 75;
	Key "include" -> cont 76;
	Key "inout" -> cont 77;
	Key "integer" -> cont 78;
	Key "intent" -> cont 79;
	Key "interface" -> cont 80;
	Key "intrinsic" -> cont 81;
	Key "inquire" -> cont 82;
	Key "kind" -> cont 83;
	Key "len" -> cont 84;
	Key "logical" -> cont 85;
	Key "module" -> cont 86;
	Key "namelist" -> cont 87;
	Key "none" -> cont 88;
	Key "nullify" -> cont 89;
	Key "null" -> cont 90;
	Key "open" -> cont 91;
	Key "operator" -> cont 92;
	Key "optional" -> cont 93;
	Key "out" -> cont 94;
	Key "parameter" -> cont 95;
	Key "pause" -> cont 96;
	Key "pointer" -> cont 97;
	Key "print" -> cont 98;
	Key "private" -> cont 99;
	Key "procedure" -> cont 100;
	Key "program" -> cont 101;
	Key "pure" -> cont 102;
	Key "public" -> cont 103;
	Key "real" -> cont 104;
	Key "read" -> cont 105;
	Key "recursive" -> cont 106;
	Key "result" -> cont 107;
	Key "return" -> cont 108;
	Key "rewind" -> cont 109;
	Key "save" -> cont 110;
	Key "select" -> cont 111;
	Key "sequence" -> cont 112;
	Key "sometype" -> cont 113;
	Key "sqrt" -> cont 114;
	Key "stat" -> cont 115;
	Key "stop" -> cont 116;
	StrConst happy_dollar_dollar -> cont 117;
	LitConst 'z' happy_dollar_dollar -> cont 118;
	Key "subroutine" -> cont 119;
	Key "target" -> cont 120;
	Key "then" -> cont 121;
	Key "type" -> cont 122;
	Key "unit" -> cont 123;
	Num "1" -> cont 124;
	Key "use" -> cont 125;
	Key "volatile" -> cont 126;
	Key "while" -> cont 127;
	Key "where" -> cont 128;
	Key "write" -> cont 129;
	ID happy_dollar_dollar -> cont 130;
	Num happy_dollar_dollar -> cont 131;
	Num happy_dollar_dollar -> cont 132;
	Text happy_dollar_dollar -> cont 133;
	_ -> happyError' (tk, [])
	})

happyError_ explist 134 tk = happyError' (tk, explist)
happyError_ explist _ tk = happyError' (tk, explist)

happyThen :: () => P a -> (a -> P b) -> P b
happyThen = (>>=)
happyReturn :: () => a -> P a
happyReturn = (return)
happyParse :: () => Int -> P (HappyAbsSyn )

happyNewToken :: () => Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )

happyDoAction :: () => Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )

happyReduceArr :: () => Happy_Data_Array.Array Int (Int -> Token -> Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn ))

happyThen1 :: () => P a -> (a -> P b) -> P b
happyThen1 = happyThen
happyReturn1 :: () => a -> P a
happyReturn1 = happyReturn
happyError' :: () => ((Token), [String]) -> P a
happyError' tk = (\(tokens, explist) -> happyError) tk
parser = happySomeParser where
 happySomeParser = happyThen (happyParse 0) (\x -> case x of {HappyAbsSyn7 z -> happyReturn z; _other -> notHappyAtAll })

include_parser = happySomeParser where
 happySomeParser = happyThen (happyParse 1) (\x -> case x of {HappyAbsSyn7 z -> happyReturn z; _other -> notHappyAtAll })

statement_parser = happySomeParser where
 happySomeParser = happyThen (happyParse 2) (\x -> case x of {HappyAbsSyn121 z -> happyReturn z; _other -> notHappyAtAll })

context_parser = happySomeParser where
 happySomeParser = happyThen (happyParse 3) (\x -> case x of {HappyAbsSyn36 z -> happyReturn z; _other -> notHappyAtAll })

happySeq = happyDontSeq


getSrcLoc' = do (LH.SrcLoc f l c) <- getSrcLoc
                return (SrcLoc f l (c - 1))

-- Initial annotations from parser

-- Type of annotations

type A0 = DMap.Map String [String]

getSrcSpan :: SrcLoc -> P (SrcLoc, SrcLoc)
getSrcSpan l = do l' <- getSrcLoc'
                  return $ (l, l')

-- 0-length span at current position

getSrcSpanNull :: P (SrcLoc, SrcLoc)
getSrcSpanNull = do l <- getSrcLoc'
                    return $ (l, l)

spanTrans x y = let (l, _) = srcSpan x
                    (_, l') = srcSpan y
                in (l, l')

spanTrans' x (_, l') = let (l, _) = srcSpan x
                       in (l, l')

spanExtendR t x = let (l, l') = srcSpan t
                  in (l, SrcLoc (srcFilename l') (srcLine l') (srcColumn l' + x))

spanExtR (l, l') x = (l, SrcLoc (srcFilename l') (srcLine l') (srcColumn l' + x))

spanExtendL t x = let (l, l') = srcSpan t
                  in (SrcLoc (srcFilename l) (srcLine l) (srcColumn l - x), l')

happyError :: P a
happyError = parseError "syntax error (from parser)"

parseError :: String -> P a
parseError m = do srcloc <- getSrcLoc'
                  fail (srcFilename srcloc ++ ": line " ++ show (srcLine srcloc) ++ " column " ++ show (srcColumn srcloc) ++ ": " ++ m ++ "\n")

tokenFollows s = case alexScan ('\0',[],s) 0 of
                    AlexEOF                 -> "end of file"
                    AlexError  _            -> ""
                    AlexSkip  (_,b,t) len   -> tokenFollows t
                    AlexToken (_,b,t) len _ -> take len s

parse :: String -> Program A0
parse p = case (runParser parser (pre_process p)) of 
            (ParseOk p)       -> p
            (ParseFailed l e) ->  error e
            
--	<GAV ADDED to work with F95StatementParser>
statement_parse :: String -> Fortran A0
statement_parse p = case (runParser statement_parser (pre_process p)) of 
            (ParseOk p)       -> p
            (ParseFailed l e) ->  error e 

context_parse :: String -> Decl A0
context_parse p = case (runParser context_parser (pre_process p)) of 
            (ParseOk p)       -> p
            (ParseFailed l e) ->  error e 
-- 	</GAV ADDED to work with F95StatementParser>

--parse :: String -> [Program]
--parse = clean . parser . fixdecls . scan

parseF :: String -> IO ()
parseF f = do s <- readFile f
              print (parse s)

--scanF :: String -> IO ()
--scanF f = do s <- readFile f
--             print (scan s)

fst3 (a,b,c) = a
snd3 (a,b,c) = b
trd3 (a,b,c) = c

fst4 (a,b,c,d) = a
snd4 (a,b,c,d) = b
trd4 (a,b,c,d) = c
frh4 (a,b,c,d) = d

cmpNames :: SubName A0 -> String -> String -> P (SubName A0)
cmpNames x "" z                        = return x
cmpNames (SubName a x) y z | (toLower_str x)==(toLower_str y) = return (SubName a x)
                           | otherwise = parseError (z ++ " name \""++x++"\" does not match \""++y++"\" in end " ++ z ++ " statement\n")
cmpNames s y z                       = parseError (z ++" names do not match\n")

toLower_str :: String -> String
toLower_str x = map (toLower) x

expr2array_spec (Bound _ _ e e') = (e, e') -- possibly a bit dodgy- uses undefined
expr2array_spec e = (NullExpr DMap.empty (srcSpan e) , e)
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "<command-line>" #-}
{-# LINE 9 "<command-line>" #-}
# 1 "/usr/include/stdc-predef.h" 1 3 4

# 17 "/usr/include/stdc-predef.h" 3 4














































{-# LINE 9 "<command-line>" #-}
{-# LINE 1 "/home/james/.stack/programs/x86_64-linux/ghc-8.2.1/lib/ghc-8.2.1/include/ghcversion.h" #-}















{-# LINE 9 "<command-line>" #-}
{-# LINE 1 "/tmp/ghc21422_0/ghc_2.h" #-}


































































































































































{-# LINE 9 "<command-line>" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp 









{-# LINE 43 "templates/GenericTemplate.hs" #-}

data Happy_IntList = HappyCons Int Happy_IntList







{-# LINE 65 "templates/GenericTemplate.hs" #-}

{-# LINE 75 "templates/GenericTemplate.hs" #-}



happyTrace string expr = Happy_System_IO_Unsafe.unsafePerformIO $ do
    Happy_System_IO.hPutStr Happy_System_IO.stderr string
    return expr




infixr 9 `HappyStk`
data HappyStk a = HappyStk a (HappyStk a)

-----------------------------------------------------------------------------
-- starting the parse

happyParse start_state = happyNewToken start_state notHappyAtAll notHappyAtAll

-----------------------------------------------------------------------------
-- Accepting the parse

-- If the current token is (0), it means we've just accepted a partial
-- parse (a %partial parser).  We must ignore the saved token on the top of
-- the stack in this case.
happyAccept (0) tk st sts (_ `HappyStk` ans `HappyStk` _) =
        happyReturn1 ans
happyAccept j tk st sts (HappyStk ans _) = 
         (happyReturn1 ans)

-----------------------------------------------------------------------------
-- Arrays only: do the next action



happyDoAction i tk st
        = (happyTrace ("state: " ++ show (st) ++                        ",\ttoken: " ++ show (i) ++                       ",\taction: ")) $


          case action of
                (0)           -> (happyTrace ("fail.\n")) $
                                     happyFail (happyExpListPerState ((st) :: Int)) i tk st
                (-1)          -> (happyTrace ("accept.\n")) $
                                     happyAccept i tk st
                n | (n < ((0) :: Int)) -> (happyTrace ("reduce (rule " ++ show rule                                                                ++ ")")) $

                                                   (happyReduceArr Happy_Data_Array.! rule) i tk st
                                                   where rule = ((negate ((n + ((1) :: Int)))))
                n                 -> (happyTrace ("shift, enter state "                                                  ++ show (new_state)                                                  ++ "\n")) $


                                     happyShift new_state i tk st
                                     where new_state = (n - ((1) :: Int))
   where off    = happyAdjustOffset (indexShortOffAddr happyActOffsets st)
         off_i  = (off +  i)
         check  = if (off_i >= ((0) :: Int))
                  then (indexShortOffAddr happyCheck off_i ==  i)
                  else False
         action
          | check     = indexShortOffAddr happyTable off_i
          | otherwise = indexShortOffAddr happyDefActions st



{-# LINE 147 "templates/GenericTemplate.hs" #-}
indexShortOffAddr arr off = arr Happy_Data_Array.! off


{-# INLINE happyLt #-}
happyLt x y = (x < y)






readArrayBit arr bit =
    Bits.testBit (indexShortOffAddr arr (bit `div` 16)) (bit `mod` 16)






-----------------------------------------------------------------------------
-- HappyState data type (not arrays)

{-# LINE 180 "templates/GenericTemplate.hs" #-}

-----------------------------------------------------------------------------
-- Shifting a token

happyShift new_state (0) tk st sts stk@(x `HappyStk` _) =
     let i = (case x of { HappyErrorToken (i) -> i }) in
--     trace "shifting the error token" $
     happyDoAction i tk new_state (HappyCons (st) (sts)) (stk)

happyShift new_state i tk st sts stk =
     happyNewToken new_state (HappyCons (st) (sts)) ((HappyTerminal (tk))`HappyStk`stk)

-- happyReduce is specialised for the common cases.

happySpecReduce_0 i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happySpecReduce_0 nt fn j tk st@((action)) sts stk
     = happyGoto nt j tk st (HappyCons (st) (sts)) (fn `HappyStk` stk)

happySpecReduce_1 i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happySpecReduce_1 nt fn j tk _ sts@((HappyCons (st@(action)) (_))) (v1`HappyStk`stk')
     = let r = fn v1 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_2 i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happySpecReduce_2 nt fn j tk _ (HappyCons (_) (sts@((HappyCons (st@(action)) (_))))) (v1`HappyStk`v2`HappyStk`stk')
     = let r = fn v1 v2 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_3 i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happySpecReduce_3 nt fn j tk _ (HappyCons (_) ((HappyCons (_) (sts@((HappyCons (st@(action)) (_))))))) (v1`HappyStk`v2`HappyStk`v3`HappyStk`stk')
     = let r = fn v1 v2 v3 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happyReduce k i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happyReduce k nt fn j tk st sts stk
     = case happyDrop (k - ((1) :: Int)) sts of
         sts1@((HappyCons (st1@(action)) (_))) ->
                let r = fn stk in  -- it doesn't hurt to always seq here...
                happyDoSeq r (happyGoto nt j tk st1 sts1 r)

happyMonadReduce k nt fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happyMonadReduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
          let drop_stk = happyDropStk k stk in
          happyThen1 (fn stk tk) (\r -> happyGoto nt j tk st1 sts1 (r `HappyStk` drop_stk))

happyMonad2Reduce k nt fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happyMonad2Reduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
         let drop_stk = happyDropStk k stk

             off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st1)
             off_i = (off +  nt)
             new_state = indexShortOffAddr happyTable off_i




          in
          happyThen1 (fn stk tk) (\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))

happyDrop (0) l = l
happyDrop n (HappyCons (_) (t)) = happyDrop (n - ((1) :: Int)) t

happyDropStk (0) l = l
happyDropStk n (x `HappyStk` xs) = happyDropStk (n - ((1)::Int)) xs

-----------------------------------------------------------------------------
-- Moving to a new state after a reduction


happyGoto nt j tk st = 
   (happyTrace (", goto state " ++ show (new_state) ++ "\n")) $
   happyDoAction j tk new_state
   where off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st)
         off_i = (off +  nt)
         new_state = indexShortOffAddr happyTable off_i




-----------------------------------------------------------------------------
-- Error recovery ((0) is the error token)

-- parse error if we are in recovery and we fail again
happyFail explist (0) tk old_st _ stk@(x `HappyStk` _) =
     let i = (case x of { HappyErrorToken (i) -> i }) in
--      trace "failing" $ 
        happyError_ explist i tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
happyFail  (0) tk old_st (HappyCons ((action)) (sts)) 
                                                (saved_tok `HappyStk` _ `HappyStk` stk) =
--      trace ("discarding state, depth " ++ show (length stk))  $
        happyDoAction (0) tk action sts ((saved_tok`HappyStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
happyFail explist i tk (action) sts stk =
--      trace "entering error recovery" $
        happyDoAction (0) tk action sts ( (HappyErrorToken (i)) `HappyStk` stk)

-- Internal happy errors:

notHappyAtAll :: a
notHappyAtAll = error "Internal Happy error\n"

-----------------------------------------------------------------------------
-- Hack to get the typechecker to accept our action functions







-----------------------------------------------------------------------------
-- Seq-ing.  If the --strict flag is given, then Happy emits 
--      happySeq = happyDoSeq
-- otherwise it emits
--      happySeq = happyDontSeq

happyDoSeq, happyDontSeq :: a -> b -> b
happyDoSeq   a b = a `seq` b
happyDontSeq a b = b

-----------------------------------------------------------------------------
-- Don't inline any functions from the template.  GHC has a nasty habit
-- of deciding to inline happyGoto everywhere, which increases the size of
-- the generated parser quite a bit.


{-# NOINLINE happyDoAction #-}
{-# NOINLINE happyTable #-}
{-# NOINLINE happyCheck #-}
{-# NOINLINE happyActOffsets #-}
{-# NOINLINE happyGotoOffsets #-}
{-# NOINLINE happyDefActions #-}

{-# NOINLINE happyShift #-}
{-# NOINLINE happySpecReduce_0 #-}
{-# NOINLINE happySpecReduce_1 #-}
{-# NOINLINE happySpecReduce_2 #-}
{-# NOINLINE happySpecReduce_3 #-}
{-# NOINLINE happyReduce #-}
{-# NOINLINE happyMonadReduce #-}
{-# NOINLINE happyGoto #-}
{-# NOINLINE happyFail #-}

-- end of Happy Template.
